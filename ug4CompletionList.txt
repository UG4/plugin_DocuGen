UG4COMPLETER VERSION 1
class
AMGBaseCPU1
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 ILinearIteratorCPU1 IPreconditionerCPU1 
Classgroup <b>AMGBase</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b><br>class has no constructor.  Tag <b>alg=CPU1;</b><br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="IPreconditionerCPU1.html">IPreconditionerCPU1</a> <a href="AMGBaseCPU1.html">AMGBaseCPU1</a> <br><table><tr><td colspan=2><h3>AMGBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check (const <a href="VectorCPU1.html">Vector</a> *x, const <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: performs a check of convergence on all levels<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check2 (const <a href="VectorCPU1.html">Vector</a> *x, const <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: performs a check of convergence on all levels<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check_fsmoothing ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_Y_cycle (integer , number , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_base_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; basesmoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_checkLevel_post_iterations (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_cycle_type (size_t gamma)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets cycle type in multigrid cycle (gamma)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_fsmoothing (bool enable)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_matrix_write_path (c_string matrixWritePath)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: set the path where connectionviewer matrices of the levels are written<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_max_fill_before_base (number fillrate)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets maximal fill rate before base solver is used<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_max_levels (size_t max_levels)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets max nr of AMG levels<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_max_nodes_for_base (size_t maxNrOfNodes)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets the maximal nr of nodes for base solver<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_min_nodes_on_one_processor (size_t minNrOfNodes)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: if the node number on one processor falls below this, agglomerate<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_nr_of_preiterations_at_check (size_t i)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: nr of mg cycles performed before checking<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_postsmooth (size_t nu2)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets nr. of postsmoothing steps (nu2)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_presmooth (size_t nu1)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets nr. of presmoothing steps (nu1)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_one_init (bool b)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_position_provider (<a href="IPositionProvider2d.html">IPositionProvider</a> *prov)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: needed for connectionviewer output<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_position_provider (<a href="IPositionProvider2d.html">IPositionProvider</a> *prov)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: needed for connectionviewer output<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_postsmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; postsmoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_preferred_nodes_on_one_processor (size_t preferredNrOfNodes)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: if we need to agglomerate, ensure all nodes have more than this number of unknowns<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_preiterations_mimum_defect_at_check (number d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: minimum defect for preiterations before checking<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_presmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; presmoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>write_interfaces ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>AMGBase Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_cycle_type ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns cycle type in multigrid cycle (gamma)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>get_fsmoothing ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns f smoothing enabled<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_grid_complexity ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns grid complexity c_G<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: c_G = total number of nodes of all levels divided by number of nodes on level 0<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const <a href="AMGLevelInformationCPU1.html">AMGLevelInformation</a> *</td><td class="memItemRight" valign=bottom>get_level_information (size_t L)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns information about the level L<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_max_fill_before_base ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns maximal fill rate before base solver is used<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_max_levels ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns max nr of AMG levels<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_max_nodes_for_base ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns maximal nr of nodes for base solver<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_min_nodes_on_one_processor ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns minNrOfNodes<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: if the node number on one processor falls below this, agglomerate<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_num_postsmooth ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr. of postsmoothing steps (nu2)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_num_presmooth ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr. of presmoothing steps (nu1)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_operator_complexity ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns operator complexity c_A<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: c_A = total nnz of all matrices divided by nnz of matrix A<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_preferred_nodes_on_one_processor ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns preferredNrOfNodes<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: if we need to agglomerate, ensure all nodes have more than this number of unknowns<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_timing_coarse_solver_setup_ms ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the time spent in the coarse solver setup in ms<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_timing_whole_setup_ms ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the time spent on the whole setup in ms<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_used_levels ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns used nr of AMG levels<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
memberfunction
set_num_presmooth
void
void set_num_presmooth (size_t nu1)
void set_num_presmooth (size_t nu1)<br><br>Member function of class <b>AMGBaseCPU1</b><br>tooltip: sets nr. of presmoothing steps (nu1)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_num_postsmooth
void
void set_num_postsmooth (size_t nu2)
void set_num_postsmooth (size_t nu2)<br><br>Member function of class <b>AMGBaseCPU1</b><br>tooltip: sets nr. of postsmoothing steps (nu2)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_cycle_type
void
void set_cycle_type (size_t gamma)
void set_cycle_type (size_t gamma)<br><br>Member function of class <b>AMGBaseCPU1</b><br>tooltip: sets cycle type in multigrid cycle (gamma)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_max_levels
void
void set_max_levels (size_t max_levels)
void set_max_levels (size_t max_levels)<br><br>Member function of class <b>AMGBaseCPU1</b><br>tooltip: sets max nr of AMG levels<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_max_nodes_for_base
void
void set_max_nodes_for_base (size_t maxNrOfNodes)
void set_max_nodes_for_base (size_t maxNrOfNodes)<br><br>Member function of class <b>AMGBaseCPU1</b><br>tooltip: sets the maximal nr of nodes for base solver<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_min_nodes_on_one_processor
void
void set_min_nodes_on_one_processor (size_t minNrOfNodes)
void set_min_nodes_on_one_processor (size_t minNrOfNodes)<br><br>Member function of class <b>AMGBaseCPU1</b><br>tooltip: if the node number on one processor falls below this, agglomerate<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_preferred_nodes_on_one_processor
void
void set_preferred_nodes_on_one_processor (size_t preferredNrOfNodes)
void set_preferred_nodes_on_one_processor (size_t preferredNrOfNodes)<br><br>Member function of class <b>AMGBaseCPU1</b><br>tooltip: if we need to agglomerate, ensure all nodes have more than this number of unknowns<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_max_fill_before_base
void
void set_max_fill_before_base (number fillrate)
void set_max_fill_before_base (number fillrate)<br><br>Member function of class <b>AMGBaseCPU1</b><br>tooltip: sets maximal fill rate before base solver is used<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_presmoother
void
void set_presmoother (SmartPtr<ILinearIterator> presmoother)
void set_presmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; presmoother)<br><br>Member function of class <b>AMGBaseCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_postsmoother
void
void set_postsmoother (SmartPtr<ILinearIterator> postsmoother)
void set_postsmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; postsmoother)<br><br>Member function of class <b>AMGBaseCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_base_solver
void
void set_base_solver (SmartPtr<ILinearOperatorInverse> basesmoother)
void set_base_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; basesmoother)<br><br>Member function of class <b>AMGBaseCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
check
bool
bool check (const Vector *x, const Vector *b)
bool check (const <a href="VectorCPU1.html">Vector</a> *x, const <a href="VectorCPU1.html">Vector</a> *b)<br><br>Member function of class <b>AMGBaseCPU1</b><br>tooltip: performs a check of convergence on all levels<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
check2
bool
bool check2 (const Vector *x, const Vector *b)
bool check2 (const <a href="VectorCPU1.html">Vector</a> *x, const <a href="VectorCPU1.html">Vector</a> *b)<br><br>Member function of class <b>AMGBaseCPU1</b><br>tooltip: performs a check of convergence on all levels<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
check_fsmoothing
bool
bool check_fsmoothing ()
bool check_fsmoothing ()<br><br>Member function of class <b>AMGBaseCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_nr_of_preiterations_at_check
void
void set_nr_of_preiterations_at_check (size_t i)
void set_nr_of_preiterations_at_check (size_t i)<br><br>Member function of class <b>AMGBaseCPU1</b><br>tooltip: nr of mg cycles performed before checking<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_preiterations_mimum_defect_at_check
void
void set_preiterations_mimum_defect_at_check (number d)
void set_preiterations_mimum_defect_at_check (number d)<br><br>Member function of class <b>AMGBaseCPU1</b><br>tooltip: minimum defect for preiterations before checking<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_matrix_write_path
void
void set_matrix_write_path (c_string matrixWritePath)
void set_matrix_write_path (c_string matrixWritePath)<br><br>Member function of class <b>AMGBaseCPU1</b><br>tooltip: set the path where connectionviewer matrices of the levels are written<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_fsmoothing
void
void set_fsmoothing (bool enable)
void set_fsmoothing (bool enable)<br><br>Member function of class <b>AMGBaseCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_one_init
void
void set_one_init (bool b)
void set_one_init (bool b)<br><br>Member function of class <b>AMGBaseCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_position_provider
void
void set_position_provider (IPositionProvider *prov)
void set_position_provider (<a href="IPositionProvider2d.html">IPositionProvider</a> *prov)<br><br>Member function of class <b>AMGBaseCPU1</b><br>tooltip: needed for connectionviewer output<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_position_provider
void
void set_position_provider (IPositionProvider *prov)
void set_position_provider (<a href="IPositionProvider2d.html">IPositionProvider</a> *prov)<br><br>Member function of class <b>AMGBaseCPU1</b><br>tooltip: needed for connectionviewer output<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
write_interfaces
void
void write_interfaces ()
void write_interfaces ()<br><br>Member function of class <b>AMGBaseCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_checkLevel_post_iterations
void
void set_checkLevel_post_iterations (size_t )
void set_checkLevel_post_iterations (size_t )<br><br>Member function of class <b>AMGBaseCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_Y_cycle
void
void set_Y_cycle (integer , number , number )
void set_Y_cycle (integer , number , number )<br><br>Member function of class <b>AMGBaseCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_num_presmooth
unknown
size_t get_num_presmooth () const
size_t get_num_presmooth ()<br><br>Member function of class <b>AMGBaseCPU1</b><br>returns nr. of presmoothing steps (nu1)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_num_postsmooth
unknown
size_t get_num_postsmooth () const
size_t get_num_postsmooth ()<br><br>Member function of class <b>AMGBaseCPU1</b><br>returns nr. of postsmoothing steps (nu2)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_cycle_type
unknown
size_t get_cycle_type () const
size_t get_cycle_type ()<br><br>Member function of class <b>AMGBaseCPU1</b><br>returns cycle type in multigrid cycle (gamma)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_max_levels
unknown
size_t get_max_levels () const
size_t get_max_levels ()<br><br>Member function of class <b>AMGBaseCPU1</b><br>returns max nr of AMG levels<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_used_levels
unknown
size_t get_used_levels () const
size_t get_used_levels ()<br><br>Member function of class <b>AMGBaseCPU1</b><br>returns used nr of AMG levels<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_max_nodes_for_base
unknown
size_t get_max_nodes_for_base () const
size_t get_max_nodes_for_base ()<br><br>Member function of class <b>AMGBaseCPU1</b><br>returns maximal nr of nodes for base solver<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_min_nodes_on_one_processor
unknown
size_t get_min_nodes_on_one_processor () const
size_t get_min_nodes_on_one_processor ()<br><br>Member function of class <b>AMGBaseCPU1</b><br>returns minNrOfNodes<br>tooltip: if the node number on one processor falls below this, agglomerate<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_preferred_nodes_on_one_processor
unknown
size_t get_preferred_nodes_on_one_processor () const
size_t get_preferred_nodes_on_one_processor ()<br><br>Member function of class <b>AMGBaseCPU1</b><br>returns preferredNrOfNodes<br>tooltip: if we need to agglomerate, ensure all nodes have more than this number of unknowns<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_max_fill_before_base
number
number get_max_fill_before_base () const
number get_max_fill_before_base ()<br><br>Member function of class <b>AMGBaseCPU1</b><br>returns maximal fill rate before base solver is used<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_operator_complexity
number
number get_operator_complexity () const
number get_operator_complexity ()<br><br>Member function of class <b>AMGBaseCPU1</b><br>returns operator complexity c_A<br>tooltip: c_A = total nnz of all matrices divided by nnz of matrix A<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_grid_complexity
number
number get_grid_complexity () const
number get_grid_complexity ()<br><br>Member function of class <b>AMGBaseCPU1</b><br>returns grid complexity c_G<br>tooltip: c_G = total number of nodes of all levels divided by number of nodes on level 0<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_timing_whole_setup_ms
number
number get_timing_whole_setup_ms () const
number get_timing_whole_setup_ms ()<br><br>Member function of class <b>AMGBaseCPU1</b><br>returns the time spent on the whole setup in ms<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_timing_coarse_solver_setup_ms
number
number get_timing_coarse_solver_setup_ms () const
number get_timing_coarse_solver_setup_ms ()<br><br>Member function of class <b>AMGBaseCPU1</b><br>returns the time spent in the coarse solver setup in ms<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_level_information
const AMGLevelInformationCPU1*
const AMGLevelInformation *get_level_information (size_t L) const
const <a href="AMGLevelInformationCPU1.html">AMGLevelInformation</a> *get_level_information (size_t L)<br><br>Member function of class <b>AMGBaseCPU1</b><br>returns information about the level L<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_fsmoothing
bool
bool get_fsmoothing () const
bool get_fsmoothing ()<br><br>Member function of class <b>AMGBaseCPU1</b><br>returns f smoothing enabled<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
;
class
AMGBaseCPU2
VectorDebugWritingObjectCPU2 DebugWritingObjectCPU2 ILinearIteratorCPU2 IPreconditionerCPU2 
Classgroup <b>AMGBase</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b><br>class has no constructor.  Tag <b>alg=CPU2;</b><br>Inheritance: <a href="VectorDebugWritingObjectCPU2.html">VectorDebugWritingObjectCPU2</a> <a href="DebugWritingObjectCPU2.html">DebugWritingObjectCPU2</a> <a href="ILinearIteratorCPU2.html">ILinearIteratorCPU2</a> <a href="IPreconditionerCPU2.html">IPreconditionerCPU2</a> <a href="AMGBaseCPU2.html">AMGBaseCPU2</a> <br><table><tr><td colspan=2><h3>AMGBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check (const <a href="VectorCPU1.html">Vector</a> *x, const <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: performs a check of convergence on all levels<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check2 (const <a href="VectorCPU1.html">Vector</a> *x, const <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: performs a check of convergence on all levels<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check_fsmoothing ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_Y_cycle (integer , number , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_base_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; basesmoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_checkLevel_post_iterations (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_cycle_type (size_t gamma)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets cycle type in multigrid cycle (gamma)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_fsmoothing (bool enable)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_matrix_write_path (c_string matrixWritePath)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: set the path where connectionviewer matrices of the levels are written<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_max_fill_before_base (number fillrate)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets maximal fill rate before base solver is used<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_max_levels (size_t max_levels)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets max nr of AMG levels<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_max_nodes_for_base (size_t maxNrOfNodes)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets the maximal nr of nodes for base solver<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_min_nodes_on_one_processor (size_t minNrOfNodes)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: if the node number on one processor falls below this, agglomerate<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_nr_of_preiterations_at_check (size_t i)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: nr of mg cycles performed before checking<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_postsmooth (size_t nu2)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets nr. of postsmoothing steps (nu2)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_presmooth (size_t nu1)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets nr. of presmoothing steps (nu1)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_one_init (bool b)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_position_provider (<a href="IPositionProvider2d.html">IPositionProvider</a> *prov)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: needed for connectionviewer output<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_position_provider (<a href="IPositionProvider2d.html">IPositionProvider</a> *prov)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: needed for connectionviewer output<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_postsmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; postsmoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_preferred_nodes_on_one_processor (size_t preferredNrOfNodes)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: if we need to agglomerate, ensure all nodes have more than this number of unknowns<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_preiterations_mimum_defect_at_check (number d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: minimum defect for preiterations before checking<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_presmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; presmoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>write_interfaces ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>AMGBase Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_cycle_type ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns cycle type in multigrid cycle (gamma)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>get_fsmoothing ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns f smoothing enabled<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_grid_complexity ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns grid complexity c_G<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: c_G = total number of nodes of all levels divided by number of nodes on level 0<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const <a href="AMGLevelInformationCPU1.html">AMGLevelInformation</a> *</td><td class="memItemRight" valign=bottom>get_level_information (size_t L)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns information about the level L<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_max_fill_before_base ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns maximal fill rate before base solver is used<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_max_levels ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns max nr of AMG levels<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_max_nodes_for_base ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns maximal nr of nodes for base solver<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_min_nodes_on_one_processor ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns minNrOfNodes<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: if the node number on one processor falls below this, agglomerate<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_num_postsmooth ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr. of postsmoothing steps (nu2)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_num_presmooth ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr. of presmoothing steps (nu1)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_operator_complexity ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns operator complexity c_A<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: c_A = total nnz of all matrices divided by nnz of matrix A<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_preferred_nodes_on_one_processor ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns preferredNrOfNodes<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: if we need to agglomerate, ensure all nodes have more than this number of unknowns<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_timing_coarse_solver_setup_ms ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the time spent in the coarse solver setup in ms<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_timing_whole_setup_ms ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the time spent on the whole setup in ms<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_used_levels ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns used nr of AMG levels<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
memberfunction
set_num_presmooth
void
void set_num_presmooth (size_t nu1)
void set_num_presmooth (size_t nu1)<br><br>Member function of class <b>AMGBaseCPU2</b><br>tooltip: sets nr. of presmoothing steps (nu1)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_num_postsmooth
void
void set_num_postsmooth (size_t nu2)
void set_num_postsmooth (size_t nu2)<br><br>Member function of class <b>AMGBaseCPU2</b><br>tooltip: sets nr. of postsmoothing steps (nu2)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_cycle_type
void
void set_cycle_type (size_t gamma)
void set_cycle_type (size_t gamma)<br><br>Member function of class <b>AMGBaseCPU2</b><br>tooltip: sets cycle type in multigrid cycle (gamma)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_max_levels
void
void set_max_levels (size_t max_levels)
void set_max_levels (size_t max_levels)<br><br>Member function of class <b>AMGBaseCPU2</b><br>tooltip: sets max nr of AMG levels<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_max_nodes_for_base
void
void set_max_nodes_for_base (size_t maxNrOfNodes)
void set_max_nodes_for_base (size_t maxNrOfNodes)<br><br>Member function of class <b>AMGBaseCPU2</b><br>tooltip: sets the maximal nr of nodes for base solver<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_min_nodes_on_one_processor
void
void set_min_nodes_on_one_processor (size_t minNrOfNodes)
void set_min_nodes_on_one_processor (size_t minNrOfNodes)<br><br>Member function of class <b>AMGBaseCPU2</b><br>tooltip: if the node number on one processor falls below this, agglomerate<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_preferred_nodes_on_one_processor
void
void set_preferred_nodes_on_one_processor (size_t preferredNrOfNodes)
void set_preferred_nodes_on_one_processor (size_t preferredNrOfNodes)<br><br>Member function of class <b>AMGBaseCPU2</b><br>tooltip: if we need to agglomerate, ensure all nodes have more than this number of unknowns<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_max_fill_before_base
void
void set_max_fill_before_base (number fillrate)
void set_max_fill_before_base (number fillrate)<br><br>Member function of class <b>AMGBaseCPU2</b><br>tooltip: sets maximal fill rate before base solver is used<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_presmoother
void
void set_presmoother (SmartPtr<ILinearIterator> presmoother)
void set_presmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; presmoother)<br><br>Member function of class <b>AMGBaseCPU2</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_postsmoother
void
void set_postsmoother (SmartPtr<ILinearIterator> postsmoother)
void set_postsmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; postsmoother)<br><br>Member function of class <b>AMGBaseCPU2</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_base_solver
void
void set_base_solver (SmartPtr<ILinearOperatorInverse> basesmoother)
void set_base_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; basesmoother)<br><br>Member function of class <b>AMGBaseCPU2</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
check
bool
bool check (const Vector *x, const Vector *b)
bool check (const <a href="VectorCPU1.html">Vector</a> *x, const <a href="VectorCPU1.html">Vector</a> *b)<br><br>Member function of class <b>AMGBaseCPU2</b><br>tooltip: performs a check of convergence on all levels<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
check2
bool
bool check2 (const Vector *x, const Vector *b)
bool check2 (const <a href="VectorCPU1.html">Vector</a> *x, const <a href="VectorCPU1.html">Vector</a> *b)<br><br>Member function of class <b>AMGBaseCPU2</b><br>tooltip: performs a check of convergence on all levels<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
check_fsmoothing
bool
bool check_fsmoothing ()
bool check_fsmoothing ()<br><br>Member function of class <b>AMGBaseCPU2</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_nr_of_preiterations_at_check
void
void set_nr_of_preiterations_at_check (size_t i)
void set_nr_of_preiterations_at_check (size_t i)<br><br>Member function of class <b>AMGBaseCPU2</b><br>tooltip: nr of mg cycles performed before checking<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_preiterations_mimum_defect_at_check
void
void set_preiterations_mimum_defect_at_check (number d)
void set_preiterations_mimum_defect_at_check (number d)<br><br>Member function of class <b>AMGBaseCPU2</b><br>tooltip: minimum defect for preiterations before checking<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_matrix_write_path
void
void set_matrix_write_path (c_string matrixWritePath)
void set_matrix_write_path (c_string matrixWritePath)<br><br>Member function of class <b>AMGBaseCPU2</b><br>tooltip: set the path where connectionviewer matrices of the levels are written<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_fsmoothing
void
void set_fsmoothing (bool enable)
void set_fsmoothing (bool enable)<br><br>Member function of class <b>AMGBaseCPU2</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_one_init
void
void set_one_init (bool b)
void set_one_init (bool b)<br><br>Member function of class <b>AMGBaseCPU2</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_position_provider
void
void set_position_provider (IPositionProvider *prov)
void set_position_provider (<a href="IPositionProvider2d.html">IPositionProvider</a> *prov)<br><br>Member function of class <b>AMGBaseCPU2</b><br>tooltip: needed for connectionviewer output<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_position_provider
void
void set_position_provider (IPositionProvider *prov)
void set_position_provider (<a href="IPositionProvider2d.html">IPositionProvider</a> *prov)<br><br>Member function of class <b>AMGBaseCPU2</b><br>tooltip: needed for connectionviewer output<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
write_interfaces
void
void write_interfaces ()
void write_interfaces ()<br><br>Member function of class <b>AMGBaseCPU2</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_checkLevel_post_iterations
void
void set_checkLevel_post_iterations (size_t )
void set_checkLevel_post_iterations (size_t )<br><br>Member function of class <b>AMGBaseCPU2</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_Y_cycle
void
void set_Y_cycle (integer , number , number )
void set_Y_cycle (integer , number , number )<br><br>Member function of class <b>AMGBaseCPU2</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_num_presmooth
unknown
size_t get_num_presmooth () const
size_t get_num_presmooth ()<br><br>Member function of class <b>AMGBaseCPU2</b><br>returns nr. of presmoothing steps (nu1)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_num_postsmooth
unknown
size_t get_num_postsmooth () const
size_t get_num_postsmooth ()<br><br>Member function of class <b>AMGBaseCPU2</b><br>returns nr. of postsmoothing steps (nu2)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_cycle_type
unknown
size_t get_cycle_type () const
size_t get_cycle_type ()<br><br>Member function of class <b>AMGBaseCPU2</b><br>returns cycle type in multigrid cycle (gamma)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_max_levels
unknown
size_t get_max_levels () const
size_t get_max_levels ()<br><br>Member function of class <b>AMGBaseCPU2</b><br>returns max nr of AMG levels<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_used_levels
unknown
size_t get_used_levels () const
size_t get_used_levels ()<br><br>Member function of class <b>AMGBaseCPU2</b><br>returns used nr of AMG levels<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_max_nodes_for_base
unknown
size_t get_max_nodes_for_base () const
size_t get_max_nodes_for_base ()<br><br>Member function of class <b>AMGBaseCPU2</b><br>returns maximal nr of nodes for base solver<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_min_nodes_on_one_processor
unknown
size_t get_min_nodes_on_one_processor () const
size_t get_min_nodes_on_one_processor ()<br><br>Member function of class <b>AMGBaseCPU2</b><br>returns minNrOfNodes<br>tooltip: if the node number on one processor falls below this, agglomerate<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_preferred_nodes_on_one_processor
unknown
size_t get_preferred_nodes_on_one_processor () const
size_t get_preferred_nodes_on_one_processor ()<br><br>Member function of class <b>AMGBaseCPU2</b><br>returns preferredNrOfNodes<br>tooltip: if we need to agglomerate, ensure all nodes have more than this number of unknowns<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_max_fill_before_base
number
number get_max_fill_before_base () const
number get_max_fill_before_base ()<br><br>Member function of class <b>AMGBaseCPU2</b><br>returns maximal fill rate before base solver is used<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_operator_complexity
number
number get_operator_complexity () const
number get_operator_complexity ()<br><br>Member function of class <b>AMGBaseCPU2</b><br>returns operator complexity c_A<br>tooltip: c_A = total nnz of all matrices divided by nnz of matrix A<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_grid_complexity
number
number get_grid_complexity () const
number get_grid_complexity ()<br><br>Member function of class <b>AMGBaseCPU2</b><br>returns grid complexity c_G<br>tooltip: c_G = total number of nodes of all levels divided by number of nodes on level 0<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_timing_whole_setup_ms
number
number get_timing_whole_setup_ms () const
number get_timing_whole_setup_ms ()<br><br>Member function of class <b>AMGBaseCPU2</b><br>returns the time spent on the whole setup in ms<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_timing_coarse_solver_setup_ms
number
number get_timing_coarse_solver_setup_ms () const
number get_timing_coarse_solver_setup_ms ()<br><br>Member function of class <b>AMGBaseCPU2</b><br>returns the time spent in the coarse solver setup in ms<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_level_information
const AMGLevelInformationCPU2*
const AMGLevelInformation *get_level_information (size_t L) const
const <a href="AMGLevelInformationCPU1.html">AMGLevelInformation</a> *get_level_information (size_t L)<br><br>Member function of class <b>AMGBaseCPU2</b><br>returns information about the level L<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_fsmoothing
bool
bool get_fsmoothing () const
bool get_fsmoothing ()<br><br>Member function of class <b>AMGBaseCPU2</b><br>returns f smoothing enabled<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
;
class
AMGBaseCPU3
VectorDebugWritingObjectCPU3 DebugWritingObjectCPU3 ILinearIteratorCPU3 IPreconditionerCPU3 
Classgroup <b>AMGBase</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b><br>class has no constructor.  Tag <b>alg=CPU3;</b><br>Inheritance: <a href="VectorDebugWritingObjectCPU3.html">VectorDebugWritingObjectCPU3</a> <a href="DebugWritingObjectCPU3.html">DebugWritingObjectCPU3</a> <a href="ILinearIteratorCPU3.html">ILinearIteratorCPU3</a> <a href="IPreconditionerCPU3.html">IPreconditionerCPU3</a> <a href="AMGBaseCPU3.html">AMGBaseCPU3</a> <br><table><tr><td colspan=2><h3>AMGBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check (const <a href="VectorCPU1.html">Vector</a> *x, const <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: performs a check of convergence on all levels<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check2 (const <a href="VectorCPU1.html">Vector</a> *x, const <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: performs a check of convergence on all levels<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check_fsmoothing ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_Y_cycle (integer , number , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_base_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; basesmoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_checkLevel_post_iterations (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_cycle_type (size_t gamma)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets cycle type in multigrid cycle (gamma)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_fsmoothing (bool enable)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_matrix_write_path (c_string matrixWritePath)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: set the path where connectionviewer matrices of the levels are written<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_max_fill_before_base (number fillrate)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets maximal fill rate before base solver is used<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_max_levels (size_t max_levels)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets max nr of AMG levels<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_max_nodes_for_base (size_t maxNrOfNodes)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets the maximal nr of nodes for base solver<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_min_nodes_on_one_processor (size_t minNrOfNodes)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: if the node number on one processor falls below this, agglomerate<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_nr_of_preiterations_at_check (size_t i)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: nr of mg cycles performed before checking<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_postsmooth (size_t nu2)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets nr. of postsmoothing steps (nu2)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_presmooth (size_t nu1)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets nr. of presmoothing steps (nu1)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_one_init (bool b)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_position_provider (<a href="IPositionProvider2d.html">IPositionProvider</a> *prov)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: needed for connectionviewer output<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_position_provider (<a href="IPositionProvider2d.html">IPositionProvider</a> *prov)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: needed for connectionviewer output<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_postsmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; postsmoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_preferred_nodes_on_one_processor (size_t preferredNrOfNodes)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: if we need to agglomerate, ensure all nodes have more than this number of unknowns<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_preiterations_mimum_defect_at_check (number d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: minimum defect for preiterations before checking<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_presmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; presmoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>write_interfaces ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>AMGBase Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_cycle_type ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns cycle type in multigrid cycle (gamma)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>get_fsmoothing ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns f smoothing enabled<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_grid_complexity ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns grid complexity c_G<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: c_G = total number of nodes of all levels divided by number of nodes on level 0<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const <a href="AMGLevelInformationCPU1.html">AMGLevelInformation</a> *</td><td class="memItemRight" valign=bottom>get_level_information (size_t L)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns information about the level L<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_max_fill_before_base ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns maximal fill rate before base solver is used<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_max_levels ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns max nr of AMG levels<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_max_nodes_for_base ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns maximal nr of nodes for base solver<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_min_nodes_on_one_processor ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns minNrOfNodes<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: if the node number on one processor falls below this, agglomerate<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_num_postsmooth ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr. of postsmoothing steps (nu2)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_num_presmooth ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr. of presmoothing steps (nu1)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_operator_complexity ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns operator complexity c_A<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: c_A = total nnz of all matrices divided by nnz of matrix A<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_preferred_nodes_on_one_processor ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns preferredNrOfNodes<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: if we need to agglomerate, ensure all nodes have more than this number of unknowns<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_timing_coarse_solver_setup_ms ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the time spent in the coarse solver setup in ms<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_timing_whole_setup_ms ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the time spent on the whole setup in ms<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_used_levels ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns used nr of AMG levels<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
memberfunction
set_num_presmooth
void
void set_num_presmooth (size_t nu1)
void set_num_presmooth (size_t nu1)<br><br>Member function of class <b>AMGBaseCPU3</b><br>tooltip: sets nr. of presmoothing steps (nu1)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_num_postsmooth
void
void set_num_postsmooth (size_t nu2)
void set_num_postsmooth (size_t nu2)<br><br>Member function of class <b>AMGBaseCPU3</b><br>tooltip: sets nr. of postsmoothing steps (nu2)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_cycle_type
void
void set_cycle_type (size_t gamma)
void set_cycle_type (size_t gamma)<br><br>Member function of class <b>AMGBaseCPU3</b><br>tooltip: sets cycle type in multigrid cycle (gamma)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_max_levels
void
void set_max_levels (size_t max_levels)
void set_max_levels (size_t max_levels)<br><br>Member function of class <b>AMGBaseCPU3</b><br>tooltip: sets max nr of AMG levels<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_max_nodes_for_base
void
void set_max_nodes_for_base (size_t maxNrOfNodes)
void set_max_nodes_for_base (size_t maxNrOfNodes)<br><br>Member function of class <b>AMGBaseCPU3</b><br>tooltip: sets the maximal nr of nodes for base solver<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_min_nodes_on_one_processor
void
void set_min_nodes_on_one_processor (size_t minNrOfNodes)
void set_min_nodes_on_one_processor (size_t minNrOfNodes)<br><br>Member function of class <b>AMGBaseCPU3</b><br>tooltip: if the node number on one processor falls below this, agglomerate<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_preferred_nodes_on_one_processor
void
void set_preferred_nodes_on_one_processor (size_t preferredNrOfNodes)
void set_preferred_nodes_on_one_processor (size_t preferredNrOfNodes)<br><br>Member function of class <b>AMGBaseCPU3</b><br>tooltip: if we need to agglomerate, ensure all nodes have more than this number of unknowns<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_max_fill_before_base
void
void set_max_fill_before_base (number fillrate)
void set_max_fill_before_base (number fillrate)<br><br>Member function of class <b>AMGBaseCPU3</b><br>tooltip: sets maximal fill rate before base solver is used<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_presmoother
void
void set_presmoother (SmartPtr<ILinearIterator> presmoother)
void set_presmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; presmoother)<br><br>Member function of class <b>AMGBaseCPU3</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_postsmoother
void
void set_postsmoother (SmartPtr<ILinearIterator> postsmoother)
void set_postsmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; postsmoother)<br><br>Member function of class <b>AMGBaseCPU3</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_base_solver
void
void set_base_solver (SmartPtr<ILinearOperatorInverse> basesmoother)
void set_base_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; basesmoother)<br><br>Member function of class <b>AMGBaseCPU3</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
check
bool
bool check (const Vector *x, const Vector *b)
bool check (const <a href="VectorCPU1.html">Vector</a> *x, const <a href="VectorCPU1.html">Vector</a> *b)<br><br>Member function of class <b>AMGBaseCPU3</b><br>tooltip: performs a check of convergence on all levels<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
check2
bool
bool check2 (const Vector *x, const Vector *b)
bool check2 (const <a href="VectorCPU1.html">Vector</a> *x, const <a href="VectorCPU1.html">Vector</a> *b)<br><br>Member function of class <b>AMGBaseCPU3</b><br>tooltip: performs a check of convergence on all levels<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
check_fsmoothing
bool
bool check_fsmoothing ()
bool check_fsmoothing ()<br><br>Member function of class <b>AMGBaseCPU3</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_nr_of_preiterations_at_check
void
void set_nr_of_preiterations_at_check (size_t i)
void set_nr_of_preiterations_at_check (size_t i)<br><br>Member function of class <b>AMGBaseCPU3</b><br>tooltip: nr of mg cycles performed before checking<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_preiterations_mimum_defect_at_check
void
void set_preiterations_mimum_defect_at_check (number d)
void set_preiterations_mimum_defect_at_check (number d)<br><br>Member function of class <b>AMGBaseCPU3</b><br>tooltip: minimum defect for preiterations before checking<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_matrix_write_path
void
void set_matrix_write_path (c_string matrixWritePath)
void set_matrix_write_path (c_string matrixWritePath)<br><br>Member function of class <b>AMGBaseCPU3</b><br>tooltip: set the path where connectionviewer matrices of the levels are written<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_fsmoothing
void
void set_fsmoothing (bool enable)
void set_fsmoothing (bool enable)<br><br>Member function of class <b>AMGBaseCPU3</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_one_init
void
void set_one_init (bool b)
void set_one_init (bool b)<br><br>Member function of class <b>AMGBaseCPU3</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_position_provider
void
void set_position_provider (IPositionProvider *prov)
void set_position_provider (<a href="IPositionProvider2d.html">IPositionProvider</a> *prov)<br><br>Member function of class <b>AMGBaseCPU3</b><br>tooltip: needed for connectionviewer output<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_position_provider
void
void set_position_provider (IPositionProvider *prov)
void set_position_provider (<a href="IPositionProvider2d.html">IPositionProvider</a> *prov)<br><br>Member function of class <b>AMGBaseCPU3</b><br>tooltip: needed for connectionviewer output<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
write_interfaces
void
void write_interfaces ()
void write_interfaces ()<br><br>Member function of class <b>AMGBaseCPU3</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_checkLevel_post_iterations
void
void set_checkLevel_post_iterations (size_t )
void set_checkLevel_post_iterations (size_t )<br><br>Member function of class <b>AMGBaseCPU3</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_Y_cycle
void
void set_Y_cycle (integer , number , number )
void set_Y_cycle (integer , number , number )<br><br>Member function of class <b>AMGBaseCPU3</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_num_presmooth
unknown
size_t get_num_presmooth () const
size_t get_num_presmooth ()<br><br>Member function of class <b>AMGBaseCPU3</b><br>returns nr. of presmoothing steps (nu1)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_num_postsmooth
unknown
size_t get_num_postsmooth () const
size_t get_num_postsmooth ()<br><br>Member function of class <b>AMGBaseCPU3</b><br>returns nr. of postsmoothing steps (nu2)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_cycle_type
unknown
size_t get_cycle_type () const
size_t get_cycle_type ()<br><br>Member function of class <b>AMGBaseCPU3</b><br>returns cycle type in multigrid cycle (gamma)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_max_levels
unknown
size_t get_max_levels () const
size_t get_max_levels ()<br><br>Member function of class <b>AMGBaseCPU3</b><br>returns max nr of AMG levels<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_used_levels
unknown
size_t get_used_levels () const
size_t get_used_levels ()<br><br>Member function of class <b>AMGBaseCPU3</b><br>returns used nr of AMG levels<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_max_nodes_for_base
unknown
size_t get_max_nodes_for_base () const
size_t get_max_nodes_for_base ()<br><br>Member function of class <b>AMGBaseCPU3</b><br>returns maximal nr of nodes for base solver<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_min_nodes_on_one_processor
unknown
size_t get_min_nodes_on_one_processor () const
size_t get_min_nodes_on_one_processor ()<br><br>Member function of class <b>AMGBaseCPU3</b><br>returns minNrOfNodes<br>tooltip: if the node number on one processor falls below this, agglomerate<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_preferred_nodes_on_one_processor
unknown
size_t get_preferred_nodes_on_one_processor () const
size_t get_preferred_nodes_on_one_processor ()<br><br>Member function of class <b>AMGBaseCPU3</b><br>returns preferredNrOfNodes<br>tooltip: if we need to agglomerate, ensure all nodes have more than this number of unknowns<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_max_fill_before_base
number
number get_max_fill_before_base () const
number get_max_fill_before_base ()<br><br>Member function of class <b>AMGBaseCPU3</b><br>returns maximal fill rate before base solver is used<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_operator_complexity
number
number get_operator_complexity () const
number get_operator_complexity ()<br><br>Member function of class <b>AMGBaseCPU3</b><br>returns operator complexity c_A<br>tooltip: c_A = total nnz of all matrices divided by nnz of matrix A<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_grid_complexity
number
number get_grid_complexity () const
number get_grid_complexity ()<br><br>Member function of class <b>AMGBaseCPU3</b><br>returns grid complexity c_G<br>tooltip: c_G = total number of nodes of all levels divided by number of nodes on level 0<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_timing_whole_setup_ms
number
number get_timing_whole_setup_ms () const
number get_timing_whole_setup_ms ()<br><br>Member function of class <b>AMGBaseCPU3</b><br>returns the time spent on the whole setup in ms<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_timing_coarse_solver_setup_ms
number
number get_timing_coarse_solver_setup_ms () const
number get_timing_coarse_solver_setup_ms ()<br><br>Member function of class <b>AMGBaseCPU3</b><br>returns the time spent in the coarse solver setup in ms<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_level_information
const AMGLevelInformationCPU3*
const AMGLevelInformation *get_level_information (size_t L) const
const <a href="AMGLevelInformationCPU1.html">AMGLevelInformation</a> *get_level_information (size_t L)<br><br>Member function of class <b>AMGBaseCPU3</b><br>returns information about the level L<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_fsmoothing
bool
bool get_fsmoothing () const
bool get_fsmoothing ()<br><br>Member function of class <b>AMGBaseCPU3</b><br>returns f smoothing enabled<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
;
class
AMGLevelInformationCPU1

Classgroup <b>AMGLevelInformation</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b><br>class has no constructor.  Tag <b>alg=CPU1;</b><br><table><tr><td colspan=2><h3>AMGLevelInformation Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_creation_time_ms ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns creation time of this level (in ms)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_fill_in ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr of non-zeros / (nr of nodes)^2<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_nnz ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr of non-zeros, sum over all processors<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_nnz_max ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr of non-zeros, maximum over all processors<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_nnz_min ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr of non-zeros, minimum over all processors<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_nr_of_interface_elements ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr of interface elements (including multiplicites)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_nr_of_nodes ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr of nodes of this level, sum over all processors<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_nr_of_nodes_max ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr of nodes of this level, maximum over all processors<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_nr_of_nodes_min ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr of nodes of this level, minimum over all processors<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>is_valid ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns true if this is a valid level information<br/></td></tr><tr><td><br></td></tr></table>
memberfunction
get_creation_time_ms
number
number get_creation_time_ms () const
number get_creation_time_ms ()<br><br>Member function of class <b>AMGLevelInformationCPU1</b><br>returns creation time of this level (in ms)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_nr_of_nodes
unknown
size_t get_nr_of_nodes () const
size_t get_nr_of_nodes ()<br><br>Member function of class <b>AMGLevelInformationCPU1</b><br>returns nr of nodes of this level, sum over all processors<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_nr_of_nodes_min
unknown
size_t get_nr_of_nodes_min () const
size_t get_nr_of_nodes_min ()<br><br>Member function of class <b>AMGLevelInformationCPU1</b><br>returns nr of nodes of this level, minimum over all processors<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_nr_of_nodes_max
unknown
size_t get_nr_of_nodes_max () const
size_t get_nr_of_nodes_max ()<br><br>Member function of class <b>AMGLevelInformationCPU1</b><br>returns nr of nodes of this level, maximum over all processors<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_nnz
unknown
size_t get_nnz () const
size_t get_nnz ()<br><br>Member function of class <b>AMGLevelInformationCPU1</b><br>returns nr of non-zeros, sum over all processors<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_nnz_min
unknown
size_t get_nnz_min () const
size_t get_nnz_min ()<br><br>Member function of class <b>AMGLevelInformationCPU1</b><br>returns nr of non-zeros, minimum over all processors<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_nnz_max
unknown
size_t get_nnz_max () const
size_t get_nnz_max ()<br><br>Member function of class <b>AMGLevelInformationCPU1</b><br>returns nr of non-zeros, maximum over all processors<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_fill_in
number
number get_fill_in () const
number get_fill_in ()<br><br>Member function of class <b>AMGLevelInformationCPU1</b><br>returns nr of non-zeros / (nr of nodes)^2<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
is_valid
bool
bool is_valid () const
bool is_valid ()<br><br>Member function of class <b>AMGLevelInformationCPU1</b><br>returns true if this is a valid level information<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_nr_of_interface_elements
unknown
size_t get_nr_of_interface_elements () const
size_t get_nr_of_interface_elements ()<br><br>Member function of class <b>AMGLevelInformationCPU1</b><br>returns nr of interface elements (including multiplicites)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
;
class
AMGLevelInformationCPU2

Classgroup <b>AMGLevelInformation</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b><br>class has no constructor.  Tag <b>alg=CPU2;</b><br><table><tr><td colspan=2><h3>AMGLevelInformation Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_creation_time_ms ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns creation time of this level (in ms)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_fill_in ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr of non-zeros / (nr of nodes)^2<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_nnz ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr of non-zeros, sum over all processors<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_nnz_max ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr of non-zeros, maximum over all processors<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_nnz_min ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr of non-zeros, minimum over all processors<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_nr_of_interface_elements ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr of interface elements (including multiplicites)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_nr_of_nodes ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr of nodes of this level, sum over all processors<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_nr_of_nodes_max ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr of nodes of this level, maximum over all processors<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_nr_of_nodes_min ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr of nodes of this level, minimum over all processors<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>is_valid ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns true if this is a valid level information<br/></td></tr><tr><td><br></td></tr></table>
memberfunction
get_creation_time_ms
number
number get_creation_time_ms () const
number get_creation_time_ms ()<br><br>Member function of class <b>AMGLevelInformationCPU2</b><br>returns creation time of this level (in ms)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_nr_of_nodes
unknown
size_t get_nr_of_nodes () const
size_t get_nr_of_nodes ()<br><br>Member function of class <b>AMGLevelInformationCPU2</b><br>returns nr of nodes of this level, sum over all processors<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_nr_of_nodes_min
unknown
size_t get_nr_of_nodes_min () const
size_t get_nr_of_nodes_min ()<br><br>Member function of class <b>AMGLevelInformationCPU2</b><br>returns nr of nodes of this level, minimum over all processors<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_nr_of_nodes_max
unknown
size_t get_nr_of_nodes_max () const
size_t get_nr_of_nodes_max ()<br><br>Member function of class <b>AMGLevelInformationCPU2</b><br>returns nr of nodes of this level, maximum over all processors<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_nnz
unknown
size_t get_nnz () const
size_t get_nnz ()<br><br>Member function of class <b>AMGLevelInformationCPU2</b><br>returns nr of non-zeros, sum over all processors<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_nnz_min
unknown
size_t get_nnz_min () const
size_t get_nnz_min ()<br><br>Member function of class <b>AMGLevelInformationCPU2</b><br>returns nr of non-zeros, minimum over all processors<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_nnz_max
unknown
size_t get_nnz_max () const
size_t get_nnz_max ()<br><br>Member function of class <b>AMGLevelInformationCPU2</b><br>returns nr of non-zeros, maximum over all processors<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_fill_in
number
number get_fill_in () const
number get_fill_in ()<br><br>Member function of class <b>AMGLevelInformationCPU2</b><br>returns nr of non-zeros / (nr of nodes)^2<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
is_valid
bool
bool is_valid () const
bool is_valid ()<br><br>Member function of class <b>AMGLevelInformationCPU2</b><br>returns true if this is a valid level information<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_nr_of_interface_elements
unknown
size_t get_nr_of_interface_elements () const
size_t get_nr_of_interface_elements ()<br><br>Member function of class <b>AMGLevelInformationCPU2</b><br>returns nr of interface elements (including multiplicites)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
;
class
AMGLevelInformationCPU3

Classgroup <b>AMGLevelInformation</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b><br>class has no constructor.  Tag <b>alg=CPU3;</b><br><table><tr><td colspan=2><h3>AMGLevelInformation Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_creation_time_ms ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns creation time of this level (in ms)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_fill_in ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr of non-zeros / (nr of nodes)^2<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_nnz ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr of non-zeros, sum over all processors<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_nnz_max ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr of non-zeros, maximum over all processors<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_nnz_min ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr of non-zeros, minimum over all processors<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_nr_of_interface_elements ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr of interface elements (including multiplicites)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_nr_of_nodes ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr of nodes of this level, sum over all processors<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_nr_of_nodes_max ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr of nodes of this level, maximum over all processors<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_nr_of_nodes_min ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr of nodes of this level, minimum over all processors<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>is_valid ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns true if this is a valid level information<br/></td></tr><tr><td><br></td></tr></table>
memberfunction
get_creation_time_ms
number
number get_creation_time_ms () const
number get_creation_time_ms ()<br><br>Member function of class <b>AMGLevelInformationCPU3</b><br>returns creation time of this level (in ms)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_nr_of_nodes
unknown
size_t get_nr_of_nodes () const
size_t get_nr_of_nodes ()<br><br>Member function of class <b>AMGLevelInformationCPU3</b><br>returns nr of nodes of this level, sum over all processors<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_nr_of_nodes_min
unknown
size_t get_nr_of_nodes_min () const
size_t get_nr_of_nodes_min ()<br><br>Member function of class <b>AMGLevelInformationCPU3</b><br>returns nr of nodes of this level, minimum over all processors<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_nr_of_nodes_max
unknown
size_t get_nr_of_nodes_max () const
size_t get_nr_of_nodes_max ()<br><br>Member function of class <b>AMGLevelInformationCPU3</b><br>returns nr of nodes of this level, maximum over all processors<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_nnz
unknown
size_t get_nnz () const
size_t get_nnz ()<br><br>Member function of class <b>AMGLevelInformationCPU3</b><br>returns nr of non-zeros, sum over all processors<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_nnz_min
unknown
size_t get_nnz_min () const
size_t get_nnz_min ()<br><br>Member function of class <b>AMGLevelInformationCPU3</b><br>returns nr of non-zeros, minimum over all processors<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_nnz_max
unknown
size_t get_nnz_max () const
size_t get_nnz_max ()<br><br>Member function of class <b>AMGLevelInformationCPU3</b><br>returns nr of non-zeros, maximum over all processors<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_fill_in
number
number get_fill_in () const
number get_fill_in ()<br><br>Member function of class <b>AMGLevelInformationCPU3</b><br>returns nr of non-zeros / (nr of nodes)^2<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
is_valid
bool
bool is_valid () const
bool is_valid ()<br><br>Member function of class <b>AMGLevelInformationCPU3</b><br>returns true if this is a valid level information<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_nr_of_interface_elements
unknown
size_t get_nr_of_interface_elements () const
size_t get_nr_of_interface_elements ()<br><br>Member function of class <b>AMGLevelInformationCPU3</b><br>returns nr of interface elements (including multiplicites)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
;
class
ActiveSetCPU1

Classgroup <b>ActiveSet</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has constructor.  Tag <b>alg=CPU1;</b><br><table><tr><td colspan=2><h3>ActiveSet Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ActiveSetCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ActiveSet Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std::vector&ltSmartPtr&lt;<a href="MultiIndex2.html">MultiIndex2</a>&gt; &gt</td><td class="memItemRight" valign=bottom>activeMultiIndices ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>active_index (<a href="VectorCPU1.html">Vector</a> *is index active or not, stores activeSetList, <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check_conv (const <a href="VectorCPU1.html">Vector</a> *activeIndexSet changed or not, size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check_dist_to_obs (<a href="VectorCPU1.html">Vector</a> *is distance to obs >= 0)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>comp_lambda (<a href="VectorCPU1.html">Vector</a> *complementary function computed, const <a href="MatrixCPU1.html">Matrix</a> *, const <a href="VectorCPU1.html">Vector</a> *, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>prepare (<a href="VectorCPU1.html">Vector</a> *prepare)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_constraint (<a href="VectorCPU1.html">Vector</a> *constraint)</td></tr><tr><td><br></td></tr></table>
constructor
ActiveSetCPU1

ActiveSetCPU1 ()
ActiveSetCPU1 ()<br>Constructor of class <b>ActiveSetCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_constraint
void
void set_constraint (Vector *constraint)
void set_constraint (<a href="VectorCPU1.html">Vector</a> *constraint)<br><br>Member function of class <b>ActiveSetCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
prepare
void
void prepare (Vector *prepare)
void prepare (<a href="VectorCPU1.html">Vector</a> *prepare)<br><br>Member function of class <b>ActiveSetCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
check_dist_to_obs
bool
bool check_dist_to_obs (Vector *is distance to obs >= 0)
bool check_dist_to_obs (<a href="VectorCPU1.html">Vector</a> *is distance to obs >= 0)<br><br>Member function of class <b>ActiveSetCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
active_index
bool
bool active_index (Vector *is index active or not, stores activeSetList, Vector *)
bool active_index (<a href="VectorCPU1.html">Vector</a> *is index active or not, stores activeSetList, <a href="VectorCPU1.html">Vector</a> *)<br><br>Member function of class <b>ActiveSetCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
comp_lambda
void
void comp_lambda (Vector *complementary function computed, const Matrix *, const Vector *, const Vector *)
void comp_lambda (<a href="VectorCPU1.html">Vector</a> *complementary function computed, const <a href="MatrixCPU1.html">Matrix</a> *, const <a href="VectorCPU1.html">Vector</a> *, const <a href="VectorCPU1.html">Vector</a> *)<br><br>Member function of class <b>ActiveSetCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
check_conv
bool
bool check_conv (const Vector *activeIndexSet changed or not, size_t )
bool check_conv (const <a href="VectorCPU1.html">Vector</a> *activeIndexSet changed or not, size_t )<br><br>Member function of class <b>ActiveSetCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
activeMultiIndices
std::vector<SmartPtr<MultiIndex2>>
std::vector<SmartPtr<MultiIndex2> >activeMultiIndices ()
std::vector&ltSmartPtr&lt;<a href="MultiIndex2.html">MultiIndex2</a>&gt; &gtactiveMultiIndices ()<br><br>Member function of class <b>ActiveSetCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
;
class
ActiveSetCPU2

Classgroup <b>ActiveSet</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has constructor.  Tag <b>alg=CPU2;</b><br><table><tr><td colspan=2><h3>ActiveSet Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ActiveSetCPU2 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ActiveSet Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std::vector&ltSmartPtr&lt;<a href="MultiIndex2.html">MultiIndex2</a>&gt; &gt</td><td class="memItemRight" valign=bottom>activeMultiIndices ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>active_index (<a href="VectorCPU1.html">Vector</a> *is index active or not, stores activeSetList, <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check_conv (const <a href="VectorCPU1.html">Vector</a> *activeIndexSet changed or not, size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check_dist_to_obs (<a href="VectorCPU1.html">Vector</a> *is distance to obs >= 0)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>comp_lambda (<a href="VectorCPU1.html">Vector</a> *complementary function computed, const <a href="MatrixCPU1.html">Matrix</a> *, const <a href="VectorCPU1.html">Vector</a> *, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>prepare (<a href="VectorCPU1.html">Vector</a> *prepare)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_constraint (<a href="VectorCPU1.html">Vector</a> *constraint)</td></tr><tr><td><br></td></tr></table>
constructor
ActiveSetCPU2

ActiveSetCPU2 ()
ActiveSetCPU2 ()<br>Constructor of class <b>ActiveSetCPU2</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_constraint
void
void set_constraint (Vector *constraint)
void set_constraint (<a href="VectorCPU1.html">Vector</a> *constraint)<br><br>Member function of class <b>ActiveSetCPU2</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
prepare
void
void prepare (Vector *prepare)
void prepare (<a href="VectorCPU1.html">Vector</a> *prepare)<br><br>Member function of class <b>ActiveSetCPU2</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
check_dist_to_obs
bool
bool check_dist_to_obs (Vector *is distance to obs >= 0)
bool check_dist_to_obs (<a href="VectorCPU1.html">Vector</a> *is distance to obs >= 0)<br><br>Member function of class <b>ActiveSetCPU2</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
active_index
bool
bool active_index (Vector *is index active or not, stores activeSetList, Vector *)
bool active_index (<a href="VectorCPU1.html">Vector</a> *is index active or not, stores activeSetList, <a href="VectorCPU1.html">Vector</a> *)<br><br>Member function of class <b>ActiveSetCPU2</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
comp_lambda
void
void comp_lambda (Vector *complementary function computed, const Matrix *, const Vector *, const Vector *)
void comp_lambda (<a href="VectorCPU1.html">Vector</a> *complementary function computed, const <a href="MatrixCPU1.html">Matrix</a> *, const <a href="VectorCPU1.html">Vector</a> *, const <a href="VectorCPU1.html">Vector</a> *)<br><br>Member function of class <b>ActiveSetCPU2</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
check_conv
bool
bool check_conv (const Vector *activeIndexSet changed or not, size_t )
bool check_conv (const <a href="VectorCPU1.html">Vector</a> *activeIndexSet changed or not, size_t )<br><br>Member function of class <b>ActiveSetCPU2</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
activeMultiIndices
std::vector<SmartPtr<MultiIndex2>>
std::vector<SmartPtr<MultiIndex2> >activeMultiIndices ()
std::vector&ltSmartPtr&lt;<a href="MultiIndex2.html">MultiIndex2</a>&gt; &gtactiveMultiIndices ()<br><br>Member function of class <b>ActiveSetCPU2</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
;
class
ActiveSetCPU3

Classgroup <b>ActiveSet</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has constructor.  Tag <b>alg=CPU3;</b><br><table><tr><td colspan=2><h3>ActiveSet Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ActiveSetCPU3 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ActiveSet Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std::vector&ltSmartPtr&lt;<a href="MultiIndex2.html">MultiIndex2</a>&gt; &gt</td><td class="memItemRight" valign=bottom>activeMultiIndices ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>active_index (<a href="VectorCPU1.html">Vector</a> *is index active or not, stores activeSetList, <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check_conv (const <a href="VectorCPU1.html">Vector</a> *activeIndexSet changed or not, size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check_dist_to_obs (<a href="VectorCPU1.html">Vector</a> *is distance to obs >= 0)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>comp_lambda (<a href="VectorCPU1.html">Vector</a> *complementary function computed, const <a href="MatrixCPU1.html">Matrix</a> *, const <a href="VectorCPU1.html">Vector</a> *, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>prepare (<a href="VectorCPU1.html">Vector</a> *prepare)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_constraint (<a href="VectorCPU1.html">Vector</a> *constraint)</td></tr><tr><td><br></td></tr></table>
constructor
ActiveSetCPU3

ActiveSetCPU3 ()
ActiveSetCPU3 ()<br>Constructor of class <b>ActiveSetCPU3</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_constraint
void
void set_constraint (Vector *constraint)
void set_constraint (<a href="VectorCPU1.html">Vector</a> *constraint)<br><br>Member function of class <b>ActiveSetCPU3</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
prepare
void
void prepare (Vector *prepare)
void prepare (<a href="VectorCPU1.html">Vector</a> *prepare)<br><br>Member function of class <b>ActiveSetCPU3</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
check_dist_to_obs
bool
bool check_dist_to_obs (Vector *is distance to obs >= 0)
bool check_dist_to_obs (<a href="VectorCPU1.html">Vector</a> *is distance to obs >= 0)<br><br>Member function of class <b>ActiveSetCPU3</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
active_index
bool
bool active_index (Vector *is index active or not, stores activeSetList, Vector *)
bool active_index (<a href="VectorCPU1.html">Vector</a> *is index active or not, stores activeSetList, <a href="VectorCPU1.html">Vector</a> *)<br><br>Member function of class <b>ActiveSetCPU3</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
comp_lambda
void
void comp_lambda (Vector *complementary function computed, const Matrix *, const Vector *, const Vector *)
void comp_lambda (<a href="VectorCPU1.html">Vector</a> *complementary function computed, const <a href="MatrixCPU1.html">Matrix</a> *, const <a href="VectorCPU1.html">Vector</a> *, const <a href="VectorCPU1.html">Vector</a> *)<br><br>Member function of class <b>ActiveSetCPU3</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
check_conv
bool
bool check_conv (const Vector *activeIndexSet changed or not, size_t )
bool check_conv (const <a href="VectorCPU1.html">Vector</a> *activeIndexSet changed or not, size_t )<br><br>Member function of class <b>ActiveSetCPU3</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
activeMultiIndices
std::vector<SmartPtr<MultiIndex2>>
std::vector<SmartPtr<MultiIndex2> >activeMultiIndices ()
std::vector&ltSmartPtr&lt;<a href="MultiIndex2.html">MultiIndex2</a>&gt; &gtactiveMultiIndices ()<br><br>Member function of class <b>ActiveSetCPU3</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
;
class
AdaptiveRegularRefiner_MultiGrid
IRefiner HangingNodeRefiner_MultiGrid 
Registry Group: <b>/ug4/Grid</b><br>class has constructor. <br>Inheritance: <a href="IRefiner.html">IRefiner</a> <a href="HangingNodeRefiner_MultiGrid.html">HangingNodeRefiner_MultiGrid</a> <a href="AdaptiveRegularRefiner_MultiGrid.html">AdaptiveRegularRefiner_MultiGrid</a> <br><table><tr><td colspan=2><h3>AdaptiveRegularRefiner_MultiGrid Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>AdaptiveRegularRefiner_MultiGrid ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>AdaptiveRegularRefiner_MultiGrid Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assign_grid (<a href="MultiGrid.html">MultiGrid</a> *mg)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>HangingNodeRefiner_MultiGrid Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>HangingNodeRefiner_MultiGrid ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited HangingNodeRefiner_MultiGrid Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assign_grid (<a href="MultiGrid.html">MultiGrid</a> *mg)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IRefiner Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear_marks ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>coarsen ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>refine ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>save_marks_to_file (c_string filename)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_adjusted_marks_debug_filename (c_string filename)</td></tr><tr><td><br></td></tr></table>
constructor
AdaptiveRegularRefiner_MultiGrid

AdaptiveRegularRefiner_MultiGrid ()
AdaptiveRegularRefiner_MultiGrid ()<br>Constructor of class <b>AdaptiveRegularRefiner_MultiGrid</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
assign_grid
void
void assign_grid (MultiGrid *mg)
void assign_grid (<a href="MultiGrid.html">MultiGrid</a> *mg)<br><br>Member function of class <b>AdaptiveRegularRefiner_MultiGrid</b><br>Registry Group: <b>/ug4/Grid</b>
;
class
AlgebraType

Registry Group: <b>/ug4/Init</b><br>class has constructor. <br><table><tr><td colspan=2><h3>AlgebraType Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>AlgebraType (c_string Type, integer Blocksize)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>AlgebraType (c_string Type  (Blocksize=variable))</td></tr><tr><td><br></td></tr></table>
constructor
AlgebraType

AlgebraType (c_string Type, integer Blocksize)
AlgebraType (c_string Type, integer Blocksize)<br>Constructor of class <b>AlgebraType</b><br>Registry Group: <b>/ug4/Init</b>
constructor
AlgebraType

AlgebraType (c_string Type  (Blocksize=variable))
AlgebraType (c_string Type  (Blocksize=variable))<br>Constructor of class <b>AlgebraType</b><br>Registry Group: <b>/ug4/Init</b>
;
class
ApproximationSpace1d
FunctionPattern DoFDistributionInfo IApproximationSpace 
Classgroup <b>ApproximationSpace</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="FunctionPattern.html">FunctionPattern</a> <a href="DoFDistributionInfo.html">DoFDistributionInfo</a> <a href="IApproximationSpace.html">IApproximationSpace</a> <a href="ApproximationSpace1d.html">ApproximationSpace1d</a> <br><table><tr><td colspan=2><h3>ApproximationSpace Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ApproximationSpace1d (SmartPtr&lt;<a href="Domain2d.html">Domain</a>&gt; Domain)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ApproximationSpace1d (SmartPtr&lt;<a href="Domain2d.html">Domain</a>&gt; Domain, AlgebraType, const <a href="AlgebraType.html">AlgebraType</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ApproximationSpace Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="Domain2d.html">Domain</a>&gt; </td><td class="memItemRight" valign=bottom>domain ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ApproximationSpace Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="SurfaceView.html">SurfaceView</a>&gt; </td><td class="memItemRight" valign=bottom>surface_view ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IApproximationSpace Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>defragment ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init_levels ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init_surfaces ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init_top_surface ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited IApproximationSpace Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_levels ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print_layout_statistic (integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print_layout_statistic ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print_statistic (integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print_statistic ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DoFDistributionInfo Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print_local_dof_statistic (integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print_local_dof_statistic ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited FunctionPattern Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_fct (c_string Name, c_string Type, integer Order, c_string Subsets)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Adds a function to the Function Pattern<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">help: currently no help available<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_fct (c_string Name, c_string Type, integer Order)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Adds a function to the Function Pattern<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">help: currently no help available<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_fct (c_string Name, c_string Type)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Adds a function to the Function Pattern<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">help: currently no help available<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_fct (std::vector&ltstd_string &gtName, c_string Type, integer Order, std::vector&ltstd_string &gtSubsets)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Adds a function to the Function Pattern<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">help: currently no help available<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_fct (std::vector&ltstd_string &gtName, c_string Type, integer Order)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Adds a function to the Function Pattern<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">help: currently no help available<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_fct (std::vector&ltstd_string &gtName, c_string Type)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Adds a function to the Function Pattern<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">help: currently no help available<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited FunctionPattern Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>dim (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>c_string </td><td class="memItemRight" valign=bottom>name (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_fct ()</td></tr><tr><td><br></td></tr></table>
constructor
ApproximationSpace1d

ApproximationSpace1d (SmartPtr<Domain> Domain)
ApproximationSpace1d (SmartPtr&lt;<a href="Domain2d.html">Domain</a>&gt; Domain)<br>Constructor of class <b>ApproximationSpace1d</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
constructor
ApproximationSpace1d

ApproximationSpace1d (SmartPtr<Domain> Domain, AlgebraType, const AlgebraType *)
ApproximationSpace1d (SmartPtr&lt;<a href="Domain2d.html">Domain</a>&gt; Domain, AlgebraType, const <a href="AlgebraType.html">AlgebraType</a> *)<br>Constructor of class <b>ApproximationSpace1d</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
domain
SmartPtr<Domain1d>
SmartPtr<Domain> domain ()
SmartPtr&lt;<a href="Domain2d.html">Domain</a>&gt; domain ()<br><br>Member function of class <b>ApproximationSpace1d</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
surface_view
ConstSmartPtr<SurfaceView>
const SmartPtr<SurfaceView> surface_view () const
const SmartPtr&lt;<a href="SurfaceView.html">SurfaceView</a>&gt; surface_view ()<br><br>Member function of class <b>ApproximationSpace1d</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
ApproximationSpace2d
FunctionPattern DoFDistributionInfo IApproximationSpace 
Classgroup <b>ApproximationSpace</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="FunctionPattern.html">FunctionPattern</a> <a href="DoFDistributionInfo.html">DoFDistributionInfo</a> <a href="IApproximationSpace.html">IApproximationSpace</a> <a href="ApproximationSpace2d.html">ApproximationSpace2d</a> <br><table><tr><td colspan=2><h3>ApproximationSpace Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ApproximationSpace2d (SmartPtr&lt;<a href="Domain2d.html">Domain</a>&gt; Domain)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ApproximationSpace2d (SmartPtr&lt;<a href="Domain2d.html">Domain</a>&gt; Domain, AlgebraType, const <a href="AlgebraType.html">AlgebraType</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ApproximationSpace Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="Domain2d.html">Domain</a>&gt; </td><td class="memItemRight" valign=bottom>domain ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ApproximationSpace Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="SurfaceView.html">SurfaceView</a>&gt; </td><td class="memItemRight" valign=bottom>surface_view ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IApproximationSpace Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>defragment ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init_levels ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init_surfaces ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init_top_surface ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited IApproximationSpace Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_levels ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print_layout_statistic (integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print_layout_statistic ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print_statistic (integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print_statistic ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DoFDistributionInfo Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print_local_dof_statistic (integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print_local_dof_statistic ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited FunctionPattern Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_fct (c_string Name, c_string Type, integer Order, c_string Subsets)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Adds a function to the Function Pattern<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">help: currently no help available<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_fct (c_string Name, c_string Type, integer Order)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Adds a function to the Function Pattern<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">help: currently no help available<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_fct (c_string Name, c_string Type)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Adds a function to the Function Pattern<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">help: currently no help available<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_fct (std::vector&ltstd_string &gtName, c_string Type, integer Order, std::vector&ltstd_string &gtSubsets)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Adds a function to the Function Pattern<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">help: currently no help available<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_fct (std::vector&ltstd_string &gtName, c_string Type, integer Order)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Adds a function to the Function Pattern<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">help: currently no help available<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_fct (std::vector&ltstd_string &gtName, c_string Type)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Adds a function to the Function Pattern<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">help: currently no help available<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited FunctionPattern Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>dim (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>c_string </td><td class="memItemRight" valign=bottom>name (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_fct ()</td></tr><tr><td><br></td></tr></table>
constructor
ApproximationSpace2d

ApproximationSpace2d (SmartPtr<Domain> Domain)
ApproximationSpace2d (SmartPtr&lt;<a href="Domain2d.html">Domain</a>&gt; Domain)<br>Constructor of class <b>ApproximationSpace2d</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
constructor
ApproximationSpace2d

ApproximationSpace2d (SmartPtr<Domain> Domain, AlgebraType, const AlgebraType *)
ApproximationSpace2d (SmartPtr&lt;<a href="Domain2d.html">Domain</a>&gt; Domain, AlgebraType, const <a href="AlgebraType.html">AlgebraType</a> *)<br>Constructor of class <b>ApproximationSpace2d</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
domain
SmartPtr<Domain2d>
SmartPtr<Domain> domain ()
SmartPtr&lt;<a href="Domain2d.html">Domain</a>&gt; domain ()<br><br>Member function of class <b>ApproximationSpace2d</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
surface_view
ConstSmartPtr<SurfaceView>
const SmartPtr<SurfaceView> surface_view () const
const SmartPtr&lt;<a href="SurfaceView.html">SurfaceView</a>&gt; surface_view ()<br><br>Member function of class <b>ApproximationSpace2d</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
ApproximationSpace3d
FunctionPattern DoFDistributionInfo IApproximationSpace 
Classgroup <b>ApproximationSpace</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="FunctionPattern.html">FunctionPattern</a> <a href="DoFDistributionInfo.html">DoFDistributionInfo</a> <a href="IApproximationSpace.html">IApproximationSpace</a> <a href="ApproximationSpace3d.html">ApproximationSpace3d</a> <br><table><tr><td colspan=2><h3>ApproximationSpace Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ApproximationSpace3d (SmartPtr&lt;<a href="Domain2d.html">Domain</a>&gt; Domain)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ApproximationSpace3d (SmartPtr&lt;<a href="Domain2d.html">Domain</a>&gt; Domain, AlgebraType, const <a href="AlgebraType.html">AlgebraType</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ApproximationSpace Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="Domain2d.html">Domain</a>&gt; </td><td class="memItemRight" valign=bottom>domain ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ApproximationSpace Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="SurfaceView.html">SurfaceView</a>&gt; </td><td class="memItemRight" valign=bottom>surface_view ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IApproximationSpace Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>defragment ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init_levels ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init_surfaces ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init_top_surface ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited IApproximationSpace Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_levels ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print_layout_statistic (integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print_layout_statistic ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print_statistic (integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print_statistic ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DoFDistributionInfo Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print_local_dof_statistic (integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print_local_dof_statistic ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited FunctionPattern Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_fct (c_string Name, c_string Type, integer Order, c_string Subsets)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Adds a function to the Function Pattern<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">help: currently no help available<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_fct (c_string Name, c_string Type, integer Order)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Adds a function to the Function Pattern<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">help: currently no help available<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_fct (c_string Name, c_string Type)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Adds a function to the Function Pattern<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">help: currently no help available<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_fct (std::vector&ltstd_string &gtName, c_string Type, integer Order, std::vector&ltstd_string &gtSubsets)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Adds a function to the Function Pattern<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">help: currently no help available<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_fct (std::vector&ltstd_string &gtName, c_string Type, integer Order)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Adds a function to the Function Pattern<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">help: currently no help available<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_fct (std::vector&ltstd_string &gtName, c_string Type)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Adds a function to the Function Pattern<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">help: currently no help available<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited FunctionPattern Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>dim (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>c_string </td><td class="memItemRight" valign=bottom>name (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_fct ()</td></tr><tr><td><br></td></tr></table>
constructor
ApproximationSpace3d

ApproximationSpace3d (SmartPtr<Domain> Domain)
ApproximationSpace3d (SmartPtr&lt;<a href="Domain2d.html">Domain</a>&gt; Domain)<br>Constructor of class <b>ApproximationSpace3d</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
constructor
ApproximationSpace3d

ApproximationSpace3d (SmartPtr<Domain> Domain, AlgebraType, const AlgebraType *)
ApproximationSpace3d (SmartPtr&lt;<a href="Domain2d.html">Domain</a>&gt; Domain, AlgebraType, const <a href="AlgebraType.html">AlgebraType</a> *)<br>Constructor of class <b>ApproximationSpace3d</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
domain
SmartPtr<Domain3d>
SmartPtr<Domain> domain ()
SmartPtr&lt;<a href="Domain2d.html">Domain</a>&gt; domain ()<br><br>Member function of class <b>ApproximationSpace3d</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
surface_view
ConstSmartPtr<SurfaceView>
const SmartPtr<SurfaceView> surface_view () const
const SmartPtr&lt;<a href="SurfaceView.html">SurfaceView</a>&gt; surface_view ()<br><br>Member function of class <b>ApproximationSpace3d</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
AssembledLinearOperatorCPU1
MatrixCPU1 IOperatorCPU1 ILinearOperatorCPU1 MatrixOperatorCPU1 
Classgroup <b>AssembledLinearOperator</b><br>Registry Group: <b>/ug4/Discretization</b><br>class has constructor.  Tag <b>alg=CPU1;</b><br>Inheritance: <a href="MatrixCPU1.html">MatrixCPU1</a> <a href="IOperatorCPU1.html">IOperatorCPU1</a> <a href="ILinearOperatorCPU1.html">ILinearOperatorCPU1</a> <a href="MatrixOperatorCPU1.html">MatrixOperatorCPU1</a> <a href="AssembledLinearOperatorCPU1.html">AssembledLinearOperatorCPU1</a> <br><table><tr><td colspan=2><h3>AssembledLinearOperator Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>AssembledLinearOperatorCPU1 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>AssembledLinearOperatorCPU1 (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; Assembling Routine)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>AssembledLinearOperatorCPU1 (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; AssemblingRoutine, GridLevel, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>AssembledLinearOperator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init_op_and_rhs (<a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_dirichlet_values (<a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_discretization (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_level (const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>AssembledLinearOperator Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const <a href="GridLevel.html">GridLevel</a> *</td><td class="memItemRight" valign=bottom>level ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>MatrixOperator Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>MatrixOperatorCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearOperator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns f#u<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Matrix Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>MatrixCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited Matrix Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print ()</td></tr><tr><td><br></td></tr></table>
constructor
AssembledLinearOperatorCPU1

AssembledLinearOperatorCPU1 ()
AssembledLinearOperatorCPU1 ()<br>Constructor of class <b>AssembledLinearOperatorCPU1</b><br>Registry Group: <b>/ug4/Discretization</b>
constructor
AssembledLinearOperatorCPU1

AssembledLinearOperatorCPU1 (SmartPtr<IAssemble> Assembling Routine)
AssembledLinearOperatorCPU1 (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; Assembling Routine)<br>Constructor of class <b>AssembledLinearOperatorCPU1</b><br>Registry Group: <b>/ug4/Discretization</b>
constructor
AssembledLinearOperatorCPU1

AssembledLinearOperatorCPU1 (SmartPtr<IAssemble> AssemblingRoutine, GridLevel, const GridLevel *)
AssembledLinearOperatorCPU1 (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; AssemblingRoutine, GridLevel, const <a href="GridLevel.html">GridLevel</a> *)<br>Constructor of class <b>AssembledLinearOperatorCPU1</b><br>Registry Group: <b>/ug4/Discretization</b>
memberfunction
set_discretization
void
void set_discretization (SmartPtr<IAssemble> )
void set_discretization (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; )<br><br>Member function of class <b>AssembledLinearOperatorCPU1</b><br>Registry Group: <b>/ug4/Discretization</b>
memberfunction
set_level
void
void set_level (const GridLevel *)
void set_level (const <a href="GridLevel.html">GridLevel</a> *)<br><br>Member function of class <b>AssembledLinearOperatorCPU1</b><br>Registry Group: <b>/ug4/Discretization</b>
memberfunction
set_dirichlet_values
void
void set_dirichlet_values (Vector *)
void set_dirichlet_values (<a href="VectorCPU1.html">Vector</a> *)<br><br>Member function of class <b>AssembledLinearOperatorCPU1</b><br>Registry Group: <b>/ug4/Discretization</b>
memberfunction
init_op_and_rhs
void
void init_op_and_rhs (Vector *)
void init_op_and_rhs (<a href="VectorCPU1.html">Vector</a> *)<br><br>Member function of class <b>AssembledLinearOperatorCPU1</b><br>Registry Group: <b>/ug4/Discretization</b>
memberfunction
level
const GridLevel*
const GridLevel *level () const
const <a href="GridLevel.html">GridLevel</a> *level ()<br><br>Member function of class <b>AssembledLinearOperatorCPU1</b><br>Registry Group: <b>/ug4/Discretization</b>
;
class
AssembledLinearOperatorCPU2
MatrixCPU2 IOperatorCPU2 ILinearOperatorCPU2 MatrixOperatorCPU2 
Classgroup <b>AssembledLinearOperator</b><br>Registry Group: <b>/ug4/Discretization</b><br>class has constructor.  Tag <b>alg=CPU2;</b><br>Inheritance: <a href="MatrixCPU2.html">MatrixCPU2</a> <a href="IOperatorCPU2.html">IOperatorCPU2</a> <a href="ILinearOperatorCPU2.html">ILinearOperatorCPU2</a> <a href="MatrixOperatorCPU2.html">MatrixOperatorCPU2</a> <a href="AssembledLinearOperatorCPU2.html">AssembledLinearOperatorCPU2</a> <br><table><tr><td colspan=2><h3>AssembledLinearOperator Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>AssembledLinearOperatorCPU2 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>AssembledLinearOperatorCPU2 (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; Assembling Routine)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>AssembledLinearOperatorCPU2 (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; AssemblingRoutine, GridLevel, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>AssembledLinearOperator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init_op_and_rhs (<a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_dirichlet_values (<a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_discretization (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_level (const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>AssembledLinearOperator Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const <a href="GridLevel.html">GridLevel</a> *</td><td class="memItemRight" valign=bottom>level ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>MatrixOperator Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>MatrixOperatorCPU2 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearOperator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns f#u<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Matrix Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>MatrixCPU2 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited Matrix Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print ()</td></tr><tr><td><br></td></tr></table>
constructor
AssembledLinearOperatorCPU2

AssembledLinearOperatorCPU2 ()
AssembledLinearOperatorCPU2 ()<br>Constructor of class <b>AssembledLinearOperatorCPU2</b><br>Registry Group: <b>/ug4/Discretization</b>
constructor
AssembledLinearOperatorCPU2

AssembledLinearOperatorCPU2 (SmartPtr<IAssemble> Assembling Routine)
AssembledLinearOperatorCPU2 (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; Assembling Routine)<br>Constructor of class <b>AssembledLinearOperatorCPU2</b><br>Registry Group: <b>/ug4/Discretization</b>
constructor
AssembledLinearOperatorCPU2

AssembledLinearOperatorCPU2 (SmartPtr<IAssemble> AssemblingRoutine, GridLevel, const GridLevel *)
AssembledLinearOperatorCPU2 (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; AssemblingRoutine, GridLevel, const <a href="GridLevel.html">GridLevel</a> *)<br>Constructor of class <b>AssembledLinearOperatorCPU2</b><br>Registry Group: <b>/ug4/Discretization</b>
memberfunction
set_discretization
void
void set_discretization (SmartPtr<IAssemble> )
void set_discretization (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; )<br><br>Member function of class <b>AssembledLinearOperatorCPU2</b><br>Registry Group: <b>/ug4/Discretization</b>
memberfunction
set_level
void
void set_level (const GridLevel *)
void set_level (const <a href="GridLevel.html">GridLevel</a> *)<br><br>Member function of class <b>AssembledLinearOperatorCPU2</b><br>Registry Group: <b>/ug4/Discretization</b>
memberfunction
set_dirichlet_values
void
void set_dirichlet_values (Vector *)
void set_dirichlet_values (<a href="VectorCPU1.html">Vector</a> *)<br><br>Member function of class <b>AssembledLinearOperatorCPU2</b><br>Registry Group: <b>/ug4/Discretization</b>
memberfunction
init_op_and_rhs
void
void init_op_and_rhs (Vector *)
void init_op_and_rhs (<a href="VectorCPU1.html">Vector</a> *)<br><br>Member function of class <b>AssembledLinearOperatorCPU2</b><br>Registry Group: <b>/ug4/Discretization</b>
memberfunction
level
const GridLevel*
const GridLevel *level () const
const <a href="GridLevel.html">GridLevel</a> *level ()<br><br>Member function of class <b>AssembledLinearOperatorCPU2</b><br>Registry Group: <b>/ug4/Discretization</b>
;
class
AssembledLinearOperatorCPU3
MatrixCPU3 IOperatorCPU3 ILinearOperatorCPU3 MatrixOperatorCPU3 
Classgroup <b>AssembledLinearOperator</b><br>Registry Group: <b>/ug4/Discretization</b><br>class has constructor.  Tag <b>alg=CPU3;</b><br>Inheritance: <a href="MatrixCPU3.html">MatrixCPU3</a> <a href="IOperatorCPU3.html">IOperatorCPU3</a> <a href="ILinearOperatorCPU3.html">ILinearOperatorCPU3</a> <a href="MatrixOperatorCPU3.html">MatrixOperatorCPU3</a> <a href="AssembledLinearOperatorCPU3.html">AssembledLinearOperatorCPU3</a> <br><table><tr><td colspan=2><h3>AssembledLinearOperator Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>AssembledLinearOperatorCPU3 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>AssembledLinearOperatorCPU3 (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; Assembling Routine)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>AssembledLinearOperatorCPU3 (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; AssemblingRoutine, GridLevel, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>AssembledLinearOperator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init_op_and_rhs (<a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_dirichlet_values (<a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_discretization (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_level (const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>AssembledLinearOperator Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const <a href="GridLevel.html">GridLevel</a> *</td><td class="memItemRight" valign=bottom>level ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>MatrixOperator Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>MatrixOperatorCPU3 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearOperator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns f#u<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Matrix Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>MatrixCPU3 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited Matrix Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print ()</td></tr><tr><td><br></td></tr></table>
constructor
AssembledLinearOperatorCPU3

AssembledLinearOperatorCPU3 ()
AssembledLinearOperatorCPU3 ()<br>Constructor of class <b>AssembledLinearOperatorCPU3</b><br>Registry Group: <b>/ug4/Discretization</b>
constructor
AssembledLinearOperatorCPU3

AssembledLinearOperatorCPU3 (SmartPtr<IAssemble> Assembling Routine)
AssembledLinearOperatorCPU3 (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; Assembling Routine)<br>Constructor of class <b>AssembledLinearOperatorCPU3</b><br>Registry Group: <b>/ug4/Discretization</b>
constructor
AssembledLinearOperatorCPU3

AssembledLinearOperatorCPU3 (SmartPtr<IAssemble> AssemblingRoutine, GridLevel, const GridLevel *)
AssembledLinearOperatorCPU3 (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; AssemblingRoutine, GridLevel, const <a href="GridLevel.html">GridLevel</a> *)<br>Constructor of class <b>AssembledLinearOperatorCPU3</b><br>Registry Group: <b>/ug4/Discretization</b>
memberfunction
set_discretization
void
void set_discretization (SmartPtr<IAssemble> )
void set_discretization (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; )<br><br>Member function of class <b>AssembledLinearOperatorCPU3</b><br>Registry Group: <b>/ug4/Discretization</b>
memberfunction
set_level
void
void set_level (const GridLevel *)
void set_level (const <a href="GridLevel.html">GridLevel</a> *)<br><br>Member function of class <b>AssembledLinearOperatorCPU3</b><br>Registry Group: <b>/ug4/Discretization</b>
memberfunction
set_dirichlet_values
void
void set_dirichlet_values (Vector *)
void set_dirichlet_values (<a href="VectorCPU1.html">Vector</a> *)<br><br>Member function of class <b>AssembledLinearOperatorCPU3</b><br>Registry Group: <b>/ug4/Discretization</b>
memberfunction
init_op_and_rhs
void
void init_op_and_rhs (Vector *)
void init_op_and_rhs (<a href="VectorCPU1.html">Vector</a> *)<br><br>Member function of class <b>AssembledLinearOperatorCPU3</b><br>Registry Group: <b>/ug4/Discretization</b>
memberfunction
level
const GridLevel*
const GridLevel *level () const
const <a href="GridLevel.html">GridLevel</a> *level ()<br><br>Member function of class <b>AssembledLinearOperatorCPU3</b><br>Registry Group: <b>/ug4/Discretization</b>
;
class
AssembledOperatorCPU1
IOperatorCPU1 
Classgroup <b>AssembledOperator</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b><br>class has constructor.  Tag <b>alg=CPU1;</b><br>Inheritance: <a href="IOperatorCPU1.html">IOperatorCPU1</a> <a href="AssembledOperatorCPU1.html">AssembledOperatorCPU1</a> <br><table><tr><td colspan=2><h3>AssembledOperator Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>AssembledOperatorCPU1 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>AssembledOperatorCPU1 (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; AssemblingRoutine)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>AssembledOperatorCPU1 (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; AssemblingRoutine, GridLevel, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>AssembledOperator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_discretization (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; ass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_level (const <a href="GridLevel.html">GridLevel</a> *gridLevel)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>AssembledOperator Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const <a href="GridLevel.html">GridLevel</a> *</td><td class="memItemRight" valign=bottom>level ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns gridLevel<br/></td></tr><tr><td><br></td></tr></table>
constructor
AssembledOperatorCPU1

AssembledOperatorCPU1 ()
AssembledOperatorCPU1 ()<br>Constructor of class <b>AssembledOperatorCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
constructor
AssembledOperatorCPU1

AssembledOperatorCPU1 (SmartPtr<IAssemble> AssemblingRoutine)
AssembledOperatorCPU1 (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; AssemblingRoutine)<br>Constructor of class <b>AssembledOperatorCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
constructor
AssembledOperatorCPU1

AssembledOperatorCPU1 (SmartPtr<IAssemble> AssemblingRoutine, GridLevel, const GridLevel *)
AssembledOperatorCPU1 (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; AssemblingRoutine, GridLevel, const <a href="GridLevel.html">GridLevel</a> *)<br>Constructor of class <b>AssembledOperatorCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_discretization
void
void set_discretization (SmartPtr<IAssemble> ass)
void set_discretization (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; ass)<br><br>Member function of class <b>AssembledOperatorCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_level
void
void set_level (const GridLevel *gridLevel)
void set_level (const <a href="GridLevel.html">GridLevel</a> *gridLevel)<br><br>Member function of class <b>AssembledOperatorCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
init
void
void init ()
void init ()<br><br>Member function of class <b>AssembledOperatorCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
level
const GridLevel*
const GridLevel *level () const
const <a href="GridLevel.html">GridLevel</a> *level ()<br><br>Member function of class <b>AssembledOperatorCPU1</b><br>returns gridLevel<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
;
class
AssembledOperatorCPU2
IOperatorCPU2 
Classgroup <b>AssembledOperator</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b><br>class has constructor.  Tag <b>alg=CPU2;</b><br>Inheritance: <a href="IOperatorCPU2.html">IOperatorCPU2</a> <a href="AssembledOperatorCPU2.html">AssembledOperatorCPU2</a> <br><table><tr><td colspan=2><h3>AssembledOperator Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>AssembledOperatorCPU2 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>AssembledOperatorCPU2 (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; AssemblingRoutine)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>AssembledOperatorCPU2 (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; AssemblingRoutine, GridLevel, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>AssembledOperator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_discretization (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; ass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_level (const <a href="GridLevel.html">GridLevel</a> *gridLevel)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>AssembledOperator Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const <a href="GridLevel.html">GridLevel</a> *</td><td class="memItemRight" valign=bottom>level ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns gridLevel<br/></td></tr><tr><td><br></td></tr></table>
constructor
AssembledOperatorCPU2

AssembledOperatorCPU2 ()
AssembledOperatorCPU2 ()<br>Constructor of class <b>AssembledOperatorCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
constructor
AssembledOperatorCPU2

AssembledOperatorCPU2 (SmartPtr<IAssemble> AssemblingRoutine)
AssembledOperatorCPU2 (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; AssemblingRoutine)<br>Constructor of class <b>AssembledOperatorCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
constructor
AssembledOperatorCPU2

AssembledOperatorCPU2 (SmartPtr<IAssemble> AssemblingRoutine, GridLevel, const GridLevel *)
AssembledOperatorCPU2 (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; AssemblingRoutine, GridLevel, const <a href="GridLevel.html">GridLevel</a> *)<br>Constructor of class <b>AssembledOperatorCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_discretization
void
void set_discretization (SmartPtr<IAssemble> ass)
void set_discretization (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; ass)<br><br>Member function of class <b>AssembledOperatorCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_level
void
void set_level (const GridLevel *gridLevel)
void set_level (const <a href="GridLevel.html">GridLevel</a> *gridLevel)<br><br>Member function of class <b>AssembledOperatorCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
init
void
void init ()
void init ()<br><br>Member function of class <b>AssembledOperatorCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
level
const GridLevel*
const GridLevel *level () const
const <a href="GridLevel.html">GridLevel</a> *level ()<br><br>Member function of class <b>AssembledOperatorCPU2</b><br>returns gridLevel<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
;
class
AssembledOperatorCPU3
IOperatorCPU3 
Classgroup <b>AssembledOperator</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b><br>class has constructor.  Tag <b>alg=CPU3;</b><br>Inheritance: <a href="IOperatorCPU3.html">IOperatorCPU3</a> <a href="AssembledOperatorCPU3.html">AssembledOperatorCPU3</a> <br><table><tr><td colspan=2><h3>AssembledOperator Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>AssembledOperatorCPU3 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>AssembledOperatorCPU3 (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; AssemblingRoutine)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>AssembledOperatorCPU3 (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; AssemblingRoutine, GridLevel, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>AssembledOperator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_discretization (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; ass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_level (const <a href="GridLevel.html">GridLevel</a> *gridLevel)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>AssembledOperator Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const <a href="GridLevel.html">GridLevel</a> *</td><td class="memItemRight" valign=bottom>level ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns gridLevel<br/></td></tr><tr><td><br></td></tr></table>
constructor
AssembledOperatorCPU3

AssembledOperatorCPU3 ()
AssembledOperatorCPU3 ()<br>Constructor of class <b>AssembledOperatorCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
constructor
AssembledOperatorCPU3

AssembledOperatorCPU3 (SmartPtr<IAssemble> AssemblingRoutine)
AssembledOperatorCPU3 (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; AssemblingRoutine)<br>Constructor of class <b>AssembledOperatorCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
constructor
AssembledOperatorCPU3

AssembledOperatorCPU3 (SmartPtr<IAssemble> AssemblingRoutine, GridLevel, const GridLevel *)
AssembledOperatorCPU3 (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; AssemblingRoutine, GridLevel, const <a href="GridLevel.html">GridLevel</a> *)<br>Constructor of class <b>AssembledOperatorCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_discretization
void
void set_discretization (SmartPtr<IAssemble> ass)
void set_discretization (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; ass)<br><br>Member function of class <b>AssembledOperatorCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_level
void
void set_level (const GridLevel *gridLevel)
void set_level (const <a href="GridLevel.html">GridLevel</a> *gridLevel)<br><br>Member function of class <b>AssembledOperatorCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
init
void
void init ()
void init ()<br><br>Member function of class <b>AssembledOperatorCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
level
const GridLevel*
const GridLevel *level () const
const <a href="GridLevel.html">GridLevel</a> *level ()<br><br>Member function of class <b>AssembledOperatorCPU3</b><br>returns gridLevel<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
;
class
AverageComponent1dCPU1
ITransferPostProcessCPU1 
Classgroup <b>AverageComponent</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU1;</b><br>Inheritance: <a href="ITransferPostProcessCPU1.html">ITransferPostProcessCPU1</a> <a href="AverageComponent1dCPU1.html">AverageComponent1dCPU1</a> <br><table><tr><td colspan=2><h3>AverageComponent Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>AverageComponent1dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space, c_string Components)</td></tr><tr><td><br></td></tr></table>
constructor
AverageComponent1dCPU1

AverageComponent1dCPU1 (SmartPtr<ApproximationSpace> Approximation Space, c_string Components)
AverageComponent1dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space, c_string Components)<br>Constructor of class <b>AverageComponent1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
AverageComponent1dCPU2
ITransferPostProcessCPU2 
Classgroup <b>AverageComponent</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU2;</b><br>Inheritance: <a href="ITransferPostProcessCPU2.html">ITransferPostProcessCPU2</a> <a href="AverageComponent1dCPU2.html">AverageComponent1dCPU2</a> <br><table><tr><td colspan=2><h3>AverageComponent Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>AverageComponent1dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space, c_string Components)</td></tr><tr><td><br></td></tr></table>
constructor
AverageComponent1dCPU2

AverageComponent1dCPU2 (SmartPtr<ApproximationSpace> Approximation Space, c_string Components)
AverageComponent1dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space, c_string Components)<br>Constructor of class <b>AverageComponent1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
AverageComponent1dCPU3
ITransferPostProcessCPU3 
Classgroup <b>AverageComponent</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU3;</b><br>Inheritance: <a href="ITransferPostProcessCPU3.html">ITransferPostProcessCPU3</a> <a href="AverageComponent1dCPU3.html">AverageComponent1dCPU3</a> <br><table><tr><td colspan=2><h3>AverageComponent Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>AverageComponent1dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space, c_string Components)</td></tr><tr><td><br></td></tr></table>
constructor
AverageComponent1dCPU3

AverageComponent1dCPU3 (SmartPtr<ApproximationSpace> Approximation Space, c_string Components)
AverageComponent1dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space, c_string Components)<br>Constructor of class <b>AverageComponent1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
AverageComponent2dCPU1
ITransferPostProcessCPU1 
Classgroup <b>AverageComponent</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU1;</b><br>Inheritance: <a href="ITransferPostProcessCPU1.html">ITransferPostProcessCPU1</a> <a href="AverageComponent2dCPU1.html">AverageComponent2dCPU1</a> <br><table><tr><td colspan=2><h3>AverageComponent Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>AverageComponent2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space, c_string Components)</td></tr><tr><td><br></td></tr></table>
constructor
AverageComponent2dCPU1

AverageComponent2dCPU1 (SmartPtr<ApproximationSpace> Approximation Space, c_string Components)
AverageComponent2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space, c_string Components)<br>Constructor of class <b>AverageComponent2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
AverageComponent2dCPU2
ITransferPostProcessCPU2 
Classgroup <b>AverageComponent</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU2;</b><br>Inheritance: <a href="ITransferPostProcessCPU2.html">ITransferPostProcessCPU2</a> <a href="AverageComponent2dCPU2.html">AverageComponent2dCPU2</a> <br><table><tr><td colspan=2><h3>AverageComponent Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>AverageComponent2dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space, c_string Components)</td></tr><tr><td><br></td></tr></table>
constructor
AverageComponent2dCPU2

AverageComponent2dCPU2 (SmartPtr<ApproximationSpace> Approximation Space, c_string Components)
AverageComponent2dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space, c_string Components)<br>Constructor of class <b>AverageComponent2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
AverageComponent2dCPU3
ITransferPostProcessCPU3 
Classgroup <b>AverageComponent</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU3;</b><br>Inheritance: <a href="ITransferPostProcessCPU3.html">ITransferPostProcessCPU3</a> <a href="AverageComponent2dCPU3.html">AverageComponent2dCPU3</a> <br><table><tr><td colspan=2><h3>AverageComponent Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>AverageComponent2dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space, c_string Components)</td></tr><tr><td><br></td></tr></table>
constructor
AverageComponent2dCPU3

AverageComponent2dCPU3 (SmartPtr<ApproximationSpace> Approximation Space, c_string Components)
AverageComponent2dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space, c_string Components)<br>Constructor of class <b>AverageComponent2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
AverageComponent3dCPU1
ITransferPostProcessCPU1 
Classgroup <b>AverageComponent</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU1;</b><br>Inheritance: <a href="ITransferPostProcessCPU1.html">ITransferPostProcessCPU1</a> <a href="AverageComponent3dCPU1.html">AverageComponent3dCPU1</a> <br><table><tr><td colspan=2><h3>AverageComponent Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>AverageComponent3dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space, c_string Components)</td></tr><tr><td><br></td></tr></table>
constructor
AverageComponent3dCPU1

AverageComponent3dCPU1 (SmartPtr<ApproximationSpace> Approximation Space, c_string Components)
AverageComponent3dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space, c_string Components)<br>Constructor of class <b>AverageComponent3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
AverageComponent3dCPU2
ITransferPostProcessCPU2 
Classgroup <b>AverageComponent</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU2;</b><br>Inheritance: <a href="ITransferPostProcessCPU2.html">ITransferPostProcessCPU2</a> <a href="AverageComponent3dCPU2.html">AverageComponent3dCPU2</a> <br><table><tr><td colspan=2><h3>AverageComponent Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>AverageComponent3dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space, c_string Components)</td></tr><tr><td><br></td></tr></table>
constructor
AverageComponent3dCPU2

AverageComponent3dCPU2 (SmartPtr<ApproximationSpace> Approximation Space, c_string Components)
AverageComponent3dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space, c_string Components)<br>Constructor of class <b>AverageComponent3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
AverageComponent3dCPU3
ITransferPostProcessCPU3 
Classgroup <b>AverageComponent</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU3;</b><br>Inheritance: <a href="ITransferPostProcessCPU3.html">ITransferPostProcessCPU3</a> <a href="AverageComponent3dCPU3.html">AverageComponent3dCPU3</a> <br><table><tr><td colspan=2><h3>AverageComponent Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>AverageComponent3dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space, c_string Components)</td></tr><tr><td><br></td></tr></table>
constructor
AverageComponent3dCPU3

AverageComponent3dCPU3 (SmartPtr<ApproximationSpace> Approximation Space, c_string Components)
AverageComponent3dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space, c_string Components)<br>Constructor of class <b>AverageComponent3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
BDFCPU1
IAssembleCPU1 ITimeDiscretizationCPU1 
Classgroup <b>BDF</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b><br>class has constructor.  Tag <b>alg=CPU1;</b><br>Inheritance: <a href="IAssembleCPU1.html">IAssembleCPU1</a> <a href="ITimeDiscretizationCPU1.html">ITimeDiscretizationCPU1</a> <a href="BDFCPU1.html">BDFCPU1</a> <br><table><tr><td colspan=2><h3>BDF Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>BDFCPU1 (SmartPtr&lt;<a href="IDomainDiscretizationCPU1.html">IDomainDiscretization</a>&gt; Domain Discretization)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>BDFCPU1 (SmartPtr&lt;<a href="IDomainDiscretizationCPU1.html">IDomainDiscretization</a>&gt; Domain Discretization, integer Order)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>BDF Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_order (size_t Order)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ITimeDiscretization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>finish_step_elem (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>prepare_step (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; prepares the assembling of Defect/Jacobian for a time step, number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>prepare_step_elem (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stage (size_t stage)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited ITimeDiscretization Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>future_time ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the future time point (i.e. the one that will be computed)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_prev_steps ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_stages ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the number of stages<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IAssemble Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_matrix_rhs (<a href="MatrixCPU1.html">Matrix</a> *, <a href="VectorCPU1.html">Vector</a> *, std::vector&ltSmartPtr&lt;<a href="MultiIndex2.html">MultiIndex2</a>&gt; &gt, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on grid level.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_mass_matrix (<a href="MatrixCPU1.html">Matrix</a> *M, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles mass matrix on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_stiffness_matrix (<a href="MatrixCPU1.html">Matrix</a> *A, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles stiffness matrix on surface grid<br/></td></tr><tr><td><br></td></tr></table>
constructor
BDFCPU1

BDFCPU1 (SmartPtr<IDomainDiscretization> Domain Discretization)
BDFCPU1 (SmartPtr&lt;<a href="IDomainDiscretizationCPU1.html">IDomainDiscretization</a>&gt; Domain Discretization)<br>Constructor of class <b>BDFCPU1</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
constructor
BDFCPU1

BDFCPU1 (SmartPtr<IDomainDiscretization> Domain Discretization, integer Order)
BDFCPU1 (SmartPtr&lt;<a href="IDomainDiscretizationCPU1.html">IDomainDiscretization</a>&gt; Domain Discretization, integer Order)<br>Constructor of class <b>BDFCPU1</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
set_order
void
void set_order (size_t Order)
void set_order (size_t Order)<br><br>Member function of class <b>BDFCPU1</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
;
class
BDFCPU2
IAssembleCPU2 ITimeDiscretizationCPU2 
Classgroup <b>BDF</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b><br>class has constructor.  Tag <b>alg=CPU2;</b><br>Inheritance: <a href="IAssembleCPU2.html">IAssembleCPU2</a> <a href="ITimeDiscretizationCPU2.html">ITimeDiscretizationCPU2</a> <a href="BDFCPU2.html">BDFCPU2</a> <br><table><tr><td colspan=2><h3>BDF Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>BDFCPU2 (SmartPtr&lt;<a href="IDomainDiscretizationCPU1.html">IDomainDiscretization</a>&gt; Domain Discretization)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>BDFCPU2 (SmartPtr&lt;<a href="IDomainDiscretizationCPU1.html">IDomainDiscretization</a>&gt; Domain Discretization, integer Order)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>BDF Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_order (size_t Order)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ITimeDiscretization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>finish_step_elem (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>prepare_step (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; prepares the assembling of Defect/Jacobian for a time step, number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>prepare_step_elem (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stage (size_t stage)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited ITimeDiscretization Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>future_time ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the future time point (i.e. the one that will be computed)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_prev_steps ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_stages ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the number of stages<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IAssemble Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_matrix_rhs (<a href="MatrixCPU1.html">Matrix</a> *, <a href="VectorCPU1.html">Vector</a> *, std::vector&ltSmartPtr&lt;<a href="MultiIndex2.html">MultiIndex2</a>&gt; &gt, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on grid level.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_mass_matrix (<a href="MatrixCPU1.html">Matrix</a> *M, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles mass matrix on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_stiffness_matrix (<a href="MatrixCPU1.html">Matrix</a> *A, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles stiffness matrix on surface grid<br/></td></tr><tr><td><br></td></tr></table>
constructor
BDFCPU2

BDFCPU2 (SmartPtr<IDomainDiscretization> Domain Discretization)
BDFCPU2 (SmartPtr&lt;<a href="IDomainDiscretizationCPU1.html">IDomainDiscretization</a>&gt; Domain Discretization)<br>Constructor of class <b>BDFCPU2</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
constructor
BDFCPU2

BDFCPU2 (SmartPtr<IDomainDiscretization> Domain Discretization, integer Order)
BDFCPU2 (SmartPtr&lt;<a href="IDomainDiscretizationCPU1.html">IDomainDiscretization</a>&gt; Domain Discretization, integer Order)<br>Constructor of class <b>BDFCPU2</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
set_order
void
void set_order (size_t Order)
void set_order (size_t Order)<br><br>Member function of class <b>BDFCPU2</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
;
class
BDFCPU3
IAssembleCPU3 ITimeDiscretizationCPU3 
Classgroup <b>BDF</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b><br>class has constructor.  Tag <b>alg=CPU3;</b><br>Inheritance: <a href="IAssembleCPU3.html">IAssembleCPU3</a> <a href="ITimeDiscretizationCPU3.html">ITimeDiscretizationCPU3</a> <a href="BDFCPU3.html">BDFCPU3</a> <br><table><tr><td colspan=2><h3>BDF Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>BDFCPU3 (SmartPtr&lt;<a href="IDomainDiscretizationCPU1.html">IDomainDiscretization</a>&gt; Domain Discretization)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>BDFCPU3 (SmartPtr&lt;<a href="IDomainDiscretizationCPU1.html">IDomainDiscretization</a>&gt; Domain Discretization, integer Order)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>BDF Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_order (size_t Order)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ITimeDiscretization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>finish_step_elem (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>prepare_step (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; prepares the assembling of Defect/Jacobian for a time step, number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>prepare_step_elem (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stage (size_t stage)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited ITimeDiscretization Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>future_time ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the future time point (i.e. the one that will be computed)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_prev_steps ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_stages ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the number of stages<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IAssemble Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_matrix_rhs (<a href="MatrixCPU1.html">Matrix</a> *, <a href="VectorCPU1.html">Vector</a> *, std::vector&ltSmartPtr&lt;<a href="MultiIndex2.html">MultiIndex2</a>&gt; &gt, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on grid level.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_mass_matrix (<a href="MatrixCPU1.html">Matrix</a> *M, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles mass matrix on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_stiffness_matrix (<a href="MatrixCPU1.html">Matrix</a> *A, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles stiffness matrix on surface grid<br/></td></tr><tr><td><br></td></tr></table>
constructor
BDFCPU3

BDFCPU3 (SmartPtr<IDomainDiscretization> Domain Discretization)
BDFCPU3 (SmartPtr&lt;<a href="IDomainDiscretizationCPU1.html">IDomainDiscretization</a>&gt; Domain Discretization)<br>Constructor of class <b>BDFCPU3</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
constructor
BDFCPU3

BDFCPU3 (SmartPtr<IDomainDiscretization> Domain Discretization, integer Order)
BDFCPU3 (SmartPtr&lt;<a href="IDomainDiscretizationCPU1.html">IDomainDiscretization</a>&gt; Domain Discretization, integer Order)<br>Constructor of class <b>BDFCPU3</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
set_order
void
void set_order (size_t Order)
void set_order (size_t Order)<br><br>Member function of class <b>BDFCPU3</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
;
class
BackwardGaussSeidelCPU1
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 ILinearIteratorCPU1 IPreconditionerCPU1 
Classgroup <b>BackwardGaussSeidel</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>alg=CPU1;</b><br>Backward Gauss Seidel Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="IPreconditionerCPU1.html">IPreconditionerCPU1</a> <a href="BackwardGaussSeidelCPU1.html">BackwardGaussSeidelCPU1</a> <br><table><tr><td colspan=2><h3>BackwardGaussSeidel Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>BackwardGaussSeidelCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
BackwardGaussSeidelCPU1

BackwardGaussSeidelCPU1 ()
BackwardGaussSeidelCPU1 ()<br>Constructor of class <b>BackwardGaussSeidelCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
BackwardGaussSeidelCPU2
VectorDebugWritingObjectCPU2 DebugWritingObjectCPU2 ILinearIteratorCPU2 IPreconditionerCPU2 
Classgroup <b>BackwardGaussSeidel</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>alg=CPU2;</b><br>Backward Gauss Seidel Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU2.html">VectorDebugWritingObjectCPU2</a> <a href="DebugWritingObjectCPU2.html">DebugWritingObjectCPU2</a> <a href="ILinearIteratorCPU2.html">ILinearIteratorCPU2</a> <a href="IPreconditionerCPU2.html">IPreconditionerCPU2</a> <a href="BackwardGaussSeidelCPU2.html">BackwardGaussSeidelCPU2</a> <br><table><tr><td colspan=2><h3>BackwardGaussSeidel Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>BackwardGaussSeidelCPU2 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
BackwardGaussSeidelCPU2

BackwardGaussSeidelCPU2 ()
BackwardGaussSeidelCPU2 ()<br>Constructor of class <b>BackwardGaussSeidelCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
BackwardGaussSeidelCPU3
VectorDebugWritingObjectCPU3 DebugWritingObjectCPU3 ILinearIteratorCPU3 IPreconditionerCPU3 
Classgroup <b>BackwardGaussSeidel</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>alg=CPU3;</b><br>Backward Gauss Seidel Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU3.html">VectorDebugWritingObjectCPU3</a> <a href="DebugWritingObjectCPU3.html">DebugWritingObjectCPU3</a> <a href="ILinearIteratorCPU3.html">ILinearIteratorCPU3</a> <a href="IPreconditionerCPU3.html">IPreconditionerCPU3</a> <a href="BackwardGaussSeidelCPU3.html">BackwardGaussSeidelCPU3</a> <br><table><tr><td colspan=2><h3>BackwardGaussSeidel Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>BackwardGaussSeidelCPU3 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
BackwardGaussSeidelCPU3

BackwardGaussSeidelCPU3 ()
BackwardGaussSeidelCPU3 ()<br>Constructor of class <b>BackwardGaussSeidelCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
BiCGStabCPU1
VectorDebugWritingObjectCPU1 ILinearOperatorInverseCPU1 IPreconditionedLinearOperatorInverseCPU1 
Classgroup <b>BiCGStab</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has constructor.  Tag <b>alg=CPU1;</b><br>BiCGStab Solver<br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverseCPU1</a> <a href="IPreconditionedLinearOperatorInverseCPU1.html">IPreconditionedLinearOperatorInverseCPU1</a> <a href="BiCGStabCPU1.html">BiCGStabCPU1</a> <br><table><tr><td colspan=2><h3>BiCGStab Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>BiCGStabCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IPreconditionedLinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_compute_fresh_defect_when_finished (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_preconditioner (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Preconditioner)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u, const <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u), f remains constant<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply_return_defect (<a href="VectorCPU1.html">Vector</a> *u, <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u),  f := f - A*u becomes new defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; , const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited ILinearOperatorInverse Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; </td><td class="memItemRight" valign=bottom>convergence_check ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
BiCGStabCPU1

BiCGStabCPU1 ()
BiCGStabCPU1 ()<br>Constructor of class <b>BiCGStabCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
;
class
BiCGStabCPU2
VectorDebugWritingObjectCPU2 ILinearOperatorInverseCPU2 IPreconditionedLinearOperatorInverseCPU2 
Classgroup <b>BiCGStab</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has constructor.  Tag <b>alg=CPU2;</b><br>BiCGStab Solver<br>Inheritance: <a href="VectorDebugWritingObjectCPU2.html">VectorDebugWritingObjectCPU2</a> <a href="ILinearOperatorInverseCPU2.html">ILinearOperatorInverseCPU2</a> <a href="IPreconditionedLinearOperatorInverseCPU2.html">IPreconditionedLinearOperatorInverseCPU2</a> <a href="BiCGStabCPU2.html">BiCGStabCPU2</a> <br><table><tr><td colspan=2><h3>BiCGStab Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>BiCGStabCPU2 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IPreconditionedLinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_compute_fresh_defect_when_finished (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_preconditioner (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Preconditioner)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u, const <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u), f remains constant<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply_return_defect (<a href="VectorCPU1.html">Vector</a> *u, <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u),  f := f - A*u becomes new defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; , const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited ILinearOperatorInverse Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; </td><td class="memItemRight" valign=bottom>convergence_check ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
BiCGStabCPU2

BiCGStabCPU2 ()
BiCGStabCPU2 ()<br>Constructor of class <b>BiCGStabCPU2</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
;
class
BiCGStabCPU3
VectorDebugWritingObjectCPU3 ILinearOperatorInverseCPU3 IPreconditionedLinearOperatorInverseCPU3 
Classgroup <b>BiCGStab</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has constructor.  Tag <b>alg=CPU3;</b><br>BiCGStab Solver<br>Inheritance: <a href="VectorDebugWritingObjectCPU3.html">VectorDebugWritingObjectCPU3</a> <a href="ILinearOperatorInverseCPU3.html">ILinearOperatorInverseCPU3</a> <a href="IPreconditionedLinearOperatorInverseCPU3.html">IPreconditionedLinearOperatorInverseCPU3</a> <a href="BiCGStabCPU3.html">BiCGStabCPU3</a> <br><table><tr><td colspan=2><h3>BiCGStab Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>BiCGStabCPU3 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IPreconditionedLinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_compute_fresh_defect_when_finished (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_preconditioner (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Preconditioner)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u, const <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u), f remains constant<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply_return_defect (<a href="VectorCPU1.html">Vector</a> *u, <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u),  f := f - A*u becomes new defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; , const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited ILinearOperatorInverse Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; </td><td class="memItemRight" valign=bottom>convergence_check ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
BiCGStabCPU3

BiCGStabCPU3 ()
BiCGStabCPU3 ()<br>Constructor of class <b>BiCGStabCPU3</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
;
class
CGCPU1
VectorDebugWritingObjectCPU1 ILinearOperatorInverseCPU1 IPreconditionedLinearOperatorInverseCPU1 
Classgroup <b>CG</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has constructor.  Tag <b>alg=CPU1;</b><br>Conjugate Gradient Solver<br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverseCPU1</a> <a href="IPreconditionedLinearOperatorInverseCPU1.html">IPreconditionedLinearOperatorInverseCPU1</a> <a href="CGCPU1.html">CGCPU1</a> <br><table><tr><td colspan=2><h3>CG Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>CGCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IPreconditionedLinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_compute_fresh_defect_when_finished (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_preconditioner (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Preconditioner)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u, const <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u), f remains constant<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply_return_defect (<a href="VectorCPU1.html">Vector</a> *u, <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u),  f := f - A*u becomes new defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; , const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited ILinearOperatorInverse Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; </td><td class="memItemRight" valign=bottom>convergence_check ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
CGCPU1

CGCPU1 ()
CGCPU1 ()<br>Constructor of class <b>CGCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
;
class
CGCPU2
VectorDebugWritingObjectCPU2 ILinearOperatorInverseCPU2 IPreconditionedLinearOperatorInverseCPU2 
Classgroup <b>CG</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has constructor.  Tag <b>alg=CPU2;</b><br>Conjugate Gradient Solver<br>Inheritance: <a href="VectorDebugWritingObjectCPU2.html">VectorDebugWritingObjectCPU2</a> <a href="ILinearOperatorInverseCPU2.html">ILinearOperatorInverseCPU2</a> <a href="IPreconditionedLinearOperatorInverseCPU2.html">IPreconditionedLinearOperatorInverseCPU2</a> <a href="CGCPU2.html">CGCPU2</a> <br><table><tr><td colspan=2><h3>CG Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>CGCPU2 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IPreconditionedLinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_compute_fresh_defect_when_finished (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_preconditioner (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Preconditioner)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u, const <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u), f remains constant<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply_return_defect (<a href="VectorCPU1.html">Vector</a> *u, <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u),  f := f - A*u becomes new defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; , const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited ILinearOperatorInverse Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; </td><td class="memItemRight" valign=bottom>convergence_check ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
CGCPU2

CGCPU2 ()
CGCPU2 ()<br>Constructor of class <b>CGCPU2</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
;
class
CGCPU3
VectorDebugWritingObjectCPU3 ILinearOperatorInverseCPU3 IPreconditionedLinearOperatorInverseCPU3 
Classgroup <b>CG</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has constructor.  Tag <b>alg=CPU3;</b><br>Conjugate Gradient Solver<br>Inheritance: <a href="VectorDebugWritingObjectCPU3.html">VectorDebugWritingObjectCPU3</a> <a href="ILinearOperatorInverseCPU3.html">ILinearOperatorInverseCPU3</a> <a href="IPreconditionedLinearOperatorInverseCPU3.html">IPreconditionedLinearOperatorInverseCPU3</a> <a href="CGCPU3.html">CGCPU3</a> <br><table><tr><td colspan=2><h3>CG Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>CGCPU3 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IPreconditionedLinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_compute_fresh_defect_when_finished (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_preconditioner (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Preconditioner)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u, const <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u), f remains constant<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply_return_defect (<a href="VectorCPU1.html">Vector</a> *u, <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u),  f := f - A*u becomes new defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; , const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited ILinearOperatorInverse Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; </td><td class="memItemRight" valign=bottom>convergence_check ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
CGCPU3

CGCPU3 ()
CGCPU3 ()<br>Constructor of class <b>CGCPU3</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
;
class
CRDynamicTurbViscData2dCPU1
INewtonUpdate ICplUserData2d UserNumber2d 
Classgroup <b>CRDynamicTurbViscData</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU1;</b><br>Inheritance: <a href="INewtonUpdate.html">INewtonUpdate</a> <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserNumber2d.html">UserNumber2d</a> <a href="CRDynamicTurbViscData2dCPU1.html">CRDynamicTurbViscData2dCPU1</a> <br><table><tr><td colspan=2><h3>CRDynamicTurbViscData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>CRDynamicTurbViscData2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>CRDynamicTurbViscData Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (number KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (c_string KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_space_filter (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_time_filter (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_time_filter_eps (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_turbulence_zero_bnd (c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
CRDynamicTurbViscData2dCPU1

CRDynamicTurbViscData2dCPU1 (SmartPtr<ApproximationSpace> Approximation space, grid function, SmartPtr<GridFunction> )
CRDynamicTurbViscData2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )<br>Constructor of class <b>CRDynamicTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (SmartPtr<UserNumber> KinematicViscosity)
void set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)<br><br>Member function of class <b>CRDynamicTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (number KinematicViscosity)
void set_kinematic_viscosity (number KinematicViscosity)<br><br>Member function of class <b>CRDynamicTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (c_string KinematicViscosity)
void set_kinematic_viscosity (c_string KinematicViscosity)<br><br>Member function of class <b>CRDynamicTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_turbulence_zero_bnd
void
void set_turbulence_zero_bnd (c_string )
void set_turbulence_zero_bnd (c_string )<br><br>Member function of class <b>CRDynamicTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_time_filter
void
void set_time_filter (bool )
void set_time_filter (bool )<br><br>Member function of class <b>CRDynamicTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_time_filter_eps
void
void set_time_filter_eps (number )
void set_time_filter_eps (number )<br><br>Member function of class <b>CRDynamicTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_space_filter
void
void set_space_filter (bool )
void set_space_filter (bool )<br><br>Member function of class <b>CRDynamicTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
CRDynamicTurbViscData2dCPU2
INewtonUpdate ICplUserData2d UserNumber2d 
Classgroup <b>CRDynamicTurbViscData</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU2;</b><br>Inheritance: <a href="INewtonUpdate.html">INewtonUpdate</a> <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserNumber2d.html">UserNumber2d</a> <a href="CRDynamicTurbViscData2dCPU2.html">CRDynamicTurbViscData2dCPU2</a> <br><table><tr><td colspan=2><h3>CRDynamicTurbViscData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>CRDynamicTurbViscData2dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>CRDynamicTurbViscData Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (number KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (c_string KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_space_filter (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_time_filter (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_time_filter_eps (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_turbulence_zero_bnd (c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
CRDynamicTurbViscData2dCPU2

CRDynamicTurbViscData2dCPU2 (SmartPtr<ApproximationSpace> Approximation space, grid function, SmartPtr<GridFunction> )
CRDynamicTurbViscData2dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )<br>Constructor of class <b>CRDynamicTurbViscData2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (SmartPtr<UserNumber> KinematicViscosity)
void set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)<br><br>Member function of class <b>CRDynamicTurbViscData2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (number KinematicViscosity)
void set_kinematic_viscosity (number KinematicViscosity)<br><br>Member function of class <b>CRDynamicTurbViscData2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (c_string KinematicViscosity)
void set_kinematic_viscosity (c_string KinematicViscosity)<br><br>Member function of class <b>CRDynamicTurbViscData2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_turbulence_zero_bnd
void
void set_turbulence_zero_bnd (c_string )
void set_turbulence_zero_bnd (c_string )<br><br>Member function of class <b>CRDynamicTurbViscData2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_time_filter
void
void set_time_filter (bool )
void set_time_filter (bool )<br><br>Member function of class <b>CRDynamicTurbViscData2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_time_filter_eps
void
void set_time_filter_eps (number )
void set_time_filter_eps (number )<br><br>Member function of class <b>CRDynamicTurbViscData2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_space_filter
void
void set_space_filter (bool )
void set_space_filter (bool )<br><br>Member function of class <b>CRDynamicTurbViscData2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
CRDynamicTurbViscData2dCPU3
INewtonUpdate ICplUserData2d UserNumber2d 
Classgroup <b>CRDynamicTurbViscData</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU3;</b><br>Inheritance: <a href="INewtonUpdate.html">INewtonUpdate</a> <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserNumber2d.html">UserNumber2d</a> <a href="CRDynamicTurbViscData2dCPU3.html">CRDynamicTurbViscData2dCPU3</a> <br><table><tr><td colspan=2><h3>CRDynamicTurbViscData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>CRDynamicTurbViscData2dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>CRDynamicTurbViscData Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (number KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (c_string KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_space_filter (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_time_filter (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_time_filter_eps (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_turbulence_zero_bnd (c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
CRDynamicTurbViscData2dCPU3

CRDynamicTurbViscData2dCPU3 (SmartPtr<ApproximationSpace> Approximation space, grid function, SmartPtr<GridFunction> )
CRDynamicTurbViscData2dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )<br>Constructor of class <b>CRDynamicTurbViscData2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (SmartPtr<UserNumber> KinematicViscosity)
void set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)<br><br>Member function of class <b>CRDynamicTurbViscData2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (number KinematicViscosity)
void set_kinematic_viscosity (number KinematicViscosity)<br><br>Member function of class <b>CRDynamicTurbViscData2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (c_string KinematicViscosity)
void set_kinematic_viscosity (c_string KinematicViscosity)<br><br>Member function of class <b>CRDynamicTurbViscData2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_turbulence_zero_bnd
void
void set_turbulence_zero_bnd (c_string )
void set_turbulence_zero_bnd (c_string )<br><br>Member function of class <b>CRDynamicTurbViscData2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_time_filter
void
void set_time_filter (bool )
void set_time_filter (bool )<br><br>Member function of class <b>CRDynamicTurbViscData2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_time_filter_eps
void
void set_time_filter_eps (number )
void set_time_filter_eps (number )<br><br>Member function of class <b>CRDynamicTurbViscData2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_space_filter
void
void set_space_filter (bool )
void set_space_filter (bool )<br><br>Member function of class <b>CRDynamicTurbViscData2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
CRDynamicTurbViscData3dCPU1
INewtonUpdate ICplUserData3d UserNumber3d 
Classgroup <b>CRDynamicTurbViscData</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU1;</b><br>Inheritance: <a href="INewtonUpdate.html">INewtonUpdate</a> <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserNumber3d.html">UserNumber3d</a> <a href="CRDynamicTurbViscData3dCPU1.html">CRDynamicTurbViscData3dCPU1</a> <br><table><tr><td colspan=2><h3>CRDynamicTurbViscData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>CRDynamicTurbViscData3dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>CRDynamicTurbViscData Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (number KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (c_string KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_space_filter (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_time_filter (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_time_filter_eps (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_turbulence_zero_bnd (c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
CRDynamicTurbViscData3dCPU1

CRDynamicTurbViscData3dCPU1 (SmartPtr<ApproximationSpace> Approximation space, grid function, SmartPtr<GridFunction> )
CRDynamicTurbViscData3dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )<br>Constructor of class <b>CRDynamicTurbViscData3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (SmartPtr<UserNumber> KinematicViscosity)
void set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)<br><br>Member function of class <b>CRDynamicTurbViscData3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (number KinematicViscosity)
void set_kinematic_viscosity (number KinematicViscosity)<br><br>Member function of class <b>CRDynamicTurbViscData3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (c_string KinematicViscosity)
void set_kinematic_viscosity (c_string KinematicViscosity)<br><br>Member function of class <b>CRDynamicTurbViscData3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_turbulence_zero_bnd
void
void set_turbulence_zero_bnd (c_string )
void set_turbulence_zero_bnd (c_string )<br><br>Member function of class <b>CRDynamicTurbViscData3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_time_filter
void
void set_time_filter (bool )
void set_time_filter (bool )<br><br>Member function of class <b>CRDynamicTurbViscData3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_time_filter_eps
void
void set_time_filter_eps (number )
void set_time_filter_eps (number )<br><br>Member function of class <b>CRDynamicTurbViscData3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_space_filter
void
void set_space_filter (bool )
void set_space_filter (bool )<br><br>Member function of class <b>CRDynamicTurbViscData3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
CRDynamicTurbViscData3dCPU2
INewtonUpdate ICplUserData3d UserNumber3d 
Classgroup <b>CRDynamicTurbViscData</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU2;</b><br>Inheritance: <a href="INewtonUpdate.html">INewtonUpdate</a> <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserNumber3d.html">UserNumber3d</a> <a href="CRDynamicTurbViscData3dCPU2.html">CRDynamicTurbViscData3dCPU2</a> <br><table><tr><td colspan=2><h3>CRDynamicTurbViscData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>CRDynamicTurbViscData3dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>CRDynamicTurbViscData Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (number KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (c_string KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_space_filter (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_time_filter (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_time_filter_eps (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_turbulence_zero_bnd (c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
CRDynamicTurbViscData3dCPU2

CRDynamicTurbViscData3dCPU2 (SmartPtr<ApproximationSpace> Approximation space, grid function, SmartPtr<GridFunction> )
CRDynamicTurbViscData3dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )<br>Constructor of class <b>CRDynamicTurbViscData3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (SmartPtr<UserNumber> KinematicViscosity)
void set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)<br><br>Member function of class <b>CRDynamicTurbViscData3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (number KinematicViscosity)
void set_kinematic_viscosity (number KinematicViscosity)<br><br>Member function of class <b>CRDynamicTurbViscData3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (c_string KinematicViscosity)
void set_kinematic_viscosity (c_string KinematicViscosity)<br><br>Member function of class <b>CRDynamicTurbViscData3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_turbulence_zero_bnd
void
void set_turbulence_zero_bnd (c_string )
void set_turbulence_zero_bnd (c_string )<br><br>Member function of class <b>CRDynamicTurbViscData3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_time_filter
void
void set_time_filter (bool )
void set_time_filter (bool )<br><br>Member function of class <b>CRDynamicTurbViscData3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_time_filter_eps
void
void set_time_filter_eps (number )
void set_time_filter_eps (number )<br><br>Member function of class <b>CRDynamicTurbViscData3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_space_filter
void
void set_space_filter (bool )
void set_space_filter (bool )<br><br>Member function of class <b>CRDynamicTurbViscData3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
CRDynamicTurbViscData3dCPU3
INewtonUpdate ICplUserData3d UserNumber3d 
Classgroup <b>CRDynamicTurbViscData</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU3;</b><br>Inheritance: <a href="INewtonUpdate.html">INewtonUpdate</a> <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserNumber3d.html">UserNumber3d</a> <a href="CRDynamicTurbViscData3dCPU3.html">CRDynamicTurbViscData3dCPU3</a> <br><table><tr><td colspan=2><h3>CRDynamicTurbViscData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>CRDynamicTurbViscData3dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>CRDynamicTurbViscData Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (number KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (c_string KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_space_filter (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_time_filter (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_time_filter_eps (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_turbulence_zero_bnd (c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
CRDynamicTurbViscData3dCPU3

CRDynamicTurbViscData3dCPU3 (SmartPtr<ApproximationSpace> Approximation space, grid function, SmartPtr<GridFunction> )
CRDynamicTurbViscData3dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )<br>Constructor of class <b>CRDynamicTurbViscData3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (SmartPtr<UserNumber> KinematicViscosity)
void set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)<br><br>Member function of class <b>CRDynamicTurbViscData3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (number KinematicViscosity)
void set_kinematic_viscosity (number KinematicViscosity)<br><br>Member function of class <b>CRDynamicTurbViscData3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (c_string KinematicViscosity)
void set_kinematic_viscosity (c_string KinematicViscosity)<br><br>Member function of class <b>CRDynamicTurbViscData3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_turbulence_zero_bnd
void
void set_turbulence_zero_bnd (c_string )
void set_turbulence_zero_bnd (c_string )<br><br>Member function of class <b>CRDynamicTurbViscData3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_time_filter
void
void set_time_filter (bool )
void set_time_filter (bool )<br><br>Member function of class <b>CRDynamicTurbViscData3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_time_filter_eps
void
void set_time_filter_eps (number )
void set_time_filter_eps (number )<br><br>Member function of class <b>CRDynamicTurbViscData3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_space_filter
void
void set_space_filter (bool )
void set_space_filter (bool )<br><br>Member function of class <b>CRDynamicTurbViscData3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
CRILUTCPU1
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 ILinearIteratorCPU1 IPreconditionerCPU1 
Classgroup <b>CRILUT</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>alg=CPU1;</b><br>Incomplete LU Decomposition with threshold<br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="IPreconditionerCPU1.html">IPreconditionerCPU1</a> <a href="CRILUTCPU1.html">CRILUTCPU1</a> <br><table><tr><td colspan=2><h3>CRILUT Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>CRILUTCPU1 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>CRILUTCPU1 (number threshold parameter)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>CRILUTCPU1 (number threshold parameters, number , number , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>CRILUT Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_info (bool info)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets storage information output<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_threshold (number threshold, number , number , number )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets threshold of incomplete LU factorisation<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_threshold (number threshold)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets threshold of incomplete LU factorisation<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
CRILUTCPU1

CRILUTCPU1 ()
CRILUTCPU1 ()<br>Constructor of class <b>CRILUTCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
constructor
CRILUTCPU1

CRILUTCPU1 (number threshold parameter)
CRILUTCPU1 (number threshold parameter)<br>Constructor of class <b>CRILUTCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
constructor
CRILUTCPU1

CRILUTCPU1 (number threshold parameters, number , number , number )
CRILUTCPU1 (number threshold parameters, number , number , number )<br>Constructor of class <b>CRILUTCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_threshold
void
void set_threshold (number threshold, number , number , number )
void set_threshold (number threshold, number , number , number )<br><br>Member function of class <b>CRILUTCPU1</b><br>tooltip: sets threshold of incomplete LU factorisation<br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_threshold
void
void set_threshold (number threshold)
void set_threshold (number threshold)<br><br>Member function of class <b>CRILUTCPU1</b><br>tooltip: sets threshold of incomplete LU factorisation<br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_info
void
void set_info (bool info)
void set_info (bool info)<br><br>Member function of class <b>CRILUTCPU1</b><br>tooltip: sets storage information output<br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
CRILUTCPU2
VectorDebugWritingObjectCPU2 DebugWritingObjectCPU2 ILinearIteratorCPU2 IPreconditionerCPU2 
Classgroup <b>CRILUT</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>alg=CPU2;</b><br>Incomplete LU Decomposition with threshold<br>Inheritance: <a href="VectorDebugWritingObjectCPU2.html">VectorDebugWritingObjectCPU2</a> <a href="DebugWritingObjectCPU2.html">DebugWritingObjectCPU2</a> <a href="ILinearIteratorCPU2.html">ILinearIteratorCPU2</a> <a href="IPreconditionerCPU2.html">IPreconditionerCPU2</a> <a href="CRILUTCPU2.html">CRILUTCPU2</a> <br><table><tr><td colspan=2><h3>CRILUT Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>CRILUTCPU2 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>CRILUTCPU2 (number threshold parameter)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>CRILUTCPU2 (number threshold parameters, number , number , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>CRILUT Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_info (bool info)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets storage information output<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_threshold (number threshold, number , number , number )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets threshold of incomplete LU factorisation<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_threshold (number threshold)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets threshold of incomplete LU factorisation<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
CRILUTCPU2

CRILUTCPU2 ()
CRILUTCPU2 ()<br>Constructor of class <b>CRILUTCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
constructor
CRILUTCPU2

CRILUTCPU2 (number threshold parameter)
CRILUTCPU2 (number threshold parameter)<br>Constructor of class <b>CRILUTCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
constructor
CRILUTCPU2

CRILUTCPU2 (number threshold parameters, number , number , number )
CRILUTCPU2 (number threshold parameters, number , number , number )<br>Constructor of class <b>CRILUTCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_threshold
void
void set_threshold (number threshold, number , number , number )
void set_threshold (number threshold, number , number , number )<br><br>Member function of class <b>CRILUTCPU2</b><br>tooltip: sets threshold of incomplete LU factorisation<br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_threshold
void
void set_threshold (number threshold)
void set_threshold (number threshold)<br><br>Member function of class <b>CRILUTCPU2</b><br>tooltip: sets threshold of incomplete LU factorisation<br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_info
void
void set_info (bool info)
void set_info (bool info)<br><br>Member function of class <b>CRILUTCPU2</b><br>tooltip: sets storage information output<br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
CRILUTCPU3
VectorDebugWritingObjectCPU3 DebugWritingObjectCPU3 ILinearIteratorCPU3 IPreconditionerCPU3 
Classgroup <b>CRILUT</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>alg=CPU3;</b><br>Incomplete LU Decomposition with threshold<br>Inheritance: <a href="VectorDebugWritingObjectCPU3.html">VectorDebugWritingObjectCPU3</a> <a href="DebugWritingObjectCPU3.html">DebugWritingObjectCPU3</a> <a href="ILinearIteratorCPU3.html">ILinearIteratorCPU3</a> <a href="IPreconditionerCPU3.html">IPreconditionerCPU3</a> <a href="CRILUTCPU3.html">CRILUTCPU3</a> <br><table><tr><td colspan=2><h3>CRILUT Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>CRILUTCPU3 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>CRILUTCPU3 (number threshold parameter)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>CRILUTCPU3 (number threshold parameters, number , number , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>CRILUT Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_info (bool info)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets storage information output<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_threshold (number threshold, number , number , number )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets threshold of incomplete LU factorisation<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_threshold (number threshold)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets threshold of incomplete LU factorisation<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
CRILUTCPU3

CRILUTCPU3 ()
CRILUTCPU3 ()<br>Constructor of class <b>CRILUTCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
constructor
CRILUTCPU3

CRILUTCPU3 (number threshold parameter)
CRILUTCPU3 (number threshold parameter)<br>Constructor of class <b>CRILUTCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
constructor
CRILUTCPU3

CRILUTCPU3 (number threshold parameters, number , number , number )
CRILUTCPU3 (number threshold parameters, number , number , number )<br>Constructor of class <b>CRILUTCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_threshold
void
void set_threshold (number threshold, number , number , number )
void set_threshold (number threshold, number , number , number )<br><br>Member function of class <b>CRILUTCPU3</b><br>tooltip: sets threshold of incomplete LU factorisation<br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_threshold
void
void set_threshold (number threshold)
void set_threshold (number threshold)<br><br>Member function of class <b>CRILUTCPU3</b><br>tooltip: sets threshold of incomplete LU factorisation<br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_info
void
void set_info (bool info)
void set_info (bool info)<br><br>Member function of class <b>CRILUTCPU3</b><br>tooltip: sets storage information output<br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
CRNavierStokesSymBC2d
IElemDisc2d 
Classgroup <b>CRNavierStokesSymBC</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="CRNavierStokesSymBC2d.html">CRNavierStokesSymBC2d</a> <br><table><tr><td colspan=2><h3>CRNavierStokesSymBC Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>CRNavierStokesSymBC2d (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; MasterDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>CRNavierStokesSymBC Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
CRNavierStokesSymBC2d

CRNavierStokesSymBC2d (SmartPtr<NavierStokesBase> MasterDisc)
CRNavierStokesSymBC2d (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; MasterDisc)<br>Constructor of class <b>CRNavierStokesSymBC2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
add
void
void add (c_string Subset(s))
void add (c_string Subset(s))<br><br>Member function of class <b>CRNavierStokesSymBC2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
CRNavierStokesSymBC3d
IElemDisc3d 
Classgroup <b>CRNavierStokesSymBC</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IElemDisc3d.html">IElemDisc3d</a> <a href="CRNavierStokesSymBC3d.html">CRNavierStokesSymBC3d</a> <br><table><tr><td colspan=2><h3>CRNavierStokesSymBC Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>CRNavierStokesSymBC3d (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; MasterDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>CRNavierStokesSymBC Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
CRNavierStokesSymBC3d

CRNavierStokesSymBC3d (SmartPtr<NavierStokesBase> MasterDisc)
CRNavierStokesSymBC3d (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; MasterDisc)<br>Constructor of class <b>CRNavierStokesSymBC3d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
add
void
void add (c_string Subset(s))
void add (c_string Subset(s))<br><br>Member function of class <b>CRNavierStokesSymBC3d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
CRSmagorinskyTurbViscData2dCPU1
INewtonUpdate ICplUserData2d UserNumber2d 
Classgroup <b>CRSmagorinskyTurbViscData</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU1;</b><br>Inheritance: <a href="INewtonUpdate.html">INewtonUpdate</a> <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserNumber2d.html">UserNumber2d</a> <a href="CRSmagorinskyTurbViscData2dCPU1.html">CRSmagorinskyTurbViscData2dCPU1</a> <br><table><tr><td colspan=2><h3>CRSmagorinskyTurbViscData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>CRSmagorinskyTurbViscData2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, model parameter, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>CRSmagorinskyTurbViscData Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (number KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (c_string KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_model_parameter (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_turbulence_zero_bnd (c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
CRSmagorinskyTurbViscData2dCPU1

CRSmagorinskyTurbViscData2dCPU1 (SmartPtr<ApproximationSpace> Approximation space, grid function, model parameter, SmartPtr<GridFunction> , number )
CRSmagorinskyTurbViscData2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, model parameter, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , number )<br>Constructor of class <b>CRSmagorinskyTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_model_parameter
void
void set_model_parameter (number )
void set_model_parameter (number )<br><br>Member function of class <b>CRSmagorinskyTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (SmartPtr<UserNumber> KinematicViscosity)
void set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)<br><br>Member function of class <b>CRSmagorinskyTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (number KinematicViscosity)
void set_kinematic_viscosity (number KinematicViscosity)<br><br>Member function of class <b>CRSmagorinskyTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (c_string KinematicViscosity)
void set_kinematic_viscosity (c_string KinematicViscosity)<br><br>Member function of class <b>CRSmagorinskyTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_turbulence_zero_bnd
void
void set_turbulence_zero_bnd (c_string )
void set_turbulence_zero_bnd (c_string )<br><br>Member function of class <b>CRSmagorinskyTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
CRSmagorinskyTurbViscData2dCPU2
INewtonUpdate ICplUserData2d UserNumber2d 
Classgroup <b>CRSmagorinskyTurbViscData</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU2;</b><br>Inheritance: <a href="INewtonUpdate.html">INewtonUpdate</a> <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserNumber2d.html">UserNumber2d</a> <a href="CRSmagorinskyTurbViscData2dCPU2.html">CRSmagorinskyTurbViscData2dCPU2</a> <br><table><tr><td colspan=2><h3>CRSmagorinskyTurbViscData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>CRSmagorinskyTurbViscData2dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, model parameter, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>CRSmagorinskyTurbViscData Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (number KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (c_string KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_model_parameter (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_turbulence_zero_bnd (c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
CRSmagorinskyTurbViscData2dCPU2

CRSmagorinskyTurbViscData2dCPU2 (SmartPtr<ApproximationSpace> Approximation space, grid function, model parameter, SmartPtr<GridFunction> , number )
CRSmagorinskyTurbViscData2dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, model parameter, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , number )<br>Constructor of class <b>CRSmagorinskyTurbViscData2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_model_parameter
void
void set_model_parameter (number )
void set_model_parameter (number )<br><br>Member function of class <b>CRSmagorinskyTurbViscData2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (SmartPtr<UserNumber> KinematicViscosity)
void set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)<br><br>Member function of class <b>CRSmagorinskyTurbViscData2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (number KinematicViscosity)
void set_kinematic_viscosity (number KinematicViscosity)<br><br>Member function of class <b>CRSmagorinskyTurbViscData2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (c_string KinematicViscosity)
void set_kinematic_viscosity (c_string KinematicViscosity)<br><br>Member function of class <b>CRSmagorinskyTurbViscData2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_turbulence_zero_bnd
void
void set_turbulence_zero_bnd (c_string )
void set_turbulence_zero_bnd (c_string )<br><br>Member function of class <b>CRSmagorinskyTurbViscData2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
CRSmagorinskyTurbViscData2dCPU3
INewtonUpdate ICplUserData2d UserNumber2d 
Classgroup <b>CRSmagorinskyTurbViscData</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU3;</b><br>Inheritance: <a href="INewtonUpdate.html">INewtonUpdate</a> <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserNumber2d.html">UserNumber2d</a> <a href="CRSmagorinskyTurbViscData2dCPU3.html">CRSmagorinskyTurbViscData2dCPU3</a> <br><table><tr><td colspan=2><h3>CRSmagorinskyTurbViscData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>CRSmagorinskyTurbViscData2dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, model parameter, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>CRSmagorinskyTurbViscData Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (number KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (c_string KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_model_parameter (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_turbulence_zero_bnd (c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
CRSmagorinskyTurbViscData2dCPU3

CRSmagorinskyTurbViscData2dCPU3 (SmartPtr<ApproximationSpace> Approximation space, grid function, model parameter, SmartPtr<GridFunction> , number )
CRSmagorinskyTurbViscData2dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, model parameter, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , number )<br>Constructor of class <b>CRSmagorinskyTurbViscData2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_model_parameter
void
void set_model_parameter (number )
void set_model_parameter (number )<br><br>Member function of class <b>CRSmagorinskyTurbViscData2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (SmartPtr<UserNumber> KinematicViscosity)
void set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)<br><br>Member function of class <b>CRSmagorinskyTurbViscData2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (number KinematicViscosity)
void set_kinematic_viscosity (number KinematicViscosity)<br><br>Member function of class <b>CRSmagorinskyTurbViscData2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (c_string KinematicViscosity)
void set_kinematic_viscosity (c_string KinematicViscosity)<br><br>Member function of class <b>CRSmagorinskyTurbViscData2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_turbulence_zero_bnd
void
void set_turbulence_zero_bnd (c_string )
void set_turbulence_zero_bnd (c_string )<br><br>Member function of class <b>CRSmagorinskyTurbViscData2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
CRSmagorinskyTurbViscData3dCPU1
INewtonUpdate ICplUserData3d UserNumber3d 
Classgroup <b>CRSmagorinskyTurbViscData</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU1;</b><br>Inheritance: <a href="INewtonUpdate.html">INewtonUpdate</a> <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserNumber3d.html">UserNumber3d</a> <a href="CRSmagorinskyTurbViscData3dCPU1.html">CRSmagorinskyTurbViscData3dCPU1</a> <br><table><tr><td colspan=2><h3>CRSmagorinskyTurbViscData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>CRSmagorinskyTurbViscData3dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, model parameter, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>CRSmagorinskyTurbViscData Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (number KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (c_string KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_model_parameter (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_turbulence_zero_bnd (c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
CRSmagorinskyTurbViscData3dCPU1

CRSmagorinskyTurbViscData3dCPU1 (SmartPtr<ApproximationSpace> Approximation space, grid function, model parameter, SmartPtr<GridFunction> , number )
CRSmagorinskyTurbViscData3dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, model parameter, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , number )<br>Constructor of class <b>CRSmagorinskyTurbViscData3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_model_parameter
void
void set_model_parameter (number )
void set_model_parameter (number )<br><br>Member function of class <b>CRSmagorinskyTurbViscData3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (SmartPtr<UserNumber> KinematicViscosity)
void set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)<br><br>Member function of class <b>CRSmagorinskyTurbViscData3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (number KinematicViscosity)
void set_kinematic_viscosity (number KinematicViscosity)<br><br>Member function of class <b>CRSmagorinskyTurbViscData3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (c_string KinematicViscosity)
void set_kinematic_viscosity (c_string KinematicViscosity)<br><br>Member function of class <b>CRSmagorinskyTurbViscData3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_turbulence_zero_bnd
void
void set_turbulence_zero_bnd (c_string )
void set_turbulence_zero_bnd (c_string )<br><br>Member function of class <b>CRSmagorinskyTurbViscData3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
CRSmagorinskyTurbViscData3dCPU2
INewtonUpdate ICplUserData3d UserNumber3d 
Classgroup <b>CRSmagorinskyTurbViscData</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU2;</b><br>Inheritance: <a href="INewtonUpdate.html">INewtonUpdate</a> <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserNumber3d.html">UserNumber3d</a> <a href="CRSmagorinskyTurbViscData3dCPU2.html">CRSmagorinskyTurbViscData3dCPU2</a> <br><table><tr><td colspan=2><h3>CRSmagorinskyTurbViscData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>CRSmagorinskyTurbViscData3dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, model parameter, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>CRSmagorinskyTurbViscData Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (number KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (c_string KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_model_parameter (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_turbulence_zero_bnd (c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
CRSmagorinskyTurbViscData3dCPU2

CRSmagorinskyTurbViscData3dCPU2 (SmartPtr<ApproximationSpace> Approximation space, grid function, model parameter, SmartPtr<GridFunction> , number )
CRSmagorinskyTurbViscData3dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, model parameter, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , number )<br>Constructor of class <b>CRSmagorinskyTurbViscData3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_model_parameter
void
void set_model_parameter (number )
void set_model_parameter (number )<br><br>Member function of class <b>CRSmagorinskyTurbViscData3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (SmartPtr<UserNumber> KinematicViscosity)
void set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)<br><br>Member function of class <b>CRSmagorinskyTurbViscData3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (number KinematicViscosity)
void set_kinematic_viscosity (number KinematicViscosity)<br><br>Member function of class <b>CRSmagorinskyTurbViscData3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (c_string KinematicViscosity)
void set_kinematic_viscosity (c_string KinematicViscosity)<br><br>Member function of class <b>CRSmagorinskyTurbViscData3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_turbulence_zero_bnd
void
void set_turbulence_zero_bnd (c_string )
void set_turbulence_zero_bnd (c_string )<br><br>Member function of class <b>CRSmagorinskyTurbViscData3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
CRSmagorinskyTurbViscData3dCPU3
INewtonUpdate ICplUserData3d UserNumber3d 
Classgroup <b>CRSmagorinskyTurbViscData</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU3;</b><br>Inheritance: <a href="INewtonUpdate.html">INewtonUpdate</a> <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserNumber3d.html">UserNumber3d</a> <a href="CRSmagorinskyTurbViscData3dCPU3.html">CRSmagorinskyTurbViscData3dCPU3</a> <br><table><tr><td colspan=2><h3>CRSmagorinskyTurbViscData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>CRSmagorinskyTurbViscData3dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, model parameter, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>CRSmagorinskyTurbViscData Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (number KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (c_string KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_model_parameter (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_turbulence_zero_bnd (c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
CRSmagorinskyTurbViscData3dCPU3

CRSmagorinskyTurbViscData3dCPU3 (SmartPtr<ApproximationSpace> Approximation space, grid function, model parameter, SmartPtr<GridFunction> , number )
CRSmagorinskyTurbViscData3dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, model parameter, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , number )<br>Constructor of class <b>CRSmagorinskyTurbViscData3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_model_parameter
void
void set_model_parameter (number )
void set_model_parameter (number )<br><br>Member function of class <b>CRSmagorinskyTurbViscData3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (SmartPtr<UserNumber> KinematicViscosity)
void set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)<br><br>Member function of class <b>CRSmagorinskyTurbViscData3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (number KinematicViscosity)
void set_kinematic_viscosity (number KinematicViscosity)<br><br>Member function of class <b>CRSmagorinskyTurbViscData3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (c_string KinematicViscosity)
void set_kinematic_viscosity (c_string KinematicViscosity)<br><br>Member function of class <b>CRSmagorinskyTurbViscData3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_turbulence_zero_bnd
void
void set_turbulence_zero_bnd (c_string )
void set_turbulence_zero_bnd (c_string )<br><br>Member function of class <b>CRSmagorinskyTurbViscData3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
ComponentWiseConvergenceCheckCPU1
IConvergenceCheckCPU1 
Classgroup <b>ComponentWiseConvergenceCheck</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b><br>class has constructor.  Tag <b>alg=CPU1;</b><br>Inheritance: <a href="IConvergenceCheckCPU1.html">IConvergenceCheckCPU1</a> <a href="ComponentWiseConvergenceCheckCPU1.html">ComponentWiseConvergenceCheckCPU1</a> <br><table><tr><td colspan=2><h3>ComponentWiseConvergenceCheck Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ComponentWiseConvergenceCheckCPU1 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ComponentWiseConvergenceCheckCPU1 (integer Maximum Steps, number Minimum Defect, number Relative Reduction, bool VerbosityNumber of EquationsNumbers of the functions with different convergence ratesSpecial  defects for the functions to be treated different, integer , c_string , c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ComponentWiseConvergenceCheck Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>iteration_ended ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_function_defects (c_string Special  Defects for the functions to be treated different)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_function_numbers (c_string Numbers of the functions with different convergence rates)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_maximum_steps (integer Maximum Steps)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_minimum_defect (number Minimum Defect)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_number_systems (number Number of Equations)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reduction (number Relative Reduction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_verbose (bool Verbosity)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ComponentWiseConvergenceCheck Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns defect<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>previous_defect ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns reduction<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current relative reduction<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns step<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current number of steps<br/></td></tr><tr><td><br></td></tr></table>
constructor
ComponentWiseConvergenceCheckCPU1

ComponentWiseConvergenceCheckCPU1 ()
ComponentWiseConvergenceCheckCPU1 ()<br>Constructor of class <b>ComponentWiseConvergenceCheckCPU1</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
constructor
ComponentWiseConvergenceCheckCPU1

ComponentWiseConvergenceCheckCPU1 (integer Maximum Steps, number Minimum Defect, number Relative Reduction, bool VerbosityNumber of EquationsNumbers of the functions with different convergence ratesSpecial  defects for the functions to be treated different, integer , c_string , c_string )
ComponentWiseConvergenceCheckCPU1 (integer Maximum Steps, number Minimum Defect, number Relative Reduction, bool VerbosityNumber of EquationsNumbers of the functions with different convergence ratesSpecial  defects for the functions to be treated different, integer , c_string , c_string )<br>Constructor of class <b>ComponentWiseConvergenceCheckCPU1</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
set_maximum_steps
void
void set_maximum_steps (integer Maximum Steps)
void set_maximum_steps (integer Maximum Steps)<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU1</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
set_minimum_defect
void
void set_minimum_defect (number Minimum Defect)
void set_minimum_defect (number Minimum Defect)<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU1</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
set_reduction
void
void set_reduction (number Relative Reduction)
void set_reduction (number Relative Reduction)<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU1</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
set_verbose
void
void set_verbose (bool Verbosity)
void set_verbose (bool Verbosity)<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU1</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
set_number_systems
void
void set_number_systems (number Number of Equations)
void set_number_systems (number Number of Equations)<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU1</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
set_function_numbers
void
void set_function_numbers (c_string Numbers of the functions with different convergence rates)
void set_function_numbers (c_string Numbers of the functions with different convergence rates)<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU1</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
set_function_defects
void
void set_function_defects (c_string Special  Defects for the functions to be treated different)
void set_function_defects (c_string Special  Defects for the functions to be treated different)<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU1</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
iteration_ended
bool
bool iteration_ended ()
bool iteration_ended ()<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU1</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
defect
number
number defect () const
number defect ()<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU1</b><br>returns defect<br>tooltip: returns the current defect<br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
step
integer
integer step () const
integer step ()<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU1</b><br>returns step<br>tooltip: returns the current number of steps<br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
reduction
number
number reduction () const
number reduction ()<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU1</b><br>returns reduction<br>tooltip: returns the current relative reduction<br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
previous_defect
number
number previous_defect () const
number previous_defect ()<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU1</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
;
class
ComponentWiseConvergenceCheckCPU2
IConvergenceCheckCPU2 
Classgroup <b>ComponentWiseConvergenceCheck</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b><br>class has constructor.  Tag <b>alg=CPU2;</b><br>Inheritance: <a href="IConvergenceCheckCPU2.html">IConvergenceCheckCPU2</a> <a href="ComponentWiseConvergenceCheckCPU2.html">ComponentWiseConvergenceCheckCPU2</a> <br><table><tr><td colspan=2><h3>ComponentWiseConvergenceCheck Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ComponentWiseConvergenceCheckCPU2 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ComponentWiseConvergenceCheckCPU2 (integer Maximum Steps, number Minimum Defect, number Relative Reduction, bool VerbosityNumber of EquationsNumbers of the functions with different convergence ratesSpecial  defects for the functions to be treated different, integer , c_string , c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ComponentWiseConvergenceCheck Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>iteration_ended ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_function_defects (c_string Special  Defects for the functions to be treated different)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_function_numbers (c_string Numbers of the functions with different convergence rates)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_maximum_steps (integer Maximum Steps)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_minimum_defect (number Minimum Defect)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_number_systems (number Number of Equations)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reduction (number Relative Reduction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_verbose (bool Verbosity)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ComponentWiseConvergenceCheck Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns defect<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>previous_defect ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns reduction<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current relative reduction<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns step<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current number of steps<br/></td></tr><tr><td><br></td></tr></table>
constructor
ComponentWiseConvergenceCheckCPU2

ComponentWiseConvergenceCheckCPU2 ()
ComponentWiseConvergenceCheckCPU2 ()<br>Constructor of class <b>ComponentWiseConvergenceCheckCPU2</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
constructor
ComponentWiseConvergenceCheckCPU2

ComponentWiseConvergenceCheckCPU2 (integer Maximum Steps, number Minimum Defect, number Relative Reduction, bool VerbosityNumber of EquationsNumbers of the functions with different convergence ratesSpecial  defects for the functions to be treated different, integer , c_string , c_string )
ComponentWiseConvergenceCheckCPU2 (integer Maximum Steps, number Minimum Defect, number Relative Reduction, bool VerbosityNumber of EquationsNumbers of the functions with different convergence ratesSpecial  defects for the functions to be treated different, integer , c_string , c_string )<br>Constructor of class <b>ComponentWiseConvergenceCheckCPU2</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
set_maximum_steps
void
void set_maximum_steps (integer Maximum Steps)
void set_maximum_steps (integer Maximum Steps)<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU2</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
set_minimum_defect
void
void set_minimum_defect (number Minimum Defect)
void set_minimum_defect (number Minimum Defect)<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU2</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
set_reduction
void
void set_reduction (number Relative Reduction)
void set_reduction (number Relative Reduction)<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU2</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
set_verbose
void
void set_verbose (bool Verbosity)
void set_verbose (bool Verbosity)<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU2</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
set_number_systems
void
void set_number_systems (number Number of Equations)
void set_number_systems (number Number of Equations)<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU2</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
set_function_numbers
void
void set_function_numbers (c_string Numbers of the functions with different convergence rates)
void set_function_numbers (c_string Numbers of the functions with different convergence rates)<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU2</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
set_function_defects
void
void set_function_defects (c_string Special  Defects for the functions to be treated different)
void set_function_defects (c_string Special  Defects for the functions to be treated different)<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU2</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
iteration_ended
bool
bool iteration_ended ()
bool iteration_ended ()<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU2</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
defect
number
number defect () const
number defect ()<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU2</b><br>returns defect<br>tooltip: returns the current defect<br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
step
integer
integer step () const
integer step ()<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU2</b><br>returns step<br>tooltip: returns the current number of steps<br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
reduction
number
number reduction () const
number reduction ()<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU2</b><br>returns reduction<br>tooltip: returns the current relative reduction<br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
previous_defect
number
number previous_defect () const
number previous_defect ()<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU2</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
;
class
ComponentWiseConvergenceCheckCPU3
IConvergenceCheckCPU3 
Classgroup <b>ComponentWiseConvergenceCheck</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b><br>class has constructor.  Tag <b>alg=CPU3;</b><br>Inheritance: <a href="IConvergenceCheckCPU3.html">IConvergenceCheckCPU3</a> <a href="ComponentWiseConvergenceCheckCPU3.html">ComponentWiseConvergenceCheckCPU3</a> <br><table><tr><td colspan=2><h3>ComponentWiseConvergenceCheck Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ComponentWiseConvergenceCheckCPU3 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ComponentWiseConvergenceCheckCPU3 (integer Maximum Steps, number Minimum Defect, number Relative Reduction, bool VerbosityNumber of EquationsNumbers of the functions with different convergence ratesSpecial  defects for the functions to be treated different, integer , c_string , c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ComponentWiseConvergenceCheck Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>iteration_ended ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_function_defects (c_string Special  Defects for the functions to be treated different)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_function_numbers (c_string Numbers of the functions with different convergence rates)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_maximum_steps (integer Maximum Steps)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_minimum_defect (number Minimum Defect)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_number_systems (number Number of Equations)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reduction (number Relative Reduction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_verbose (bool Verbosity)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ComponentWiseConvergenceCheck Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns defect<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>previous_defect ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns reduction<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current relative reduction<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns step<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current number of steps<br/></td></tr><tr><td><br></td></tr></table>
constructor
ComponentWiseConvergenceCheckCPU3

ComponentWiseConvergenceCheckCPU3 ()
ComponentWiseConvergenceCheckCPU3 ()<br>Constructor of class <b>ComponentWiseConvergenceCheckCPU3</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
constructor
ComponentWiseConvergenceCheckCPU3

ComponentWiseConvergenceCheckCPU3 (integer Maximum Steps, number Minimum Defect, number Relative Reduction, bool VerbosityNumber of EquationsNumbers of the functions with different convergence ratesSpecial  defects for the functions to be treated different, integer , c_string , c_string )
ComponentWiseConvergenceCheckCPU3 (integer Maximum Steps, number Minimum Defect, number Relative Reduction, bool VerbosityNumber of EquationsNumbers of the functions with different convergence ratesSpecial  defects for the functions to be treated different, integer , c_string , c_string )<br>Constructor of class <b>ComponentWiseConvergenceCheckCPU3</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
set_maximum_steps
void
void set_maximum_steps (integer Maximum Steps)
void set_maximum_steps (integer Maximum Steps)<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU3</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
set_minimum_defect
void
void set_minimum_defect (number Minimum Defect)
void set_minimum_defect (number Minimum Defect)<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU3</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
set_reduction
void
void set_reduction (number Relative Reduction)
void set_reduction (number Relative Reduction)<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU3</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
set_verbose
void
void set_verbose (bool Verbosity)
void set_verbose (bool Verbosity)<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU3</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
set_number_systems
void
void set_number_systems (number Number of Equations)
void set_number_systems (number Number of Equations)<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU3</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
set_function_numbers
void
void set_function_numbers (c_string Numbers of the functions with different convergence rates)
void set_function_numbers (c_string Numbers of the functions with different convergence rates)<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU3</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
set_function_defects
void
void set_function_defects (c_string Special  Defects for the functions to be treated different)
void set_function_defects (c_string Special  Defects for the functions to be treated different)<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU3</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
iteration_ended
bool
bool iteration_ended ()
bool iteration_ended ()<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU3</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
defect
number
number defect () const
number defect ()<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU3</b><br>returns defect<br>tooltip: returns the current defect<br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
step
integer
integer step () const
integer step ()<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU3</b><br>returns step<br>tooltip: returns the current number of steps<br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
reduction
number
number reduction () const
number reduction ()<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU3</b><br>returns reduction<br>tooltip: returns the current relative reduction<br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
previous_defect
number
number previous_defect () const
number previous_defect ()<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU3</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
;
class
CompositeConvCheck1dCPU1
IConvergenceCheckCPU1 
Classgroup <b>CompositeConvCheck</b><br>Registry Group: <b>/ug4</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU1;</b><br>Inheritance: <a href="IConvergenceCheckCPU1.html">IConvergenceCheckCPU1</a> <a href="CompositeConvCheck1dCPU1.html">CompositeConvCheck1dCPU1</a> <br><table><tr><td colspan=2><h3>CompositeConvCheck Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>CompositeConvCheck1dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>CompositeConvCheck Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>iteration_ended ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_functions (c_string functions to be evaluated individually as comma-separated list)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_level (integer )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns grid level where defect vectors come from<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_maximum_steps (integer Maximum Steps)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_minimum_defect (std::vector&ltnumber &gtminimum defect for defined functions (comma-separated list), number minimum defect for rest)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reduction (std::vector&ltnumber &gtdefect reduction for defined functions (comma-separated list), number defect reduction for rest)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_verbose (bool Verbosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>timeMeasurement (bool )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: whether to perform a time measurement or not<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>CompositeConvCheck Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>avg_rate (size_t function index)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns avg_rate<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the averaged convergence rate for a function<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect (size_t function index)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns defect<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>rate (size_t function index)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns rate<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current convergence rate for a function<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction (size_t function index)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns reduction<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current relative reduction for a function<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns step<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current number of steps<br/></td></tr><tr><td><br></td></tr></table>
constructor
CompositeConvCheck1dCPU1

CompositeConvCheck1dCPU1 (SmartPtr<ApproximationSpace> ApproximationSpace)
CompositeConvCheck1dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)<br>Constructor of class <b>CompositeConvCheck1dCPU1</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_level
void
void set_level (integer )
void set_level (integer )<br><br>Member function of class <b>CompositeConvCheck1dCPU1</b><br>returns grid level where defect vectors come from<br>Registry Group: <b>/ug4</b>
memberfunction
set_functions
void
void set_functions (c_string functions to be evaluated individually as comma-separated list)
void set_functions (c_string functions to be evaluated individually as comma-separated list)<br><br>Member function of class <b>CompositeConvCheck1dCPU1</b><br>Registry Group: <b>/ug4</b>
memberfunction
timeMeasurement
void
void timeMeasurement (bool )
void timeMeasurement (bool )<br><br>Member function of class <b>CompositeConvCheck1dCPU1</b><br>tooltip: whether to perform a time measurement or not<br>Registry Group: <b>/ug4</b>
memberfunction
set_maximum_steps
void
void set_maximum_steps (integer Maximum Steps)
void set_maximum_steps (integer Maximum Steps)<br><br>Member function of class <b>CompositeConvCheck1dCPU1</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_minimum_defect
void
void set_minimum_defect (std::vector<number >minimum defect for defined functions (comma-separated list), number minimum defect for rest)
void set_minimum_defect (std::vector&ltnumber &gtminimum defect for defined functions (comma-separated list), number minimum defect for rest)<br><br>Member function of class <b>CompositeConvCheck1dCPU1</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_reduction
void
void set_reduction (std::vector<number >defect reduction for defined functions (comma-separated list), number defect reduction for rest)
void set_reduction (std::vector&ltnumber &gtdefect reduction for defined functions (comma-separated list), number defect reduction for rest)<br><br>Member function of class <b>CompositeConvCheck1dCPU1</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_verbose
void
void set_verbose (bool Verbosity)
void set_verbose (bool Verbosity)<br><br>Member function of class <b>CompositeConvCheck1dCPU1</b><br>Registry Group: <b>/ug4</b>
memberfunction
iteration_ended
bool
bool iteration_ended ()
bool iteration_ended ()<br><br>Member function of class <b>CompositeConvCheck1dCPU1</b><br>Registry Group: <b>/ug4</b>
memberfunction
defect
number
number defect (size_t function index) const
number defect (size_t function index)<br><br>Member function of class <b>CompositeConvCheck1dCPU1</b><br>returns defect<br>tooltip: returns the current defect<br>Registry Group: <b>/ug4</b>
memberfunction
step
integer
integer step () const
integer step ()<br><br>Member function of class <b>CompositeConvCheck1dCPU1</b><br>returns step<br>tooltip: returns the current number of steps<br>Registry Group: <b>/ug4</b>
memberfunction
reduction
number
number reduction (size_t function index) const
number reduction (size_t function index)<br><br>Member function of class <b>CompositeConvCheck1dCPU1</b><br>returns reduction<br>tooltip: returns the current relative reduction for a function<br>Registry Group: <b>/ug4</b>
memberfunction
rate
number
number rate (size_t function index) const
number rate (size_t function index)<br><br>Member function of class <b>CompositeConvCheck1dCPU1</b><br>returns rate<br>tooltip: returns the current convergence rate for a function<br>Registry Group: <b>/ug4</b>
memberfunction
avg_rate
number
number avg_rate (size_t function index) const
number avg_rate (size_t function index)<br><br>Member function of class <b>CompositeConvCheck1dCPU1</b><br>returns avg_rate<br>tooltip: returns the averaged convergence rate for a function<br>Registry Group: <b>/ug4</b>
;
class
CompositeConvCheck1dCPU2
IConvergenceCheckCPU2 
Classgroup <b>CompositeConvCheck</b><br>Registry Group: <b>/ug4</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU2;</b><br>Inheritance: <a href="IConvergenceCheckCPU2.html">IConvergenceCheckCPU2</a> <a href="CompositeConvCheck1dCPU2.html">CompositeConvCheck1dCPU2</a> <br><table><tr><td colspan=2><h3>CompositeConvCheck Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>CompositeConvCheck1dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>CompositeConvCheck Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>iteration_ended ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_functions (c_string functions to be evaluated individually as comma-separated list)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_level (integer )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns grid level where defect vectors come from<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_maximum_steps (integer Maximum Steps)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_minimum_defect (std::vector&ltnumber &gtminimum defect for defined functions (comma-separated list), number minimum defect for rest)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reduction (std::vector&ltnumber &gtdefect reduction for defined functions (comma-separated list), number defect reduction for rest)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_verbose (bool Verbosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>timeMeasurement (bool )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: whether to perform a time measurement or not<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>CompositeConvCheck Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>avg_rate (size_t function index)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns avg_rate<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the averaged convergence rate for a function<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect (size_t function index)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns defect<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>rate (size_t function index)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns rate<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current convergence rate for a function<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction (size_t function index)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns reduction<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current relative reduction for a function<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns step<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current number of steps<br/></td></tr><tr><td><br></td></tr></table>
constructor
CompositeConvCheck1dCPU2

CompositeConvCheck1dCPU2 (SmartPtr<ApproximationSpace> ApproximationSpace)
CompositeConvCheck1dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)<br>Constructor of class <b>CompositeConvCheck1dCPU2</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_level
void
void set_level (integer )
void set_level (integer )<br><br>Member function of class <b>CompositeConvCheck1dCPU2</b><br>returns grid level where defect vectors come from<br>Registry Group: <b>/ug4</b>
memberfunction
set_functions
void
void set_functions (c_string functions to be evaluated individually as comma-separated list)
void set_functions (c_string functions to be evaluated individually as comma-separated list)<br><br>Member function of class <b>CompositeConvCheck1dCPU2</b><br>Registry Group: <b>/ug4</b>
memberfunction
timeMeasurement
void
void timeMeasurement (bool )
void timeMeasurement (bool )<br><br>Member function of class <b>CompositeConvCheck1dCPU2</b><br>tooltip: whether to perform a time measurement or not<br>Registry Group: <b>/ug4</b>
memberfunction
set_maximum_steps
void
void set_maximum_steps (integer Maximum Steps)
void set_maximum_steps (integer Maximum Steps)<br><br>Member function of class <b>CompositeConvCheck1dCPU2</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_minimum_defect
void
void set_minimum_defect (std::vector<number >minimum defect for defined functions (comma-separated list), number minimum defect for rest)
void set_minimum_defect (std::vector&ltnumber &gtminimum defect for defined functions (comma-separated list), number minimum defect for rest)<br><br>Member function of class <b>CompositeConvCheck1dCPU2</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_reduction
void
void set_reduction (std::vector<number >defect reduction for defined functions (comma-separated list), number defect reduction for rest)
void set_reduction (std::vector&ltnumber &gtdefect reduction for defined functions (comma-separated list), number defect reduction for rest)<br><br>Member function of class <b>CompositeConvCheck1dCPU2</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_verbose
void
void set_verbose (bool Verbosity)
void set_verbose (bool Verbosity)<br><br>Member function of class <b>CompositeConvCheck1dCPU2</b><br>Registry Group: <b>/ug4</b>
memberfunction
iteration_ended
bool
bool iteration_ended ()
bool iteration_ended ()<br><br>Member function of class <b>CompositeConvCheck1dCPU2</b><br>Registry Group: <b>/ug4</b>
memberfunction
defect
number
number defect (size_t function index) const
number defect (size_t function index)<br><br>Member function of class <b>CompositeConvCheck1dCPU2</b><br>returns defect<br>tooltip: returns the current defect<br>Registry Group: <b>/ug4</b>
memberfunction
step
integer
integer step () const
integer step ()<br><br>Member function of class <b>CompositeConvCheck1dCPU2</b><br>returns step<br>tooltip: returns the current number of steps<br>Registry Group: <b>/ug4</b>
memberfunction
reduction
number
number reduction (size_t function index) const
number reduction (size_t function index)<br><br>Member function of class <b>CompositeConvCheck1dCPU2</b><br>returns reduction<br>tooltip: returns the current relative reduction for a function<br>Registry Group: <b>/ug4</b>
memberfunction
rate
number
number rate (size_t function index) const
number rate (size_t function index)<br><br>Member function of class <b>CompositeConvCheck1dCPU2</b><br>returns rate<br>tooltip: returns the current convergence rate for a function<br>Registry Group: <b>/ug4</b>
memberfunction
avg_rate
number
number avg_rate (size_t function index) const
number avg_rate (size_t function index)<br><br>Member function of class <b>CompositeConvCheck1dCPU2</b><br>returns avg_rate<br>tooltip: returns the averaged convergence rate for a function<br>Registry Group: <b>/ug4</b>
;
class
CompositeConvCheck1dCPU3
IConvergenceCheckCPU3 
Classgroup <b>CompositeConvCheck</b><br>Registry Group: <b>/ug4</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU3;</b><br>Inheritance: <a href="IConvergenceCheckCPU3.html">IConvergenceCheckCPU3</a> <a href="CompositeConvCheck1dCPU3.html">CompositeConvCheck1dCPU3</a> <br><table><tr><td colspan=2><h3>CompositeConvCheck Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>CompositeConvCheck1dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>CompositeConvCheck Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>iteration_ended ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_functions (c_string functions to be evaluated individually as comma-separated list)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_level (integer )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns grid level where defect vectors come from<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_maximum_steps (integer Maximum Steps)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_minimum_defect (std::vector&ltnumber &gtminimum defect for defined functions (comma-separated list), number minimum defect for rest)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reduction (std::vector&ltnumber &gtdefect reduction for defined functions (comma-separated list), number defect reduction for rest)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_verbose (bool Verbosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>timeMeasurement (bool )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: whether to perform a time measurement or not<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>CompositeConvCheck Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>avg_rate (size_t function index)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns avg_rate<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the averaged convergence rate for a function<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect (size_t function index)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns defect<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>rate (size_t function index)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns rate<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current convergence rate for a function<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction (size_t function index)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns reduction<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current relative reduction for a function<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns step<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current number of steps<br/></td></tr><tr><td><br></td></tr></table>
constructor
CompositeConvCheck1dCPU3

CompositeConvCheck1dCPU3 (SmartPtr<ApproximationSpace> ApproximationSpace)
CompositeConvCheck1dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)<br>Constructor of class <b>CompositeConvCheck1dCPU3</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_level
void
void set_level (integer )
void set_level (integer )<br><br>Member function of class <b>CompositeConvCheck1dCPU3</b><br>returns grid level where defect vectors come from<br>Registry Group: <b>/ug4</b>
memberfunction
set_functions
void
void set_functions (c_string functions to be evaluated individually as comma-separated list)
void set_functions (c_string functions to be evaluated individually as comma-separated list)<br><br>Member function of class <b>CompositeConvCheck1dCPU3</b><br>Registry Group: <b>/ug4</b>
memberfunction
timeMeasurement
void
void timeMeasurement (bool )
void timeMeasurement (bool )<br><br>Member function of class <b>CompositeConvCheck1dCPU3</b><br>tooltip: whether to perform a time measurement or not<br>Registry Group: <b>/ug4</b>
memberfunction
set_maximum_steps
void
void set_maximum_steps (integer Maximum Steps)
void set_maximum_steps (integer Maximum Steps)<br><br>Member function of class <b>CompositeConvCheck1dCPU3</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_minimum_defect
void
void set_minimum_defect (std::vector<number >minimum defect for defined functions (comma-separated list), number minimum defect for rest)
void set_minimum_defect (std::vector&ltnumber &gtminimum defect for defined functions (comma-separated list), number minimum defect for rest)<br><br>Member function of class <b>CompositeConvCheck1dCPU3</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_reduction
void
void set_reduction (std::vector<number >defect reduction for defined functions (comma-separated list), number defect reduction for rest)
void set_reduction (std::vector&ltnumber &gtdefect reduction for defined functions (comma-separated list), number defect reduction for rest)<br><br>Member function of class <b>CompositeConvCheck1dCPU3</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_verbose
void
void set_verbose (bool Verbosity)
void set_verbose (bool Verbosity)<br><br>Member function of class <b>CompositeConvCheck1dCPU3</b><br>Registry Group: <b>/ug4</b>
memberfunction
iteration_ended
bool
bool iteration_ended ()
bool iteration_ended ()<br><br>Member function of class <b>CompositeConvCheck1dCPU3</b><br>Registry Group: <b>/ug4</b>
memberfunction
defect
number
number defect (size_t function index) const
number defect (size_t function index)<br><br>Member function of class <b>CompositeConvCheck1dCPU3</b><br>returns defect<br>tooltip: returns the current defect<br>Registry Group: <b>/ug4</b>
memberfunction
step
integer
integer step () const
integer step ()<br><br>Member function of class <b>CompositeConvCheck1dCPU3</b><br>returns step<br>tooltip: returns the current number of steps<br>Registry Group: <b>/ug4</b>
memberfunction
reduction
number
number reduction (size_t function index) const
number reduction (size_t function index)<br><br>Member function of class <b>CompositeConvCheck1dCPU3</b><br>returns reduction<br>tooltip: returns the current relative reduction for a function<br>Registry Group: <b>/ug4</b>
memberfunction
rate
number
number rate (size_t function index) const
number rate (size_t function index)<br><br>Member function of class <b>CompositeConvCheck1dCPU3</b><br>returns rate<br>tooltip: returns the current convergence rate for a function<br>Registry Group: <b>/ug4</b>
memberfunction
avg_rate
number
number avg_rate (size_t function index) const
number avg_rate (size_t function index)<br><br>Member function of class <b>CompositeConvCheck1dCPU3</b><br>returns avg_rate<br>tooltip: returns the averaged convergence rate for a function<br>Registry Group: <b>/ug4</b>
;
class
CompositeConvCheck2dCPU1
IConvergenceCheckCPU1 
Classgroup <b>CompositeConvCheck</b><br>Registry Group: <b>/ug4</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU1;</b><br>Inheritance: <a href="IConvergenceCheckCPU1.html">IConvergenceCheckCPU1</a> <a href="CompositeConvCheck2dCPU1.html">CompositeConvCheck2dCPU1</a> <br><table><tr><td colspan=2><h3>CompositeConvCheck Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>CompositeConvCheck2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>CompositeConvCheck Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>iteration_ended ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_functions (c_string functions to be evaluated individually as comma-separated list)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_level (integer )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns grid level where defect vectors come from<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_maximum_steps (integer Maximum Steps)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_minimum_defect (std::vector&ltnumber &gtminimum defect for defined functions (comma-separated list), number minimum defect for rest)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reduction (std::vector&ltnumber &gtdefect reduction for defined functions (comma-separated list), number defect reduction for rest)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_verbose (bool Verbosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>timeMeasurement (bool )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: whether to perform a time measurement or not<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>CompositeConvCheck Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>avg_rate (size_t function index)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns avg_rate<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the averaged convergence rate for a function<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect (size_t function index)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns defect<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>rate (size_t function index)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns rate<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current convergence rate for a function<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction (size_t function index)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns reduction<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current relative reduction for a function<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns step<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current number of steps<br/></td></tr><tr><td><br></td></tr></table>
constructor
CompositeConvCheck2dCPU1

CompositeConvCheck2dCPU1 (SmartPtr<ApproximationSpace> ApproximationSpace)
CompositeConvCheck2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)<br>Constructor of class <b>CompositeConvCheck2dCPU1</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_level
void
void set_level (integer )
void set_level (integer )<br><br>Member function of class <b>CompositeConvCheck2dCPU1</b><br>returns grid level where defect vectors come from<br>Registry Group: <b>/ug4</b>
memberfunction
set_functions
void
void set_functions (c_string functions to be evaluated individually as comma-separated list)
void set_functions (c_string functions to be evaluated individually as comma-separated list)<br><br>Member function of class <b>CompositeConvCheck2dCPU1</b><br>Registry Group: <b>/ug4</b>
memberfunction
timeMeasurement
void
void timeMeasurement (bool )
void timeMeasurement (bool )<br><br>Member function of class <b>CompositeConvCheck2dCPU1</b><br>tooltip: whether to perform a time measurement or not<br>Registry Group: <b>/ug4</b>
memberfunction
set_maximum_steps
void
void set_maximum_steps (integer Maximum Steps)
void set_maximum_steps (integer Maximum Steps)<br><br>Member function of class <b>CompositeConvCheck2dCPU1</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_minimum_defect
void
void set_minimum_defect (std::vector<number >minimum defect for defined functions (comma-separated list), number minimum defect for rest)
void set_minimum_defect (std::vector&ltnumber &gtminimum defect for defined functions (comma-separated list), number minimum defect for rest)<br><br>Member function of class <b>CompositeConvCheck2dCPU1</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_reduction
void
void set_reduction (std::vector<number >defect reduction for defined functions (comma-separated list), number defect reduction for rest)
void set_reduction (std::vector&ltnumber &gtdefect reduction for defined functions (comma-separated list), number defect reduction for rest)<br><br>Member function of class <b>CompositeConvCheck2dCPU1</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_verbose
void
void set_verbose (bool Verbosity)
void set_verbose (bool Verbosity)<br><br>Member function of class <b>CompositeConvCheck2dCPU1</b><br>Registry Group: <b>/ug4</b>
memberfunction
iteration_ended
bool
bool iteration_ended ()
bool iteration_ended ()<br><br>Member function of class <b>CompositeConvCheck2dCPU1</b><br>Registry Group: <b>/ug4</b>
memberfunction
defect
number
number defect (size_t function index) const
number defect (size_t function index)<br><br>Member function of class <b>CompositeConvCheck2dCPU1</b><br>returns defect<br>tooltip: returns the current defect<br>Registry Group: <b>/ug4</b>
memberfunction
step
integer
integer step () const
integer step ()<br><br>Member function of class <b>CompositeConvCheck2dCPU1</b><br>returns step<br>tooltip: returns the current number of steps<br>Registry Group: <b>/ug4</b>
memberfunction
reduction
number
number reduction (size_t function index) const
number reduction (size_t function index)<br><br>Member function of class <b>CompositeConvCheck2dCPU1</b><br>returns reduction<br>tooltip: returns the current relative reduction for a function<br>Registry Group: <b>/ug4</b>
memberfunction
rate
number
number rate (size_t function index) const
number rate (size_t function index)<br><br>Member function of class <b>CompositeConvCheck2dCPU1</b><br>returns rate<br>tooltip: returns the current convergence rate for a function<br>Registry Group: <b>/ug4</b>
memberfunction
avg_rate
number
number avg_rate (size_t function index) const
number avg_rate (size_t function index)<br><br>Member function of class <b>CompositeConvCheck2dCPU1</b><br>returns avg_rate<br>tooltip: returns the averaged convergence rate for a function<br>Registry Group: <b>/ug4</b>
;
class
CompositeConvCheck2dCPU2
IConvergenceCheckCPU2 
Classgroup <b>CompositeConvCheck</b><br>Registry Group: <b>/ug4</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU2;</b><br>Inheritance: <a href="IConvergenceCheckCPU2.html">IConvergenceCheckCPU2</a> <a href="CompositeConvCheck2dCPU2.html">CompositeConvCheck2dCPU2</a> <br><table><tr><td colspan=2><h3>CompositeConvCheck Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>CompositeConvCheck2dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>CompositeConvCheck Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>iteration_ended ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_functions (c_string functions to be evaluated individually as comma-separated list)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_level (integer )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns grid level where defect vectors come from<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_maximum_steps (integer Maximum Steps)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_minimum_defect (std::vector&ltnumber &gtminimum defect for defined functions (comma-separated list), number minimum defect for rest)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reduction (std::vector&ltnumber &gtdefect reduction for defined functions (comma-separated list), number defect reduction for rest)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_verbose (bool Verbosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>timeMeasurement (bool )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: whether to perform a time measurement or not<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>CompositeConvCheck Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>avg_rate (size_t function index)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns avg_rate<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the averaged convergence rate for a function<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect (size_t function index)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns defect<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>rate (size_t function index)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns rate<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current convergence rate for a function<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction (size_t function index)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns reduction<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current relative reduction for a function<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns step<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current number of steps<br/></td></tr><tr><td><br></td></tr></table>
constructor
CompositeConvCheck2dCPU2

CompositeConvCheck2dCPU2 (SmartPtr<ApproximationSpace> ApproximationSpace)
CompositeConvCheck2dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)<br>Constructor of class <b>CompositeConvCheck2dCPU2</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_level
void
void set_level (integer )
void set_level (integer )<br><br>Member function of class <b>CompositeConvCheck2dCPU2</b><br>returns grid level where defect vectors come from<br>Registry Group: <b>/ug4</b>
memberfunction
set_functions
void
void set_functions (c_string functions to be evaluated individually as comma-separated list)
void set_functions (c_string functions to be evaluated individually as comma-separated list)<br><br>Member function of class <b>CompositeConvCheck2dCPU2</b><br>Registry Group: <b>/ug4</b>
memberfunction
timeMeasurement
void
void timeMeasurement (bool )
void timeMeasurement (bool )<br><br>Member function of class <b>CompositeConvCheck2dCPU2</b><br>tooltip: whether to perform a time measurement or not<br>Registry Group: <b>/ug4</b>
memberfunction
set_maximum_steps
void
void set_maximum_steps (integer Maximum Steps)
void set_maximum_steps (integer Maximum Steps)<br><br>Member function of class <b>CompositeConvCheck2dCPU2</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_minimum_defect
void
void set_minimum_defect (std::vector<number >minimum defect for defined functions (comma-separated list), number minimum defect for rest)
void set_minimum_defect (std::vector&ltnumber &gtminimum defect for defined functions (comma-separated list), number minimum defect for rest)<br><br>Member function of class <b>CompositeConvCheck2dCPU2</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_reduction
void
void set_reduction (std::vector<number >defect reduction for defined functions (comma-separated list), number defect reduction for rest)
void set_reduction (std::vector&ltnumber &gtdefect reduction for defined functions (comma-separated list), number defect reduction for rest)<br><br>Member function of class <b>CompositeConvCheck2dCPU2</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_verbose
void
void set_verbose (bool Verbosity)
void set_verbose (bool Verbosity)<br><br>Member function of class <b>CompositeConvCheck2dCPU2</b><br>Registry Group: <b>/ug4</b>
memberfunction
iteration_ended
bool
bool iteration_ended ()
bool iteration_ended ()<br><br>Member function of class <b>CompositeConvCheck2dCPU2</b><br>Registry Group: <b>/ug4</b>
memberfunction
defect
number
number defect (size_t function index) const
number defect (size_t function index)<br><br>Member function of class <b>CompositeConvCheck2dCPU2</b><br>returns defect<br>tooltip: returns the current defect<br>Registry Group: <b>/ug4</b>
memberfunction
step
integer
integer step () const
integer step ()<br><br>Member function of class <b>CompositeConvCheck2dCPU2</b><br>returns step<br>tooltip: returns the current number of steps<br>Registry Group: <b>/ug4</b>
memberfunction
reduction
number
number reduction (size_t function index) const
number reduction (size_t function index)<br><br>Member function of class <b>CompositeConvCheck2dCPU2</b><br>returns reduction<br>tooltip: returns the current relative reduction for a function<br>Registry Group: <b>/ug4</b>
memberfunction
rate
number
number rate (size_t function index) const
number rate (size_t function index)<br><br>Member function of class <b>CompositeConvCheck2dCPU2</b><br>returns rate<br>tooltip: returns the current convergence rate for a function<br>Registry Group: <b>/ug4</b>
memberfunction
avg_rate
number
number avg_rate (size_t function index) const
number avg_rate (size_t function index)<br><br>Member function of class <b>CompositeConvCheck2dCPU2</b><br>returns avg_rate<br>tooltip: returns the averaged convergence rate for a function<br>Registry Group: <b>/ug4</b>
;
class
CompositeConvCheck2dCPU3
IConvergenceCheckCPU3 
Classgroup <b>CompositeConvCheck</b><br>Registry Group: <b>/ug4</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU3;</b><br>Inheritance: <a href="IConvergenceCheckCPU3.html">IConvergenceCheckCPU3</a> <a href="CompositeConvCheck2dCPU3.html">CompositeConvCheck2dCPU3</a> <br><table><tr><td colspan=2><h3>CompositeConvCheck Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>CompositeConvCheck2dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>CompositeConvCheck Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>iteration_ended ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_functions (c_string functions to be evaluated individually as comma-separated list)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_level (integer )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns grid level where defect vectors come from<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_maximum_steps (integer Maximum Steps)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_minimum_defect (std::vector&ltnumber &gtminimum defect for defined functions (comma-separated list), number minimum defect for rest)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reduction (std::vector&ltnumber &gtdefect reduction for defined functions (comma-separated list), number defect reduction for rest)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_verbose (bool Verbosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>timeMeasurement (bool )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: whether to perform a time measurement or not<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>CompositeConvCheck Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>avg_rate (size_t function index)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns avg_rate<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the averaged convergence rate for a function<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect (size_t function index)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns defect<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>rate (size_t function index)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns rate<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current convergence rate for a function<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction (size_t function index)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns reduction<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current relative reduction for a function<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns step<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current number of steps<br/></td></tr><tr><td><br></td></tr></table>
constructor
CompositeConvCheck2dCPU3

CompositeConvCheck2dCPU3 (SmartPtr<ApproximationSpace> ApproximationSpace)
CompositeConvCheck2dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)<br>Constructor of class <b>CompositeConvCheck2dCPU3</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_level
void
void set_level (integer )
void set_level (integer )<br><br>Member function of class <b>CompositeConvCheck2dCPU3</b><br>returns grid level where defect vectors come from<br>Registry Group: <b>/ug4</b>
memberfunction
set_functions
void
void set_functions (c_string functions to be evaluated individually as comma-separated list)
void set_functions (c_string functions to be evaluated individually as comma-separated list)<br><br>Member function of class <b>CompositeConvCheck2dCPU3</b><br>Registry Group: <b>/ug4</b>
memberfunction
timeMeasurement
void
void timeMeasurement (bool )
void timeMeasurement (bool )<br><br>Member function of class <b>CompositeConvCheck2dCPU3</b><br>tooltip: whether to perform a time measurement or not<br>Registry Group: <b>/ug4</b>
memberfunction
set_maximum_steps
void
void set_maximum_steps (integer Maximum Steps)
void set_maximum_steps (integer Maximum Steps)<br><br>Member function of class <b>CompositeConvCheck2dCPU3</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_minimum_defect
void
void set_minimum_defect (std::vector<number >minimum defect for defined functions (comma-separated list), number minimum defect for rest)
void set_minimum_defect (std::vector&ltnumber &gtminimum defect for defined functions (comma-separated list), number minimum defect for rest)<br><br>Member function of class <b>CompositeConvCheck2dCPU3</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_reduction
void
void set_reduction (std::vector<number >defect reduction for defined functions (comma-separated list), number defect reduction for rest)
void set_reduction (std::vector&ltnumber &gtdefect reduction for defined functions (comma-separated list), number defect reduction for rest)<br><br>Member function of class <b>CompositeConvCheck2dCPU3</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_verbose
void
void set_verbose (bool Verbosity)
void set_verbose (bool Verbosity)<br><br>Member function of class <b>CompositeConvCheck2dCPU3</b><br>Registry Group: <b>/ug4</b>
memberfunction
iteration_ended
bool
bool iteration_ended ()
bool iteration_ended ()<br><br>Member function of class <b>CompositeConvCheck2dCPU3</b><br>Registry Group: <b>/ug4</b>
memberfunction
defect
number
number defect (size_t function index) const
number defect (size_t function index)<br><br>Member function of class <b>CompositeConvCheck2dCPU3</b><br>returns defect<br>tooltip: returns the current defect<br>Registry Group: <b>/ug4</b>
memberfunction
step
integer
integer step () const
integer step ()<br><br>Member function of class <b>CompositeConvCheck2dCPU3</b><br>returns step<br>tooltip: returns the current number of steps<br>Registry Group: <b>/ug4</b>
memberfunction
reduction
number
number reduction (size_t function index) const
number reduction (size_t function index)<br><br>Member function of class <b>CompositeConvCheck2dCPU3</b><br>returns reduction<br>tooltip: returns the current relative reduction for a function<br>Registry Group: <b>/ug4</b>
memberfunction
rate
number
number rate (size_t function index) const
number rate (size_t function index)<br><br>Member function of class <b>CompositeConvCheck2dCPU3</b><br>returns rate<br>tooltip: returns the current convergence rate for a function<br>Registry Group: <b>/ug4</b>
memberfunction
avg_rate
number
number avg_rate (size_t function index) const
number avg_rate (size_t function index)<br><br>Member function of class <b>CompositeConvCheck2dCPU3</b><br>returns avg_rate<br>tooltip: returns the averaged convergence rate for a function<br>Registry Group: <b>/ug4</b>
;
class
CompositeConvCheck3dCPU1
IConvergenceCheckCPU1 
Classgroup <b>CompositeConvCheck</b><br>Registry Group: <b>/ug4</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU1;</b><br>Inheritance: <a href="IConvergenceCheckCPU1.html">IConvergenceCheckCPU1</a> <a href="CompositeConvCheck3dCPU1.html">CompositeConvCheck3dCPU1</a> <br><table><tr><td colspan=2><h3>CompositeConvCheck Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>CompositeConvCheck3dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>CompositeConvCheck Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>iteration_ended ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_functions (c_string functions to be evaluated individually as comma-separated list)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_level (integer )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns grid level where defect vectors come from<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_maximum_steps (integer Maximum Steps)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_minimum_defect (std::vector&ltnumber &gtminimum defect for defined functions (comma-separated list), number minimum defect for rest)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reduction (std::vector&ltnumber &gtdefect reduction for defined functions (comma-separated list), number defect reduction for rest)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_verbose (bool Verbosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>timeMeasurement (bool )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: whether to perform a time measurement or not<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>CompositeConvCheck Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>avg_rate (size_t function index)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns avg_rate<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the averaged convergence rate for a function<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect (size_t function index)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns defect<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>rate (size_t function index)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns rate<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current convergence rate for a function<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction (size_t function index)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns reduction<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current relative reduction for a function<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns step<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current number of steps<br/></td></tr><tr><td><br></td></tr></table>
constructor
CompositeConvCheck3dCPU1

CompositeConvCheck3dCPU1 (SmartPtr<ApproximationSpace> ApproximationSpace)
CompositeConvCheck3dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)<br>Constructor of class <b>CompositeConvCheck3dCPU1</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_level
void
void set_level (integer )
void set_level (integer )<br><br>Member function of class <b>CompositeConvCheck3dCPU1</b><br>returns grid level where defect vectors come from<br>Registry Group: <b>/ug4</b>
memberfunction
set_functions
void
void set_functions (c_string functions to be evaluated individually as comma-separated list)
void set_functions (c_string functions to be evaluated individually as comma-separated list)<br><br>Member function of class <b>CompositeConvCheck3dCPU1</b><br>Registry Group: <b>/ug4</b>
memberfunction
timeMeasurement
void
void timeMeasurement (bool )
void timeMeasurement (bool )<br><br>Member function of class <b>CompositeConvCheck3dCPU1</b><br>tooltip: whether to perform a time measurement or not<br>Registry Group: <b>/ug4</b>
memberfunction
set_maximum_steps
void
void set_maximum_steps (integer Maximum Steps)
void set_maximum_steps (integer Maximum Steps)<br><br>Member function of class <b>CompositeConvCheck3dCPU1</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_minimum_defect
void
void set_minimum_defect (std::vector<number >minimum defect for defined functions (comma-separated list), number minimum defect for rest)
void set_minimum_defect (std::vector&ltnumber &gtminimum defect for defined functions (comma-separated list), number minimum defect for rest)<br><br>Member function of class <b>CompositeConvCheck3dCPU1</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_reduction
void
void set_reduction (std::vector<number >defect reduction for defined functions (comma-separated list), number defect reduction for rest)
void set_reduction (std::vector&ltnumber &gtdefect reduction for defined functions (comma-separated list), number defect reduction for rest)<br><br>Member function of class <b>CompositeConvCheck3dCPU1</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_verbose
void
void set_verbose (bool Verbosity)
void set_verbose (bool Verbosity)<br><br>Member function of class <b>CompositeConvCheck3dCPU1</b><br>Registry Group: <b>/ug4</b>
memberfunction
iteration_ended
bool
bool iteration_ended ()
bool iteration_ended ()<br><br>Member function of class <b>CompositeConvCheck3dCPU1</b><br>Registry Group: <b>/ug4</b>
memberfunction
defect
number
number defect (size_t function index) const
number defect (size_t function index)<br><br>Member function of class <b>CompositeConvCheck3dCPU1</b><br>returns defect<br>tooltip: returns the current defect<br>Registry Group: <b>/ug4</b>
memberfunction
step
integer
integer step () const
integer step ()<br><br>Member function of class <b>CompositeConvCheck3dCPU1</b><br>returns step<br>tooltip: returns the current number of steps<br>Registry Group: <b>/ug4</b>
memberfunction
reduction
number
number reduction (size_t function index) const
number reduction (size_t function index)<br><br>Member function of class <b>CompositeConvCheck3dCPU1</b><br>returns reduction<br>tooltip: returns the current relative reduction for a function<br>Registry Group: <b>/ug4</b>
memberfunction
rate
number
number rate (size_t function index) const
number rate (size_t function index)<br><br>Member function of class <b>CompositeConvCheck3dCPU1</b><br>returns rate<br>tooltip: returns the current convergence rate for a function<br>Registry Group: <b>/ug4</b>
memberfunction
avg_rate
number
number avg_rate (size_t function index) const
number avg_rate (size_t function index)<br><br>Member function of class <b>CompositeConvCheck3dCPU1</b><br>returns avg_rate<br>tooltip: returns the averaged convergence rate for a function<br>Registry Group: <b>/ug4</b>
;
class
CompositeConvCheck3dCPU2
IConvergenceCheckCPU2 
Classgroup <b>CompositeConvCheck</b><br>Registry Group: <b>/ug4</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU2;</b><br>Inheritance: <a href="IConvergenceCheckCPU2.html">IConvergenceCheckCPU2</a> <a href="CompositeConvCheck3dCPU2.html">CompositeConvCheck3dCPU2</a> <br><table><tr><td colspan=2><h3>CompositeConvCheck Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>CompositeConvCheck3dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>CompositeConvCheck Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>iteration_ended ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_functions (c_string functions to be evaluated individually as comma-separated list)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_level (integer )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns grid level where defect vectors come from<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_maximum_steps (integer Maximum Steps)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_minimum_defect (std::vector&ltnumber &gtminimum defect for defined functions (comma-separated list), number minimum defect for rest)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reduction (std::vector&ltnumber &gtdefect reduction for defined functions (comma-separated list), number defect reduction for rest)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_verbose (bool Verbosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>timeMeasurement (bool )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: whether to perform a time measurement or not<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>CompositeConvCheck Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>avg_rate (size_t function index)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns avg_rate<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the averaged convergence rate for a function<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect (size_t function index)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns defect<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>rate (size_t function index)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns rate<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current convergence rate for a function<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction (size_t function index)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns reduction<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current relative reduction for a function<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns step<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current number of steps<br/></td></tr><tr><td><br></td></tr></table>
constructor
CompositeConvCheck3dCPU2

CompositeConvCheck3dCPU2 (SmartPtr<ApproximationSpace> ApproximationSpace)
CompositeConvCheck3dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)<br>Constructor of class <b>CompositeConvCheck3dCPU2</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_level
void
void set_level (integer )
void set_level (integer )<br><br>Member function of class <b>CompositeConvCheck3dCPU2</b><br>returns grid level where defect vectors come from<br>Registry Group: <b>/ug4</b>
memberfunction
set_functions
void
void set_functions (c_string functions to be evaluated individually as comma-separated list)
void set_functions (c_string functions to be evaluated individually as comma-separated list)<br><br>Member function of class <b>CompositeConvCheck3dCPU2</b><br>Registry Group: <b>/ug4</b>
memberfunction
timeMeasurement
void
void timeMeasurement (bool )
void timeMeasurement (bool )<br><br>Member function of class <b>CompositeConvCheck3dCPU2</b><br>tooltip: whether to perform a time measurement or not<br>Registry Group: <b>/ug4</b>
memberfunction
set_maximum_steps
void
void set_maximum_steps (integer Maximum Steps)
void set_maximum_steps (integer Maximum Steps)<br><br>Member function of class <b>CompositeConvCheck3dCPU2</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_minimum_defect
void
void set_minimum_defect (std::vector<number >minimum defect for defined functions (comma-separated list), number minimum defect for rest)
void set_minimum_defect (std::vector&ltnumber &gtminimum defect for defined functions (comma-separated list), number minimum defect for rest)<br><br>Member function of class <b>CompositeConvCheck3dCPU2</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_reduction
void
void set_reduction (std::vector<number >defect reduction for defined functions (comma-separated list), number defect reduction for rest)
void set_reduction (std::vector&ltnumber &gtdefect reduction for defined functions (comma-separated list), number defect reduction for rest)<br><br>Member function of class <b>CompositeConvCheck3dCPU2</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_verbose
void
void set_verbose (bool Verbosity)
void set_verbose (bool Verbosity)<br><br>Member function of class <b>CompositeConvCheck3dCPU2</b><br>Registry Group: <b>/ug4</b>
memberfunction
iteration_ended
bool
bool iteration_ended ()
bool iteration_ended ()<br><br>Member function of class <b>CompositeConvCheck3dCPU2</b><br>Registry Group: <b>/ug4</b>
memberfunction
defect
number
number defect (size_t function index) const
number defect (size_t function index)<br><br>Member function of class <b>CompositeConvCheck3dCPU2</b><br>returns defect<br>tooltip: returns the current defect<br>Registry Group: <b>/ug4</b>
memberfunction
step
integer
integer step () const
integer step ()<br><br>Member function of class <b>CompositeConvCheck3dCPU2</b><br>returns step<br>tooltip: returns the current number of steps<br>Registry Group: <b>/ug4</b>
memberfunction
reduction
number
number reduction (size_t function index) const
number reduction (size_t function index)<br><br>Member function of class <b>CompositeConvCheck3dCPU2</b><br>returns reduction<br>tooltip: returns the current relative reduction for a function<br>Registry Group: <b>/ug4</b>
memberfunction
rate
number
number rate (size_t function index) const
number rate (size_t function index)<br><br>Member function of class <b>CompositeConvCheck3dCPU2</b><br>returns rate<br>tooltip: returns the current convergence rate for a function<br>Registry Group: <b>/ug4</b>
memberfunction
avg_rate
number
number avg_rate (size_t function index) const
number avg_rate (size_t function index)<br><br>Member function of class <b>CompositeConvCheck3dCPU2</b><br>returns avg_rate<br>tooltip: returns the averaged convergence rate for a function<br>Registry Group: <b>/ug4</b>
;
class
CompositeConvCheck3dCPU3
IConvergenceCheckCPU3 
Classgroup <b>CompositeConvCheck</b><br>Registry Group: <b>/ug4</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU3;</b><br>Inheritance: <a href="IConvergenceCheckCPU3.html">IConvergenceCheckCPU3</a> <a href="CompositeConvCheck3dCPU3.html">CompositeConvCheck3dCPU3</a> <br><table><tr><td colspan=2><h3>CompositeConvCheck Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>CompositeConvCheck3dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>CompositeConvCheck Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>iteration_ended ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_functions (c_string functions to be evaluated individually as comma-separated list)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_level (integer )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns grid level where defect vectors come from<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_maximum_steps (integer Maximum Steps)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_minimum_defect (std::vector&ltnumber &gtminimum defect for defined functions (comma-separated list), number minimum defect for rest)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reduction (std::vector&ltnumber &gtdefect reduction for defined functions (comma-separated list), number defect reduction for rest)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_verbose (bool Verbosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>timeMeasurement (bool )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: whether to perform a time measurement or not<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>CompositeConvCheck Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>avg_rate (size_t function index)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns avg_rate<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the averaged convergence rate for a function<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect (size_t function index)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns defect<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>rate (size_t function index)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns rate<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current convergence rate for a function<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction (size_t function index)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns reduction<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current relative reduction for a function<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns step<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current number of steps<br/></td></tr><tr><td><br></td></tr></table>
constructor
CompositeConvCheck3dCPU3

CompositeConvCheck3dCPU3 (SmartPtr<ApproximationSpace> ApproximationSpace)
CompositeConvCheck3dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)<br>Constructor of class <b>CompositeConvCheck3dCPU3</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_level
void
void set_level (integer )
void set_level (integer )<br><br>Member function of class <b>CompositeConvCheck3dCPU3</b><br>returns grid level where defect vectors come from<br>Registry Group: <b>/ug4</b>
memberfunction
set_functions
void
void set_functions (c_string functions to be evaluated individually as comma-separated list)
void set_functions (c_string functions to be evaluated individually as comma-separated list)<br><br>Member function of class <b>CompositeConvCheck3dCPU3</b><br>Registry Group: <b>/ug4</b>
memberfunction
timeMeasurement
void
void timeMeasurement (bool )
void timeMeasurement (bool )<br><br>Member function of class <b>CompositeConvCheck3dCPU3</b><br>tooltip: whether to perform a time measurement or not<br>Registry Group: <b>/ug4</b>
memberfunction
set_maximum_steps
void
void set_maximum_steps (integer Maximum Steps)
void set_maximum_steps (integer Maximum Steps)<br><br>Member function of class <b>CompositeConvCheck3dCPU3</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_minimum_defect
void
void set_minimum_defect (std::vector<number >minimum defect for defined functions (comma-separated list), number minimum defect for rest)
void set_minimum_defect (std::vector&ltnumber &gtminimum defect for defined functions (comma-separated list), number minimum defect for rest)<br><br>Member function of class <b>CompositeConvCheck3dCPU3</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_reduction
void
void set_reduction (std::vector<number >defect reduction for defined functions (comma-separated list), number defect reduction for rest)
void set_reduction (std::vector&ltnumber &gtdefect reduction for defined functions (comma-separated list), number defect reduction for rest)<br><br>Member function of class <b>CompositeConvCheck3dCPU3</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_verbose
void
void set_verbose (bool Verbosity)
void set_verbose (bool Verbosity)<br><br>Member function of class <b>CompositeConvCheck3dCPU3</b><br>Registry Group: <b>/ug4</b>
memberfunction
iteration_ended
bool
bool iteration_ended ()
bool iteration_ended ()<br><br>Member function of class <b>CompositeConvCheck3dCPU3</b><br>Registry Group: <b>/ug4</b>
memberfunction
defect
number
number defect (size_t function index) const
number defect (size_t function index)<br><br>Member function of class <b>CompositeConvCheck3dCPU3</b><br>returns defect<br>tooltip: returns the current defect<br>Registry Group: <b>/ug4</b>
memberfunction
step
integer
integer step () const
integer step ()<br><br>Member function of class <b>CompositeConvCheck3dCPU3</b><br>returns step<br>tooltip: returns the current number of steps<br>Registry Group: <b>/ug4</b>
memberfunction
reduction
number
number reduction (size_t function index) const
number reduction (size_t function index)<br><br>Member function of class <b>CompositeConvCheck3dCPU3</b><br>returns reduction<br>tooltip: returns the current relative reduction for a function<br>Registry Group: <b>/ug4</b>
memberfunction
rate
number
number rate (size_t function index) const
number rate (size_t function index)<br><br>Member function of class <b>CompositeConvCheck3dCPU3</b><br>returns rate<br>tooltip: returns the current convergence rate for a function<br>Registry Group: <b>/ug4</b>
memberfunction
avg_rate
number
number avg_rate (size_t function index) const
number avg_rate (size_t function index)<br><br>Member function of class <b>CompositeConvCheck3dCPU3</b><br>returns avg_rate<br>tooltip: returns the averaged convergence rate for a function<br>Registry Group: <b>/ug4</b>
;
class
CondUserMatrix1d
ICplUserData1d 
Classgroup <b>CondUserMatrix</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="CondUserMatrix1d.html">CondUserMatrix1d</a> <br><table></table>
;
class
CondUserMatrix2d
ICplUserData2d 
Classgroup <b>CondUserMatrix</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="CondUserMatrix2d.html">CondUserMatrix2d</a> <br><table></table>
;
class
CondUserMatrix3d
ICplUserData3d 
Classgroup <b>CondUserMatrix</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="CondUserMatrix3d.html">CondUserMatrix3d</a> <br><table></table>
;
class
CondUserNumber1d
ICplUserData1d 
Classgroup <b>CondUserNumber</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="CondUserNumber1d.html">CondUserNumber1d</a> <br><table></table>
;
class
CondUserNumber2d
ICplUserData2d 
Classgroup <b>CondUserNumber</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="CondUserNumber2d.html">CondUserNumber2d</a> <br><table></table>
;
class
CondUserNumber3d
ICplUserData3d 
Classgroup <b>CondUserNumber</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="CondUserNumber3d.html">CondUserNumber3d</a> <br><table></table>
;
class
CondUserTensor41d
ICplUserData1d 
Classgroup <b>CondUserTensor4</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="CondUserTensor41d.html">CondUserTensor41d</a> <br><table></table>
;
class
CondUserTensor42d
ICplUserData2d 
Classgroup <b>CondUserTensor4</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="CondUserTensor42d.html">CondUserTensor42d</a> <br><table></table>
;
class
CondUserTensor43d
ICplUserData3d 
Classgroup <b>CondUserTensor4</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="CondUserTensor43d.html">CondUserTensor43d</a> <br><table></table>
;
class
CondUserVector1d
ICplUserData1d 
Classgroup <b>CondUserVector</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="CondUserVector1d.html">CondUserVector1d</a> <br><table></table>
;
class
CondUserVector2d
ICplUserData2d 
Classgroup <b>CondUserVector</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="CondUserVector2d.html">CondUserVector2d</a> <br><table></table>
;
class
CondUserVector3d
ICplUserData3d 
Classgroup <b>CondUserVector</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="CondUserVector3d.html">CondUserVector3d</a> <br><table></table>
;
class
ConstUserMatrix1d
ICplUserData1d UserMatrix1d 
Classgroup <b>ConstUserMatrix</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="UserMatrix1d.html">UserMatrix1d</a> <a href="ConstUserMatrix1d.html">ConstUserMatrix1d</a> <br><table><tr><td colspan=2><h3>ConstUserMatrix Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConstUserMatrix1d ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConstUserMatrix1d (number Diagonal Value)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConstUserMatrix Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_all_entries (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diag_tensor (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_entry (size_t , size_t , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConstUserMatrix Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserMatrix Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
ConstUserMatrix1d

ConstUserMatrix1d ()
ConstUserMatrix1d ()<br>Constructor of class <b>ConstUserMatrix1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
constructor
ConstUserMatrix1d

ConstUserMatrix1d (number Diagonal Value)
ConstUserMatrix1d (number Diagonal Value)<br>Constructor of class <b>ConstUserMatrix1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_diag_tensor
void
void set_diag_tensor (number )
void set_diag_tensor (number )<br><br>Member function of class <b>ConstUserMatrix1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_all_entries
void
void set_all_entries (number )
void set_all_entries (number )<br><br>Member function of class <b>ConstUserMatrix1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_entry
void
void set_entry (size_t , size_t , number )
void set_entry (size_t , size_t , number )<br><br>Member function of class <b>ConstUserMatrix1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
print
void
void print () const
void print ()<br><br>Member function of class <b>ConstUserMatrix1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
ConstUserMatrix2d
ICplUserData2d UserMatrix2d 
Classgroup <b>ConstUserMatrix</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserMatrix2d.html">UserMatrix2d</a> <a href="ConstUserMatrix2d.html">ConstUserMatrix2d</a> <br><table><tr><td colspan=2><h3>ConstUserMatrix Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConstUserMatrix2d ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConstUserMatrix2d (number Diagonal Value)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConstUserMatrix Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_all_entries (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diag_tensor (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_entry (size_t , size_t , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConstUserMatrix Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserMatrix Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
ConstUserMatrix2d

ConstUserMatrix2d ()
ConstUserMatrix2d ()<br>Constructor of class <b>ConstUserMatrix2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
constructor
ConstUserMatrix2d

ConstUserMatrix2d (number Diagonal Value)
ConstUserMatrix2d (number Diagonal Value)<br>Constructor of class <b>ConstUserMatrix2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_diag_tensor
void
void set_diag_tensor (number )
void set_diag_tensor (number )<br><br>Member function of class <b>ConstUserMatrix2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_all_entries
void
void set_all_entries (number )
void set_all_entries (number )<br><br>Member function of class <b>ConstUserMatrix2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_entry
void
void set_entry (size_t , size_t , number )
void set_entry (size_t , size_t , number )<br><br>Member function of class <b>ConstUserMatrix2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
print
void
void print () const
void print ()<br><br>Member function of class <b>ConstUserMatrix2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
ConstUserMatrix3d
ICplUserData3d UserMatrix3d 
Classgroup <b>ConstUserMatrix</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserMatrix3d.html">UserMatrix3d</a> <a href="ConstUserMatrix3d.html">ConstUserMatrix3d</a> <br><table><tr><td colspan=2><h3>ConstUserMatrix Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConstUserMatrix3d ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConstUserMatrix3d (number Diagonal Value)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConstUserMatrix Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_all_entries (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diag_tensor (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_entry (size_t , size_t , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConstUserMatrix Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserMatrix Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
ConstUserMatrix3d

ConstUserMatrix3d ()
ConstUserMatrix3d ()<br>Constructor of class <b>ConstUserMatrix3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
constructor
ConstUserMatrix3d

ConstUserMatrix3d (number Diagonal Value)
ConstUserMatrix3d (number Diagonal Value)<br>Constructor of class <b>ConstUserMatrix3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_diag_tensor
void
void set_diag_tensor (number )
void set_diag_tensor (number )<br><br>Member function of class <b>ConstUserMatrix3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_all_entries
void
void set_all_entries (number )
void set_all_entries (number )<br><br>Member function of class <b>ConstUserMatrix3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_entry
void
void set_entry (size_t , size_t , number )
void set_entry (size_t , size_t , number )<br><br>Member function of class <b>ConstUserMatrix3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
print
void
void print () const
void print ()<br><br>Member function of class <b>ConstUserMatrix3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
ConstUserNumber1d
ICplUserData1d UserNumber1d 
Classgroup <b>ConstUserNumber</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="UserNumber1d.html">UserNumber1d</a> <a href="ConstUserNumber1d.html">ConstUserNumber1d</a> <br><table><tr><td colspan=2><h3>ConstUserNumber Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConstUserNumber1d ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConstUserNumber1d (number Value)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConstUserNumber Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set (number Value)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConstUserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
ConstUserNumber1d

ConstUserNumber1d ()
ConstUserNumber1d ()<br>Constructor of class <b>ConstUserNumber1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
constructor
ConstUserNumber1d

ConstUserNumber1d (number Value)
ConstUserNumber1d (number Value)<br>Constructor of class <b>ConstUserNumber1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set
void
void set (number Value)
void set (number Value)<br><br>Member function of class <b>ConstUserNumber1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
print
void
void print () const
void print ()<br><br>Member function of class <b>ConstUserNumber1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
ConstUserNumber2d
ICplUserData2d UserNumber2d 
Classgroup <b>ConstUserNumber</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserNumber2d.html">UserNumber2d</a> <a href="ConstUserNumber2d.html">ConstUserNumber2d</a> <br><table><tr><td colspan=2><h3>ConstUserNumber Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConstUserNumber2d ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConstUserNumber2d (number Value)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConstUserNumber Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set (number Value)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConstUserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
ConstUserNumber2d

ConstUserNumber2d ()
ConstUserNumber2d ()<br>Constructor of class <b>ConstUserNumber2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
constructor
ConstUserNumber2d

ConstUserNumber2d (number Value)
ConstUserNumber2d (number Value)<br>Constructor of class <b>ConstUserNumber2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set
void
void set (number Value)
void set (number Value)<br><br>Member function of class <b>ConstUserNumber2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
print
void
void print () const
void print ()<br><br>Member function of class <b>ConstUserNumber2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
ConstUserNumber3d
ICplUserData3d UserNumber3d 
Classgroup <b>ConstUserNumber</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserNumber3d.html">UserNumber3d</a> <a href="ConstUserNumber3d.html">ConstUserNumber3d</a> <br><table><tr><td colspan=2><h3>ConstUserNumber Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConstUserNumber3d ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConstUserNumber3d (number Value)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConstUserNumber Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set (number Value)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConstUserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
ConstUserNumber3d

ConstUserNumber3d ()
ConstUserNumber3d ()<br>Constructor of class <b>ConstUserNumber3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
constructor
ConstUserNumber3d

ConstUserNumber3d (number Value)
ConstUserNumber3d (number Value)<br>Constructor of class <b>ConstUserNumber3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set
void
void set (number Value)
void set (number Value)<br><br>Member function of class <b>ConstUserNumber3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
print
void
void print () const
void print ()<br><br>Member function of class <b>ConstUserNumber3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
ConstUserVector1d
ICplUserData1d UserVector1d 
Classgroup <b>ConstUserVector</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="UserVector1d.html">UserVector1d</a> <a href="ConstUserVector1d.html">ConstUserVector1d</a> <br><table><tr><td colspan=2><h3>ConstUserVector Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConstUserVector1d ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConstUserVector1d (number Values)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConstUserVector Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_all_entries (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_entry (size_t , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConstUserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
ConstUserVector1d

ConstUserVector1d ()
ConstUserVector1d ()<br>Constructor of class <b>ConstUserVector1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
constructor
ConstUserVector1d

ConstUserVector1d (number Values)
ConstUserVector1d (number Values)<br>Constructor of class <b>ConstUserVector1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_all_entries
void
void set_all_entries (number )
void set_all_entries (number )<br><br>Member function of class <b>ConstUserVector1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_entry
void
void set_entry (size_t , number )
void set_entry (size_t , number )<br><br>Member function of class <b>ConstUserVector1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
print
void
void print () const
void print ()<br><br>Member function of class <b>ConstUserVector1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
ConstUserVector2d
ICplUserData2d UserVector2d 
Classgroup <b>ConstUserVector</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserVector2d.html">UserVector2d</a> <a href="ConstUserVector2d.html">ConstUserVector2d</a> <br><table><tr><td colspan=2><h3>ConstUserVector Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConstUserVector2d ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConstUserVector2d (number Values)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConstUserVector Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_all_entries (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_entry (size_t , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConstUserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
ConstUserVector2d

ConstUserVector2d ()
ConstUserVector2d ()<br>Constructor of class <b>ConstUserVector2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
constructor
ConstUserVector2d

ConstUserVector2d (number Values)
ConstUserVector2d (number Values)<br>Constructor of class <b>ConstUserVector2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_all_entries
void
void set_all_entries (number )
void set_all_entries (number )<br><br>Member function of class <b>ConstUserVector2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_entry
void
void set_entry (size_t , number )
void set_entry (size_t , number )<br><br>Member function of class <b>ConstUserVector2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
print
void
void print () const
void print ()<br><br>Member function of class <b>ConstUserVector2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
ConstUserVector3d
ICplUserData3d UserVector3d 
Classgroup <b>ConstUserVector</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserVector3d.html">UserVector3d</a> <a href="ConstUserVector3d.html">ConstUserVector3d</a> <br><table><tr><td colspan=2><h3>ConstUserVector Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConstUserVector3d ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConstUserVector3d (number Values)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConstUserVector Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_all_entries (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_entry (size_t , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConstUserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
ConstUserVector3d

ConstUserVector3d ()
ConstUserVector3d ()<br>Constructor of class <b>ConstUserVector3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
constructor
ConstUserVector3d

ConstUserVector3d (number Values)
ConstUserVector3d (number Values)<br>Constructor of class <b>ConstUserVector3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_all_entries
void
void set_all_entries (number )
void set_all_entries (number )<br><br>Member function of class <b>ConstUserVector3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_entry
void
void set_entry (size_t , number )
void set_entry (size_t , number )<br><br>Member function of class <b>ConstUserVector3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
print
void
void print () const
void print ()<br><br>Member function of class <b>ConstUserVector3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
ConstantEquationBase1d
IElemDisc1d 
Classgroup <b>ConstantEquationBase</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b><br>class has no constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="IElemDisc1d.html">IElemDisc1d</a> <a href="ConstantEquationBase1d.html">ConstantEquationBase1d</a> <br><table><tr><td colspan=2><h3>ConstantEquationBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>gradient ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (number Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (c_string Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (number Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (c_string Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (std::vector&ltnumber &gtVelocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (c_string Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>value ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
memberfunction
set_velocity
void
void set_velocity (SmartPtr<UserVector> Velocity Field)
void set_velocity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity Field)<br><br>Member function of class <b>ConstantEquationBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_velocity
void
void set_velocity (std::vector<number >Velocity Field)
void set_velocity (std::vector&ltnumber &gtVelocity Field)<br><br>Member function of class <b>ConstantEquationBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_velocity
void
void set_velocity (c_string Velocity Field)
void set_velocity (c_string Velocity Field)<br><br>Member function of class <b>ConstantEquationBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source
void
void set_source (SmartPtr<UserNumber> Source)
void set_source (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source)<br><br>Member function of class <b>ConstantEquationBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source
void
void set_source (number Source)
void set_source (number Source)<br><br>Member function of class <b>ConstantEquationBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source
void
void set_source (c_string Source)
void set_source (c_string Source)<br><br>Member function of class <b>ConstantEquationBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source_explicit
void
void set_source_explicit (SmartPtr<UserNumber> Source_explicit)
void set_source_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source_explicit)<br><br>Member function of class <b>ConstantEquationBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source_explicit
void
void set_source_explicit (number Source_explicit)
void set_source_explicit (number Source_explicit)<br><br>Member function of class <b>ConstantEquationBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source_explicit
void
void set_source_explicit (c_string Source_explicit)
void set_source_explicit (c_string Source_explicit)<br><br>Member function of class <b>ConstantEquationBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_mass
void
void set_mass (SmartPtr<UserNumber> Mass)
void set_mass (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass)<br><br>Member function of class <b>ConstantEquationBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_mass
void
void set_mass (number Mass)
void set_mass (number Mass)<br><br>Member function of class <b>ConstantEquationBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_mass
void
void set_mass (c_string Mass)
void set_mass (c_string Mass)<br><br>Member function of class <b>ConstantEquationBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
value
SmartPtr<UserNumber1d>
SmartPtr<UserNumber> value ()
SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; value ()<br><br>Member function of class <b>ConstantEquationBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
gradient
SmartPtr<UserVector1d>
SmartPtr<UserVector> gradient ()
SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; gradient ()<br><br>Member function of class <b>ConstantEquationBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
;
class
ConstantEquationBase2d
IElemDisc2d 
Classgroup <b>ConstantEquationBase</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b><br>class has no constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="ConstantEquationBase2d.html">ConstantEquationBase2d</a> <br><table><tr><td colspan=2><h3>ConstantEquationBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>gradient ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (number Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (c_string Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (number Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (c_string Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (std::vector&ltnumber &gtVelocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (c_string Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>value ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
memberfunction
set_velocity
void
void set_velocity (SmartPtr<UserVector> Velocity Field)
void set_velocity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity Field)<br><br>Member function of class <b>ConstantEquationBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_velocity
void
void set_velocity (std::vector<number >Velocity Field)
void set_velocity (std::vector&ltnumber &gtVelocity Field)<br><br>Member function of class <b>ConstantEquationBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_velocity
void
void set_velocity (c_string Velocity Field)
void set_velocity (c_string Velocity Field)<br><br>Member function of class <b>ConstantEquationBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source
void
void set_source (SmartPtr<UserNumber> Source)
void set_source (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source)<br><br>Member function of class <b>ConstantEquationBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source
void
void set_source (number Source)
void set_source (number Source)<br><br>Member function of class <b>ConstantEquationBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source
void
void set_source (c_string Source)
void set_source (c_string Source)<br><br>Member function of class <b>ConstantEquationBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source_explicit
void
void set_source_explicit (SmartPtr<UserNumber> Source_explicit)
void set_source_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source_explicit)<br><br>Member function of class <b>ConstantEquationBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source_explicit
void
void set_source_explicit (number Source_explicit)
void set_source_explicit (number Source_explicit)<br><br>Member function of class <b>ConstantEquationBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source_explicit
void
void set_source_explicit (c_string Source_explicit)
void set_source_explicit (c_string Source_explicit)<br><br>Member function of class <b>ConstantEquationBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_mass
void
void set_mass (SmartPtr<UserNumber> Mass)
void set_mass (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass)<br><br>Member function of class <b>ConstantEquationBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_mass
void
void set_mass (number Mass)
void set_mass (number Mass)<br><br>Member function of class <b>ConstantEquationBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_mass
void
void set_mass (c_string Mass)
void set_mass (c_string Mass)<br><br>Member function of class <b>ConstantEquationBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
value
SmartPtr<UserNumber2d>
SmartPtr<UserNumber> value ()
SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; value ()<br><br>Member function of class <b>ConstantEquationBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
gradient
SmartPtr<UserVector2d>
SmartPtr<UserVector> gradient ()
SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; gradient ()<br><br>Member function of class <b>ConstantEquationBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
;
class
ConstantEquationBase3d
IElemDisc3d 
Classgroup <b>ConstantEquationBase</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b><br>class has no constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IElemDisc3d.html">IElemDisc3d</a> <a href="ConstantEquationBase3d.html">ConstantEquationBase3d</a> <br><table><tr><td colspan=2><h3>ConstantEquationBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>gradient ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (number Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (c_string Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (number Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (c_string Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (std::vector&ltnumber &gtVelocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (c_string Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>value ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
memberfunction
set_velocity
void
void set_velocity (SmartPtr<UserVector> Velocity Field)
void set_velocity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity Field)<br><br>Member function of class <b>ConstantEquationBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_velocity
void
void set_velocity (std::vector<number >Velocity Field)
void set_velocity (std::vector&ltnumber &gtVelocity Field)<br><br>Member function of class <b>ConstantEquationBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_velocity
void
void set_velocity (c_string Velocity Field)
void set_velocity (c_string Velocity Field)<br><br>Member function of class <b>ConstantEquationBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source
void
void set_source (SmartPtr<UserNumber> Source)
void set_source (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source)<br><br>Member function of class <b>ConstantEquationBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source
void
void set_source (number Source)
void set_source (number Source)<br><br>Member function of class <b>ConstantEquationBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source
void
void set_source (c_string Source)
void set_source (c_string Source)<br><br>Member function of class <b>ConstantEquationBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source_explicit
void
void set_source_explicit (SmartPtr<UserNumber> Source_explicit)
void set_source_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source_explicit)<br><br>Member function of class <b>ConstantEquationBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source_explicit
void
void set_source_explicit (number Source_explicit)
void set_source_explicit (number Source_explicit)<br><br>Member function of class <b>ConstantEquationBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source_explicit
void
void set_source_explicit (c_string Source_explicit)
void set_source_explicit (c_string Source_explicit)<br><br>Member function of class <b>ConstantEquationBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_mass
void
void set_mass (SmartPtr<UserNumber> Mass)
void set_mass (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass)<br><br>Member function of class <b>ConstantEquationBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_mass
void
void set_mass (number Mass)
void set_mass (number Mass)<br><br>Member function of class <b>ConstantEquationBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_mass
void
void set_mass (c_string Mass)
void set_mass (c_string Mass)<br><br>Member function of class <b>ConstantEquationBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
value
SmartPtr<UserNumber3d>
SmartPtr<UserNumber> value ()
SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; value ()<br><br>Member function of class <b>ConstantEquationBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
gradient
SmartPtr<UserVector3d>
SmartPtr<UserVector> gradient ()
SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; gradient ()<br><br>Member function of class <b>ConstantEquationBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
;
class
ConstantEquationFE1d
IElemDisc1d ConstantEquationBase1d 
Classgroup <b>ConstantEquationFE</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="IElemDisc1d.html">IElemDisc1d</a> <a href="ConstantEquationBase1d.html">ConstantEquationBase1d</a> <a href="ConstantEquationFE1d.html">ConstantEquationFE1d</a> <br><table><tr><td colspan=2><h3>ConstantEquationFE Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConstantEquationFE1d (c_string Function(s), c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConstantEquationFE Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_quad_order (size_t )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ConstantEquationBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>gradient ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (number Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (c_string Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (number Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (c_string Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (std::vector&ltnumber &gtVelocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (c_string Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>value ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
ConstantEquationFE1d

ConstantEquationFE1d (c_string Function(s), c_string Subset(s))
ConstantEquationFE1d (c_string Function(s), c_string Subset(s))<br>Constructor of class <b>ConstantEquationFE1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_quad_order
void
void set_quad_order (size_t )
void set_quad_order (size_t )<br><br>Member function of class <b>ConstantEquationFE1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
;
class
ConstantEquationFE2d
IElemDisc2d ConstantEquationBase2d 
Classgroup <b>ConstantEquationFE</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="ConstantEquationBase2d.html">ConstantEquationBase2d</a> <a href="ConstantEquationFE2d.html">ConstantEquationFE2d</a> <br><table><tr><td colspan=2><h3>ConstantEquationFE Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConstantEquationFE2d (c_string Function(s), c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConstantEquationFE Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_quad_order (size_t )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ConstantEquationBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>gradient ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (number Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (c_string Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (number Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (c_string Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (std::vector&ltnumber &gtVelocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (c_string Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>value ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
ConstantEquationFE2d

ConstantEquationFE2d (c_string Function(s), c_string Subset(s))
ConstantEquationFE2d (c_string Function(s), c_string Subset(s))<br>Constructor of class <b>ConstantEquationFE2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_quad_order
void
void set_quad_order (size_t )
void set_quad_order (size_t )<br><br>Member function of class <b>ConstantEquationFE2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
;
class
ConstantEquationFE3d
IElemDisc3d ConstantEquationBase3d 
Classgroup <b>ConstantEquationFE</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IElemDisc3d.html">IElemDisc3d</a> <a href="ConstantEquationBase3d.html">ConstantEquationBase3d</a> <a href="ConstantEquationFE3d.html">ConstantEquationFE3d</a> <br><table><tr><td colspan=2><h3>ConstantEquationFE Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConstantEquationFE3d (c_string Function(s), c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConstantEquationFE Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_quad_order (size_t )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ConstantEquationBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>gradient ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (number Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (c_string Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (number Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (c_string Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (std::vector&ltnumber &gtVelocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (c_string Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>value ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
ConstantEquationFE3d

ConstantEquationFE3d (c_string Function(s), c_string Subset(s))
ConstantEquationFE3d (c_string Function(s), c_string Subset(s))<br>Constructor of class <b>ConstantEquationFE3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_quad_order
void
void set_quad_order (size_t )
void set_quad_order (size_t )<br><br>Member function of class <b>ConstantEquationFE3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
;
class
ConstantEquationFV11d
IElemDisc1d ConstantEquationBase1d 
Classgroup <b>ConstantEquationFV1</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="IElemDisc1d.html">IElemDisc1d</a> <a href="ConstantEquationBase1d.html">ConstantEquationBase1d</a> <a href="ConstantEquationFV11d.html">ConstantEquationFV11d</a> <br><table><tr><td colspan=2><h3>ConstantEquationFV1 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConstantEquationFV11d (c_string Function(s), c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ConstantEquationBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>gradient ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (number Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (c_string Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (number Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (c_string Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (std::vector&ltnumber &gtVelocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (c_string Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>value ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
ConstantEquationFV11d

ConstantEquationFV11d (c_string Function(s), c_string Subset(s))
ConstantEquationFV11d (c_string Function(s), c_string Subset(s))<br>Constructor of class <b>ConstantEquationFV11d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
;
class
ConstantEquationFV12d
IElemDisc2d ConstantEquationBase2d 
Classgroup <b>ConstantEquationFV1</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="ConstantEquationBase2d.html">ConstantEquationBase2d</a> <a href="ConstantEquationFV12d.html">ConstantEquationFV12d</a> <br><table><tr><td colspan=2><h3>ConstantEquationFV1 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConstantEquationFV12d (c_string Function(s), c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ConstantEquationBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>gradient ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (number Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (c_string Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (number Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (c_string Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (std::vector&ltnumber &gtVelocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (c_string Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>value ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
ConstantEquationFV12d

ConstantEquationFV12d (c_string Function(s), c_string Subset(s))
ConstantEquationFV12d (c_string Function(s), c_string Subset(s))<br>Constructor of class <b>ConstantEquationFV12d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
;
class
ConstantEquationFV13d
IElemDisc3d ConstantEquationBase3d 
Classgroup <b>ConstantEquationFV1</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IElemDisc3d.html">IElemDisc3d</a> <a href="ConstantEquationBase3d.html">ConstantEquationBase3d</a> <a href="ConstantEquationFV13d.html">ConstantEquationFV13d</a> <br><table><tr><td colspan=2><h3>ConstantEquationFV1 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConstantEquationFV13d (c_string Function(s), c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ConstantEquationBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>gradient ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (number Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (c_string Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (number Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (c_string Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (std::vector&ltnumber &gtVelocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (c_string Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>value ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
ConstantEquationFV13d

ConstantEquationFV13d (c_string Function(s), c_string Subset(s))
ConstantEquationFV13d (c_string Function(s), c_string Subset(s))<br>Constructor of class <b>ConstantEquationFV13d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
;
class
ConstantEquationFV1d
IElemDisc1d ConstantEquationBase1d 
Classgroup <b>ConstantEquationFV</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="IElemDisc1d.html">IElemDisc1d</a> <a href="ConstantEquationBase1d.html">ConstantEquationBase1d</a> <a href="ConstantEquationFV1d.html">ConstantEquationFV1d</a> <br><table><tr><td colspan=2><h3>ConstantEquationFV Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConstantEquationFV1d (c_string Function(s), c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConstantEquationFV Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_quad_order (size_t )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ConstantEquationBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>gradient ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (number Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (c_string Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (number Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (c_string Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (std::vector&ltnumber &gtVelocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (c_string Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>value ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
ConstantEquationFV1d

ConstantEquationFV1d (c_string Function(s), c_string Subset(s))
ConstantEquationFV1d (c_string Function(s), c_string Subset(s))<br>Constructor of class <b>ConstantEquationFV1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_quad_order
void
void set_quad_order (size_t )
void set_quad_order (size_t )<br><br>Member function of class <b>ConstantEquationFV1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
;
class
ConstantEquationFV2d
IElemDisc2d ConstantEquationBase2d 
Classgroup <b>ConstantEquationFV</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="ConstantEquationBase2d.html">ConstantEquationBase2d</a> <a href="ConstantEquationFV2d.html">ConstantEquationFV2d</a> <br><table><tr><td colspan=2><h3>ConstantEquationFV Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConstantEquationFV2d (c_string Function(s), c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConstantEquationFV Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_quad_order (size_t )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ConstantEquationBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>gradient ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (number Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (c_string Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (number Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (c_string Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (std::vector&ltnumber &gtVelocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (c_string Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>value ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
ConstantEquationFV2d

ConstantEquationFV2d (c_string Function(s), c_string Subset(s))
ConstantEquationFV2d (c_string Function(s), c_string Subset(s))<br>Constructor of class <b>ConstantEquationFV2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_quad_order
void
void set_quad_order (size_t )
void set_quad_order (size_t )<br><br>Member function of class <b>ConstantEquationFV2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
;
class
ConstantEquationFV3d
IElemDisc3d ConstantEquationBase3d 
Classgroup <b>ConstantEquationFV</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IElemDisc3d.html">IElemDisc3d</a> <a href="ConstantEquationBase3d.html">ConstantEquationBase3d</a> <a href="ConstantEquationFV3d.html">ConstantEquationFV3d</a> <br><table><tr><td colspan=2><h3>ConstantEquationFV Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConstantEquationFV3d (c_string Function(s), c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConstantEquationFV Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_quad_order (size_t )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ConstantEquationBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>gradient ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (number Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (c_string Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (number Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (c_string Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (std::vector&ltnumber &gtVelocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (c_string Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>value ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
ConstantEquationFV3d

ConstantEquationFV3d (c_string Function(s), c_string Subset(s))
ConstantEquationFV3d (c_string Function(s), c_string Subset(s))<br>Constructor of class <b>ConstantEquationFV3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_quad_order
void
void set_quad_order (size_t )
void set_quad_order (size_t )<br><br>Member function of class <b>ConstantEquationFV3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
;
class
ConvCheckCPU1
IConvergenceCheckCPU1 
Classgroup <b>ConvCheck</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has constructor.  Tag <b>alg=CPU1;</b><br>Convergence Check<br>Inheritance: <a href="IConvergenceCheckCPU1.html">IConvergenceCheckCPU1</a> <a href="ConvCheckCPU1.html">ConvCheckCPU1</a> <br><table><tr><td colspan=2><h3>ConvCheck Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConvCheckCPU1 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConvCheckCPU1 (integer Maximum Steps, number Minimum Defect, number Relative Reduction, bool Verbosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConvCheckCPU1 (integer Maximum Steps, number Minimum Defect, number Relative Reduction)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConvCheck Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>iteration_ended ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_maximum_steps (integer Maximum Steps)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: maximum number of steps to do<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_minimum_defect (number Minimum Defect)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reduction (number Relative Reduction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_verbose (bool Verbosity)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConvCheck Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns defect<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>previous_defect ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns reduction<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current relative reduction<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns step<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current number of steps<br/></td></tr><tr><td><br></td></tr></table>
constructor
ConvCheckCPU1

ConvCheckCPU1 ()
ConvCheckCPU1 ()<br>Constructor of class <b>ConvCheckCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
constructor
ConvCheckCPU1

ConvCheckCPU1 (integer Maximum Steps, number Minimum Defect, number Relative Reduction, bool Verbosity)
ConvCheckCPU1 (integer Maximum Steps, number Minimum Defect, number Relative Reduction, bool Verbosity)<br>Constructor of class <b>ConvCheckCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
constructor
ConvCheckCPU1

ConvCheckCPU1 (integer Maximum Steps, number Minimum Defect, number Relative Reduction)
ConvCheckCPU1 (integer Maximum Steps, number Minimum Defect, number Relative Reduction)<br>Constructor of class <b>ConvCheckCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
set_maximum_steps
void
void set_maximum_steps (integer Maximum Steps)
void set_maximum_steps (integer Maximum Steps)<br><br>Member function of class <b>ConvCheckCPU1</b><br>tooltip: maximum number of steps to do<br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
set_minimum_defect
void
void set_minimum_defect (number Minimum Defect)
void set_minimum_defect (number Minimum Defect)<br><br>Member function of class <b>ConvCheckCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
set_reduction
void
void set_reduction (number Relative Reduction)
void set_reduction (number Relative Reduction)<br><br>Member function of class <b>ConvCheckCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
set_verbose
void
void set_verbose (bool Verbosity)
void set_verbose (bool Verbosity)<br><br>Member function of class <b>ConvCheckCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
iteration_ended
bool
bool iteration_ended ()
bool iteration_ended ()<br><br>Member function of class <b>ConvCheckCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
defect
number
number defect () const
number defect ()<br><br>Member function of class <b>ConvCheckCPU1</b><br>returns defect<br>tooltip: returns the current defect<br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
step
integer
integer step () const
integer step ()<br><br>Member function of class <b>ConvCheckCPU1</b><br>returns step<br>tooltip: returns the current number of steps<br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
reduction
number
number reduction () const
number reduction ()<br><br>Member function of class <b>ConvCheckCPU1</b><br>returns reduction<br>tooltip: returns the current relative reduction<br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
previous_defect
number
number previous_defect () const
number previous_defect ()<br><br>Member function of class <b>ConvCheckCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
;
class
ConvCheckCPU2
IConvergenceCheckCPU2 
Classgroup <b>ConvCheck</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has constructor.  Tag <b>alg=CPU2;</b><br>Convergence Check<br>Inheritance: <a href="IConvergenceCheckCPU2.html">IConvergenceCheckCPU2</a> <a href="ConvCheckCPU2.html">ConvCheckCPU2</a> <br><table><tr><td colspan=2><h3>ConvCheck Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConvCheckCPU2 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConvCheckCPU2 (integer Maximum Steps, number Minimum Defect, number Relative Reduction, bool Verbosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConvCheckCPU2 (integer Maximum Steps, number Minimum Defect, number Relative Reduction)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConvCheck Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>iteration_ended ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_maximum_steps (integer Maximum Steps)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: maximum number of steps to do<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_minimum_defect (number Minimum Defect)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reduction (number Relative Reduction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_verbose (bool Verbosity)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConvCheck Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns defect<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>previous_defect ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns reduction<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current relative reduction<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns step<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current number of steps<br/></td></tr><tr><td><br></td></tr></table>
constructor
ConvCheckCPU2

ConvCheckCPU2 ()
ConvCheckCPU2 ()<br>Constructor of class <b>ConvCheckCPU2</b><br>Registry Group: <b>/ug4/Algebra</b>
constructor
ConvCheckCPU2

ConvCheckCPU2 (integer Maximum Steps, number Minimum Defect, number Relative Reduction, bool Verbosity)
ConvCheckCPU2 (integer Maximum Steps, number Minimum Defect, number Relative Reduction, bool Verbosity)<br>Constructor of class <b>ConvCheckCPU2</b><br>Registry Group: <b>/ug4/Algebra</b>
constructor
ConvCheckCPU2

ConvCheckCPU2 (integer Maximum Steps, number Minimum Defect, number Relative Reduction)
ConvCheckCPU2 (integer Maximum Steps, number Minimum Defect, number Relative Reduction)<br>Constructor of class <b>ConvCheckCPU2</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
set_maximum_steps
void
void set_maximum_steps (integer Maximum Steps)
void set_maximum_steps (integer Maximum Steps)<br><br>Member function of class <b>ConvCheckCPU2</b><br>tooltip: maximum number of steps to do<br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
set_minimum_defect
void
void set_minimum_defect (number Minimum Defect)
void set_minimum_defect (number Minimum Defect)<br><br>Member function of class <b>ConvCheckCPU2</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
set_reduction
void
void set_reduction (number Relative Reduction)
void set_reduction (number Relative Reduction)<br><br>Member function of class <b>ConvCheckCPU2</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
set_verbose
void
void set_verbose (bool Verbosity)
void set_verbose (bool Verbosity)<br><br>Member function of class <b>ConvCheckCPU2</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
iteration_ended
bool
bool iteration_ended ()
bool iteration_ended ()<br><br>Member function of class <b>ConvCheckCPU2</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
defect
number
number defect () const
number defect ()<br><br>Member function of class <b>ConvCheckCPU2</b><br>returns defect<br>tooltip: returns the current defect<br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
step
integer
integer step () const
integer step ()<br><br>Member function of class <b>ConvCheckCPU2</b><br>returns step<br>tooltip: returns the current number of steps<br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
reduction
number
number reduction () const
number reduction ()<br><br>Member function of class <b>ConvCheckCPU2</b><br>returns reduction<br>tooltip: returns the current relative reduction<br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
previous_defect
number
number previous_defect () const
number previous_defect ()<br><br>Member function of class <b>ConvCheckCPU2</b><br>Registry Group: <b>/ug4/Algebra</b>
;
class
ConvCheckCPU3
IConvergenceCheckCPU3 
Classgroup <b>ConvCheck</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has constructor.  Tag <b>alg=CPU3;</b><br>Convergence Check<br>Inheritance: <a href="IConvergenceCheckCPU3.html">IConvergenceCheckCPU3</a> <a href="ConvCheckCPU3.html">ConvCheckCPU3</a> <br><table><tr><td colspan=2><h3>ConvCheck Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConvCheckCPU3 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConvCheckCPU3 (integer Maximum Steps, number Minimum Defect, number Relative Reduction, bool Verbosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConvCheckCPU3 (integer Maximum Steps, number Minimum Defect, number Relative Reduction)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConvCheck Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>iteration_ended ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_maximum_steps (integer Maximum Steps)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: maximum number of steps to do<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_minimum_defect (number Minimum Defect)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reduction (number Relative Reduction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_verbose (bool Verbosity)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConvCheck Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns defect<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>previous_defect ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns reduction<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current relative reduction<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns step<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current number of steps<br/></td></tr><tr><td><br></td></tr></table>
constructor
ConvCheckCPU3

ConvCheckCPU3 ()
ConvCheckCPU3 ()<br>Constructor of class <b>ConvCheckCPU3</b><br>Registry Group: <b>/ug4/Algebra</b>
constructor
ConvCheckCPU3

ConvCheckCPU3 (integer Maximum Steps, number Minimum Defect, number Relative Reduction, bool Verbosity)
ConvCheckCPU3 (integer Maximum Steps, number Minimum Defect, number Relative Reduction, bool Verbosity)<br>Constructor of class <b>ConvCheckCPU3</b><br>Registry Group: <b>/ug4/Algebra</b>
constructor
ConvCheckCPU3

ConvCheckCPU3 (integer Maximum Steps, number Minimum Defect, number Relative Reduction)
ConvCheckCPU3 (integer Maximum Steps, number Minimum Defect, number Relative Reduction)<br>Constructor of class <b>ConvCheckCPU3</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
set_maximum_steps
void
void set_maximum_steps (integer Maximum Steps)
void set_maximum_steps (integer Maximum Steps)<br><br>Member function of class <b>ConvCheckCPU3</b><br>tooltip: maximum number of steps to do<br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
set_minimum_defect
void
void set_minimum_defect (number Minimum Defect)
void set_minimum_defect (number Minimum Defect)<br><br>Member function of class <b>ConvCheckCPU3</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
set_reduction
void
void set_reduction (number Relative Reduction)
void set_reduction (number Relative Reduction)<br><br>Member function of class <b>ConvCheckCPU3</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
set_verbose
void
void set_verbose (bool Verbosity)
void set_verbose (bool Verbosity)<br><br>Member function of class <b>ConvCheckCPU3</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
iteration_ended
bool
bool iteration_ended ()
bool iteration_ended ()<br><br>Member function of class <b>ConvCheckCPU3</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
defect
number
number defect () const
number defect ()<br><br>Member function of class <b>ConvCheckCPU3</b><br>returns defect<br>tooltip: returns the current defect<br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
step
integer
integer step () const
integer step ()<br><br>Member function of class <b>ConvCheckCPU3</b><br>returns step<br>tooltip: returns the current number of steps<br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
reduction
number
number reduction () const
number reduction ()<br><br>Member function of class <b>ConvCheckCPU3</b><br>returns reduction<br>tooltip: returns the current relative reduction<br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
previous_defect
number
number previous_defect () const
number previous_defect ()<br><br>Member function of class <b>ConvCheckCPU3</b><br>Registry Group: <b>/ug4/Algebra</b>
;
class
ConvectionDiffusionBase1d
IElemDisc1d 
Classgroup <b>ConvectionDiffusionBase</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b><br>class has no constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="IElemDisc1d.html">IElemDisc1d</a> <a href="ConvectionDiffusionBase1d.html">ConvectionDiffusionBase1d</a> <br><table><tr><td colspan=2><h3>ConvectionDiffusionBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>gradient ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (c_string Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (number Diagonal Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (c_string Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (number Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (number Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (c_string Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (number Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (c_string Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (c_string Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (number Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (c_string Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (number Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (c_string Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (number Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (c_string Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (number Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vector_source (c_string Vector Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vector_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Vector Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (std::vector&ltnumber &gtVelocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (c_string Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>value ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
memberfunction
set_diffusion
void
void set_diffusion (SmartPtr<UserMatrix> Diffusion)
void set_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Diffusion)<br><br>Member function of class <b>ConvectionDiffusionBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_diffusion
void
void set_diffusion (number Diagonal Diffusion)
void set_diffusion (number Diagonal Diffusion)<br><br>Member function of class <b>ConvectionDiffusionBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_diffusion
void
void set_diffusion (c_string Diffusion)
void set_diffusion (c_string Diffusion)<br><br>Member function of class <b>ConvectionDiffusionBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_velocity
void
void set_velocity (SmartPtr<UserVector> Velocity Field)
void set_velocity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity Field)<br><br>Member function of class <b>ConvectionDiffusionBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_velocity
void
void set_velocity (std::vector<number >Velocity Field)
void set_velocity (std::vector&ltnumber &gtVelocity Field)<br><br>Member function of class <b>ConvectionDiffusionBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_velocity
void
void set_velocity (c_string Velocity Field)
void set_velocity (c_string Velocity Field)<br><br>Member function of class <b>ConvectionDiffusionBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction_rate
void
void set_reaction_rate (SmartPtr<UserNumber> Reaction Rate)
void set_reaction_rate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate)<br><br>Member function of class <b>ConvectionDiffusionBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction_rate
void
void set_reaction_rate (number Reaction Rate)
void set_reaction_rate (number Reaction Rate)<br><br>Member function of class <b>ConvectionDiffusionBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction_rate
void
void set_reaction_rate (c_string Reaction Rate)
void set_reaction_rate (c_string Reaction Rate)<br><br>Member function of class <b>ConvectionDiffusionBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction
void
void set_reaction (SmartPtr<UserNumber> Reaction)
void set_reaction (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction)<br><br>Member function of class <b>ConvectionDiffusionBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction
void
void set_reaction (number Reaction)
void set_reaction (number Reaction)<br><br>Member function of class <b>ConvectionDiffusionBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction
void
void set_reaction (c_string Reaction)
void set_reaction (c_string Reaction)<br><br>Member function of class <b>ConvectionDiffusionBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction_rate_explicit
void
void set_reaction_rate_explicit (SmartPtr<UserNumber> Reaction Rate Explicit)
void set_reaction_rate_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate Explicit)<br><br>Member function of class <b>ConvectionDiffusionBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction_rate_explicit
void
void set_reaction_rate_explicit (number Reaction Rate Explicit)
void set_reaction_rate_explicit (number Reaction Rate Explicit)<br><br>Member function of class <b>ConvectionDiffusionBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction_rate_explicit
void
void set_reaction_rate_explicit (c_string Reaction Rate Explicit)
void set_reaction_rate_explicit (c_string Reaction Rate Explicit)<br><br>Member function of class <b>ConvectionDiffusionBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction_explicit
void
void set_reaction_explicit (SmartPtr<UserNumber> Reaction Explicit)
void set_reaction_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Explicit)<br><br>Member function of class <b>ConvectionDiffusionBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction_explicit
void
void set_reaction_explicit (number Reaction Explicit)
void set_reaction_explicit (number Reaction Explicit)<br><br>Member function of class <b>ConvectionDiffusionBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction_explicit
void
void set_reaction_explicit (c_string Reaction Explicit)
void set_reaction_explicit (c_string Reaction Explicit)<br><br>Member function of class <b>ConvectionDiffusionBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source_explicit
void
void set_source_explicit (SmartPtr<UserNumber> Source Explicit)
void set_source_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source Explicit)<br><br>Member function of class <b>ConvectionDiffusionBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source_explicit
void
void set_source_explicit (number Source Explicit)
void set_source_explicit (number Source Explicit)<br><br>Member function of class <b>ConvectionDiffusionBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source_explicit
void
void set_source_explicit (c_string Source Explicit)
void set_source_explicit (c_string Source Explicit)<br><br>Member function of class <b>ConvectionDiffusionBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source
void
void set_source (SmartPtr<UserNumber> Source)
void set_source (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source)<br><br>Member function of class <b>ConvectionDiffusionBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source
void
void set_source (number Source)
void set_source (number Source)<br><br>Member function of class <b>ConvectionDiffusionBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source
void
void set_source (c_string Source)
void set_source (c_string Source)<br><br>Member function of class <b>ConvectionDiffusionBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_vector_source
void
void set_vector_source (SmartPtr<UserVector> Vector Source)
void set_vector_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Vector Source)<br><br>Member function of class <b>ConvectionDiffusionBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_vector_source
void
void set_vector_source (c_string Vector Source)
void set_vector_source (c_string Vector Source)<br><br>Member function of class <b>ConvectionDiffusionBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_mass_scale
void
void set_mass_scale (SmartPtr<UserNumber> Mass Scale)
void set_mass_scale (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass Scale)<br><br>Member function of class <b>ConvectionDiffusionBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_mass_scale
void
void set_mass_scale (number Mass Scale)
void set_mass_scale (number Mass Scale)<br><br>Member function of class <b>ConvectionDiffusionBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_mass_scale
void
void set_mass_scale (c_string Mass Scale)
void set_mass_scale (c_string Mass Scale)<br><br>Member function of class <b>ConvectionDiffusionBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_mass
void
void set_mass (SmartPtr<UserNumber> Mass)
void set_mass (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass)<br><br>Member function of class <b>ConvectionDiffusionBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_mass
void
void set_mass (number Mass)
void set_mass (number Mass)<br><br>Member function of class <b>ConvectionDiffusionBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_mass
void
void set_mass (c_string Mass)
void set_mass (c_string Mass)<br><br>Member function of class <b>ConvectionDiffusionBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
value
SmartPtr<UserNumber1d>
SmartPtr<UserNumber> value ()
SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; value ()<br><br>Member function of class <b>ConvectionDiffusionBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
gradient
SmartPtr<UserVector1d>
SmartPtr<UserVector> gradient ()
SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; gradient ()<br><br>Member function of class <b>ConvectionDiffusionBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
;
class
ConvectionDiffusionBase2d
IElemDisc2d 
Classgroup <b>ConvectionDiffusionBase</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b><br>class has no constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="ConvectionDiffusionBase2d.html">ConvectionDiffusionBase2d</a> <br><table><tr><td colspan=2><h3>ConvectionDiffusionBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>gradient ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (c_string Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (number Diagonal Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (c_string Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (number Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (number Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (c_string Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (number Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (c_string Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (c_string Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (number Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (c_string Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (number Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (c_string Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (number Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (c_string Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (number Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vector_source (c_string Vector Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vector_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Vector Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (std::vector&ltnumber &gtVelocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (c_string Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>value ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
memberfunction
set_diffusion
void
void set_diffusion (SmartPtr<UserMatrix> Diffusion)
void set_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Diffusion)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_diffusion
void
void set_diffusion (number Diagonal Diffusion)
void set_diffusion (number Diagonal Diffusion)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_diffusion
void
void set_diffusion (c_string Diffusion)
void set_diffusion (c_string Diffusion)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_velocity
void
void set_velocity (SmartPtr<UserVector> Velocity Field)
void set_velocity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity Field)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_velocity
void
void set_velocity (std::vector<number >Velocity Field)
void set_velocity (std::vector&ltnumber &gtVelocity Field)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_velocity
void
void set_velocity (c_string Velocity Field)
void set_velocity (c_string Velocity Field)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction_rate
void
void set_reaction_rate (SmartPtr<UserNumber> Reaction Rate)
void set_reaction_rate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction_rate
void
void set_reaction_rate (number Reaction Rate)
void set_reaction_rate (number Reaction Rate)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction_rate
void
void set_reaction_rate (c_string Reaction Rate)
void set_reaction_rate (c_string Reaction Rate)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction
void
void set_reaction (SmartPtr<UserNumber> Reaction)
void set_reaction (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction
void
void set_reaction (number Reaction)
void set_reaction (number Reaction)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction
void
void set_reaction (c_string Reaction)
void set_reaction (c_string Reaction)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction_rate_explicit
void
void set_reaction_rate_explicit (SmartPtr<UserNumber> Reaction Rate Explicit)
void set_reaction_rate_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate Explicit)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction_rate_explicit
void
void set_reaction_rate_explicit (number Reaction Rate Explicit)
void set_reaction_rate_explicit (number Reaction Rate Explicit)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction_rate_explicit
void
void set_reaction_rate_explicit (c_string Reaction Rate Explicit)
void set_reaction_rate_explicit (c_string Reaction Rate Explicit)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction_explicit
void
void set_reaction_explicit (SmartPtr<UserNumber> Reaction Explicit)
void set_reaction_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Explicit)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction_explicit
void
void set_reaction_explicit (number Reaction Explicit)
void set_reaction_explicit (number Reaction Explicit)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction_explicit
void
void set_reaction_explicit (c_string Reaction Explicit)
void set_reaction_explicit (c_string Reaction Explicit)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source_explicit
void
void set_source_explicit (SmartPtr<UserNumber> Source Explicit)
void set_source_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source Explicit)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source_explicit
void
void set_source_explicit (number Source Explicit)
void set_source_explicit (number Source Explicit)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source_explicit
void
void set_source_explicit (c_string Source Explicit)
void set_source_explicit (c_string Source Explicit)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source
void
void set_source (SmartPtr<UserNumber> Source)
void set_source (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source
void
void set_source (number Source)
void set_source (number Source)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source
void
void set_source (c_string Source)
void set_source (c_string Source)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_vector_source
void
void set_vector_source (SmartPtr<UserVector> Vector Source)
void set_vector_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Vector Source)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_vector_source
void
void set_vector_source (c_string Vector Source)
void set_vector_source (c_string Vector Source)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_mass_scale
void
void set_mass_scale (SmartPtr<UserNumber> Mass Scale)
void set_mass_scale (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass Scale)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_mass_scale
void
void set_mass_scale (number Mass Scale)
void set_mass_scale (number Mass Scale)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_mass_scale
void
void set_mass_scale (c_string Mass Scale)
void set_mass_scale (c_string Mass Scale)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_mass
void
void set_mass (SmartPtr<UserNumber> Mass)
void set_mass (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_mass
void
void set_mass (number Mass)
void set_mass (number Mass)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_mass
void
void set_mass (c_string Mass)
void set_mass (c_string Mass)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
value
SmartPtr<UserNumber2d>
SmartPtr<UserNumber> value ()
SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; value ()<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
gradient
SmartPtr<UserVector2d>
SmartPtr<UserVector> gradient ()
SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; gradient ()<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
;
class
ConvectionDiffusionBase3d
IElemDisc3d 
Classgroup <b>ConvectionDiffusionBase</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b><br>class has no constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IElemDisc3d.html">IElemDisc3d</a> <a href="ConvectionDiffusionBase3d.html">ConvectionDiffusionBase3d</a> <br><table><tr><td colspan=2><h3>ConvectionDiffusionBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>gradient ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (c_string Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (number Diagonal Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (c_string Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (number Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (number Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (c_string Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (number Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (c_string Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (c_string Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (number Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (c_string Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (number Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (c_string Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (number Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (c_string Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (number Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vector_source (c_string Vector Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vector_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Vector Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (std::vector&ltnumber &gtVelocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (c_string Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>value ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
memberfunction
set_diffusion
void
void set_diffusion (SmartPtr<UserMatrix> Diffusion)
void set_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Diffusion)<br><br>Member function of class <b>ConvectionDiffusionBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_diffusion
void
void set_diffusion (number Diagonal Diffusion)
void set_diffusion (number Diagonal Diffusion)<br><br>Member function of class <b>ConvectionDiffusionBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_diffusion
void
void set_diffusion (c_string Diffusion)
void set_diffusion (c_string Diffusion)<br><br>Member function of class <b>ConvectionDiffusionBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_velocity
void
void set_velocity (SmartPtr<UserVector> Velocity Field)
void set_velocity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity Field)<br><br>Member function of class <b>ConvectionDiffusionBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_velocity
void
void set_velocity (std::vector<number >Velocity Field)
void set_velocity (std::vector&ltnumber &gtVelocity Field)<br><br>Member function of class <b>ConvectionDiffusionBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_velocity
void
void set_velocity (c_string Velocity Field)
void set_velocity (c_string Velocity Field)<br><br>Member function of class <b>ConvectionDiffusionBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction_rate
void
void set_reaction_rate (SmartPtr<UserNumber> Reaction Rate)
void set_reaction_rate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate)<br><br>Member function of class <b>ConvectionDiffusionBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction_rate
void
void set_reaction_rate (number Reaction Rate)
void set_reaction_rate (number Reaction Rate)<br><br>Member function of class <b>ConvectionDiffusionBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction_rate
void
void set_reaction_rate (c_string Reaction Rate)
void set_reaction_rate (c_string Reaction Rate)<br><br>Member function of class <b>ConvectionDiffusionBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction
void
void set_reaction (SmartPtr<UserNumber> Reaction)
void set_reaction (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction)<br><br>Member function of class <b>ConvectionDiffusionBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction
void
void set_reaction (number Reaction)
void set_reaction (number Reaction)<br><br>Member function of class <b>ConvectionDiffusionBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction
void
void set_reaction (c_string Reaction)
void set_reaction (c_string Reaction)<br><br>Member function of class <b>ConvectionDiffusionBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction_rate_explicit
void
void set_reaction_rate_explicit (SmartPtr<UserNumber> Reaction Rate Explicit)
void set_reaction_rate_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate Explicit)<br><br>Member function of class <b>ConvectionDiffusionBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction_rate_explicit
void
void set_reaction_rate_explicit (number Reaction Rate Explicit)
void set_reaction_rate_explicit (number Reaction Rate Explicit)<br><br>Member function of class <b>ConvectionDiffusionBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction_rate_explicit
void
void set_reaction_rate_explicit (c_string Reaction Rate Explicit)
void set_reaction_rate_explicit (c_string Reaction Rate Explicit)<br><br>Member function of class <b>ConvectionDiffusionBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction_explicit
void
void set_reaction_explicit (SmartPtr<UserNumber> Reaction Explicit)
void set_reaction_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Explicit)<br><br>Member function of class <b>ConvectionDiffusionBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction_explicit
void
void set_reaction_explicit (number Reaction Explicit)
void set_reaction_explicit (number Reaction Explicit)<br><br>Member function of class <b>ConvectionDiffusionBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction_explicit
void
void set_reaction_explicit (c_string Reaction Explicit)
void set_reaction_explicit (c_string Reaction Explicit)<br><br>Member function of class <b>ConvectionDiffusionBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source_explicit
void
void set_source_explicit (SmartPtr<UserNumber> Source Explicit)
void set_source_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source Explicit)<br><br>Member function of class <b>ConvectionDiffusionBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source_explicit
void
void set_source_explicit (number Source Explicit)
void set_source_explicit (number Source Explicit)<br><br>Member function of class <b>ConvectionDiffusionBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source_explicit
void
void set_source_explicit (c_string Source Explicit)
void set_source_explicit (c_string Source Explicit)<br><br>Member function of class <b>ConvectionDiffusionBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source
void
void set_source (SmartPtr<UserNumber> Source)
void set_source (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source)<br><br>Member function of class <b>ConvectionDiffusionBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source
void
void set_source (number Source)
void set_source (number Source)<br><br>Member function of class <b>ConvectionDiffusionBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source
void
void set_source (c_string Source)
void set_source (c_string Source)<br><br>Member function of class <b>ConvectionDiffusionBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_vector_source
void
void set_vector_source (SmartPtr<UserVector> Vector Source)
void set_vector_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Vector Source)<br><br>Member function of class <b>ConvectionDiffusionBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_vector_source
void
void set_vector_source (c_string Vector Source)
void set_vector_source (c_string Vector Source)<br><br>Member function of class <b>ConvectionDiffusionBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_mass_scale
void
void set_mass_scale (SmartPtr<UserNumber> Mass Scale)
void set_mass_scale (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass Scale)<br><br>Member function of class <b>ConvectionDiffusionBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_mass_scale
void
void set_mass_scale (number Mass Scale)
void set_mass_scale (number Mass Scale)<br><br>Member function of class <b>ConvectionDiffusionBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_mass_scale
void
void set_mass_scale (c_string Mass Scale)
void set_mass_scale (c_string Mass Scale)<br><br>Member function of class <b>ConvectionDiffusionBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_mass
void
void set_mass (SmartPtr<UserNumber> Mass)
void set_mass (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass)<br><br>Member function of class <b>ConvectionDiffusionBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_mass
void
void set_mass (number Mass)
void set_mass (number Mass)<br><br>Member function of class <b>ConvectionDiffusionBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_mass
void
void set_mass (c_string Mass)
void set_mass (c_string Mass)<br><br>Member function of class <b>ConvectionDiffusionBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
value
SmartPtr<UserNumber3d>
SmartPtr<UserNumber> value ()
SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; value ()<br><br>Member function of class <b>ConvectionDiffusionBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
gradient
SmartPtr<UserVector3d>
SmartPtr<UserVector> gradient ()
SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; gradient ()<br><br>Member function of class <b>ConvectionDiffusionBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
;
class
ConvectionDiffusionFE1d
IElemDisc1d ConvectionDiffusionBase1d 
Classgroup <b>ConvectionDiffusionFE</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="IElemDisc1d.html">IElemDisc1d</a> <a href="ConvectionDiffusionBase1d.html">ConvectionDiffusionBase1d</a> <a href="ConvectionDiffusionFE1d.html">ConvectionDiffusionFE1d</a> <br><table><tr><td colspan=2><h3>ConvectionDiffusionFE Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConvectionDiffusionFE1d (c_string Function(s), c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConvectionDiffusionFE Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_quad_order (size_t )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ConvectionDiffusionBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>gradient ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (c_string Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (number Diagonal Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (c_string Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (number Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (number Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (c_string Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (number Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (c_string Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (c_string Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (number Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (c_string Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (number Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (c_string Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (number Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (c_string Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (number Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vector_source (c_string Vector Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vector_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Vector Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (std::vector&ltnumber &gtVelocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (c_string Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>value ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
ConvectionDiffusionFE1d

ConvectionDiffusionFE1d (c_string Function(s), c_string Subset(s))
ConvectionDiffusionFE1d (c_string Function(s), c_string Subset(s))<br>Constructor of class <b>ConvectionDiffusionFE1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_quad_order
void
void set_quad_order (size_t )
void set_quad_order (size_t )<br><br>Member function of class <b>ConvectionDiffusionFE1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
;
class
ConvectionDiffusionFE2d
IElemDisc2d ConvectionDiffusionBase2d 
Classgroup <b>ConvectionDiffusionFE</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="ConvectionDiffusionBase2d.html">ConvectionDiffusionBase2d</a> <a href="ConvectionDiffusionFE2d.html">ConvectionDiffusionFE2d</a> <br><table><tr><td colspan=2><h3>ConvectionDiffusionFE Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConvectionDiffusionFE2d (c_string Function(s), c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConvectionDiffusionFE Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_quad_order (size_t )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ConvectionDiffusionBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>gradient ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (c_string Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (number Diagonal Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (c_string Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (number Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (number Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (c_string Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (number Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (c_string Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (c_string Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (number Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (c_string Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (number Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (c_string Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (number Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (c_string Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (number Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vector_source (c_string Vector Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vector_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Vector Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (std::vector&ltnumber &gtVelocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (c_string Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>value ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
ConvectionDiffusionFE2d

ConvectionDiffusionFE2d (c_string Function(s), c_string Subset(s))
ConvectionDiffusionFE2d (c_string Function(s), c_string Subset(s))<br>Constructor of class <b>ConvectionDiffusionFE2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_quad_order
void
void set_quad_order (size_t )
void set_quad_order (size_t )<br><br>Member function of class <b>ConvectionDiffusionFE2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
;
class
ConvectionDiffusionFE3d
IElemDisc3d ConvectionDiffusionBase3d 
Classgroup <b>ConvectionDiffusionFE</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IElemDisc3d.html">IElemDisc3d</a> <a href="ConvectionDiffusionBase3d.html">ConvectionDiffusionBase3d</a> <a href="ConvectionDiffusionFE3d.html">ConvectionDiffusionFE3d</a> <br><table><tr><td colspan=2><h3>ConvectionDiffusionFE Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConvectionDiffusionFE3d (c_string Function(s), c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConvectionDiffusionFE Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_quad_order (size_t )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ConvectionDiffusionBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>gradient ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (c_string Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (number Diagonal Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (c_string Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (number Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (number Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (c_string Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (number Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (c_string Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (c_string Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (number Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (c_string Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (number Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (c_string Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (number Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (c_string Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (number Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vector_source (c_string Vector Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vector_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Vector Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (std::vector&ltnumber &gtVelocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (c_string Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>value ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
ConvectionDiffusionFE3d

ConvectionDiffusionFE3d (c_string Function(s), c_string Subset(s))
ConvectionDiffusionFE3d (c_string Function(s), c_string Subset(s))<br>Constructor of class <b>ConvectionDiffusionFE3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_quad_order
void
void set_quad_order (size_t )
void set_quad_order (size_t )<br><br>Member function of class <b>ConvectionDiffusionFE3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
;
class
ConvectionDiffusionFV11d
IElemDisc1d ConvectionDiffusionBase1d 
Classgroup <b>ConvectionDiffusionFV1</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="IElemDisc1d.html">IElemDisc1d</a> <a href="ConvectionDiffusionBase1d.html">ConvectionDiffusionBase1d</a> <a href="ConvectionDiffusionFV11d.html">ConvectionDiffusionFV11d</a> <br><table><tr><td colspan=2><h3>ConvectionDiffusionFV1 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConvectionDiffusionFV11d (c_string Function(s), c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConvectionDiffusionFV1 Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_upwind (SmartPtr&lt;<a href="IConvectionShapes2d.html">IConvectionShapes</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ConvectionDiffusionBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>gradient ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (c_string Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (number Diagonal Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (c_string Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (number Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (number Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (c_string Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (number Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (c_string Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (c_string Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (number Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (c_string Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (number Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (c_string Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (number Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (c_string Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (number Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vector_source (c_string Vector Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vector_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Vector Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (std::vector&ltnumber &gtVelocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (c_string Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>value ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
ConvectionDiffusionFV11d

ConvectionDiffusionFV11d (c_string Function(s), c_string Subset(s))
ConvectionDiffusionFV11d (c_string Function(s), c_string Subset(s))<br>Constructor of class <b>ConvectionDiffusionFV11d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_upwind
void
void set_upwind (SmartPtr<IConvectionShapes> )
void set_upwind (SmartPtr&lt;<a href="IConvectionShapes2d.html">IConvectionShapes</a>&gt; )<br><br>Member function of class <b>ConvectionDiffusionFV11d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
;
class
ConvectionDiffusionFV12d
IElemDisc2d ConvectionDiffusionBase2d 
Classgroup <b>ConvectionDiffusionFV1</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="ConvectionDiffusionBase2d.html">ConvectionDiffusionBase2d</a> <a href="ConvectionDiffusionFV12d.html">ConvectionDiffusionFV12d</a> <br><table><tr><td colspan=2><h3>ConvectionDiffusionFV1 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConvectionDiffusionFV12d (c_string Function(s), c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConvectionDiffusionFV1 Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_upwind (SmartPtr&lt;<a href="IConvectionShapes2d.html">IConvectionShapes</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ConvectionDiffusionBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>gradient ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (c_string Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (number Diagonal Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (c_string Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (number Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (number Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (c_string Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (number Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (c_string Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (c_string Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (number Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (c_string Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (number Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (c_string Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (number Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (c_string Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (number Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vector_source (c_string Vector Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vector_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Vector Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (std::vector&ltnumber &gtVelocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (c_string Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>value ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
ConvectionDiffusionFV12d

ConvectionDiffusionFV12d (c_string Function(s), c_string Subset(s))
ConvectionDiffusionFV12d (c_string Function(s), c_string Subset(s))<br>Constructor of class <b>ConvectionDiffusionFV12d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_upwind
void
void set_upwind (SmartPtr<IConvectionShapes> )
void set_upwind (SmartPtr&lt;<a href="IConvectionShapes2d.html">IConvectionShapes</a>&gt; )<br><br>Member function of class <b>ConvectionDiffusionFV12d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
;
class
ConvectionDiffusionFV13d
IElemDisc3d ConvectionDiffusionBase3d 
Classgroup <b>ConvectionDiffusionFV1</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IElemDisc3d.html">IElemDisc3d</a> <a href="ConvectionDiffusionBase3d.html">ConvectionDiffusionBase3d</a> <a href="ConvectionDiffusionFV13d.html">ConvectionDiffusionFV13d</a> <br><table><tr><td colspan=2><h3>ConvectionDiffusionFV1 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConvectionDiffusionFV13d (c_string Function(s), c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConvectionDiffusionFV1 Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_upwind (SmartPtr&lt;<a href="IConvectionShapes2d.html">IConvectionShapes</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ConvectionDiffusionBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>gradient ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (c_string Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (number Diagonal Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (c_string Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (number Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (number Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (c_string Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (number Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (c_string Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (c_string Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (number Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (c_string Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (number Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (c_string Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (number Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (c_string Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (number Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vector_source (c_string Vector Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vector_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Vector Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (std::vector&ltnumber &gtVelocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (c_string Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>value ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
ConvectionDiffusionFV13d

ConvectionDiffusionFV13d (c_string Function(s), c_string Subset(s))
ConvectionDiffusionFV13d (c_string Function(s), c_string Subset(s))<br>Constructor of class <b>ConvectionDiffusionFV13d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_upwind
void
void set_upwind (SmartPtr<IConvectionShapes> )
void set_upwind (SmartPtr&lt;<a href="IConvectionShapes2d.html">IConvectionShapes</a>&gt; )<br><br>Member function of class <b>ConvectionDiffusionFV13d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
;
class
ConvectionDiffusionFV1d
IElemDisc1d ConvectionDiffusionBase1d 
Classgroup <b>ConvectionDiffusionFV</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="IElemDisc1d.html">IElemDisc1d</a> <a href="ConvectionDiffusionBase1d.html">ConvectionDiffusionBase1d</a> <a href="ConvectionDiffusionFV1d.html">ConvectionDiffusionFV1d</a> <br><table><tr><td colspan=2><h3>ConvectionDiffusionFV Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConvectionDiffusionFV1d (c_string Function(s), c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConvectionDiffusionFV Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_quad_order (size_t )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ConvectionDiffusionBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>gradient ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (c_string Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (number Diagonal Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (c_string Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (number Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (number Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (c_string Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (number Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (c_string Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (c_string Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (number Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (c_string Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (number Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (c_string Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (number Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (c_string Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (number Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vector_source (c_string Vector Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vector_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Vector Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (std::vector&ltnumber &gtVelocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (c_string Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>value ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
ConvectionDiffusionFV1d

ConvectionDiffusionFV1d (c_string Function(s), c_string Subset(s))
ConvectionDiffusionFV1d (c_string Function(s), c_string Subset(s))<br>Constructor of class <b>ConvectionDiffusionFV1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_quad_order
void
void set_quad_order (size_t )
void set_quad_order (size_t )<br><br>Member function of class <b>ConvectionDiffusionFV1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
;
class
ConvectionDiffusionFV2d
IElemDisc2d ConvectionDiffusionBase2d 
Classgroup <b>ConvectionDiffusionFV</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="ConvectionDiffusionBase2d.html">ConvectionDiffusionBase2d</a> <a href="ConvectionDiffusionFV2d.html">ConvectionDiffusionFV2d</a> <br><table><tr><td colspan=2><h3>ConvectionDiffusionFV Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConvectionDiffusionFV2d (c_string Function(s), c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConvectionDiffusionFV Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_quad_order (size_t )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ConvectionDiffusionBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>gradient ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (c_string Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (number Diagonal Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (c_string Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (number Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (number Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (c_string Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (number Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (c_string Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (c_string Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (number Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (c_string Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (number Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (c_string Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (number Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (c_string Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (number Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vector_source (c_string Vector Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vector_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Vector Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (std::vector&ltnumber &gtVelocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (c_string Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>value ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
ConvectionDiffusionFV2d

ConvectionDiffusionFV2d (c_string Function(s), c_string Subset(s))
ConvectionDiffusionFV2d (c_string Function(s), c_string Subset(s))<br>Constructor of class <b>ConvectionDiffusionFV2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_quad_order
void
void set_quad_order (size_t )
void set_quad_order (size_t )<br><br>Member function of class <b>ConvectionDiffusionFV2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
;
class
ConvectionDiffusionFV3d
IElemDisc3d ConvectionDiffusionBase3d 
Classgroup <b>ConvectionDiffusionFV</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IElemDisc3d.html">IElemDisc3d</a> <a href="ConvectionDiffusionBase3d.html">ConvectionDiffusionBase3d</a> <a href="ConvectionDiffusionFV3d.html">ConvectionDiffusionFV3d</a> <br><table><tr><td colspan=2><h3>ConvectionDiffusionFV Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConvectionDiffusionFV3d (c_string Function(s), c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConvectionDiffusionFV Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_quad_order (size_t )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ConvectionDiffusionBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>gradient ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (c_string Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (number Diagonal Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (c_string Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (number Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (number Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (c_string Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (number Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (c_string Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (c_string Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (number Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (c_string Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (number Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (c_string Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (number Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (c_string Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (number Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vector_source (c_string Vector Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vector_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Vector Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (std::vector&ltnumber &gtVelocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (c_string Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>value ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
ConvectionDiffusionFV3d

ConvectionDiffusionFV3d (c_string Function(s), c_string Subset(s))
ConvectionDiffusionFV3d (c_string Function(s), c_string Subset(s))<br>Constructor of class <b>ConvectionDiffusionFV3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_quad_order
void
void set_quad_order (size_t )
void set_quad_order (size_t )<br><br>Member function of class <b>ConvectionDiffusionFV3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
;
class
ConvectionDiffusionFVCR1d
IElemDisc1d ConvectionDiffusionBase1d 
Classgroup <b>ConvectionDiffusionFVCR</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="IElemDisc1d.html">IElemDisc1d</a> <a href="ConvectionDiffusionBase1d.html">ConvectionDiffusionBase1d</a> <a href="ConvectionDiffusionFVCR1d.html">ConvectionDiffusionFVCR1d</a> <br><table><tr><td colspan=2><h3>ConvectionDiffusionFVCR Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConvectionDiffusionFVCR1d (c_string Function(s), c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConvectionDiffusionFVCR Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_upwind (SmartPtr&lt;<a href="IConvectionShapes2d.html">IConvectionShapes</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ConvectionDiffusionBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>gradient ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (c_string Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (number Diagonal Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (c_string Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (number Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (number Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (c_string Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (number Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (c_string Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (c_string Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (number Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (c_string Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (number Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (c_string Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (number Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (c_string Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (number Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vector_source (c_string Vector Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vector_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Vector Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (std::vector&ltnumber &gtVelocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (c_string Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>value ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
ConvectionDiffusionFVCR1d

ConvectionDiffusionFVCR1d (c_string Function(s), c_string Subset(s))
ConvectionDiffusionFVCR1d (c_string Function(s), c_string Subset(s))<br>Constructor of class <b>ConvectionDiffusionFVCR1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_upwind
void
void set_upwind (SmartPtr<IConvectionShapes> )
void set_upwind (SmartPtr&lt;<a href="IConvectionShapes2d.html">IConvectionShapes</a>&gt; )<br><br>Member function of class <b>ConvectionDiffusionFVCR1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
;
class
ConvectionDiffusionFVCR2d
IElemDisc2d ConvectionDiffusionBase2d 
Classgroup <b>ConvectionDiffusionFVCR</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="ConvectionDiffusionBase2d.html">ConvectionDiffusionBase2d</a> <a href="ConvectionDiffusionFVCR2d.html">ConvectionDiffusionFVCR2d</a> <br><table><tr><td colspan=2><h3>ConvectionDiffusionFVCR Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConvectionDiffusionFVCR2d (c_string Function(s), c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConvectionDiffusionFVCR Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_upwind (SmartPtr&lt;<a href="IConvectionShapes2d.html">IConvectionShapes</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ConvectionDiffusionBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>gradient ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (c_string Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (number Diagonal Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (c_string Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (number Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (number Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (c_string Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (number Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (c_string Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (c_string Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (number Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (c_string Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (number Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (c_string Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (number Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (c_string Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (number Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vector_source (c_string Vector Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vector_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Vector Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (std::vector&ltnumber &gtVelocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (c_string Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>value ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
ConvectionDiffusionFVCR2d

ConvectionDiffusionFVCR2d (c_string Function(s), c_string Subset(s))
ConvectionDiffusionFVCR2d (c_string Function(s), c_string Subset(s))<br>Constructor of class <b>ConvectionDiffusionFVCR2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_upwind
void
void set_upwind (SmartPtr<IConvectionShapes> )
void set_upwind (SmartPtr&lt;<a href="IConvectionShapes2d.html">IConvectionShapes</a>&gt; )<br><br>Member function of class <b>ConvectionDiffusionFVCR2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
;
class
ConvectionDiffusionFVCR3d
IElemDisc3d ConvectionDiffusionBase3d 
Classgroup <b>ConvectionDiffusionFVCR</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IElemDisc3d.html">IElemDisc3d</a> <a href="ConvectionDiffusionBase3d.html">ConvectionDiffusionBase3d</a> <a href="ConvectionDiffusionFVCR3d.html">ConvectionDiffusionFVCR3d</a> <br><table><tr><td colspan=2><h3>ConvectionDiffusionFVCR Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConvectionDiffusionFVCR3d (c_string Function(s), c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConvectionDiffusionFVCR Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_upwind (SmartPtr&lt;<a href="IConvectionShapes2d.html">IConvectionShapes</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ConvectionDiffusionBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>gradient ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (c_string Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (number Diagonal Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (c_string Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (number Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (number Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (c_string Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (number Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (c_string Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (c_string Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (number Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (c_string Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (number Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (c_string Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (number Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (c_string Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (number Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vector_source (c_string Vector Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vector_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Vector Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (std::vector&ltnumber &gtVelocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (c_string Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>value ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
ConvectionDiffusionFVCR3d

ConvectionDiffusionFVCR3d (c_string Function(s), c_string Subset(s))
ConvectionDiffusionFVCR3d (c_string Function(s), c_string Subset(s))<br>Constructor of class <b>ConvectionDiffusionFVCR3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_upwind
void
void set_upwind (SmartPtr<IConvectionShapes> )
void set_upwind (SmartPtr&lt;<a href="IConvectionShapes2d.html">IConvectionShapes</a>&gt; )<br><br>Member function of class <b>ConvectionDiffusionFVCR3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
;
class
DarcyVelocityLinker1d
ICplUserData1d UserVector1d DependentUserDataVector1d DataLinkerVector1d 
Classgroup <b>DarcyVelocityLinker</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="UserVector1d.html">UserVector1d</a> <a href="DependentUserDataVector1d.html">DependentUserDataVector1d</a> <a href="DataLinkerVector1d.html">DataLinkerVector1d</a> <a href="DarcyVelocityLinker1d.html">DarcyVelocityLinker1d</a> <br><table><tr><td colspan=2><h3>DarcyVelocityLinker Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DarcyVelocityLinker1d ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DarcyVelocityLinker Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_pressure_gradient (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
DarcyVelocityLinker1d

DarcyVelocityLinker1d ()
DarcyVelocityLinker1d ()<br>Constructor of class <b>DarcyVelocityLinker1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_density
void
void set_density (SmartPtr<UserNumber> )
void set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>DarcyVelocityLinker1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_gravity
void
void set_gravity (SmartPtr<UserVector> )
void set_gravity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; )<br><br>Member function of class <b>DarcyVelocityLinker1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_permeability
void
void set_permeability (number )
void set_permeability (number )<br><br>Member function of class <b>DarcyVelocityLinker1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_permeability
void
void set_permeability (SmartPtr<UserMatrix> )
void set_permeability (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; )<br><br>Member function of class <b>DarcyVelocityLinker1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_pressure_gradient
void
void set_pressure_gradient (SmartPtr<UserVector> )
void set_pressure_gradient (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; )<br><br>Member function of class <b>DarcyVelocityLinker1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_viscosity
void
void set_viscosity (number )
void set_viscosity (number )<br><br>Member function of class <b>DarcyVelocityLinker1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_viscosity
void
void set_viscosity (SmartPtr<UserNumber> )
void set_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>DarcyVelocityLinker1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
DarcyVelocityLinker2d
ICplUserData2d UserVector2d DependentUserDataVector2d DataLinkerVector2d 
Classgroup <b>DarcyVelocityLinker</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserVector2d.html">UserVector2d</a> <a href="DependentUserDataVector2d.html">DependentUserDataVector2d</a> <a href="DataLinkerVector2d.html">DataLinkerVector2d</a> <a href="DarcyVelocityLinker2d.html">DarcyVelocityLinker2d</a> <br><table><tr><td colspan=2><h3>DarcyVelocityLinker Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DarcyVelocityLinker2d ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DarcyVelocityLinker Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_pressure_gradient (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
DarcyVelocityLinker2d

DarcyVelocityLinker2d ()
DarcyVelocityLinker2d ()<br>Constructor of class <b>DarcyVelocityLinker2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_density
void
void set_density (SmartPtr<UserNumber> )
void set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>DarcyVelocityLinker2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_gravity
void
void set_gravity (SmartPtr<UserVector> )
void set_gravity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; )<br><br>Member function of class <b>DarcyVelocityLinker2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_permeability
void
void set_permeability (number )
void set_permeability (number )<br><br>Member function of class <b>DarcyVelocityLinker2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_permeability
void
void set_permeability (SmartPtr<UserMatrix> )
void set_permeability (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; )<br><br>Member function of class <b>DarcyVelocityLinker2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_pressure_gradient
void
void set_pressure_gradient (SmartPtr<UserVector> )
void set_pressure_gradient (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; )<br><br>Member function of class <b>DarcyVelocityLinker2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_viscosity
void
void set_viscosity (number )
void set_viscosity (number )<br><br>Member function of class <b>DarcyVelocityLinker2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_viscosity
void
void set_viscosity (SmartPtr<UserNumber> )
void set_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>DarcyVelocityLinker2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
DarcyVelocityLinker3d
ICplUserData3d UserVector3d DependentUserDataVector3d DataLinkerVector3d 
Classgroup <b>DarcyVelocityLinker</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserVector3d.html">UserVector3d</a> <a href="DependentUserDataVector3d.html">DependentUserDataVector3d</a> <a href="DataLinkerVector3d.html">DataLinkerVector3d</a> <a href="DarcyVelocityLinker3d.html">DarcyVelocityLinker3d</a> <br><table><tr><td colspan=2><h3>DarcyVelocityLinker Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DarcyVelocityLinker3d ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DarcyVelocityLinker Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_pressure_gradient (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
DarcyVelocityLinker3d

DarcyVelocityLinker3d ()
DarcyVelocityLinker3d ()<br>Constructor of class <b>DarcyVelocityLinker3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_density
void
void set_density (SmartPtr<UserNumber> )
void set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>DarcyVelocityLinker3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_gravity
void
void set_gravity (SmartPtr<UserVector> )
void set_gravity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; )<br><br>Member function of class <b>DarcyVelocityLinker3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_permeability
void
void set_permeability (number )
void set_permeability (number )<br><br>Member function of class <b>DarcyVelocityLinker3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_permeability
void
void set_permeability (SmartPtr<UserMatrix> )
void set_permeability (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; )<br><br>Member function of class <b>DarcyVelocityLinker3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_pressure_gradient
void
void set_pressure_gradient (SmartPtr<UserVector> )
void set_pressure_gradient (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; )<br><br>Member function of class <b>DarcyVelocityLinker3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_viscosity
void
void set_viscosity (number )
void set_viscosity (number )<br><br>Member function of class <b>DarcyVelocityLinker3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_viscosity
void
void set_viscosity (SmartPtr<UserNumber> )
void set_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>DarcyVelocityLinker3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
DataLinkerMatrix1d
ICplUserData1d UserMatrix1d DependentUserDataMatrix1d 
Classgroup <b>DataLinkerMatrix</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="UserMatrix1d.html">UserMatrix1d</a> <a href="DependentUserDataMatrix1d.html">DependentUserDataMatrix1d</a> <a href="DataLinkerMatrix1d.html">DataLinkerMatrix1d</a> <br><table><tr><td colspan=2><h3> Inherited UserMatrix Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
;
class
DataLinkerMatrix2d
ICplUserData2d UserMatrix2d DependentUserDataMatrix2d 
Classgroup <b>DataLinkerMatrix</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserMatrix2d.html">UserMatrix2d</a> <a href="DependentUserDataMatrix2d.html">DependentUserDataMatrix2d</a> <a href="DataLinkerMatrix2d.html">DataLinkerMatrix2d</a> <br><table><tr><td colspan=2><h3> Inherited UserMatrix Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
;
class
DataLinkerMatrix3d
ICplUserData3d UserMatrix3d DependentUserDataMatrix3d 
Classgroup <b>DataLinkerMatrix</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserMatrix3d.html">UserMatrix3d</a> <a href="DependentUserDataMatrix3d.html">DependentUserDataMatrix3d</a> <a href="DataLinkerMatrix3d.html">DataLinkerMatrix3d</a> <br><table><tr><td colspan=2><h3> Inherited UserMatrix Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
;
class
DataLinkerNumber1d
ICplUserData1d UserNumber1d DependentUserDataNumber1d 
Classgroup <b>DataLinkerNumber</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="UserNumber1d.html">UserNumber1d</a> <a href="DependentUserDataNumber1d.html">DependentUserDataNumber1d</a> <a href="DataLinkerNumber1d.html">DataLinkerNumber1d</a> <br><table><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
;
class
DataLinkerNumber2d
ICplUserData2d UserNumber2d DependentUserDataNumber2d 
Classgroup <b>DataLinkerNumber</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserNumber2d.html">UserNumber2d</a> <a href="DependentUserDataNumber2d.html">DependentUserDataNumber2d</a> <a href="DataLinkerNumber2d.html">DataLinkerNumber2d</a> <br><table><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
;
class
DataLinkerNumber3d
ICplUserData3d UserNumber3d DependentUserDataNumber3d 
Classgroup <b>DataLinkerNumber</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserNumber3d.html">UserNumber3d</a> <a href="DependentUserDataNumber3d.html">DependentUserDataNumber3d</a> <a href="DataLinkerNumber3d.html">DataLinkerNumber3d</a> <br><table><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
;
class
DataLinkerTensor41d
ICplUserData1d UserTensor41d DependentUserDataTensor41d 
Classgroup <b>DataLinkerTensor4</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="UserTensor41d.html">UserTensor41d</a> <a href="DependentUserDataTensor41d.html">DependentUserDataTensor41d</a> <a href="DataLinkerTensor41d.html">DataLinkerTensor41d</a> <br><table><tr><td colspan=2><h3> Inherited UserTensor4 Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
;
class
DataLinkerTensor42d
ICplUserData2d UserTensor42d DependentUserDataTensor42d 
Classgroup <b>DataLinkerTensor4</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserTensor42d.html">UserTensor42d</a> <a href="DependentUserDataTensor42d.html">DependentUserDataTensor42d</a> <a href="DataLinkerTensor42d.html">DataLinkerTensor42d</a> <br><table><tr><td colspan=2><h3> Inherited UserTensor4 Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
;
class
DataLinkerTensor43d
ICplUserData3d UserTensor43d DependentUserDataTensor43d 
Classgroup <b>DataLinkerTensor4</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserTensor43d.html">UserTensor43d</a> <a href="DependentUserDataTensor43d.html">DependentUserDataTensor43d</a> <a href="DataLinkerTensor43d.html">DataLinkerTensor43d</a> <br><table><tr><td colspan=2><h3> Inherited UserTensor4 Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
;
class
DataLinkerVector1d
ICplUserData1d UserVector1d DependentUserDataVector1d 
Classgroup <b>DataLinkerVector</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="UserVector1d.html">UserVector1d</a> <a href="DependentUserDataVector1d.html">DependentUserDataVector1d</a> <a href="DataLinkerVector1d.html">DataLinkerVector1d</a> <br><table><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
;
class
DataLinkerVector2d
ICplUserData2d UserVector2d DependentUserDataVector2d 
Classgroup <b>DataLinkerVector</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserVector2d.html">UserVector2d</a> <a href="DependentUserDataVector2d.html">DependentUserDataVector2d</a> <a href="DataLinkerVector2d.html">DataLinkerVector2d</a> <br><table><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
;
class
DataLinkerVector3d
ICplUserData3d UserVector3d DependentUserDataVector3d 
Classgroup <b>DataLinkerVector</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserVector3d.html">UserVector3d</a> <a href="DependentUserDataVector3d.html">DependentUserDataVector3d</a> <a href="DataLinkerVector3d.html">DataLinkerVector3d</a> <br><table><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
;
class
DebugWritingObjectCPU1
VectorDebugWritingObjectCPU1 
Classgroup <b>DebugWritingObject</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>alg=CPU1;</b><br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <br><table><tr><td colspan=2><h3>DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
memberfunction
set_debug
void
void set_debug (SmartPtr<IDebugWriter> d)
void set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)<br><br>Member function of class <b>DebugWritingObjectCPU1</b><br>returns sets a debug writer<br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
debug_writer
SmartPtr<IDebugWriterCPU1>
SmartPtr<IDebugWriter> debug_writer ()
SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; debug_writer ()<br><br>Member function of class <b>DebugWritingObjectCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
debug_writer
ConstSmartPtr<IDebugWriterCPU1>
const SmartPtr<IDebugWriter> debug_writer () const
const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; debug_writer ()<br><br>Member function of class <b>DebugWritingObjectCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
;
class
DebugWritingObjectCPU2
VectorDebugWritingObjectCPU2 
Classgroup <b>DebugWritingObject</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>alg=CPU2;</b><br>Inheritance: <a href="VectorDebugWritingObjectCPU2.html">VectorDebugWritingObjectCPU2</a> <a href="DebugWritingObjectCPU2.html">DebugWritingObjectCPU2</a> <br><table><tr><td colspan=2><h3>DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
memberfunction
set_debug
void
void set_debug (SmartPtr<IDebugWriter> d)
void set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)<br><br>Member function of class <b>DebugWritingObjectCPU2</b><br>returns sets a debug writer<br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
debug_writer
SmartPtr<IDebugWriterCPU2>
SmartPtr<IDebugWriter> debug_writer ()
SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; debug_writer ()<br><br>Member function of class <b>DebugWritingObjectCPU2</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
debug_writer
ConstSmartPtr<IDebugWriterCPU2>
const SmartPtr<IDebugWriter> debug_writer () const
const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; debug_writer ()<br><br>Member function of class <b>DebugWritingObjectCPU2</b><br>Registry Group: <b>/ug4/Algebra</b>
;
class
DebugWritingObjectCPU3
VectorDebugWritingObjectCPU3 
Classgroup <b>DebugWritingObject</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>alg=CPU3;</b><br>Inheritance: <a href="VectorDebugWritingObjectCPU3.html">VectorDebugWritingObjectCPU3</a> <a href="DebugWritingObjectCPU3.html">DebugWritingObjectCPU3</a> <br><table><tr><td colspan=2><h3>DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
memberfunction
set_debug
void
void set_debug (SmartPtr<IDebugWriter> d)
void set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)<br><br>Member function of class <b>DebugWritingObjectCPU3</b><br>returns sets a debug writer<br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
debug_writer
SmartPtr<IDebugWriterCPU3>
SmartPtr<IDebugWriter> debug_writer ()
SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; debug_writer ()<br><br>Member function of class <b>DebugWritingObjectCPU3</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
debug_writer
ConstSmartPtr<IDebugWriterCPU3>
const SmartPtr<IDebugWriter> debug_writer () const
const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; debug_writer ()<br><br>Member function of class <b>DebugWritingObjectCPU3</b><br>Registry Group: <b>/ug4/Algebra</b>
;
class
DensityDrivenFlowBase1d
IElemDisc1d 
Classgroup <b>DensityDrivenFlowBase</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b><br>class has no constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="IElemDisc1d.html">IElemDisc1d</a> <a href="DensityDrivenFlowBase1d.html">DensityDrivenFlowBase1d</a> <br><table><tr><td colspan=2><h3>DensityDrivenFlowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>brine ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>darcy_velocity ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>pressure_grad ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_boussinesq_flow (bool Boussinesq Flow)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_boussinesq_transport (bool Boussinesq Transport)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Gravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (std::vector&ltnumber &gtGravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (c_string Gravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (number MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (c_string MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (number Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (c_string Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (c_string Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (number Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Viscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (number Viscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (c_string Viscosity)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
memberfunction
set_boussinesq_transport
void
void set_boussinesq_transport (bool Boussinesq Transport)
void set_boussinesq_transport (bool Boussinesq Transport)<br><br>Member function of class <b>DensityDrivenFlowBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_boussinesq_flow
void
void set_boussinesq_flow (bool Boussinesq Flow)
void set_boussinesq_flow (bool Boussinesq Flow)<br><br>Member function of class <b>DensityDrivenFlowBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_porosity
void
void set_porosity (SmartPtr<UserNumber> Porosity)
void set_porosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Porosity)<br><br>Member function of class <b>DensityDrivenFlowBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_porosity
void
void set_porosity (number Porosity)
void set_porosity (number Porosity)<br><br>Member function of class <b>DensityDrivenFlowBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_porosity
void
void set_porosity (c_string Porosity)
void set_porosity (c_string Porosity)<br><br>Member function of class <b>DensityDrivenFlowBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_gravity
void
void set_gravity (SmartPtr<UserVector> Gravity)
void set_gravity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Gravity)<br><br>Member function of class <b>DensityDrivenFlowBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_gravity
void
void set_gravity (std::vector<number >Gravity)
void set_gravity (std::vector&ltnumber &gtGravity)<br><br>Member function of class <b>DensityDrivenFlowBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_gravity
void
void set_gravity (c_string Gravity)
void set_gravity (c_string Gravity)<br><br>Member function of class <b>DensityDrivenFlowBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_molecular_diffusion
void
void set_molecular_diffusion (SmartPtr<UserMatrix> MolecularDiffusion)
void set_molecular_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; MolecularDiffusion)<br><br>Member function of class <b>DensityDrivenFlowBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_molecular_diffusion
void
void set_molecular_diffusion (number MolecularDiffusion)
void set_molecular_diffusion (number MolecularDiffusion)<br><br>Member function of class <b>DensityDrivenFlowBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_molecular_diffusion
void
void set_molecular_diffusion (c_string MolecularDiffusion)
void set_molecular_diffusion (c_string MolecularDiffusion)<br><br>Member function of class <b>DensityDrivenFlowBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_permeability
void
void set_permeability (SmartPtr<UserMatrix> Permeability)
void set_permeability (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Permeability)<br><br>Member function of class <b>DensityDrivenFlowBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_permeability
void
void set_permeability (number Permeability)
void set_permeability (number Permeability)<br><br>Member function of class <b>DensityDrivenFlowBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_permeability
void
void set_permeability (c_string Permeability)
void set_permeability (c_string Permeability)<br><br>Member function of class <b>DensityDrivenFlowBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_viscosity
void
void set_viscosity (SmartPtr<UserNumber> Viscosity)
void set_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Viscosity)<br><br>Member function of class <b>DensityDrivenFlowBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_viscosity
void
void set_viscosity (number Viscosity)
void set_viscosity (number Viscosity)<br><br>Member function of class <b>DensityDrivenFlowBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_viscosity
void
void set_viscosity (c_string Viscosity)
void set_viscosity (c_string Viscosity)<br><br>Member function of class <b>DensityDrivenFlowBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_density
void
void set_density (SmartPtr<UserNumber> Density)
void set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Density)<br><br>Member function of class <b>DensityDrivenFlowBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
darcy_velocity
SmartPtr<UserVector1d>
SmartPtr<UserVector> darcy_velocity ()
SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; darcy_velocity ()<br><br>Member function of class <b>DensityDrivenFlowBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
brine
SmartPtr<UserNumber1d>
SmartPtr<UserNumber> brine ()
SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; brine ()<br><br>Member function of class <b>DensityDrivenFlowBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
pressure_grad
SmartPtr<UserVector1d>
SmartPtr<UserVector> pressure_grad ()
SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; pressure_grad ()<br><br>Member function of class <b>DensityDrivenFlowBase1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
;
class
DensityDrivenFlowBase2d
IElemDisc2d 
Classgroup <b>DensityDrivenFlowBase</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b><br>class has no constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="DensityDrivenFlowBase2d.html">DensityDrivenFlowBase2d</a> <br><table><tr><td colspan=2><h3>DensityDrivenFlowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>brine ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>darcy_velocity ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>pressure_grad ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_boussinesq_flow (bool Boussinesq Flow)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_boussinesq_transport (bool Boussinesq Transport)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Gravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (std::vector&ltnumber &gtGravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (c_string Gravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (number MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (c_string MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (number Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (c_string Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (c_string Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (number Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Viscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (number Viscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (c_string Viscosity)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
memberfunction
set_boussinesq_transport
void
void set_boussinesq_transport (bool Boussinesq Transport)
void set_boussinesq_transport (bool Boussinesq Transport)<br><br>Member function of class <b>DensityDrivenFlowBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_boussinesq_flow
void
void set_boussinesq_flow (bool Boussinesq Flow)
void set_boussinesq_flow (bool Boussinesq Flow)<br><br>Member function of class <b>DensityDrivenFlowBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_porosity
void
void set_porosity (SmartPtr<UserNumber> Porosity)
void set_porosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Porosity)<br><br>Member function of class <b>DensityDrivenFlowBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_porosity
void
void set_porosity (number Porosity)
void set_porosity (number Porosity)<br><br>Member function of class <b>DensityDrivenFlowBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_porosity
void
void set_porosity (c_string Porosity)
void set_porosity (c_string Porosity)<br><br>Member function of class <b>DensityDrivenFlowBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_gravity
void
void set_gravity (SmartPtr<UserVector> Gravity)
void set_gravity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Gravity)<br><br>Member function of class <b>DensityDrivenFlowBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_gravity
void
void set_gravity (std::vector<number >Gravity)
void set_gravity (std::vector&ltnumber &gtGravity)<br><br>Member function of class <b>DensityDrivenFlowBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_gravity
void
void set_gravity (c_string Gravity)
void set_gravity (c_string Gravity)<br><br>Member function of class <b>DensityDrivenFlowBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_molecular_diffusion
void
void set_molecular_diffusion (SmartPtr<UserMatrix> MolecularDiffusion)
void set_molecular_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; MolecularDiffusion)<br><br>Member function of class <b>DensityDrivenFlowBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_molecular_diffusion
void
void set_molecular_diffusion (number MolecularDiffusion)
void set_molecular_diffusion (number MolecularDiffusion)<br><br>Member function of class <b>DensityDrivenFlowBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_molecular_diffusion
void
void set_molecular_diffusion (c_string MolecularDiffusion)
void set_molecular_diffusion (c_string MolecularDiffusion)<br><br>Member function of class <b>DensityDrivenFlowBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_permeability
void
void set_permeability (SmartPtr<UserMatrix> Permeability)
void set_permeability (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Permeability)<br><br>Member function of class <b>DensityDrivenFlowBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_permeability
void
void set_permeability (number Permeability)
void set_permeability (number Permeability)<br><br>Member function of class <b>DensityDrivenFlowBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_permeability
void
void set_permeability (c_string Permeability)
void set_permeability (c_string Permeability)<br><br>Member function of class <b>DensityDrivenFlowBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_viscosity
void
void set_viscosity (SmartPtr<UserNumber> Viscosity)
void set_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Viscosity)<br><br>Member function of class <b>DensityDrivenFlowBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_viscosity
void
void set_viscosity (number Viscosity)
void set_viscosity (number Viscosity)<br><br>Member function of class <b>DensityDrivenFlowBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_viscosity
void
void set_viscosity (c_string Viscosity)
void set_viscosity (c_string Viscosity)<br><br>Member function of class <b>DensityDrivenFlowBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_density
void
void set_density (SmartPtr<UserNumber> Density)
void set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Density)<br><br>Member function of class <b>DensityDrivenFlowBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
darcy_velocity
SmartPtr<UserVector2d>
SmartPtr<UserVector> darcy_velocity ()
SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; darcy_velocity ()<br><br>Member function of class <b>DensityDrivenFlowBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
brine
SmartPtr<UserNumber2d>
SmartPtr<UserNumber> brine ()
SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; brine ()<br><br>Member function of class <b>DensityDrivenFlowBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
pressure_grad
SmartPtr<UserVector2d>
SmartPtr<UserVector> pressure_grad ()
SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; pressure_grad ()<br><br>Member function of class <b>DensityDrivenFlowBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
;
class
DensityDrivenFlowBase3d
IElemDisc3d 
Classgroup <b>DensityDrivenFlowBase</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b><br>class has no constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IElemDisc3d.html">IElemDisc3d</a> <a href="DensityDrivenFlowBase3d.html">DensityDrivenFlowBase3d</a> <br><table><tr><td colspan=2><h3>DensityDrivenFlowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>brine ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>darcy_velocity ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>pressure_grad ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_boussinesq_flow (bool Boussinesq Flow)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_boussinesq_transport (bool Boussinesq Transport)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Gravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (std::vector&ltnumber &gtGravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (c_string Gravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (number MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (c_string MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (number Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (c_string Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (c_string Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (number Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Viscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (number Viscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (c_string Viscosity)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
memberfunction
set_boussinesq_transport
void
void set_boussinesq_transport (bool Boussinesq Transport)
void set_boussinesq_transport (bool Boussinesq Transport)<br><br>Member function of class <b>DensityDrivenFlowBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_boussinesq_flow
void
void set_boussinesq_flow (bool Boussinesq Flow)
void set_boussinesq_flow (bool Boussinesq Flow)<br><br>Member function of class <b>DensityDrivenFlowBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_porosity
void
void set_porosity (SmartPtr<UserNumber> Porosity)
void set_porosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Porosity)<br><br>Member function of class <b>DensityDrivenFlowBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_porosity
void
void set_porosity (number Porosity)
void set_porosity (number Porosity)<br><br>Member function of class <b>DensityDrivenFlowBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_porosity
void
void set_porosity (c_string Porosity)
void set_porosity (c_string Porosity)<br><br>Member function of class <b>DensityDrivenFlowBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_gravity
void
void set_gravity (SmartPtr<UserVector> Gravity)
void set_gravity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Gravity)<br><br>Member function of class <b>DensityDrivenFlowBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_gravity
void
void set_gravity (std::vector<number >Gravity)
void set_gravity (std::vector&ltnumber &gtGravity)<br><br>Member function of class <b>DensityDrivenFlowBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_gravity
void
void set_gravity (c_string Gravity)
void set_gravity (c_string Gravity)<br><br>Member function of class <b>DensityDrivenFlowBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_molecular_diffusion
void
void set_molecular_diffusion (SmartPtr<UserMatrix> MolecularDiffusion)
void set_molecular_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; MolecularDiffusion)<br><br>Member function of class <b>DensityDrivenFlowBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_molecular_diffusion
void
void set_molecular_diffusion (number MolecularDiffusion)
void set_molecular_diffusion (number MolecularDiffusion)<br><br>Member function of class <b>DensityDrivenFlowBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_molecular_diffusion
void
void set_molecular_diffusion (c_string MolecularDiffusion)
void set_molecular_diffusion (c_string MolecularDiffusion)<br><br>Member function of class <b>DensityDrivenFlowBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_permeability
void
void set_permeability (SmartPtr<UserMatrix> Permeability)
void set_permeability (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Permeability)<br><br>Member function of class <b>DensityDrivenFlowBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_permeability
void
void set_permeability (number Permeability)
void set_permeability (number Permeability)<br><br>Member function of class <b>DensityDrivenFlowBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_permeability
void
void set_permeability (c_string Permeability)
void set_permeability (c_string Permeability)<br><br>Member function of class <b>DensityDrivenFlowBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_viscosity
void
void set_viscosity (SmartPtr<UserNumber> Viscosity)
void set_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Viscosity)<br><br>Member function of class <b>DensityDrivenFlowBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_viscosity
void
void set_viscosity (number Viscosity)
void set_viscosity (number Viscosity)<br><br>Member function of class <b>DensityDrivenFlowBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_viscosity
void
void set_viscosity (c_string Viscosity)
void set_viscosity (c_string Viscosity)<br><br>Member function of class <b>DensityDrivenFlowBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_density
void
void set_density (SmartPtr<UserNumber> Density)
void set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Density)<br><br>Member function of class <b>DensityDrivenFlowBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
darcy_velocity
SmartPtr<UserVector3d>
SmartPtr<UserVector> darcy_velocity ()
SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; darcy_velocity ()<br><br>Member function of class <b>DensityDrivenFlowBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
brine
SmartPtr<UserNumber3d>
SmartPtr<UserNumber> brine ()
SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; brine ()<br><br>Member function of class <b>DensityDrivenFlowBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
pressure_grad
SmartPtr<UserVector3d>
SmartPtr<UserVector> pressure_grad ()
SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; pressure_grad ()<br><br>Member function of class <b>DensityDrivenFlowBase3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
;
class
DensityDrivenFlowFV11d
IElemDisc1d DensityDrivenFlowBase1d 
Classgroup <b>DensityDrivenFlowFV1</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="IElemDisc1d.html">IElemDisc1d</a> <a href="DensityDrivenFlowBase1d.html">DensityDrivenFlowBase1d</a> <a href="DensityDrivenFlowFV11d.html">DensityDrivenFlowFV11d</a> <br><table><tr><td colspan=2><h3>DensityDrivenFlowFV1 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DensityDrivenFlowFV11d (c_string Function(s), c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DensityDrivenFlowFV1 Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_consistent_gravity (bool Consistent Gravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_upwind (SmartPtr&lt;<a href="IConvectionShapes2d.html">IConvectionShapes</a>&gt; Upwind (no, part, full))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DensityDrivenFlowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>brine ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>darcy_velocity ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>pressure_grad ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_boussinesq_flow (bool Boussinesq Flow)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_boussinesq_transport (bool Boussinesq Transport)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Gravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (std::vector&ltnumber &gtGravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (c_string Gravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (number MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (c_string MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (number Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (c_string Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (c_string Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (number Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Viscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (number Viscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (c_string Viscosity)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
DensityDrivenFlowFV11d

DensityDrivenFlowFV11d (c_string Function(s), c_string Subset(s))
DensityDrivenFlowFV11d (c_string Function(s), c_string Subset(s))<br>Constructor of class <b>DensityDrivenFlowFV11d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_consistent_gravity
void
void set_consistent_gravity (bool Consistent Gravity)
void set_consistent_gravity (bool Consistent Gravity)<br><br>Member function of class <b>DensityDrivenFlowFV11d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_upwind
void
void set_upwind (SmartPtr<IConvectionShapes> Upwind (no, part, full))
void set_upwind (SmartPtr&lt;<a href="IConvectionShapes2d.html">IConvectionShapes</a>&gt; Upwind (no, part, full))<br><br>Member function of class <b>DensityDrivenFlowFV11d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
;
class
DensityDrivenFlowFV12d
IElemDisc2d DensityDrivenFlowBase2d 
Classgroup <b>DensityDrivenFlowFV1</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="DensityDrivenFlowBase2d.html">DensityDrivenFlowBase2d</a> <a href="DensityDrivenFlowFV12d.html">DensityDrivenFlowFV12d</a> <br><table><tr><td colspan=2><h3>DensityDrivenFlowFV1 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DensityDrivenFlowFV12d (c_string Function(s), c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DensityDrivenFlowFV1 Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_consistent_gravity (bool Consistent Gravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_upwind (SmartPtr&lt;<a href="IConvectionShapes2d.html">IConvectionShapes</a>&gt; Upwind (no, part, full))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DensityDrivenFlowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>brine ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>darcy_velocity ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>pressure_grad ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_boussinesq_flow (bool Boussinesq Flow)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_boussinesq_transport (bool Boussinesq Transport)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Gravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (std::vector&ltnumber &gtGravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (c_string Gravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (number MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (c_string MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (number Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (c_string Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (c_string Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (number Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Viscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (number Viscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (c_string Viscosity)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
DensityDrivenFlowFV12d

DensityDrivenFlowFV12d (c_string Function(s), c_string Subset(s))
DensityDrivenFlowFV12d (c_string Function(s), c_string Subset(s))<br>Constructor of class <b>DensityDrivenFlowFV12d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_consistent_gravity
void
void set_consistent_gravity (bool Consistent Gravity)
void set_consistent_gravity (bool Consistent Gravity)<br><br>Member function of class <b>DensityDrivenFlowFV12d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_upwind
void
void set_upwind (SmartPtr<IConvectionShapes> Upwind (no, part, full))
void set_upwind (SmartPtr&lt;<a href="IConvectionShapes2d.html">IConvectionShapes</a>&gt; Upwind (no, part, full))<br><br>Member function of class <b>DensityDrivenFlowFV12d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
;
class
DensityDrivenFlowFV13d
IElemDisc3d DensityDrivenFlowBase3d 
Classgroup <b>DensityDrivenFlowFV1</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IElemDisc3d.html">IElemDisc3d</a> <a href="DensityDrivenFlowBase3d.html">DensityDrivenFlowBase3d</a> <a href="DensityDrivenFlowFV13d.html">DensityDrivenFlowFV13d</a> <br><table><tr><td colspan=2><h3>DensityDrivenFlowFV1 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DensityDrivenFlowFV13d (c_string Function(s), c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DensityDrivenFlowFV1 Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_consistent_gravity (bool Consistent Gravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_upwind (SmartPtr&lt;<a href="IConvectionShapes2d.html">IConvectionShapes</a>&gt; Upwind (no, part, full))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DensityDrivenFlowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>brine ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>darcy_velocity ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>pressure_grad ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_boussinesq_flow (bool Boussinesq Flow)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_boussinesq_transport (bool Boussinesq Transport)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Gravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (std::vector&ltnumber &gtGravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (c_string Gravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (number MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (c_string MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (number Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (c_string Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (c_string Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (number Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Viscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (number Viscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (c_string Viscosity)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
DensityDrivenFlowFV13d

DensityDrivenFlowFV13d (c_string Function(s), c_string Subset(s))
DensityDrivenFlowFV13d (c_string Function(s), c_string Subset(s))<br>Constructor of class <b>DensityDrivenFlowFV13d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_consistent_gravity
void
void set_consistent_gravity (bool Consistent Gravity)
void set_consistent_gravity (bool Consistent Gravity)<br><br>Member function of class <b>DensityDrivenFlowFV13d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_upwind
void
void set_upwind (SmartPtr<IConvectionShapes> Upwind (no, part, full))
void set_upwind (SmartPtr&lt;<a href="IConvectionShapes2d.html">IConvectionShapes</a>&gt; Upwind (no, part, full))<br><br>Member function of class <b>DensityDrivenFlowFV13d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
;
class
DensityDrivenFlowFV1d
IElemDisc1d DensityDrivenFlowBase1d 
Classgroup <b>DensityDrivenFlowFV</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="IElemDisc1d.html">IElemDisc1d</a> <a href="DensityDrivenFlowBase1d.html">DensityDrivenFlowBase1d</a> <a href="DensityDrivenFlowFV1d.html">DensityDrivenFlowFV1d</a> <br><table><tr><td colspan=2><h3>DensityDrivenFlowFV Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DensityDrivenFlowFV1d (c_string Function(s), c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DensityDrivenFlowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>brine ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>darcy_velocity ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>pressure_grad ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_boussinesq_flow (bool Boussinesq Flow)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_boussinesq_transport (bool Boussinesq Transport)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Gravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (std::vector&ltnumber &gtGravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (c_string Gravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (number MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (c_string MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (number Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (c_string Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (c_string Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (number Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Viscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (number Viscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (c_string Viscosity)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
DensityDrivenFlowFV1d

DensityDrivenFlowFV1d (c_string Function(s), c_string Subset(s))
DensityDrivenFlowFV1d (c_string Function(s), c_string Subset(s))<br>Constructor of class <b>DensityDrivenFlowFV1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
;
class
DensityDrivenFlowFV2d
IElemDisc2d DensityDrivenFlowBase2d 
Classgroup <b>DensityDrivenFlowFV</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="DensityDrivenFlowBase2d.html">DensityDrivenFlowBase2d</a> <a href="DensityDrivenFlowFV2d.html">DensityDrivenFlowFV2d</a> <br><table><tr><td colspan=2><h3>DensityDrivenFlowFV Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DensityDrivenFlowFV2d (c_string Function(s), c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DensityDrivenFlowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>brine ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>darcy_velocity ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>pressure_grad ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_boussinesq_flow (bool Boussinesq Flow)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_boussinesq_transport (bool Boussinesq Transport)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Gravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (std::vector&ltnumber &gtGravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (c_string Gravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (number MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (c_string MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (number Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (c_string Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (c_string Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (number Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Viscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (number Viscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (c_string Viscosity)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
DensityDrivenFlowFV2d

DensityDrivenFlowFV2d (c_string Function(s), c_string Subset(s))
DensityDrivenFlowFV2d (c_string Function(s), c_string Subset(s))<br>Constructor of class <b>DensityDrivenFlowFV2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
;
class
DensityDrivenFlowFV3d
IElemDisc3d DensityDrivenFlowBase3d 
Classgroup <b>DensityDrivenFlowFV</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IElemDisc3d.html">IElemDisc3d</a> <a href="DensityDrivenFlowBase3d.html">DensityDrivenFlowBase3d</a> <a href="DensityDrivenFlowFV3d.html">DensityDrivenFlowFV3d</a> <br><table><tr><td colspan=2><h3>DensityDrivenFlowFV Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DensityDrivenFlowFV3d (c_string Function(s), c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DensityDrivenFlowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>brine ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>darcy_velocity ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>pressure_grad ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_boussinesq_flow (bool Boussinesq Flow)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_boussinesq_transport (bool Boussinesq Transport)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Gravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (std::vector&ltnumber &gtGravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (c_string Gravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (number MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (c_string MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (number Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (c_string Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (c_string Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (number Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Viscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (number Viscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (c_string Viscosity)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
DensityDrivenFlowFV3d

DensityDrivenFlowFV3d (c_string Function(s), c_string Subset(s))
DensityDrivenFlowFV3d (c_string Function(s), c_string Subset(s))<br>Constructor of class <b>DensityDrivenFlowFV3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
;
class
DependentUserDataMatrix1d
ICplUserData1d UserMatrix1d 
Classgroup <b>DependentUserDataMatrix</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="UserMatrix1d.html">UserMatrix1d</a> <a href="DependentUserDataMatrix1d.html">DependentUserDataMatrix1d</a> <br><table><tr><td colspan=2><h3> Inherited UserMatrix Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
;
class
DependentUserDataMatrix2d
ICplUserData2d UserMatrix2d 
Classgroup <b>DependentUserDataMatrix</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserMatrix2d.html">UserMatrix2d</a> <a href="DependentUserDataMatrix2d.html">DependentUserDataMatrix2d</a> <br><table><tr><td colspan=2><h3> Inherited UserMatrix Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
;
class
DependentUserDataMatrix3d
ICplUserData3d UserMatrix3d 
Classgroup <b>DependentUserDataMatrix</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserMatrix3d.html">UserMatrix3d</a> <a href="DependentUserDataMatrix3d.html">DependentUserDataMatrix3d</a> <br><table><tr><td colspan=2><h3> Inherited UserMatrix Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
;
class
DependentUserDataNumber1d
ICplUserData1d UserNumber1d 
Classgroup <b>DependentUserDataNumber</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="UserNumber1d.html">UserNumber1d</a> <a href="DependentUserDataNumber1d.html">DependentUserDataNumber1d</a> <br><table><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
;
class
DependentUserDataNumber2d
ICplUserData2d UserNumber2d 
Classgroup <b>DependentUserDataNumber</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserNumber2d.html">UserNumber2d</a> <a href="DependentUserDataNumber2d.html">DependentUserDataNumber2d</a> <br><table><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
;
class
DependentUserDataNumber3d
ICplUserData3d UserNumber3d 
Classgroup <b>DependentUserDataNumber</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserNumber3d.html">UserNumber3d</a> <a href="DependentUserDataNumber3d.html">DependentUserDataNumber3d</a> <br><table><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
;
class
DependentUserDataTensor41d
ICplUserData1d UserTensor41d 
Classgroup <b>DependentUserDataTensor4</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="UserTensor41d.html">UserTensor41d</a> <a href="DependentUserDataTensor41d.html">DependentUserDataTensor41d</a> <br><table><tr><td colspan=2><h3> Inherited UserTensor4 Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
;
class
DependentUserDataTensor42d
ICplUserData2d UserTensor42d 
Classgroup <b>DependentUserDataTensor4</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserTensor42d.html">UserTensor42d</a> <a href="DependentUserDataTensor42d.html">DependentUserDataTensor42d</a> <br><table><tr><td colspan=2><h3> Inherited UserTensor4 Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
;
class
DependentUserDataTensor43d
ICplUserData3d UserTensor43d 
Classgroup <b>DependentUserDataTensor4</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserTensor43d.html">UserTensor43d</a> <a href="DependentUserDataTensor43d.html">DependentUserDataTensor43d</a> <br><table><tr><td colspan=2><h3> Inherited UserTensor4 Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
;
class
DependentUserDataVector1d
ICplUserData1d UserVector1d 
Classgroup <b>DependentUserDataVector</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="UserVector1d.html">UserVector1d</a> <a href="DependentUserDataVector1d.html">DependentUserDataVector1d</a> <br><table><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
;
class
DependentUserDataVector2d
ICplUserData2d UserVector2d 
Classgroup <b>DependentUserDataVector</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserVector2d.html">UserVector2d</a> <a href="DependentUserDataVector2d.html">DependentUserDataVector2d</a> <br><table><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
;
class
DependentUserDataVector3d
ICplUserData3d UserVector3d 
Classgroup <b>DependentUserDataVector</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserVector3d.html">UserVector3d</a> <a href="DependentUserDataVector3d.html">DependentUserDataVector3d</a> <br><table><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
;
class
DiagVankaCPU1
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 ILinearIteratorCPU1 IPreconditionerCPU1 
Classgroup <b>DiagVanka</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>alg=CPU1;</b><br>Diagonal Vanka Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="IPreconditionerCPU1.html">IPreconditionerCPU1</a> <a href="DiagVankaCPU1.html">DiagVankaCPU1</a> <br><table><tr><td colspan=2><h3>DiagVanka Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DiagVankaCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DiagVanka Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_relax (number relax)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
DiagVankaCPU1

DiagVankaCPU1 ()
DiagVankaCPU1 ()<br>Constructor of class <b>DiagVankaCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_relax
void
void set_relax (number relax)
void set_relax (number relax)<br><br>Member function of class <b>DiagVankaCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
DiagVankaCPU2
VectorDebugWritingObjectCPU2 DebugWritingObjectCPU2 ILinearIteratorCPU2 IPreconditionerCPU2 
Classgroup <b>DiagVanka</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>alg=CPU2;</b><br>Diagonal Vanka Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU2.html">VectorDebugWritingObjectCPU2</a> <a href="DebugWritingObjectCPU2.html">DebugWritingObjectCPU2</a> <a href="ILinearIteratorCPU2.html">ILinearIteratorCPU2</a> <a href="IPreconditionerCPU2.html">IPreconditionerCPU2</a> <a href="DiagVankaCPU2.html">DiagVankaCPU2</a> <br><table><tr><td colspan=2><h3>DiagVanka Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DiagVankaCPU2 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DiagVanka Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_relax (number relax)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
DiagVankaCPU2

DiagVankaCPU2 ()
DiagVankaCPU2 ()<br>Constructor of class <b>DiagVankaCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_relax
void
void set_relax (number relax)
void set_relax (number relax)<br><br>Member function of class <b>DiagVankaCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
DiagVankaCPU3
VectorDebugWritingObjectCPU3 DebugWritingObjectCPU3 ILinearIteratorCPU3 IPreconditionerCPU3 
Classgroup <b>DiagVanka</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>alg=CPU3;</b><br>Diagonal Vanka Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU3.html">VectorDebugWritingObjectCPU3</a> <a href="DebugWritingObjectCPU3.html">DebugWritingObjectCPU3</a> <a href="ILinearIteratorCPU3.html">ILinearIteratorCPU3</a> <a href="IPreconditionerCPU3.html">IPreconditionerCPU3</a> <a href="DiagVankaCPU3.html">DiagVankaCPU3</a> <br><table><tr><td colspan=2><h3>DiagVanka Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DiagVankaCPU3 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DiagVanka Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_relax (number relax)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
DiagVankaCPU3

DiagVankaCPU3 ()
DiagVankaCPU3 ()<br>Constructor of class <b>DiagVankaCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_relax
void
void set_relax (number relax)
void set_relax (number relax)<br><br>Member function of class <b>DiagVankaCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
DirichletBoundary1dCPU1
IConstraintCPU1 IDomainConstraint1dCPU1 
Classgroup <b>DirichletBoundary</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU1;</b><br>Inheritance: <a href="IConstraintCPU1.html">IConstraintCPU1</a> <a href="IDomainConstraint1dCPU1.html">IDomainConstraint1dCPU1</a> <a href="DirichletBoundary1dCPU1.html">DirichletBoundary1dCPU1</a> <br><table><tr><td colspan=2><h3>DirichletBoundary Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DirichletBoundary1dCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DirichletBoundary Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="CondUserNumber2d.html">CondUserNumber</a>&gt; Value, c_string Function, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Value, c_string Function, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Vector, c_string Functions, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number ConstantValue, c_string Function, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string LuaCallback, c_string Function, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)</td></tr><tr><td><br></td></tr></table>
constructor
DirichletBoundary1dCPU1

DirichletBoundary1dCPU1 ()
DirichletBoundary1dCPU1 ()<br>Constructor of class <b>DirichletBoundary1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<CondUserNumber> Value, c_string Function, c_string Subsets)
void add (SmartPtr&lt;<a href="CondUserNumber2d.html">CondUserNumber</a>&gt; Value, c_string Function, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<UserNumber> Value, c_string Function, c_string Subsets)
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Value, c_string Function, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<UserVector> Vector, c_string Functions, c_string Subsets)
void add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Vector, c_string Functions, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (number ConstantValue, c_string Function, c_string Subsets)
void add (number ConstantValue, c_string Function, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (c_string LuaCallback, c_string Function, c_string Subsets)
void add (c_string LuaCallback, c_string Function, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
set_approximation_space
void
void set_approximation_space (SmartPtr<ApproximationSpace> ApproximationSpace)
void set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)<br><br>Member function of class <b>DirichletBoundary1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
clear
void
void clear ()
void clear ()<br><br>Member function of class <b>DirichletBoundary1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
DirichletBoundary1dCPU2
IConstraintCPU2 IDomainConstraint1dCPU2 
Classgroup <b>DirichletBoundary</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU2;</b><br>Inheritance: <a href="IConstraintCPU2.html">IConstraintCPU2</a> <a href="IDomainConstraint1dCPU2.html">IDomainConstraint1dCPU2</a> <a href="DirichletBoundary1dCPU2.html">DirichletBoundary1dCPU2</a> <br><table><tr><td colspan=2><h3>DirichletBoundary Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DirichletBoundary1dCPU2 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DirichletBoundary Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="CondUserNumber2d.html">CondUserNumber</a>&gt; Value, c_string Function, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Value, c_string Function, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Vector, c_string Functions, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number ConstantValue, c_string Function, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string LuaCallback, c_string Function, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)</td></tr><tr><td><br></td></tr></table>
constructor
DirichletBoundary1dCPU2

DirichletBoundary1dCPU2 ()
DirichletBoundary1dCPU2 ()<br>Constructor of class <b>DirichletBoundary1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<CondUserNumber> Value, c_string Function, c_string Subsets)
void add (SmartPtr&lt;<a href="CondUserNumber2d.html">CondUserNumber</a>&gt; Value, c_string Function, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<UserNumber> Value, c_string Function, c_string Subsets)
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Value, c_string Function, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<UserVector> Vector, c_string Functions, c_string Subsets)
void add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Vector, c_string Functions, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (number ConstantValue, c_string Function, c_string Subsets)
void add (number ConstantValue, c_string Function, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (c_string LuaCallback, c_string Function, c_string Subsets)
void add (c_string LuaCallback, c_string Function, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
set_approximation_space
void
void set_approximation_space (SmartPtr<ApproximationSpace> ApproximationSpace)
void set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)<br><br>Member function of class <b>DirichletBoundary1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
clear
void
void clear ()
void clear ()<br><br>Member function of class <b>DirichletBoundary1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
DirichletBoundary1dCPU3
IConstraintCPU3 IDomainConstraint1dCPU3 
Classgroup <b>DirichletBoundary</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU3;</b><br>Inheritance: <a href="IConstraintCPU3.html">IConstraintCPU3</a> <a href="IDomainConstraint1dCPU3.html">IDomainConstraint1dCPU3</a> <a href="DirichletBoundary1dCPU3.html">DirichletBoundary1dCPU3</a> <br><table><tr><td colspan=2><h3>DirichletBoundary Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DirichletBoundary1dCPU3 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DirichletBoundary Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="CondUserNumber2d.html">CondUserNumber</a>&gt; Value, c_string Function, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Value, c_string Function, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Vector, c_string Functions, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number ConstantValue, c_string Function, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string LuaCallback, c_string Function, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)</td></tr><tr><td><br></td></tr></table>
constructor
DirichletBoundary1dCPU3

DirichletBoundary1dCPU3 ()
DirichletBoundary1dCPU3 ()<br>Constructor of class <b>DirichletBoundary1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<CondUserNumber> Value, c_string Function, c_string Subsets)
void add (SmartPtr&lt;<a href="CondUserNumber2d.html">CondUserNumber</a>&gt; Value, c_string Function, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<UserNumber> Value, c_string Function, c_string Subsets)
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Value, c_string Function, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<UserVector> Vector, c_string Functions, c_string Subsets)
void add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Vector, c_string Functions, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (number ConstantValue, c_string Function, c_string Subsets)
void add (number ConstantValue, c_string Function, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (c_string LuaCallback, c_string Function, c_string Subsets)
void add (c_string LuaCallback, c_string Function, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
set_approximation_space
void
void set_approximation_space (SmartPtr<ApproximationSpace> ApproximationSpace)
void set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)<br><br>Member function of class <b>DirichletBoundary1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
clear
void
void clear ()
void clear ()<br><br>Member function of class <b>DirichletBoundary1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
DirichletBoundary2dCPU1
IConstraintCPU1 IDomainConstraint2dCPU1 
Classgroup <b>DirichletBoundary</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU1;</b><br>Inheritance: <a href="IConstraintCPU1.html">IConstraintCPU1</a> <a href="IDomainConstraint2dCPU1.html">IDomainConstraint2dCPU1</a> <a href="DirichletBoundary2dCPU1.html">DirichletBoundary2dCPU1</a> <br><table><tr><td colspan=2><h3>DirichletBoundary Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DirichletBoundary2dCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DirichletBoundary Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="CondUserNumber2d.html">CondUserNumber</a>&gt; Value, c_string Function, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Value, c_string Function, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Vector, c_string Functions, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number ConstantValue, c_string Function, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string LuaCallback, c_string Function, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)</td></tr><tr><td><br></td></tr></table>
constructor
DirichletBoundary2dCPU1

DirichletBoundary2dCPU1 ()
DirichletBoundary2dCPU1 ()<br>Constructor of class <b>DirichletBoundary2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<CondUserNumber> Value, c_string Function, c_string Subsets)
void add (SmartPtr&lt;<a href="CondUserNumber2d.html">CondUserNumber</a>&gt; Value, c_string Function, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<UserNumber> Value, c_string Function, c_string Subsets)
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Value, c_string Function, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<UserVector> Vector, c_string Functions, c_string Subsets)
void add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Vector, c_string Functions, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (number ConstantValue, c_string Function, c_string Subsets)
void add (number ConstantValue, c_string Function, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (c_string LuaCallback, c_string Function, c_string Subsets)
void add (c_string LuaCallback, c_string Function, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
set_approximation_space
void
void set_approximation_space (SmartPtr<ApproximationSpace> ApproximationSpace)
void set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)<br><br>Member function of class <b>DirichletBoundary2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
clear
void
void clear ()
void clear ()<br><br>Member function of class <b>DirichletBoundary2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
DirichletBoundary2dCPU2
IConstraintCPU2 IDomainConstraint2dCPU2 
Classgroup <b>DirichletBoundary</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU2;</b><br>Inheritance: <a href="IConstraintCPU2.html">IConstraintCPU2</a> <a href="IDomainConstraint2dCPU2.html">IDomainConstraint2dCPU2</a> <a href="DirichletBoundary2dCPU2.html">DirichletBoundary2dCPU2</a> <br><table><tr><td colspan=2><h3>DirichletBoundary Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DirichletBoundary2dCPU2 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DirichletBoundary Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="CondUserNumber2d.html">CondUserNumber</a>&gt; Value, c_string Function, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Value, c_string Function, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Vector, c_string Functions, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number ConstantValue, c_string Function, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string LuaCallback, c_string Function, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)</td></tr><tr><td><br></td></tr></table>
constructor
DirichletBoundary2dCPU2

DirichletBoundary2dCPU2 ()
DirichletBoundary2dCPU2 ()<br>Constructor of class <b>DirichletBoundary2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<CondUserNumber> Value, c_string Function, c_string Subsets)
void add (SmartPtr&lt;<a href="CondUserNumber2d.html">CondUserNumber</a>&gt; Value, c_string Function, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<UserNumber> Value, c_string Function, c_string Subsets)
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Value, c_string Function, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<UserVector> Vector, c_string Functions, c_string Subsets)
void add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Vector, c_string Functions, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (number ConstantValue, c_string Function, c_string Subsets)
void add (number ConstantValue, c_string Function, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (c_string LuaCallback, c_string Function, c_string Subsets)
void add (c_string LuaCallback, c_string Function, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
set_approximation_space
void
void set_approximation_space (SmartPtr<ApproximationSpace> ApproximationSpace)
void set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)<br><br>Member function of class <b>DirichletBoundary2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
clear
void
void clear ()
void clear ()<br><br>Member function of class <b>DirichletBoundary2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
DirichletBoundary2dCPU3
IConstraintCPU3 IDomainConstraint2dCPU3 
Classgroup <b>DirichletBoundary</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU3;</b><br>Inheritance: <a href="IConstraintCPU3.html">IConstraintCPU3</a> <a href="IDomainConstraint2dCPU3.html">IDomainConstraint2dCPU3</a> <a href="DirichletBoundary2dCPU3.html">DirichletBoundary2dCPU3</a> <br><table><tr><td colspan=2><h3>DirichletBoundary Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DirichletBoundary2dCPU3 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DirichletBoundary Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="CondUserNumber2d.html">CondUserNumber</a>&gt; Value, c_string Function, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Value, c_string Function, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Vector, c_string Functions, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number ConstantValue, c_string Function, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string LuaCallback, c_string Function, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)</td></tr><tr><td><br></td></tr></table>
constructor
DirichletBoundary2dCPU3

DirichletBoundary2dCPU3 ()
DirichletBoundary2dCPU3 ()<br>Constructor of class <b>DirichletBoundary2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<CondUserNumber> Value, c_string Function, c_string Subsets)
void add (SmartPtr&lt;<a href="CondUserNumber2d.html">CondUserNumber</a>&gt; Value, c_string Function, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<UserNumber> Value, c_string Function, c_string Subsets)
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Value, c_string Function, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<UserVector> Vector, c_string Functions, c_string Subsets)
void add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Vector, c_string Functions, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (number ConstantValue, c_string Function, c_string Subsets)
void add (number ConstantValue, c_string Function, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (c_string LuaCallback, c_string Function, c_string Subsets)
void add (c_string LuaCallback, c_string Function, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
set_approximation_space
void
void set_approximation_space (SmartPtr<ApproximationSpace> ApproximationSpace)
void set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)<br><br>Member function of class <b>DirichletBoundary2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
clear
void
void clear ()
void clear ()<br><br>Member function of class <b>DirichletBoundary2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
DirichletBoundary3dCPU1
IConstraintCPU1 IDomainConstraint3dCPU1 
Classgroup <b>DirichletBoundary</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU1;</b><br>Inheritance: <a href="IConstraintCPU1.html">IConstraintCPU1</a> <a href="IDomainConstraint3dCPU1.html">IDomainConstraint3dCPU1</a> <a href="DirichletBoundary3dCPU1.html">DirichletBoundary3dCPU1</a> <br><table><tr><td colspan=2><h3>DirichletBoundary Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DirichletBoundary3dCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DirichletBoundary Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="CondUserNumber2d.html">CondUserNumber</a>&gt; Value, c_string Function, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Value, c_string Function, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Vector, c_string Functions, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number ConstantValue, c_string Function, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string LuaCallback, c_string Function, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)</td></tr><tr><td><br></td></tr></table>
constructor
DirichletBoundary3dCPU1

DirichletBoundary3dCPU1 ()
DirichletBoundary3dCPU1 ()<br>Constructor of class <b>DirichletBoundary3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<CondUserNumber> Value, c_string Function, c_string Subsets)
void add (SmartPtr&lt;<a href="CondUserNumber2d.html">CondUserNumber</a>&gt; Value, c_string Function, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<UserNumber> Value, c_string Function, c_string Subsets)
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Value, c_string Function, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<UserVector> Vector, c_string Functions, c_string Subsets)
void add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Vector, c_string Functions, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (number ConstantValue, c_string Function, c_string Subsets)
void add (number ConstantValue, c_string Function, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (c_string LuaCallback, c_string Function, c_string Subsets)
void add (c_string LuaCallback, c_string Function, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
set_approximation_space
void
void set_approximation_space (SmartPtr<ApproximationSpace> ApproximationSpace)
void set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)<br><br>Member function of class <b>DirichletBoundary3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
clear
void
void clear ()
void clear ()<br><br>Member function of class <b>DirichletBoundary3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
DirichletBoundary3dCPU2
IConstraintCPU2 IDomainConstraint3dCPU2 
Classgroup <b>DirichletBoundary</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU2;</b><br>Inheritance: <a href="IConstraintCPU2.html">IConstraintCPU2</a> <a href="IDomainConstraint3dCPU2.html">IDomainConstraint3dCPU2</a> <a href="DirichletBoundary3dCPU2.html">DirichletBoundary3dCPU2</a> <br><table><tr><td colspan=2><h3>DirichletBoundary Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DirichletBoundary3dCPU2 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DirichletBoundary Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="CondUserNumber2d.html">CondUserNumber</a>&gt; Value, c_string Function, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Value, c_string Function, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Vector, c_string Functions, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number ConstantValue, c_string Function, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string LuaCallback, c_string Function, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)</td></tr><tr><td><br></td></tr></table>
constructor
DirichletBoundary3dCPU2

DirichletBoundary3dCPU2 ()
DirichletBoundary3dCPU2 ()<br>Constructor of class <b>DirichletBoundary3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<CondUserNumber> Value, c_string Function, c_string Subsets)
void add (SmartPtr&lt;<a href="CondUserNumber2d.html">CondUserNumber</a>&gt; Value, c_string Function, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<UserNumber> Value, c_string Function, c_string Subsets)
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Value, c_string Function, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<UserVector> Vector, c_string Functions, c_string Subsets)
void add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Vector, c_string Functions, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (number ConstantValue, c_string Function, c_string Subsets)
void add (number ConstantValue, c_string Function, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (c_string LuaCallback, c_string Function, c_string Subsets)
void add (c_string LuaCallback, c_string Function, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
set_approximation_space
void
void set_approximation_space (SmartPtr<ApproximationSpace> ApproximationSpace)
void set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)<br><br>Member function of class <b>DirichletBoundary3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
clear
void
void clear ()
void clear ()<br><br>Member function of class <b>DirichletBoundary3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
DirichletBoundary3dCPU3
IConstraintCPU3 IDomainConstraint3dCPU3 
Classgroup <b>DirichletBoundary</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU3;</b><br>Inheritance: <a href="IConstraintCPU3.html">IConstraintCPU3</a> <a href="IDomainConstraint3dCPU3.html">IDomainConstraint3dCPU3</a> <a href="DirichletBoundary3dCPU3.html">DirichletBoundary3dCPU3</a> <br><table><tr><td colspan=2><h3>DirichletBoundary Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DirichletBoundary3dCPU3 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DirichletBoundary Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="CondUserNumber2d.html">CondUserNumber</a>&gt; Value, c_string Function, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Value, c_string Function, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Vector, c_string Functions, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number ConstantValue, c_string Function, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string LuaCallback, c_string Function, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)</td></tr><tr><td><br></td></tr></table>
constructor
DirichletBoundary3dCPU3

DirichletBoundary3dCPU3 ()
DirichletBoundary3dCPU3 ()<br>Constructor of class <b>DirichletBoundary3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<CondUserNumber> Value, c_string Function, c_string Subsets)
void add (SmartPtr&lt;<a href="CondUserNumber2d.html">CondUserNumber</a>&gt; Value, c_string Function, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<UserNumber> Value, c_string Function, c_string Subsets)
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Value, c_string Function, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<UserVector> Vector, c_string Functions, c_string Subsets)
void add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Vector, c_string Functions, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (number ConstantValue, c_string Function, c_string Subsets)
void add (number ConstantValue, c_string Function, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (c_string LuaCallback, c_string Function, c_string Subsets)
void add (c_string LuaCallback, c_string Function, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
set_approximation_space
void
void set_approximation_space (SmartPtr<ApproximationSpace> ApproximationSpace)
void set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)<br><br>Member function of class <b>DirichletBoundary3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
clear
void
void clear ()
void clear ()<br><br>Member function of class <b>DirichletBoundary3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
DirichletTimeDependent1d
IElemDisc1d 
Classgroup <b>DirichletTimeDependent</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="IElemDisc1d.html">IElemDisc1d</a> <a href="DirichletTimeDependent1d.html">DirichletTimeDependent1d</a> <br><table><tr><td colspan=2><h3>DirichletTimeDependent Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DirichletTimeDependent1d (c_string Functions, c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DirichletTimeDependent Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_name (c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_rhs (<a href="IFunctionNumber.html">IFunctionNumber</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
DirichletTimeDependent1d

DirichletTimeDependent1d (c_string Functions, c_string Subset(s))
DirichletTimeDependent1d (c_string Functions, c_string Subset(s))<br>Constructor of class <b>DirichletTimeDependent1d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_rhs
void
void set_rhs (IFunctionNumber *)
void set_rhs (<a href="IFunctionNumber.html">IFunctionNumber</a> *)<br><br>Member function of class <b>DirichletTimeDependent1d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_name
void
void set_name (c_string )
void set_name (c_string )<br><br>Member function of class <b>DirichletTimeDependent1d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
;
class
DirichletTimeDependent2d
IElemDisc2d 
Classgroup <b>DirichletTimeDependent</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="DirichletTimeDependent2d.html">DirichletTimeDependent2d</a> <br><table><tr><td colspan=2><h3>DirichletTimeDependent Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DirichletTimeDependent2d (c_string Functions, c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DirichletTimeDependent Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_name (c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_rhs (<a href="IFunctionNumber.html">IFunctionNumber</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
DirichletTimeDependent2d

DirichletTimeDependent2d (c_string Functions, c_string Subset(s))
DirichletTimeDependent2d (c_string Functions, c_string Subset(s))<br>Constructor of class <b>DirichletTimeDependent2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_rhs
void
void set_rhs (IFunctionNumber *)
void set_rhs (<a href="IFunctionNumber.html">IFunctionNumber</a> *)<br><br>Member function of class <b>DirichletTimeDependent2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_name
void
void set_name (c_string )
void set_name (c_string )<br><br>Member function of class <b>DirichletTimeDependent2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
;
class
DirichletTimeDependent3d
IElemDisc3d 
Classgroup <b>DirichletTimeDependent</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IElemDisc3d.html">IElemDisc3d</a> <a href="DirichletTimeDependent3d.html">DirichletTimeDependent3d</a> <br><table><tr><td colspan=2><h3>DirichletTimeDependent Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DirichletTimeDependent3d (c_string Functions, c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DirichletTimeDependent Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_name (c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_rhs (<a href="IFunctionNumber.html">IFunctionNumber</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
DirichletTimeDependent3d

DirichletTimeDependent3d (c_string Functions, c_string Subset(s))
DirichletTimeDependent3d (c_string Functions, c_string Subset(s))<br>Constructor of class <b>DirichletTimeDependent3d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_rhs
void
void set_rhs (IFunctionNumber *)
void set_rhs (<a href="IFunctionNumber.html">IFunctionNumber</a> *)<br><br>Member function of class <b>DirichletTimeDependent3d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_name
void
void set_name (c_string )
void set_name (c_string )<br><br>Member function of class <b>DirichletTimeDependent3d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
;
class
DoFDistributionInfo
FunctionPattern 
Registry Group: <b>/ug4/Discretization</b><br>class has no constructor. <br>Inheritance: <a href="FunctionPattern.html">FunctionPattern</a> <a href="DoFDistributionInfo.html">DoFDistributionInfo</a> <br><table><tr><td colspan=2><h3>DoFDistributionInfo Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print_local_dof_statistic (integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print_local_dof_statistic ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited FunctionPattern Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_fct (c_string Name, c_string Type, integer Order, c_string Subsets)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Adds a function to the Function Pattern<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">help: currently no help available<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_fct (c_string Name, c_string Type, integer Order)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Adds a function to the Function Pattern<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">help: currently no help available<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_fct (c_string Name, c_string Type)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Adds a function to the Function Pattern<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">help: currently no help available<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_fct (std::vector&ltstd_string &gtName, c_string Type, integer Order, std::vector&ltstd_string &gtSubsets)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Adds a function to the Function Pattern<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">help: currently no help available<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_fct (std::vector&ltstd_string &gtName, c_string Type, integer Order)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Adds a function to the Function Pattern<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">help: currently no help available<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_fct (std::vector&ltstd_string &gtName, c_string Type)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Adds a function to the Function Pattern<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">help: currently no help available<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited FunctionPattern Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>dim (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>c_string </td><td class="memItemRight" valign=bottom>name (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_fct ()</td></tr><tr><td><br></td></tr></table>
memberfunction
print_local_dof_statistic
void
void print_local_dof_statistic (integer ) const
void print_local_dof_statistic (integer )<br><br>Member function of class <b>DoFDistributionInfo</b><br>Registry Group: <b>/ug4/Discretization</b>
memberfunction
print_local_dof_statistic
void
void print_local_dof_statistic () const
void print_local_dof_statistic ()<br><br>Member function of class <b>DoFDistributionInfo</b><br>Registry Group: <b>/ug4/Discretization</b>
;
class
Domain1d
IDomain 
Classgroup <b>Domain</b><br>Registry Group: <b>/ug4/Domain</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="IDomain.html">IDomain</a> <a href="Domain1d.html">Domain1d</a> <br><table><tr><td colspan=2><h3>Domain Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>Domain1d ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Domain Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>empty ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IDomain Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="MultiGrid.html">MultiGrid</a>&gt; </td><td class="memItemRight" valign=bottom>grid ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="MGSubsetHandler.html">MGSubsetHandler</a>&gt; </td><td class="memItemRight" valign=bottom>subset_handler ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited IDomain Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const <a href="DomainInfo.html">DomainInfo</a> *</td><td class="memItemRight" valign=bottom>domain_info ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns DomainInfo<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td><br></td></tr></table>
constructor
Domain1d

Domain1d ()
Domain1d ()<br>Constructor of class <b>Domain1d</b><br>Registry Group: <b>/ug4/Domain</b>
memberfunction
empty
bool
bool empty () const
bool empty ()<br><br>Member function of class <b>Domain1d</b><br>Registry Group: <b>/ug4/Domain</b>
;
class
Domain2d
IDomain 
Classgroup <b>Domain</b><br>Registry Group: <b>/ug4/Domain</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IDomain.html">IDomain</a> <a href="Domain2d.html">Domain2d</a> <br><table><tr><td colspan=2><h3>Domain Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>Domain2d ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Domain Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>empty ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IDomain Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="MultiGrid.html">MultiGrid</a>&gt; </td><td class="memItemRight" valign=bottom>grid ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="MGSubsetHandler.html">MGSubsetHandler</a>&gt; </td><td class="memItemRight" valign=bottom>subset_handler ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited IDomain Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const <a href="DomainInfo.html">DomainInfo</a> *</td><td class="memItemRight" valign=bottom>domain_info ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns DomainInfo<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td><br></td></tr></table>
constructor
Domain2d

Domain2d ()
Domain2d ()<br>Constructor of class <b>Domain2d</b><br>Registry Group: <b>/ug4/Domain</b>
memberfunction
empty
bool
bool empty () const
bool empty ()<br><br>Member function of class <b>Domain2d</b><br>Registry Group: <b>/ug4/Domain</b>
;
class
Domain3d
IDomain 
Classgroup <b>Domain</b><br>Registry Group: <b>/ug4/Domain</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IDomain.html">IDomain</a> <a href="Domain3d.html">Domain3d</a> <br><table><tr><td colspan=2><h3>Domain Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>Domain3d ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Domain Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>empty ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IDomain Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="MultiGrid.html">MultiGrid</a>&gt; </td><td class="memItemRight" valign=bottom>grid ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="MGSubsetHandler.html">MGSubsetHandler</a>&gt; </td><td class="memItemRight" valign=bottom>subset_handler ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited IDomain Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const <a href="DomainInfo.html">DomainInfo</a> *</td><td class="memItemRight" valign=bottom>domain_info ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns DomainInfo<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td><br></td></tr></table>
constructor
Domain3d

Domain3d ()
Domain3d ()<br>Constructor of class <b>Domain3d</b><br>Registry Group: <b>/ug4/Domain</b>
memberfunction
empty
bool
bool empty () const
bool empty ()<br><br>Member function of class <b>Domain3d</b><br>Registry Group: <b>/ug4/Domain</b>
;
class
DomainDiscretization1dCPU1
IAssembleCPU1 IDomainDiscretizationCPU1 
Classgroup <b>DomainDiscretization</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU1;</b><br>Inheritance: <a href="IAssembleCPU1.html">IAssembleCPU1</a> <a href="IDomainDiscretizationCPU1.html">IDomainDiscretizationCPU1</a> <a href="DomainDiscretization1dCPU1.html">DomainDiscretization1dCPU1</a> <br><table><tr><td colspan=2><h3>DomainDiscretization Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DomainDiscretization1dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DomainDiscretization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="IDomainConstraint2dCPU1.html">IDomainConstraint</a>&gt; Post Process)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="IElemDisc2d.html">IElemDisc</a>&gt; Element Discretization)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="IDiscretizationItem2dCPU1.html">IDiscretizationItem</a>&gt; DiscItem)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IDomainDiscretization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *, const SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IAssemble Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_matrix_rhs (<a href="MatrixCPU1.html">Matrix</a> *, <a href="VectorCPU1.html">Vector</a> *, std::vector&ltSmartPtr&lt;<a href="MultiIndex2.html">MultiIndex2</a>&gt; &gt, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on grid level.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_mass_matrix (<a href="MatrixCPU1.html">Matrix</a> *M, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles mass matrix on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_stiffness_matrix (<a href="MatrixCPU1.html">Matrix</a> *A, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles stiffness matrix on surface grid<br/></td></tr><tr><td><br></td></tr></table>
constructor
DomainDiscretization1dCPU1

DomainDiscretization1dCPU1 (SmartPtr<ApproximationSpace> ApproximationSpace)
DomainDiscretization1dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)<br>Constructor of class <b>DomainDiscretization1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<IDomainConstraint> Post Process)
void add (SmartPtr&lt;<a href="IDomainConstraint2dCPU1.html">IDomainConstraint</a>&gt; Post Process)<br><br>Member function of class <b>DomainDiscretization1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<IElemDisc> Element Discretization)
void add (SmartPtr&lt;<a href="IElemDisc2d.html">IElemDisc</a>&gt; Element Discretization)<br><br>Member function of class <b>DomainDiscretization1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<IDiscretizationItem> DiscItem)
void add (SmartPtr&lt;<a href="IDiscretizationItem2dCPU1.html">IDiscretizationItem</a>&gt; DiscItem)<br><br>Member function of class <b>DomainDiscretization1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_linear
void
void assemble_linear (Matrix *, GridFunction *)
void assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>DomainDiscretization1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_rhs
void
void assemble_rhs (Vector *, GridFunction *)
void assemble_rhs (<a href="VectorCPU1.html">Vector</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>DomainDiscretization1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_rhs
void
void assemble_rhs (GridFunction *)
void assemble_rhs (<a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>DomainDiscretization1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
adjust_solution
void
void adjust_solution (GridFunction *)
void adjust_solution (<a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>DomainDiscretization1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
DomainDiscretization1dCPU2
IAssembleCPU2 IDomainDiscretizationCPU2 
Classgroup <b>DomainDiscretization</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU2;</b><br>Inheritance: <a href="IAssembleCPU2.html">IAssembleCPU2</a> <a href="IDomainDiscretizationCPU2.html">IDomainDiscretizationCPU2</a> <a href="DomainDiscretization1dCPU2.html">DomainDiscretization1dCPU2</a> <br><table><tr><td colspan=2><h3>DomainDiscretization Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DomainDiscretization1dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DomainDiscretization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="IDomainConstraint2dCPU1.html">IDomainConstraint</a>&gt; Post Process)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="IElemDisc2d.html">IElemDisc</a>&gt; Element Discretization)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="IDiscretizationItem2dCPU1.html">IDiscretizationItem</a>&gt; DiscItem)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IDomainDiscretization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *, const SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IAssemble Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_matrix_rhs (<a href="MatrixCPU1.html">Matrix</a> *, <a href="VectorCPU1.html">Vector</a> *, std::vector&ltSmartPtr&lt;<a href="MultiIndex2.html">MultiIndex2</a>&gt; &gt, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on grid level.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_mass_matrix (<a href="MatrixCPU1.html">Matrix</a> *M, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles mass matrix on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_stiffness_matrix (<a href="MatrixCPU1.html">Matrix</a> *A, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles stiffness matrix on surface grid<br/></td></tr><tr><td><br></td></tr></table>
constructor
DomainDiscretization1dCPU2

DomainDiscretization1dCPU2 (SmartPtr<ApproximationSpace> ApproximationSpace)
DomainDiscretization1dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)<br>Constructor of class <b>DomainDiscretization1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<IDomainConstraint> Post Process)
void add (SmartPtr&lt;<a href="IDomainConstraint2dCPU1.html">IDomainConstraint</a>&gt; Post Process)<br><br>Member function of class <b>DomainDiscretization1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<IElemDisc> Element Discretization)
void add (SmartPtr&lt;<a href="IElemDisc2d.html">IElemDisc</a>&gt; Element Discretization)<br><br>Member function of class <b>DomainDiscretization1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<IDiscretizationItem> DiscItem)
void add (SmartPtr&lt;<a href="IDiscretizationItem2dCPU1.html">IDiscretizationItem</a>&gt; DiscItem)<br><br>Member function of class <b>DomainDiscretization1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_linear
void
void assemble_linear (Matrix *, GridFunction *)
void assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>DomainDiscretization1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_rhs
void
void assemble_rhs (Vector *, GridFunction *)
void assemble_rhs (<a href="VectorCPU1.html">Vector</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>DomainDiscretization1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_rhs
void
void assemble_rhs (GridFunction *)
void assemble_rhs (<a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>DomainDiscretization1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
adjust_solution
void
void adjust_solution (GridFunction *)
void adjust_solution (<a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>DomainDiscretization1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
DomainDiscretization1dCPU3
IAssembleCPU3 IDomainDiscretizationCPU3 
Classgroup <b>DomainDiscretization</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU3;</b><br>Inheritance: <a href="IAssembleCPU3.html">IAssembleCPU3</a> <a href="IDomainDiscretizationCPU3.html">IDomainDiscretizationCPU3</a> <a href="DomainDiscretization1dCPU3.html">DomainDiscretization1dCPU3</a> <br><table><tr><td colspan=2><h3>DomainDiscretization Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DomainDiscretization1dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DomainDiscretization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="IDomainConstraint2dCPU1.html">IDomainConstraint</a>&gt; Post Process)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="IElemDisc2d.html">IElemDisc</a>&gt; Element Discretization)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="IDiscretizationItem2dCPU1.html">IDiscretizationItem</a>&gt; DiscItem)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IDomainDiscretization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *, const SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IAssemble Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_matrix_rhs (<a href="MatrixCPU1.html">Matrix</a> *, <a href="VectorCPU1.html">Vector</a> *, std::vector&ltSmartPtr&lt;<a href="MultiIndex2.html">MultiIndex2</a>&gt; &gt, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on grid level.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_mass_matrix (<a href="MatrixCPU1.html">Matrix</a> *M, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles mass matrix on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_stiffness_matrix (<a href="MatrixCPU1.html">Matrix</a> *A, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles stiffness matrix on surface grid<br/></td></tr><tr><td><br></td></tr></table>
constructor
DomainDiscretization1dCPU3

DomainDiscretization1dCPU3 (SmartPtr<ApproximationSpace> ApproximationSpace)
DomainDiscretization1dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)<br>Constructor of class <b>DomainDiscretization1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<IDomainConstraint> Post Process)
void add (SmartPtr&lt;<a href="IDomainConstraint2dCPU1.html">IDomainConstraint</a>&gt; Post Process)<br><br>Member function of class <b>DomainDiscretization1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<IElemDisc> Element Discretization)
void add (SmartPtr&lt;<a href="IElemDisc2d.html">IElemDisc</a>&gt; Element Discretization)<br><br>Member function of class <b>DomainDiscretization1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<IDiscretizationItem> DiscItem)
void add (SmartPtr&lt;<a href="IDiscretizationItem2dCPU1.html">IDiscretizationItem</a>&gt; DiscItem)<br><br>Member function of class <b>DomainDiscretization1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_linear
void
void assemble_linear (Matrix *, GridFunction *)
void assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>DomainDiscretization1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_rhs
void
void assemble_rhs (Vector *, GridFunction *)
void assemble_rhs (<a href="VectorCPU1.html">Vector</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>DomainDiscretization1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_rhs
void
void assemble_rhs (GridFunction *)
void assemble_rhs (<a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>DomainDiscretization1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
adjust_solution
void
void adjust_solution (GridFunction *)
void adjust_solution (<a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>DomainDiscretization1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
DomainDiscretization2dCPU1
IAssembleCPU1 IDomainDiscretizationCPU1 
Classgroup <b>DomainDiscretization</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU1;</b><br>Inheritance: <a href="IAssembleCPU1.html">IAssembleCPU1</a> <a href="IDomainDiscretizationCPU1.html">IDomainDiscretizationCPU1</a> <a href="DomainDiscretization2dCPU1.html">DomainDiscretization2dCPU1</a> <br><table><tr><td colspan=2><h3>DomainDiscretization Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DomainDiscretization2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DomainDiscretization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="IDomainConstraint2dCPU1.html">IDomainConstraint</a>&gt; Post Process)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="IElemDisc2d.html">IElemDisc</a>&gt; Element Discretization)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="IDiscretizationItem2dCPU1.html">IDiscretizationItem</a>&gt; DiscItem)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IDomainDiscretization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *, const SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IAssemble Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_matrix_rhs (<a href="MatrixCPU1.html">Matrix</a> *, <a href="VectorCPU1.html">Vector</a> *, std::vector&ltSmartPtr&lt;<a href="MultiIndex2.html">MultiIndex2</a>&gt; &gt, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on grid level.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_mass_matrix (<a href="MatrixCPU1.html">Matrix</a> *M, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles mass matrix on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_stiffness_matrix (<a href="MatrixCPU1.html">Matrix</a> *A, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles stiffness matrix on surface grid<br/></td></tr><tr><td><br></td></tr></table>
constructor
DomainDiscretization2dCPU1

DomainDiscretization2dCPU1 (SmartPtr<ApproximationSpace> ApproximationSpace)
DomainDiscretization2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)<br>Constructor of class <b>DomainDiscretization2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<IDomainConstraint> Post Process)
void add (SmartPtr&lt;<a href="IDomainConstraint2dCPU1.html">IDomainConstraint</a>&gt; Post Process)<br><br>Member function of class <b>DomainDiscretization2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<IElemDisc> Element Discretization)
void add (SmartPtr&lt;<a href="IElemDisc2d.html">IElemDisc</a>&gt; Element Discretization)<br><br>Member function of class <b>DomainDiscretization2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<IDiscretizationItem> DiscItem)
void add (SmartPtr&lt;<a href="IDiscretizationItem2dCPU1.html">IDiscretizationItem</a>&gt; DiscItem)<br><br>Member function of class <b>DomainDiscretization2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_linear
void
void assemble_linear (Matrix *, GridFunction *)
void assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>DomainDiscretization2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_rhs
void
void assemble_rhs (Vector *, GridFunction *)
void assemble_rhs (<a href="VectorCPU1.html">Vector</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>DomainDiscretization2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_rhs
void
void assemble_rhs (GridFunction *)
void assemble_rhs (<a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>DomainDiscretization2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
adjust_solution
void
void adjust_solution (GridFunction *)
void adjust_solution (<a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>DomainDiscretization2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
DomainDiscretization2dCPU2
IAssembleCPU2 IDomainDiscretizationCPU2 
Classgroup <b>DomainDiscretization</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU2;</b><br>Inheritance: <a href="IAssembleCPU2.html">IAssembleCPU2</a> <a href="IDomainDiscretizationCPU2.html">IDomainDiscretizationCPU2</a> <a href="DomainDiscretization2dCPU2.html">DomainDiscretization2dCPU2</a> <br><table><tr><td colspan=2><h3>DomainDiscretization Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DomainDiscretization2dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DomainDiscretization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="IDomainConstraint2dCPU1.html">IDomainConstraint</a>&gt; Post Process)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="IElemDisc2d.html">IElemDisc</a>&gt; Element Discretization)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="IDiscretizationItem2dCPU1.html">IDiscretizationItem</a>&gt; DiscItem)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IDomainDiscretization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *, const SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IAssemble Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_matrix_rhs (<a href="MatrixCPU1.html">Matrix</a> *, <a href="VectorCPU1.html">Vector</a> *, std::vector&ltSmartPtr&lt;<a href="MultiIndex2.html">MultiIndex2</a>&gt; &gt, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on grid level.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_mass_matrix (<a href="MatrixCPU1.html">Matrix</a> *M, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles mass matrix on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_stiffness_matrix (<a href="MatrixCPU1.html">Matrix</a> *A, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles stiffness matrix on surface grid<br/></td></tr><tr><td><br></td></tr></table>
constructor
DomainDiscretization2dCPU2

DomainDiscretization2dCPU2 (SmartPtr<ApproximationSpace> ApproximationSpace)
DomainDiscretization2dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)<br>Constructor of class <b>DomainDiscretization2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<IDomainConstraint> Post Process)
void add (SmartPtr&lt;<a href="IDomainConstraint2dCPU1.html">IDomainConstraint</a>&gt; Post Process)<br><br>Member function of class <b>DomainDiscretization2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<IElemDisc> Element Discretization)
void add (SmartPtr&lt;<a href="IElemDisc2d.html">IElemDisc</a>&gt; Element Discretization)<br><br>Member function of class <b>DomainDiscretization2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<IDiscretizationItem> DiscItem)
void add (SmartPtr&lt;<a href="IDiscretizationItem2dCPU1.html">IDiscretizationItem</a>&gt; DiscItem)<br><br>Member function of class <b>DomainDiscretization2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_linear
void
void assemble_linear (Matrix *, GridFunction *)
void assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>DomainDiscretization2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_rhs
void
void assemble_rhs (Vector *, GridFunction *)
void assemble_rhs (<a href="VectorCPU1.html">Vector</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>DomainDiscretization2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_rhs
void
void assemble_rhs (GridFunction *)
void assemble_rhs (<a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>DomainDiscretization2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
adjust_solution
void
void adjust_solution (GridFunction *)
void adjust_solution (<a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>DomainDiscretization2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
DomainDiscretization2dCPU3
IAssembleCPU3 IDomainDiscretizationCPU3 
Classgroup <b>DomainDiscretization</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU3;</b><br>Inheritance: <a href="IAssembleCPU3.html">IAssembleCPU3</a> <a href="IDomainDiscretizationCPU3.html">IDomainDiscretizationCPU3</a> <a href="DomainDiscretization2dCPU3.html">DomainDiscretization2dCPU3</a> <br><table><tr><td colspan=2><h3>DomainDiscretization Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DomainDiscretization2dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DomainDiscretization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="IDomainConstraint2dCPU1.html">IDomainConstraint</a>&gt; Post Process)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="IElemDisc2d.html">IElemDisc</a>&gt; Element Discretization)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="IDiscretizationItem2dCPU1.html">IDiscretizationItem</a>&gt; DiscItem)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IDomainDiscretization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *, const SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IAssemble Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_matrix_rhs (<a href="MatrixCPU1.html">Matrix</a> *, <a href="VectorCPU1.html">Vector</a> *, std::vector&ltSmartPtr&lt;<a href="MultiIndex2.html">MultiIndex2</a>&gt; &gt, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on grid level.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_mass_matrix (<a href="MatrixCPU1.html">Matrix</a> *M, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles mass matrix on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_stiffness_matrix (<a href="MatrixCPU1.html">Matrix</a> *A, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles stiffness matrix on surface grid<br/></td></tr><tr><td><br></td></tr></table>
constructor
DomainDiscretization2dCPU3

DomainDiscretization2dCPU3 (SmartPtr<ApproximationSpace> ApproximationSpace)
DomainDiscretization2dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)<br>Constructor of class <b>DomainDiscretization2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<IDomainConstraint> Post Process)
void add (SmartPtr&lt;<a href="IDomainConstraint2dCPU1.html">IDomainConstraint</a>&gt; Post Process)<br><br>Member function of class <b>DomainDiscretization2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<IElemDisc> Element Discretization)
void add (SmartPtr&lt;<a href="IElemDisc2d.html">IElemDisc</a>&gt; Element Discretization)<br><br>Member function of class <b>DomainDiscretization2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<IDiscretizationItem> DiscItem)
void add (SmartPtr&lt;<a href="IDiscretizationItem2dCPU1.html">IDiscretizationItem</a>&gt; DiscItem)<br><br>Member function of class <b>DomainDiscretization2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_linear
void
void assemble_linear (Matrix *, GridFunction *)
void assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>DomainDiscretization2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_rhs
void
void assemble_rhs (Vector *, GridFunction *)
void assemble_rhs (<a href="VectorCPU1.html">Vector</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>DomainDiscretization2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_rhs
void
void assemble_rhs (GridFunction *)
void assemble_rhs (<a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>DomainDiscretization2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
adjust_solution
void
void adjust_solution (GridFunction *)
void adjust_solution (<a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>DomainDiscretization2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
DomainDiscretization3dCPU1
IAssembleCPU1 IDomainDiscretizationCPU1 
Classgroup <b>DomainDiscretization</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU1;</b><br>Inheritance: <a href="IAssembleCPU1.html">IAssembleCPU1</a> <a href="IDomainDiscretizationCPU1.html">IDomainDiscretizationCPU1</a> <a href="DomainDiscretization3dCPU1.html">DomainDiscretization3dCPU1</a> <br><table><tr><td colspan=2><h3>DomainDiscretization Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DomainDiscretization3dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DomainDiscretization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="IDomainConstraint2dCPU1.html">IDomainConstraint</a>&gt; Post Process)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="IElemDisc2d.html">IElemDisc</a>&gt; Element Discretization)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="IDiscretizationItem2dCPU1.html">IDiscretizationItem</a>&gt; DiscItem)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IDomainDiscretization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *, const SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IAssemble Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_matrix_rhs (<a href="MatrixCPU1.html">Matrix</a> *, <a href="VectorCPU1.html">Vector</a> *, std::vector&ltSmartPtr&lt;<a href="MultiIndex2.html">MultiIndex2</a>&gt; &gt, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on grid level.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_mass_matrix (<a href="MatrixCPU1.html">Matrix</a> *M, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles mass matrix on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_stiffness_matrix (<a href="MatrixCPU1.html">Matrix</a> *A, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles stiffness matrix on surface grid<br/></td></tr><tr><td><br></td></tr></table>
constructor
DomainDiscretization3dCPU1

DomainDiscretization3dCPU1 (SmartPtr<ApproximationSpace> ApproximationSpace)
DomainDiscretization3dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)<br>Constructor of class <b>DomainDiscretization3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<IDomainConstraint> Post Process)
void add (SmartPtr&lt;<a href="IDomainConstraint2dCPU1.html">IDomainConstraint</a>&gt; Post Process)<br><br>Member function of class <b>DomainDiscretization3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<IElemDisc> Element Discretization)
void add (SmartPtr&lt;<a href="IElemDisc2d.html">IElemDisc</a>&gt; Element Discretization)<br><br>Member function of class <b>DomainDiscretization3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<IDiscretizationItem> DiscItem)
void add (SmartPtr&lt;<a href="IDiscretizationItem2dCPU1.html">IDiscretizationItem</a>&gt; DiscItem)<br><br>Member function of class <b>DomainDiscretization3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_linear
void
void assemble_linear (Matrix *, GridFunction *)
void assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>DomainDiscretization3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_rhs
void
void assemble_rhs (Vector *, GridFunction *)
void assemble_rhs (<a href="VectorCPU1.html">Vector</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>DomainDiscretization3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_rhs
void
void assemble_rhs (GridFunction *)
void assemble_rhs (<a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>DomainDiscretization3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
adjust_solution
void
void adjust_solution (GridFunction *)
void adjust_solution (<a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>DomainDiscretization3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
DomainDiscretization3dCPU2
IAssembleCPU2 IDomainDiscretizationCPU2 
Classgroup <b>DomainDiscretization</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU2;</b><br>Inheritance: <a href="IAssembleCPU2.html">IAssembleCPU2</a> <a href="IDomainDiscretizationCPU2.html">IDomainDiscretizationCPU2</a> <a href="DomainDiscretization3dCPU2.html">DomainDiscretization3dCPU2</a> <br><table><tr><td colspan=2><h3>DomainDiscretization Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DomainDiscretization3dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DomainDiscretization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="IDomainConstraint2dCPU1.html">IDomainConstraint</a>&gt; Post Process)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="IElemDisc2d.html">IElemDisc</a>&gt; Element Discretization)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="IDiscretizationItem2dCPU1.html">IDiscretizationItem</a>&gt; DiscItem)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IDomainDiscretization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *, const SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IAssemble Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_matrix_rhs (<a href="MatrixCPU1.html">Matrix</a> *, <a href="VectorCPU1.html">Vector</a> *, std::vector&ltSmartPtr&lt;<a href="MultiIndex2.html">MultiIndex2</a>&gt; &gt, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on grid level.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_mass_matrix (<a href="MatrixCPU1.html">Matrix</a> *M, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles mass matrix on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_stiffness_matrix (<a href="MatrixCPU1.html">Matrix</a> *A, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles stiffness matrix on surface grid<br/></td></tr><tr><td><br></td></tr></table>
constructor
DomainDiscretization3dCPU2

DomainDiscretization3dCPU2 (SmartPtr<ApproximationSpace> ApproximationSpace)
DomainDiscretization3dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)<br>Constructor of class <b>DomainDiscretization3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<IDomainConstraint> Post Process)
void add (SmartPtr&lt;<a href="IDomainConstraint2dCPU1.html">IDomainConstraint</a>&gt; Post Process)<br><br>Member function of class <b>DomainDiscretization3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<IElemDisc> Element Discretization)
void add (SmartPtr&lt;<a href="IElemDisc2d.html">IElemDisc</a>&gt; Element Discretization)<br><br>Member function of class <b>DomainDiscretization3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<IDiscretizationItem> DiscItem)
void add (SmartPtr&lt;<a href="IDiscretizationItem2dCPU1.html">IDiscretizationItem</a>&gt; DiscItem)<br><br>Member function of class <b>DomainDiscretization3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_linear
void
void assemble_linear (Matrix *, GridFunction *)
void assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>DomainDiscretization3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_rhs
void
void assemble_rhs (Vector *, GridFunction *)
void assemble_rhs (<a href="VectorCPU1.html">Vector</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>DomainDiscretization3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_rhs
void
void assemble_rhs (GridFunction *)
void assemble_rhs (<a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>DomainDiscretization3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
adjust_solution
void
void adjust_solution (GridFunction *)
void adjust_solution (<a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>DomainDiscretization3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
DomainDiscretization3dCPU3
IAssembleCPU3 IDomainDiscretizationCPU3 
Classgroup <b>DomainDiscretization</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU3;</b><br>Inheritance: <a href="IAssembleCPU3.html">IAssembleCPU3</a> <a href="IDomainDiscretizationCPU3.html">IDomainDiscretizationCPU3</a> <a href="DomainDiscretization3dCPU3.html">DomainDiscretization3dCPU3</a> <br><table><tr><td colspan=2><h3>DomainDiscretization Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DomainDiscretization3dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DomainDiscretization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="IDomainConstraint2dCPU1.html">IDomainConstraint</a>&gt; Post Process)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="IElemDisc2d.html">IElemDisc</a>&gt; Element Discretization)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="IDiscretizationItem2dCPU1.html">IDiscretizationItem</a>&gt; DiscItem)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IDomainDiscretization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *, const SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IAssemble Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_matrix_rhs (<a href="MatrixCPU1.html">Matrix</a> *, <a href="VectorCPU1.html">Vector</a> *, std::vector&ltSmartPtr&lt;<a href="MultiIndex2.html">MultiIndex2</a>&gt; &gt, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on grid level.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_mass_matrix (<a href="MatrixCPU1.html">Matrix</a> *M, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles mass matrix on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_stiffness_matrix (<a href="MatrixCPU1.html">Matrix</a> *A, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles stiffness matrix on surface grid<br/></td></tr><tr><td><br></td></tr></table>
constructor
DomainDiscretization3dCPU3

DomainDiscretization3dCPU3 (SmartPtr<ApproximationSpace> ApproximationSpace)
DomainDiscretization3dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)<br>Constructor of class <b>DomainDiscretization3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<IDomainConstraint> Post Process)
void add (SmartPtr&lt;<a href="IDomainConstraint2dCPU1.html">IDomainConstraint</a>&gt; Post Process)<br><br>Member function of class <b>DomainDiscretization3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<IElemDisc> Element Discretization)
void add (SmartPtr&lt;<a href="IElemDisc2d.html">IElemDisc</a>&gt; Element Discretization)<br><br>Member function of class <b>DomainDiscretization3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<IDiscretizationItem> DiscItem)
void add (SmartPtr&lt;<a href="IDiscretizationItem2dCPU1.html">IDiscretizationItem</a>&gt; DiscItem)<br><br>Member function of class <b>DomainDiscretization3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_linear
void
void assemble_linear (Matrix *, GridFunction *)
void assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>DomainDiscretization3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_rhs
void
void assemble_rhs (Vector *, GridFunction *)
void assemble_rhs (<a href="VectorCPU1.html">Vector</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>DomainDiscretization3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_rhs
void
void assemble_rhs (GridFunction *)
void assemble_rhs (<a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>DomainDiscretization3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
adjust_solution
void
void adjust_solution (GridFunction *)
void adjust_solution (<a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>DomainDiscretization3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
DomainInfo

Registry Group: <b>/ug4/Domain</b><br>class has constructor. <br><table><tr><td colspan=2><h3>DomainInfo Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DomainInfo ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DomainInfo Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>num_elements_on_level (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_levels ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>num_local_elements_on_level (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>num_local_ghosts_on_level (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>num_subsets ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>subset_dim (integer )</td></tr><tr><td><br></td></tr></table>
constructor
DomainInfo

DomainInfo ()
DomainInfo ()<br>Constructor of class <b>DomainInfo</b><br>Registry Group: <b>/ug4/Domain</b>
memberfunction
num_levels
unknown
size_t num_levels () const
size_t num_levels ()<br><br>Member function of class <b>DomainInfo</b><br>Registry Group: <b>/ug4/Domain</b>
memberfunction
num_elements_on_level
integer
integer num_elements_on_level (size_t ) const
integer num_elements_on_level (size_t )<br><br>Member function of class <b>DomainInfo</b><br>Registry Group: <b>/ug4/Domain</b>
memberfunction
num_local_elements_on_level
integer
integer num_local_elements_on_level (size_t ) const
integer num_local_elements_on_level (size_t )<br><br>Member function of class <b>DomainInfo</b><br>Registry Group: <b>/ug4/Domain</b>
memberfunction
num_local_ghosts_on_level
integer
integer num_local_ghosts_on_level (size_t ) const
integer num_local_ghosts_on_level (size_t )<br><br>Member function of class <b>DomainInfo</b><br>Registry Group: <b>/ug4/Domain</b>
memberfunction
num_subsets
integer
integer num_subsets () const
integer num_subsets ()<br><br>Member function of class <b>DomainInfo</b><br>Registry Group: <b>/ug4/Domain</b>
memberfunction
subset_dim
integer
integer subset_dim (integer ) const
integer subset_dim (integer )<br><br>Member function of class <b>DomainInfo</b><br>Registry Group: <b>/ug4/Domain</b>
;
class
DomainLoadBalancer1dCPU1
LoadBalancer1d 
Classgroup <b>DomainLoadBalancer</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU1;</b><br>Inheritance: <a href="LoadBalancer1d.html">LoadBalancer1d</a> <a href="DomainLoadBalancer1dCPU1.html">DomainLoadBalancer1dCPU1</a> <br><table><tr><td colspan=2><h3>DomainLoadBalancer Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DomainLoadBalancer1dCPU1 (SmartPtr&lt;<a href="Domain2d.html">Domain</a>&gt; Domain)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DomainLoadBalancer Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_serializer (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited LoadBalancer Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_distribution_level (size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>rebalance ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_balance_threshold (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_element_threshold (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_partitioner (SmartPtr&lt;<a href="IPartitioner2d.html">IPartitioner</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
DomainLoadBalancer1dCPU1

DomainLoadBalancer1dCPU1 (SmartPtr<Domain> Domain)
DomainLoadBalancer1dCPU1 (SmartPtr&lt;<a href="Domain2d.html">Domain</a>&gt; Domain)<br>Constructor of class <b>DomainLoadBalancer1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add_serializer
void
void add_serializer (SmartPtr<GridFunction> )
void add_serializer (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )<br><br>Member function of class <b>DomainLoadBalancer1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
DomainLoadBalancer1dCPU2
LoadBalancer1d 
Classgroup <b>DomainLoadBalancer</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU2;</b><br>Inheritance: <a href="LoadBalancer1d.html">LoadBalancer1d</a> <a href="DomainLoadBalancer1dCPU2.html">DomainLoadBalancer1dCPU2</a> <br><table><tr><td colspan=2><h3>DomainLoadBalancer Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DomainLoadBalancer1dCPU2 (SmartPtr&lt;<a href="Domain2d.html">Domain</a>&gt; Domain)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DomainLoadBalancer Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_serializer (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited LoadBalancer Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_distribution_level (size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>rebalance ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_balance_threshold (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_element_threshold (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_partitioner (SmartPtr&lt;<a href="IPartitioner2d.html">IPartitioner</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
DomainLoadBalancer1dCPU2

DomainLoadBalancer1dCPU2 (SmartPtr<Domain> Domain)
DomainLoadBalancer1dCPU2 (SmartPtr&lt;<a href="Domain2d.html">Domain</a>&gt; Domain)<br>Constructor of class <b>DomainLoadBalancer1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add_serializer
void
void add_serializer (SmartPtr<GridFunction> )
void add_serializer (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )<br><br>Member function of class <b>DomainLoadBalancer1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
DomainLoadBalancer1dCPU3
LoadBalancer1d 
Classgroup <b>DomainLoadBalancer</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU3;</b><br>Inheritance: <a href="LoadBalancer1d.html">LoadBalancer1d</a> <a href="DomainLoadBalancer1dCPU3.html">DomainLoadBalancer1dCPU3</a> <br><table><tr><td colspan=2><h3>DomainLoadBalancer Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DomainLoadBalancer1dCPU3 (SmartPtr&lt;<a href="Domain2d.html">Domain</a>&gt; Domain)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DomainLoadBalancer Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_serializer (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited LoadBalancer Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_distribution_level (size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>rebalance ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_balance_threshold (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_element_threshold (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_partitioner (SmartPtr&lt;<a href="IPartitioner2d.html">IPartitioner</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
DomainLoadBalancer1dCPU3

DomainLoadBalancer1dCPU3 (SmartPtr<Domain> Domain)
DomainLoadBalancer1dCPU3 (SmartPtr&lt;<a href="Domain2d.html">Domain</a>&gt; Domain)<br>Constructor of class <b>DomainLoadBalancer1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add_serializer
void
void add_serializer (SmartPtr<GridFunction> )
void add_serializer (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )<br><br>Member function of class <b>DomainLoadBalancer1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
DomainLoadBalancer2dCPU1
LoadBalancer2d 
Classgroup <b>DomainLoadBalancer</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU1;</b><br>Inheritance: <a href="LoadBalancer2d.html">LoadBalancer2d</a> <a href="DomainLoadBalancer2dCPU1.html">DomainLoadBalancer2dCPU1</a> <br><table><tr><td colspan=2><h3>DomainLoadBalancer Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DomainLoadBalancer2dCPU1 (SmartPtr&lt;<a href="Domain2d.html">Domain</a>&gt; Domain)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DomainLoadBalancer Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_serializer (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited LoadBalancer Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_distribution_level (size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>rebalance ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_balance_threshold (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_element_threshold (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_partitioner (SmartPtr&lt;<a href="IPartitioner2d.html">IPartitioner</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
DomainLoadBalancer2dCPU1

DomainLoadBalancer2dCPU1 (SmartPtr<Domain> Domain)
DomainLoadBalancer2dCPU1 (SmartPtr&lt;<a href="Domain2d.html">Domain</a>&gt; Domain)<br>Constructor of class <b>DomainLoadBalancer2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add_serializer
void
void add_serializer (SmartPtr<GridFunction> )
void add_serializer (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )<br><br>Member function of class <b>DomainLoadBalancer2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
DomainLoadBalancer2dCPU2
LoadBalancer2d 
Classgroup <b>DomainLoadBalancer</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU2;</b><br>Inheritance: <a href="LoadBalancer2d.html">LoadBalancer2d</a> <a href="DomainLoadBalancer2dCPU2.html">DomainLoadBalancer2dCPU2</a> <br><table><tr><td colspan=2><h3>DomainLoadBalancer Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DomainLoadBalancer2dCPU2 (SmartPtr&lt;<a href="Domain2d.html">Domain</a>&gt; Domain)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DomainLoadBalancer Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_serializer (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited LoadBalancer Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_distribution_level (size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>rebalance ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_balance_threshold (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_element_threshold (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_partitioner (SmartPtr&lt;<a href="IPartitioner2d.html">IPartitioner</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
DomainLoadBalancer2dCPU2

DomainLoadBalancer2dCPU2 (SmartPtr<Domain> Domain)
DomainLoadBalancer2dCPU2 (SmartPtr&lt;<a href="Domain2d.html">Domain</a>&gt; Domain)<br>Constructor of class <b>DomainLoadBalancer2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add_serializer
void
void add_serializer (SmartPtr<GridFunction> )
void add_serializer (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )<br><br>Member function of class <b>DomainLoadBalancer2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
DomainLoadBalancer2dCPU3
LoadBalancer2d 
Classgroup <b>DomainLoadBalancer</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU3;</b><br>Inheritance: <a href="LoadBalancer2d.html">LoadBalancer2d</a> <a href="DomainLoadBalancer2dCPU3.html">DomainLoadBalancer2dCPU3</a> <br><table><tr><td colspan=2><h3>DomainLoadBalancer Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DomainLoadBalancer2dCPU3 (SmartPtr&lt;<a href="Domain2d.html">Domain</a>&gt; Domain)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DomainLoadBalancer Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_serializer (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited LoadBalancer Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_distribution_level (size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>rebalance ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_balance_threshold (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_element_threshold (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_partitioner (SmartPtr&lt;<a href="IPartitioner2d.html">IPartitioner</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
DomainLoadBalancer2dCPU3

DomainLoadBalancer2dCPU3 (SmartPtr<Domain> Domain)
DomainLoadBalancer2dCPU3 (SmartPtr&lt;<a href="Domain2d.html">Domain</a>&gt; Domain)<br>Constructor of class <b>DomainLoadBalancer2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add_serializer
void
void add_serializer (SmartPtr<GridFunction> )
void add_serializer (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )<br><br>Member function of class <b>DomainLoadBalancer2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
DomainLoadBalancer3dCPU1
LoadBalancer3d 
Classgroup <b>DomainLoadBalancer</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU1;</b><br>Inheritance: <a href="LoadBalancer3d.html">LoadBalancer3d</a> <a href="DomainLoadBalancer3dCPU1.html">DomainLoadBalancer3dCPU1</a> <br><table><tr><td colspan=2><h3>DomainLoadBalancer Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DomainLoadBalancer3dCPU1 (SmartPtr&lt;<a href="Domain2d.html">Domain</a>&gt; Domain)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DomainLoadBalancer Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_serializer (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited LoadBalancer Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_distribution_level (size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>rebalance ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_balance_threshold (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_element_threshold (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_partitioner (SmartPtr&lt;<a href="IPartitioner2d.html">IPartitioner</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
DomainLoadBalancer3dCPU1

DomainLoadBalancer3dCPU1 (SmartPtr<Domain> Domain)
DomainLoadBalancer3dCPU1 (SmartPtr&lt;<a href="Domain2d.html">Domain</a>&gt; Domain)<br>Constructor of class <b>DomainLoadBalancer3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add_serializer
void
void add_serializer (SmartPtr<GridFunction> )
void add_serializer (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )<br><br>Member function of class <b>DomainLoadBalancer3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
DomainLoadBalancer3dCPU2
LoadBalancer3d 
Classgroup <b>DomainLoadBalancer</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU2;</b><br>Inheritance: <a href="LoadBalancer3d.html">LoadBalancer3d</a> <a href="DomainLoadBalancer3dCPU2.html">DomainLoadBalancer3dCPU2</a> <br><table><tr><td colspan=2><h3>DomainLoadBalancer Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DomainLoadBalancer3dCPU2 (SmartPtr&lt;<a href="Domain2d.html">Domain</a>&gt; Domain)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DomainLoadBalancer Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_serializer (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited LoadBalancer Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_distribution_level (size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>rebalance ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_balance_threshold (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_element_threshold (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_partitioner (SmartPtr&lt;<a href="IPartitioner2d.html">IPartitioner</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
DomainLoadBalancer3dCPU2

DomainLoadBalancer3dCPU2 (SmartPtr<Domain> Domain)
DomainLoadBalancer3dCPU2 (SmartPtr&lt;<a href="Domain2d.html">Domain</a>&gt; Domain)<br>Constructor of class <b>DomainLoadBalancer3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add_serializer
void
void add_serializer (SmartPtr<GridFunction> )
void add_serializer (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )<br><br>Member function of class <b>DomainLoadBalancer3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
DomainLoadBalancer3dCPU3
LoadBalancer3d 
Classgroup <b>DomainLoadBalancer</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU3;</b><br>Inheritance: <a href="LoadBalancer3d.html">LoadBalancer3d</a> <a href="DomainLoadBalancer3dCPU3.html">DomainLoadBalancer3dCPU3</a> <br><table><tr><td colspan=2><h3>DomainLoadBalancer Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DomainLoadBalancer3dCPU3 (SmartPtr&lt;<a href="Domain2d.html">Domain</a>&gt; Domain)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DomainLoadBalancer Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_serializer (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited LoadBalancer Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_distribution_level (size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>rebalance ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_balance_threshold (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_element_threshold (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_partitioner (SmartPtr&lt;<a href="IPartitioner2d.html">IPartitioner</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
DomainLoadBalancer3dCPU3

DomainLoadBalancer3dCPU3 (SmartPtr<Domain> Domain)
DomainLoadBalancer3dCPU3 (SmartPtr&lt;<a href="Domain2d.html">Domain</a>&gt; Domain)<br>Constructor of class <b>DomainLoadBalancer3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add_serializer
void
void add_serializer (SmartPtr<GridFunction> )
void add_serializer (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )<br><br>Member function of class <b>DomainLoadBalancer3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
EigenSolverCPU1
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 
Classgroup <b>EigenSolver</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has constructor.  Tag <b>alg=CPU1;</b><br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="EigenSolverCPU1.html">EigenSolverCPU1</a> <br><table><tr><td colspan=2><h3>EigenSolver Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>EigenSolverCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>EigenSolver Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_vector (<a href="VectorCPU1.html">Vector</a> *vector)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>apply ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_eigenvalue (size_t i)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns eigenvalue i<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top><a href="VectorCPU1.html">Vector</a> *</td><td class="memItemRight" valign=bottom>get_eigenvector (size_t i)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns eigenvector i<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_eigenvalues ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns number of eigenvalues<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_additional_eigenvectors_to_keep (size_t i)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: additional i smallest ritz-eigenvectors are added to the test space<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_calc_projected_eigenvalues (bool b)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_linear_operator_A (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; LinearOperatorA)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_linear_operator_B (<a href="MatrixOperatorCPU1.html">MatrixOperator</a> *LinearOperatorB)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_max_iterations (size_t precision)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_pinvit (size_t iPINVIT)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: 1 = preconditioned inverse block iteration, 2 = preconditioned block gradient descent, 3 = LOBPCG<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_precision (number precision)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_preconditioner (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Preconditioner)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_print_projected_eigenproblem (bool b)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_print_projected_eigenvalues (bool b)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_print_projected_eigenvectors (bool b)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_print_used_testvectors (bool b)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_use_additional_corrections (bool b)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
EigenSolverCPU1

EigenSolverCPU1 ()
EigenSolverCPU1 ()<br>Constructor of class <b>EigenSolverCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
add_vector
void
void add_vector (Vector *vector)
void add_vector (<a href="VectorCPU1.html">Vector</a> *vector)<br><br>Member function of class <b>EigenSolverCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_preconditioner
void
void set_preconditioner (SmartPtr<ILinearIterator> Preconditioner)
void set_preconditioner (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Preconditioner)<br><br>Member function of class <b>EigenSolverCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_linear_operator_A
void
void set_linear_operator_A (SmartPtr<ILinearOperator> LinearOperatorA)
void set_linear_operator_A (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; LinearOperatorA)<br><br>Member function of class <b>EigenSolverCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_linear_operator_B
void
void set_linear_operator_B (MatrixOperator *LinearOperatorB)
void set_linear_operator_B (<a href="MatrixOperatorCPU1.html">MatrixOperator</a> *LinearOperatorB)<br><br>Member function of class <b>EigenSolverCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_max_iterations
void
void set_max_iterations (size_t precision)
void set_max_iterations (size_t precision)<br><br>Member function of class <b>EigenSolverCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
num_eigenvalues
unknown
size_t num_eigenvalues ()
size_t num_eigenvalues ()<br><br>Member function of class <b>EigenSolverCPU1</b><br>returns number of eigenvalues<br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
get_eigenvalue
number
number get_eigenvalue (size_t i)
number get_eigenvalue (size_t i)<br><br>Member function of class <b>EigenSolverCPU1</b><br>returns eigenvalue i<br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_precision
void
void set_precision (number precision)
void set_precision (number precision)<br><br>Member function of class <b>EigenSolverCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
get_eigenvector
VectorCPU1*
Vector *get_eigenvector (size_t i)
<a href="VectorCPU1.html">Vector</a> *get_eigenvector (size_t i)<br><br>Member function of class <b>EigenSolverCPU1</b><br>returns eigenvector i<br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_print_projected_eigenvectors
void
void set_print_projected_eigenvectors (bool b)
void set_print_projected_eigenvectors (bool b)<br><br>Member function of class <b>EigenSolverCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_print_projected_eigenvalues
void
void set_print_projected_eigenvalues (bool b)
void set_print_projected_eigenvalues (bool b)<br><br>Member function of class <b>EigenSolverCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_print_projected_eigenproblem
void
void set_print_projected_eigenproblem (bool b)
void set_print_projected_eigenproblem (bool b)<br><br>Member function of class <b>EigenSolverCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_additional_eigenvectors_to_keep
void
void set_additional_eigenvectors_to_keep (size_t i)
void set_additional_eigenvectors_to_keep (size_t i)<br><br>Member function of class <b>EigenSolverCPU1</b><br>tooltip: additional i smallest ritz-eigenvectors are added to the test space<br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_use_additional_corrections
void
void set_use_additional_corrections (bool b)
void set_use_additional_corrections (bool b)<br><br>Member function of class <b>EigenSolverCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_debug_calc_projected_eigenvalues
void
void set_debug_calc_projected_eigenvalues (bool b)
void set_debug_calc_projected_eigenvalues (bool b)<br><br>Member function of class <b>EigenSolverCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_print_used_testvectors
void
void set_print_used_testvectors (bool b)
void set_print_used_testvectors (bool b)<br><br>Member function of class <b>EigenSolverCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_pinvit
void
void set_pinvit (size_t iPINVIT)
void set_pinvit (size_t iPINVIT)<br><br>Member function of class <b>EigenSolverCPU1</b><br>tooltip: 1 = preconditioned inverse block iteration, 2 = preconditioned block gradient descent, 3 = LOBPCG<br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
apply
integer
integer apply ()
integer apply ()<br><br>Member function of class <b>EigenSolverCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
;
class
EigenSolverCPU2
VectorDebugWritingObjectCPU2 DebugWritingObjectCPU2 
Classgroup <b>EigenSolver</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has constructor.  Tag <b>alg=CPU2;</b><br>Inheritance: <a href="VectorDebugWritingObjectCPU2.html">VectorDebugWritingObjectCPU2</a> <a href="DebugWritingObjectCPU2.html">DebugWritingObjectCPU2</a> <a href="EigenSolverCPU2.html">EigenSolverCPU2</a> <br><table><tr><td colspan=2><h3>EigenSolver Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>EigenSolverCPU2 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>EigenSolver Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_vector (<a href="VectorCPU1.html">Vector</a> *vector)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>apply ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_eigenvalue (size_t i)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns eigenvalue i<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top><a href="VectorCPU1.html">Vector</a> *</td><td class="memItemRight" valign=bottom>get_eigenvector (size_t i)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns eigenvector i<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_eigenvalues ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns number of eigenvalues<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_additional_eigenvectors_to_keep (size_t i)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: additional i smallest ritz-eigenvectors are added to the test space<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_calc_projected_eigenvalues (bool b)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_linear_operator_A (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; LinearOperatorA)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_linear_operator_B (<a href="MatrixOperatorCPU1.html">MatrixOperator</a> *LinearOperatorB)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_max_iterations (size_t precision)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_pinvit (size_t iPINVIT)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: 1 = preconditioned inverse block iteration, 2 = preconditioned block gradient descent, 3 = LOBPCG<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_precision (number precision)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_preconditioner (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Preconditioner)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_print_projected_eigenproblem (bool b)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_print_projected_eigenvalues (bool b)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_print_projected_eigenvectors (bool b)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_print_used_testvectors (bool b)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_use_additional_corrections (bool b)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
EigenSolverCPU2

EigenSolverCPU2 ()
EigenSolverCPU2 ()<br>Constructor of class <b>EigenSolverCPU2</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
add_vector
void
void add_vector (Vector *vector)
void add_vector (<a href="VectorCPU1.html">Vector</a> *vector)<br><br>Member function of class <b>EigenSolverCPU2</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_preconditioner
void
void set_preconditioner (SmartPtr<ILinearIterator> Preconditioner)
void set_preconditioner (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Preconditioner)<br><br>Member function of class <b>EigenSolverCPU2</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_linear_operator_A
void
void set_linear_operator_A (SmartPtr<ILinearOperator> LinearOperatorA)
void set_linear_operator_A (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; LinearOperatorA)<br><br>Member function of class <b>EigenSolverCPU2</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_linear_operator_B
void
void set_linear_operator_B (MatrixOperator *LinearOperatorB)
void set_linear_operator_B (<a href="MatrixOperatorCPU1.html">MatrixOperator</a> *LinearOperatorB)<br><br>Member function of class <b>EigenSolverCPU2</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_max_iterations
void
void set_max_iterations (size_t precision)
void set_max_iterations (size_t precision)<br><br>Member function of class <b>EigenSolverCPU2</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
num_eigenvalues
unknown
size_t num_eigenvalues ()
size_t num_eigenvalues ()<br><br>Member function of class <b>EigenSolverCPU2</b><br>returns number of eigenvalues<br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
get_eigenvalue
number
number get_eigenvalue (size_t i)
number get_eigenvalue (size_t i)<br><br>Member function of class <b>EigenSolverCPU2</b><br>returns eigenvalue i<br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_precision
void
void set_precision (number precision)
void set_precision (number precision)<br><br>Member function of class <b>EigenSolverCPU2</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
get_eigenvector
VectorCPU2*
Vector *get_eigenvector (size_t i)
<a href="VectorCPU1.html">Vector</a> *get_eigenvector (size_t i)<br><br>Member function of class <b>EigenSolverCPU2</b><br>returns eigenvector i<br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_print_projected_eigenvectors
void
void set_print_projected_eigenvectors (bool b)
void set_print_projected_eigenvectors (bool b)<br><br>Member function of class <b>EigenSolverCPU2</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_print_projected_eigenvalues
void
void set_print_projected_eigenvalues (bool b)
void set_print_projected_eigenvalues (bool b)<br><br>Member function of class <b>EigenSolverCPU2</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_print_projected_eigenproblem
void
void set_print_projected_eigenproblem (bool b)
void set_print_projected_eigenproblem (bool b)<br><br>Member function of class <b>EigenSolverCPU2</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_additional_eigenvectors_to_keep
void
void set_additional_eigenvectors_to_keep (size_t i)
void set_additional_eigenvectors_to_keep (size_t i)<br><br>Member function of class <b>EigenSolverCPU2</b><br>tooltip: additional i smallest ritz-eigenvectors are added to the test space<br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_use_additional_corrections
void
void set_use_additional_corrections (bool b)
void set_use_additional_corrections (bool b)<br><br>Member function of class <b>EigenSolverCPU2</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_debug_calc_projected_eigenvalues
void
void set_debug_calc_projected_eigenvalues (bool b)
void set_debug_calc_projected_eigenvalues (bool b)<br><br>Member function of class <b>EigenSolverCPU2</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_print_used_testvectors
void
void set_print_used_testvectors (bool b)
void set_print_used_testvectors (bool b)<br><br>Member function of class <b>EigenSolverCPU2</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_pinvit
void
void set_pinvit (size_t iPINVIT)
void set_pinvit (size_t iPINVIT)<br><br>Member function of class <b>EigenSolverCPU2</b><br>tooltip: 1 = preconditioned inverse block iteration, 2 = preconditioned block gradient descent, 3 = LOBPCG<br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
apply
integer
integer apply ()
integer apply ()<br><br>Member function of class <b>EigenSolverCPU2</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
;
class
EigenSolverCPU3
VectorDebugWritingObjectCPU3 DebugWritingObjectCPU3 
Classgroup <b>EigenSolver</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has constructor.  Tag <b>alg=CPU3;</b><br>Inheritance: <a href="VectorDebugWritingObjectCPU3.html">VectorDebugWritingObjectCPU3</a> <a href="DebugWritingObjectCPU3.html">DebugWritingObjectCPU3</a> <a href="EigenSolverCPU3.html">EigenSolverCPU3</a> <br><table><tr><td colspan=2><h3>EigenSolver Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>EigenSolverCPU3 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>EigenSolver Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_vector (<a href="VectorCPU1.html">Vector</a> *vector)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>apply ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_eigenvalue (size_t i)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns eigenvalue i<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top><a href="VectorCPU1.html">Vector</a> *</td><td class="memItemRight" valign=bottom>get_eigenvector (size_t i)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns eigenvector i<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_eigenvalues ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns number of eigenvalues<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_additional_eigenvectors_to_keep (size_t i)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: additional i smallest ritz-eigenvectors are added to the test space<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_calc_projected_eigenvalues (bool b)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_linear_operator_A (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; LinearOperatorA)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_linear_operator_B (<a href="MatrixOperatorCPU1.html">MatrixOperator</a> *LinearOperatorB)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_max_iterations (size_t precision)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_pinvit (size_t iPINVIT)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: 1 = preconditioned inverse block iteration, 2 = preconditioned block gradient descent, 3 = LOBPCG<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_precision (number precision)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_preconditioner (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Preconditioner)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_print_projected_eigenproblem (bool b)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_print_projected_eigenvalues (bool b)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_print_projected_eigenvectors (bool b)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_print_used_testvectors (bool b)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_use_additional_corrections (bool b)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
EigenSolverCPU3

EigenSolverCPU3 ()
EigenSolverCPU3 ()<br>Constructor of class <b>EigenSolverCPU3</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
add_vector
void
void add_vector (Vector *vector)
void add_vector (<a href="VectorCPU1.html">Vector</a> *vector)<br><br>Member function of class <b>EigenSolverCPU3</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_preconditioner
void
void set_preconditioner (SmartPtr<ILinearIterator> Preconditioner)
void set_preconditioner (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Preconditioner)<br><br>Member function of class <b>EigenSolverCPU3</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_linear_operator_A
void
void set_linear_operator_A (SmartPtr<ILinearOperator> LinearOperatorA)
void set_linear_operator_A (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; LinearOperatorA)<br><br>Member function of class <b>EigenSolverCPU3</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_linear_operator_B
void
void set_linear_operator_B (MatrixOperator *LinearOperatorB)
void set_linear_operator_B (<a href="MatrixOperatorCPU1.html">MatrixOperator</a> *LinearOperatorB)<br><br>Member function of class <b>EigenSolverCPU3</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_max_iterations
void
void set_max_iterations (size_t precision)
void set_max_iterations (size_t precision)<br><br>Member function of class <b>EigenSolverCPU3</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
num_eigenvalues
unknown
size_t num_eigenvalues ()
size_t num_eigenvalues ()<br><br>Member function of class <b>EigenSolverCPU3</b><br>returns number of eigenvalues<br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
get_eigenvalue
number
number get_eigenvalue (size_t i)
number get_eigenvalue (size_t i)<br><br>Member function of class <b>EigenSolverCPU3</b><br>returns eigenvalue i<br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_precision
void
void set_precision (number precision)
void set_precision (number precision)<br><br>Member function of class <b>EigenSolverCPU3</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
get_eigenvector
VectorCPU3*
Vector *get_eigenvector (size_t i)
<a href="VectorCPU1.html">Vector</a> *get_eigenvector (size_t i)<br><br>Member function of class <b>EigenSolverCPU3</b><br>returns eigenvector i<br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_print_projected_eigenvectors
void
void set_print_projected_eigenvectors (bool b)
void set_print_projected_eigenvectors (bool b)<br><br>Member function of class <b>EigenSolverCPU3</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_print_projected_eigenvalues
void
void set_print_projected_eigenvalues (bool b)
void set_print_projected_eigenvalues (bool b)<br><br>Member function of class <b>EigenSolverCPU3</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_print_projected_eigenproblem
void
void set_print_projected_eigenproblem (bool b)
void set_print_projected_eigenproblem (bool b)<br><br>Member function of class <b>EigenSolverCPU3</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_additional_eigenvectors_to_keep
void
void set_additional_eigenvectors_to_keep (size_t i)
void set_additional_eigenvectors_to_keep (size_t i)<br><br>Member function of class <b>EigenSolverCPU3</b><br>tooltip: additional i smallest ritz-eigenvectors are added to the test space<br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_use_additional_corrections
void
void set_use_additional_corrections (bool b)
void set_use_additional_corrections (bool b)<br><br>Member function of class <b>EigenSolverCPU3</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_debug_calc_projected_eigenvalues
void
void set_debug_calc_projected_eigenvalues (bool b)
void set_debug_calc_projected_eigenvalues (bool b)<br><br>Member function of class <b>EigenSolverCPU3</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_print_used_testvectors
void
void set_print_used_testvectors (bool b)
void set_print_used_testvectors (bool b)<br><br>Member function of class <b>EigenSolverCPU3</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_pinvit
void
void set_pinvit (size_t iPINVIT)
void set_pinvit (size_t iPINVIT)<br><br>Member function of class <b>EigenSolverCPU3</b><br>tooltip: 1 = preconditioned inverse block iteration, 2 = preconditioned block gradient descent, 3 = LOBPCG<br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
apply
integer
integer apply ()
integer apply ()<br><br>Member function of class <b>EigenSolverCPU3</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
;
class
ElementGaussSeidel1dCPU1
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 ILinearIteratorCPU1 IPreconditionerCPU1 
Classgroup <b>ElementGaussSeidel</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU1;</b><br>Vanka Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="IPreconditionerCPU1.html">IPreconditionerCPU1</a> <a href="ElementGaussSeidel1dCPU1.html">ElementGaussSeidel1dCPU1</a> <br><table><tr><td colspan=2><h3>ElementGaussSeidel Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ElementGaussSeidel1dCPU1 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ElementGaussSeidel1dCPU1 (number relax)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ElementGaussSeidel1dCPU1 (std_string patch-type)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ElementGaussSeidel1dCPU1 (number relax, patch-type, std_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ElementGaussSeidel Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_relax (number relax)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
ElementGaussSeidel1dCPU1

ElementGaussSeidel1dCPU1 ()
ElementGaussSeidel1dCPU1 ()<br>Constructor of class <b>ElementGaussSeidel1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
ElementGaussSeidel1dCPU1

ElementGaussSeidel1dCPU1 (number relax)
ElementGaussSeidel1dCPU1 (number relax)<br>Constructor of class <b>ElementGaussSeidel1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
ElementGaussSeidel1dCPU1

ElementGaussSeidel1dCPU1 (std_string patch-type)
ElementGaussSeidel1dCPU1 (std_string patch-type)<br>Constructor of class <b>ElementGaussSeidel1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
ElementGaussSeidel1dCPU1

ElementGaussSeidel1dCPU1 (number relax, patch-type, std_string )
ElementGaussSeidel1dCPU1 (number relax, patch-type, std_string )<br>Constructor of class <b>ElementGaussSeidel1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_relax
void
void set_relax (number relax)
void set_relax (number relax)<br><br>Member function of class <b>ElementGaussSeidel1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
ElementGaussSeidel1dCPU2
VectorDebugWritingObjectCPU2 DebugWritingObjectCPU2 ILinearIteratorCPU2 IPreconditionerCPU2 
Classgroup <b>ElementGaussSeidel</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU2;</b><br>Vanka Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU2.html">VectorDebugWritingObjectCPU2</a> <a href="DebugWritingObjectCPU2.html">DebugWritingObjectCPU2</a> <a href="ILinearIteratorCPU2.html">ILinearIteratorCPU2</a> <a href="IPreconditionerCPU2.html">IPreconditionerCPU2</a> <a href="ElementGaussSeidel1dCPU2.html">ElementGaussSeidel1dCPU2</a> <br><table><tr><td colspan=2><h3>ElementGaussSeidel Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ElementGaussSeidel1dCPU2 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ElementGaussSeidel1dCPU2 (number relax)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ElementGaussSeidel1dCPU2 (std_string patch-type)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ElementGaussSeidel1dCPU2 (number relax, patch-type, std_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ElementGaussSeidel Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_relax (number relax)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
ElementGaussSeidel1dCPU2

ElementGaussSeidel1dCPU2 ()
ElementGaussSeidel1dCPU2 ()<br>Constructor of class <b>ElementGaussSeidel1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
ElementGaussSeidel1dCPU2

ElementGaussSeidel1dCPU2 (number relax)
ElementGaussSeidel1dCPU2 (number relax)<br>Constructor of class <b>ElementGaussSeidel1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
ElementGaussSeidel1dCPU2

ElementGaussSeidel1dCPU2 (std_string patch-type)
ElementGaussSeidel1dCPU2 (std_string patch-type)<br>Constructor of class <b>ElementGaussSeidel1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
ElementGaussSeidel1dCPU2

ElementGaussSeidel1dCPU2 (number relax, patch-type, std_string )
ElementGaussSeidel1dCPU2 (number relax, patch-type, std_string )<br>Constructor of class <b>ElementGaussSeidel1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_relax
void
void set_relax (number relax)
void set_relax (number relax)<br><br>Member function of class <b>ElementGaussSeidel1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
ElementGaussSeidel1dCPU3
VectorDebugWritingObjectCPU3 DebugWritingObjectCPU3 ILinearIteratorCPU3 IPreconditionerCPU3 
Classgroup <b>ElementGaussSeidel</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU3;</b><br>Vanka Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU3.html">VectorDebugWritingObjectCPU3</a> <a href="DebugWritingObjectCPU3.html">DebugWritingObjectCPU3</a> <a href="ILinearIteratorCPU3.html">ILinearIteratorCPU3</a> <a href="IPreconditionerCPU3.html">IPreconditionerCPU3</a> <a href="ElementGaussSeidel1dCPU3.html">ElementGaussSeidel1dCPU3</a> <br><table><tr><td colspan=2><h3>ElementGaussSeidel Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ElementGaussSeidel1dCPU3 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ElementGaussSeidel1dCPU3 (number relax)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ElementGaussSeidel1dCPU3 (std_string patch-type)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ElementGaussSeidel1dCPU3 (number relax, patch-type, std_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ElementGaussSeidel Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_relax (number relax)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
ElementGaussSeidel1dCPU3

ElementGaussSeidel1dCPU3 ()
ElementGaussSeidel1dCPU3 ()<br>Constructor of class <b>ElementGaussSeidel1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
ElementGaussSeidel1dCPU3

ElementGaussSeidel1dCPU3 (number relax)
ElementGaussSeidel1dCPU3 (number relax)<br>Constructor of class <b>ElementGaussSeidel1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
ElementGaussSeidel1dCPU3

ElementGaussSeidel1dCPU3 (std_string patch-type)
ElementGaussSeidel1dCPU3 (std_string patch-type)<br>Constructor of class <b>ElementGaussSeidel1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
ElementGaussSeidel1dCPU3

ElementGaussSeidel1dCPU3 (number relax, patch-type, std_string )
ElementGaussSeidel1dCPU3 (number relax, patch-type, std_string )<br>Constructor of class <b>ElementGaussSeidel1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_relax
void
void set_relax (number relax)
void set_relax (number relax)<br><br>Member function of class <b>ElementGaussSeidel1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
ElementGaussSeidel2dCPU1
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 ILinearIteratorCPU1 IPreconditionerCPU1 
Classgroup <b>ElementGaussSeidel</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU1;</b><br>Vanka Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="IPreconditionerCPU1.html">IPreconditionerCPU1</a> <a href="ElementGaussSeidel2dCPU1.html">ElementGaussSeidel2dCPU1</a> <br><table><tr><td colspan=2><h3>ElementGaussSeidel Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ElementGaussSeidel2dCPU1 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ElementGaussSeidel2dCPU1 (number relax)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ElementGaussSeidel2dCPU1 (std_string patch-type)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ElementGaussSeidel2dCPU1 (number relax, patch-type, std_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ElementGaussSeidel Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_relax (number relax)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
ElementGaussSeidel2dCPU1

ElementGaussSeidel2dCPU1 ()
ElementGaussSeidel2dCPU1 ()<br>Constructor of class <b>ElementGaussSeidel2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
ElementGaussSeidel2dCPU1

ElementGaussSeidel2dCPU1 (number relax)
ElementGaussSeidel2dCPU1 (number relax)<br>Constructor of class <b>ElementGaussSeidel2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
ElementGaussSeidel2dCPU1

ElementGaussSeidel2dCPU1 (std_string patch-type)
ElementGaussSeidel2dCPU1 (std_string patch-type)<br>Constructor of class <b>ElementGaussSeidel2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
ElementGaussSeidel2dCPU1

ElementGaussSeidel2dCPU1 (number relax, patch-type, std_string )
ElementGaussSeidel2dCPU1 (number relax, patch-type, std_string )<br>Constructor of class <b>ElementGaussSeidel2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_relax
void
void set_relax (number relax)
void set_relax (number relax)<br><br>Member function of class <b>ElementGaussSeidel2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
ElementGaussSeidel2dCPU2
VectorDebugWritingObjectCPU2 DebugWritingObjectCPU2 ILinearIteratorCPU2 IPreconditionerCPU2 
Classgroup <b>ElementGaussSeidel</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU2;</b><br>Vanka Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU2.html">VectorDebugWritingObjectCPU2</a> <a href="DebugWritingObjectCPU2.html">DebugWritingObjectCPU2</a> <a href="ILinearIteratorCPU2.html">ILinearIteratorCPU2</a> <a href="IPreconditionerCPU2.html">IPreconditionerCPU2</a> <a href="ElementGaussSeidel2dCPU2.html">ElementGaussSeidel2dCPU2</a> <br><table><tr><td colspan=2><h3>ElementGaussSeidel Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ElementGaussSeidel2dCPU2 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ElementGaussSeidel2dCPU2 (number relax)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ElementGaussSeidel2dCPU2 (std_string patch-type)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ElementGaussSeidel2dCPU2 (number relax, patch-type, std_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ElementGaussSeidel Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_relax (number relax)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
ElementGaussSeidel2dCPU2

ElementGaussSeidel2dCPU2 ()
ElementGaussSeidel2dCPU2 ()<br>Constructor of class <b>ElementGaussSeidel2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
ElementGaussSeidel2dCPU2

ElementGaussSeidel2dCPU2 (number relax)
ElementGaussSeidel2dCPU2 (number relax)<br>Constructor of class <b>ElementGaussSeidel2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
ElementGaussSeidel2dCPU2

ElementGaussSeidel2dCPU2 (std_string patch-type)
ElementGaussSeidel2dCPU2 (std_string patch-type)<br>Constructor of class <b>ElementGaussSeidel2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
ElementGaussSeidel2dCPU2

ElementGaussSeidel2dCPU2 (number relax, patch-type, std_string )
ElementGaussSeidel2dCPU2 (number relax, patch-type, std_string )<br>Constructor of class <b>ElementGaussSeidel2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_relax
void
void set_relax (number relax)
void set_relax (number relax)<br><br>Member function of class <b>ElementGaussSeidel2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
ElementGaussSeidel2dCPU3
VectorDebugWritingObjectCPU3 DebugWritingObjectCPU3 ILinearIteratorCPU3 IPreconditionerCPU3 
Classgroup <b>ElementGaussSeidel</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU3;</b><br>Vanka Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU3.html">VectorDebugWritingObjectCPU3</a> <a href="DebugWritingObjectCPU3.html">DebugWritingObjectCPU3</a> <a href="ILinearIteratorCPU3.html">ILinearIteratorCPU3</a> <a href="IPreconditionerCPU3.html">IPreconditionerCPU3</a> <a href="ElementGaussSeidel2dCPU3.html">ElementGaussSeidel2dCPU3</a> <br><table><tr><td colspan=2><h3>ElementGaussSeidel Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ElementGaussSeidel2dCPU3 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ElementGaussSeidel2dCPU3 (number relax)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ElementGaussSeidel2dCPU3 (std_string patch-type)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ElementGaussSeidel2dCPU3 (number relax, patch-type, std_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ElementGaussSeidel Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_relax (number relax)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
ElementGaussSeidel2dCPU3

ElementGaussSeidel2dCPU3 ()
ElementGaussSeidel2dCPU3 ()<br>Constructor of class <b>ElementGaussSeidel2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
ElementGaussSeidel2dCPU3

ElementGaussSeidel2dCPU3 (number relax)
ElementGaussSeidel2dCPU3 (number relax)<br>Constructor of class <b>ElementGaussSeidel2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
ElementGaussSeidel2dCPU3

ElementGaussSeidel2dCPU3 (std_string patch-type)
ElementGaussSeidel2dCPU3 (std_string patch-type)<br>Constructor of class <b>ElementGaussSeidel2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
ElementGaussSeidel2dCPU3

ElementGaussSeidel2dCPU3 (number relax, patch-type, std_string )
ElementGaussSeidel2dCPU3 (number relax, patch-type, std_string )<br>Constructor of class <b>ElementGaussSeidel2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_relax
void
void set_relax (number relax)
void set_relax (number relax)<br><br>Member function of class <b>ElementGaussSeidel2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
ElementGaussSeidel3dCPU1
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 ILinearIteratorCPU1 IPreconditionerCPU1 
Classgroup <b>ElementGaussSeidel</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU1;</b><br>Vanka Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="IPreconditionerCPU1.html">IPreconditionerCPU1</a> <a href="ElementGaussSeidel3dCPU1.html">ElementGaussSeidel3dCPU1</a> <br><table><tr><td colspan=2><h3>ElementGaussSeidel Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ElementGaussSeidel3dCPU1 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ElementGaussSeidel3dCPU1 (number relax)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ElementGaussSeidel3dCPU1 (std_string patch-type)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ElementGaussSeidel3dCPU1 (number relax, patch-type, std_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ElementGaussSeidel Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_relax (number relax)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
ElementGaussSeidel3dCPU1

ElementGaussSeidel3dCPU1 ()
ElementGaussSeidel3dCPU1 ()<br>Constructor of class <b>ElementGaussSeidel3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
ElementGaussSeidel3dCPU1

ElementGaussSeidel3dCPU1 (number relax)
ElementGaussSeidel3dCPU1 (number relax)<br>Constructor of class <b>ElementGaussSeidel3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
ElementGaussSeidel3dCPU1

ElementGaussSeidel3dCPU1 (std_string patch-type)
ElementGaussSeidel3dCPU1 (std_string patch-type)<br>Constructor of class <b>ElementGaussSeidel3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
ElementGaussSeidel3dCPU1

ElementGaussSeidel3dCPU1 (number relax, patch-type, std_string )
ElementGaussSeidel3dCPU1 (number relax, patch-type, std_string )<br>Constructor of class <b>ElementGaussSeidel3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_relax
void
void set_relax (number relax)
void set_relax (number relax)<br><br>Member function of class <b>ElementGaussSeidel3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
ElementGaussSeidel3dCPU2
VectorDebugWritingObjectCPU2 DebugWritingObjectCPU2 ILinearIteratorCPU2 IPreconditionerCPU2 
Classgroup <b>ElementGaussSeidel</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU2;</b><br>Vanka Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU2.html">VectorDebugWritingObjectCPU2</a> <a href="DebugWritingObjectCPU2.html">DebugWritingObjectCPU2</a> <a href="ILinearIteratorCPU2.html">ILinearIteratorCPU2</a> <a href="IPreconditionerCPU2.html">IPreconditionerCPU2</a> <a href="ElementGaussSeidel3dCPU2.html">ElementGaussSeidel3dCPU2</a> <br><table><tr><td colspan=2><h3>ElementGaussSeidel Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ElementGaussSeidel3dCPU2 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ElementGaussSeidel3dCPU2 (number relax)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ElementGaussSeidel3dCPU2 (std_string patch-type)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ElementGaussSeidel3dCPU2 (number relax, patch-type, std_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ElementGaussSeidel Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_relax (number relax)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
ElementGaussSeidel3dCPU2

ElementGaussSeidel3dCPU2 ()
ElementGaussSeidel3dCPU2 ()<br>Constructor of class <b>ElementGaussSeidel3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
ElementGaussSeidel3dCPU2

ElementGaussSeidel3dCPU2 (number relax)
ElementGaussSeidel3dCPU2 (number relax)<br>Constructor of class <b>ElementGaussSeidel3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
ElementGaussSeidel3dCPU2

ElementGaussSeidel3dCPU2 (std_string patch-type)
ElementGaussSeidel3dCPU2 (std_string patch-type)<br>Constructor of class <b>ElementGaussSeidel3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
ElementGaussSeidel3dCPU2

ElementGaussSeidel3dCPU2 (number relax, patch-type, std_string )
ElementGaussSeidel3dCPU2 (number relax, patch-type, std_string )<br>Constructor of class <b>ElementGaussSeidel3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_relax
void
void set_relax (number relax)
void set_relax (number relax)<br><br>Member function of class <b>ElementGaussSeidel3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
ElementGaussSeidel3dCPU3
VectorDebugWritingObjectCPU3 DebugWritingObjectCPU3 ILinearIteratorCPU3 IPreconditionerCPU3 
Classgroup <b>ElementGaussSeidel</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU3;</b><br>Vanka Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU3.html">VectorDebugWritingObjectCPU3</a> <a href="DebugWritingObjectCPU3.html">DebugWritingObjectCPU3</a> <a href="ILinearIteratorCPU3.html">ILinearIteratorCPU3</a> <a href="IPreconditionerCPU3.html">IPreconditionerCPU3</a> <a href="ElementGaussSeidel3dCPU3.html">ElementGaussSeidel3dCPU3</a> <br><table><tr><td colspan=2><h3>ElementGaussSeidel Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ElementGaussSeidel3dCPU3 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ElementGaussSeidel3dCPU3 (number relax)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ElementGaussSeidel3dCPU3 (std_string patch-type)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ElementGaussSeidel3dCPU3 (number relax, patch-type, std_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ElementGaussSeidel Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_relax (number relax)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
ElementGaussSeidel3dCPU3

ElementGaussSeidel3dCPU3 ()
ElementGaussSeidel3dCPU3 ()<br>Constructor of class <b>ElementGaussSeidel3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
ElementGaussSeidel3dCPU3

ElementGaussSeidel3dCPU3 (number relax)
ElementGaussSeidel3dCPU3 (number relax)<br>Constructor of class <b>ElementGaussSeidel3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
ElementGaussSeidel3dCPU3

ElementGaussSeidel3dCPU3 (std_string patch-type)
ElementGaussSeidel3dCPU3 (std_string patch-type)<br>Constructor of class <b>ElementGaussSeidel3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
ElementGaussSeidel3dCPU3

ElementGaussSeidel3dCPU3 (number relax, patch-type, std_string )
ElementGaussSeidel3dCPU3 (number relax, patch-type, std_string )<br>Constructor of class <b>ElementGaussSeidel3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_relax
void
void set_relax (number relax)
void set_relax (number relax)<br><br>Member function of class <b>ElementGaussSeidel3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
ExpandLayersDesc
FractureInfoVec 
Registry Group: <b>/ug4/Grid</b><br>class has constructor. <br>Inheritance: <a href="FractureInfoVec.html">FractureInfoVec</a> <a href="ExpandLayersDesc.html">ExpandLayersDesc</a> <br><table><tr><td colspan=2><h3>ExpandLayersDesc Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ExpandLayersDesc ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ExpandLayersDesc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_layer (integer , integer , number )</td></tr><tr><td><br></td></tr></table>
constructor
ExpandLayersDesc

ExpandLayersDesc ()
ExpandLayersDesc ()<br>Constructor of class <b>ExpandLayersDesc</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
add_layer
void
void add_layer (integer , integer , number )
void add_layer (integer , integer , number )<br><br>Member function of class <b>ExpandLayersDesc</b><br>Registry Group: <b>/ug4/Grid</b>
;
class
FAMGPreconditionerCPU1
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 ILinearIteratorCPU1 IPreconditionerCPU1 AMGBaseCPU1 
Classgroup <b>FAMGPreconditioner</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b><br>class has constructor.  Tag <b>alg=CPU1;</b><br>Filtering Algebraic Multigrid<br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="IPreconditionerCPU1.html">IPreconditionerCPU1</a> <a href="AMGBaseCPU1.html">AMGBaseCPU1</a> <a href="FAMGPreconditionerCPU1.html">FAMGPreconditionerCPU1</a> <br><table><tr><td colspan=2><h3>FAMGPreconditioner Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>FAMGPreconditionerCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>FAMGPreconditioner Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_testvector (<a href="VectorCPU1.html">Vector</a> *adds a testvector with weight, number )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns testVector#weight<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_testvector (<a href="IVectorWriterCPU1.html">IVectorWriter</a> *adds a testvector with weight by using the IVectorWriter interface, number )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns testVector#weight<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check_testvector (size_t fromlevel, size_t tolevel)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check_testvector (size_t fromlevel)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check_testvector ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_strong_connection_external ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>reset_testvectors ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_H_reduce_interpolation_nodes_parameter (number HreduceParameter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: we can restrict the number of parent nodes by looking at the entries of H(i,j) to prevent high fill in rates (e.g. 1e-3)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_aggressive_coarsening (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damping_for_smoother_in_interpolation_calculation (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_after_communciate_prolongation (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_aggressive_coarsening (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_calculate_parent_pairs (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_coloring (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_communicate_prolongation (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_external_coarsening (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_get_ratings (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_overlap (size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_phase_3 (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_precalculate_coarsening (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_recv_coarsening (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_send_coarsening (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_testvector_calc (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_delta (number delta)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: "Interpolation quality" F may not be worse than this (F < m_delta). e.g. 0.5<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_external_coarsening (bool You need to set_parallel_coarsening in parallel.)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns bExternalCoarsening<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_galerkin_truncation (number galerkin_tr)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets galerkin truncation, a parameter used to truncate the galerkin product. use with care! (like 1e-9)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_parallel_coarsening (<a href="IParallelCoarsening.html">IParallelCoarsening</a> *parallelCoarsening)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: e.g. GetColorCoarsening()<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_prereduce_A_parameter (number prereduceA)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: by setting this != 0.0, we reduce the matrix A before using it to its strong connections. (e.g. 1e-3)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_prolongation_truncation (number prolongation_tr)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets prolongation_truncation, a parameter used for truncation of interpolation. use with care! (like 1e-5)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_read_coarsening ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_strong_connection_external (number set strong_connection value for coarsening (like set_epsilon_strong in RSAMG))</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns epsilon<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_testvector_from_matrix_rows ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_testvector_smoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; sets the smoother to smooth testvectors)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns smoother<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_testvector_smooths (size_t number of smoothing steps to smooth testvectors)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns n<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_testvectors_LE (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_theta (number theta)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: with multiple parents paris, discard pairs with m_theta * F > min F. e.g. 0.9<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_use_precalculate (bool bUsePrecalculate)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: experimental way of coarsening. beta.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_write_coarsening ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_write_f_values (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_write_testvectors (bool if true, write testvectors to path specified in set_matrix_write_path)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns bWrite<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>FAMGPreconditioner Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_H_reduce_interpolation_nodes_parameter ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns HreduceParameter<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_delta ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns delta<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_galerkin_truncation ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns galerkin_tr<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_prereduce_A_parameter ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns prereduceA<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_prolongation_truncation ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns prolongation_tr<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_theta ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns theta<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>tostring ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited AMGBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check (const <a href="VectorCPU1.html">Vector</a> *x, const <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: performs a check of convergence on all levels<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check2 (const <a href="VectorCPU1.html">Vector</a> *x, const <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: performs a check of convergence on all levels<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check_fsmoothing ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_Y_cycle (integer , number , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_base_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; basesmoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_checkLevel_post_iterations (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_cycle_type (size_t gamma)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets cycle type in multigrid cycle (gamma)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_fsmoothing (bool enable)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_matrix_write_path (c_string matrixWritePath)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: set the path where connectionviewer matrices of the levels are written<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_max_fill_before_base (number fillrate)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets maximal fill rate before base solver is used<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_max_levels (size_t max_levels)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets max nr of AMG levels<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_max_nodes_for_base (size_t maxNrOfNodes)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets the maximal nr of nodes for base solver<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_min_nodes_on_one_processor (size_t minNrOfNodes)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: if the node number on one processor falls below this, agglomerate<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_nr_of_preiterations_at_check (size_t i)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: nr of mg cycles performed before checking<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_postsmooth (size_t nu2)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets nr. of postsmoothing steps (nu2)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_presmooth (size_t nu1)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets nr. of presmoothing steps (nu1)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_one_init (bool b)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_position_provider (<a href="IPositionProvider2d.html">IPositionProvider</a> *prov)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: needed for connectionviewer output<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_position_provider (<a href="IPositionProvider2d.html">IPositionProvider</a> *prov)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: needed for connectionviewer output<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_postsmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; postsmoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_preferred_nodes_on_one_processor (size_t preferredNrOfNodes)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: if we need to agglomerate, ensure all nodes have more than this number of unknowns<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_preiterations_mimum_defect_at_check (number d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: minimum defect for preiterations before checking<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_presmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; presmoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>write_interfaces ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited AMGBase Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_cycle_type ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns cycle type in multigrid cycle (gamma)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>get_fsmoothing ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns f smoothing enabled<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_grid_complexity ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns grid complexity c_G<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: c_G = total number of nodes of all levels divided by number of nodes on level 0<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const <a href="AMGLevelInformationCPU1.html">AMGLevelInformation</a> *</td><td class="memItemRight" valign=bottom>get_level_information (size_t L)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns information about the level L<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_max_fill_before_base ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns maximal fill rate before base solver is used<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_max_levels ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns max nr of AMG levels<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_max_nodes_for_base ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns maximal nr of nodes for base solver<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_min_nodes_on_one_processor ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns minNrOfNodes<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: if the node number on one processor falls below this, agglomerate<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_num_postsmooth ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr. of postsmoothing steps (nu2)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_num_presmooth ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr. of presmoothing steps (nu1)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_operator_complexity ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns operator complexity c_A<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: c_A = total nnz of all matrices divided by nnz of matrix A<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_preferred_nodes_on_one_processor ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns preferredNrOfNodes<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: if we need to agglomerate, ensure all nodes have more than this number of unknowns<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_timing_coarse_solver_setup_ms ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the time spent in the coarse solver setup in ms<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_timing_whole_setup_ms ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the time spent on the whole setup in ms<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_used_levels ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns used nr of AMG levels<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
FAMGPreconditionerCPU1

FAMGPreconditionerCPU1 ()
FAMGPreconditionerCPU1 ()<br>Constructor of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_aggressive_coarsening
void
void set_aggressive_coarsening (bool )
void set_aggressive_coarsening (bool )<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_delta
void
void set_delta (number delta)
void set_delta (number delta)<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>tooltip: "Interpolation quality" F may not be worse than this (F < m_delta). e.g. 0.5<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_theta
void
void set_theta (number theta)
void set_theta (number theta)<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>tooltip: with multiple parents paris, discard pairs with m_theta * F > min F. e.g. 0.9<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_damping_for_smoother_in_interpolation_calculation
void
void set_damping_for_smoother_in_interpolation_calculation (number )
void set_damping_for_smoother_in_interpolation_calculation (number )<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
add_testvector
void
void add_testvector (Vector *adds a testvector with weight, number )
void add_testvector (<a href="VectorCPU1.html">Vector</a> *adds a testvector with weight, number )<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>returns testVector#weight<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
add_testvector
void
void add_testvector (IVectorWriter *adds a testvector with weight by using the IVectorWriter interface, number )
void add_testvector (<a href="IVectorWriterCPU1.html">IVectorWriter</a> *adds a testvector with weight by using the IVectorWriter interface, number )<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>returns testVector#weight<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_write_testvectors
void
void set_write_testvectors (bool if true, write testvectors to path specified in set_matrix_write_path)
void set_write_testvectors (bool if true, write testvectors to path specified in set_matrix_write_path)<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>returns bWrite<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_testvector_smoother
void
void set_testvector_smoother (SmartPtr<ILinearIterator> sets the smoother to smooth testvectors)
void set_testvector_smoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; sets the smoother to smooth testvectors)<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>returns smoother<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_testvector_smooths
void
void set_testvector_smooths (size_t number of smoothing steps to smooth testvectors)
void set_testvector_smooths (size_t number of smoothing steps to smooth testvectors)<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>returns n<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_testvector_from_matrix_rows
void
void set_testvector_from_matrix_rows ()
void set_testvector_from_matrix_rows ()<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_testvectors_LE
void
void set_testvectors_LE (number )
void set_testvectors_LE (number )<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
reset_testvectors
void
void reset_testvectors ()
void reset_testvectors ()<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_prolongation_truncation
void
void set_prolongation_truncation (number prolongation_tr)
void set_prolongation_truncation (number prolongation_tr)<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>tooltip: sets prolongation_truncation, a parameter used for truncation of interpolation. use with care! (like 1e-5)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_galerkin_truncation
void
void set_galerkin_truncation (number galerkin_tr)
void set_galerkin_truncation (number galerkin_tr)<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>tooltip: sets galerkin truncation, a parameter used to truncate the galerkin product. use with care! (like 1e-9)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_H_reduce_interpolation_nodes_parameter
void
void set_H_reduce_interpolation_nodes_parameter (number HreduceParameter)
void set_H_reduce_interpolation_nodes_parameter (number HreduceParameter)<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>tooltip: we can restrict the number of parent nodes by looking at the entries of H(i,j) to prevent high fill in rates (e.g. 1e-3)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_prereduce_A_parameter
void
void set_prereduce_A_parameter (number prereduceA)
void set_prereduce_A_parameter (number prereduceA)<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>tooltip: by setting this != 0.0, we reduce the matrix A before using it to its strong connections. (e.g. 1e-3)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_external_coarsening
void
void set_external_coarsening (bool You need to set_parallel_coarsening in parallel.)
void set_external_coarsening (bool You need to set_parallel_coarsening in parallel.)<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>returns bExternalCoarsening<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_strong_connection_external
void
void set_strong_connection_external (number set strong_connection value for coarsening (like set_epsilon_strong in RSAMG))
void set_strong_connection_external (number set strong_connection value for coarsening (like set_epsilon_strong in RSAMG))<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>returns epsilon<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_strong_connection_external
number
number get_strong_connection_external ()
number get_strong_connection_external ()<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_write_coarsening
void
void set_write_coarsening ()
void set_write_coarsening ()<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_read_coarsening
void
void set_read_coarsening ()
void set_read_coarsening ()<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_parallel_coarsening
void
void set_parallel_coarsening (IParallelCoarsening *parallelCoarsening)
void set_parallel_coarsening (<a href="IParallelCoarsening.html">IParallelCoarsening</a> *parallelCoarsening)<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>tooltip: e.g. GetColorCoarsening()<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_use_precalculate
void
void set_use_precalculate (bool bUsePrecalculate)
void set_use_precalculate (bool bUsePrecalculate)<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>tooltip: experimental way of coarsening. beta.<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_overlap
void
void set_debug_level_overlap (size_t , size_t )
void set_debug_level_overlap (size_t , size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_testvector_calc
void
void set_debug_level_testvector_calc (size_t )
void set_debug_level_testvector_calc (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_phase_3
void
void set_debug_level_phase_3 (size_t )
void set_debug_level_phase_3 (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_calculate_parent_pairs
void
void set_debug_level_calculate_parent_pairs (size_t )
void set_debug_level_calculate_parent_pairs (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_recv_coarsening
void
void set_debug_level_recv_coarsening (size_t )
void set_debug_level_recv_coarsening (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_coloring
void
void set_debug_level_coloring (size_t )
void set_debug_level_coloring (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_get_ratings
void
void set_debug_level_get_ratings (size_t )
void set_debug_level_get_ratings (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_precalculate_coarsening
void
void set_debug_level_precalculate_coarsening (size_t )
void set_debug_level_precalculate_coarsening (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_aggressive_coarsening
void
void set_debug_level_aggressive_coarsening (size_t )
void set_debug_level_aggressive_coarsening (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_send_coarsening
void
void set_debug_level_send_coarsening (size_t )
void set_debug_level_send_coarsening (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_communicate_prolongation
void
void set_debug_level_communicate_prolongation (size_t )
void set_debug_level_communicate_prolongation (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_after_communciate_prolongation
void
void set_debug_level_after_communciate_prolongation (size_t )
void set_debug_level_after_communciate_prolongation (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_external_coarsening
void
void set_debug_level_external_coarsening (size_t )
void set_debug_level_external_coarsening (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_write_f_values
void
void set_write_f_values (bool )
void set_write_f_values (bool )<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
check_testvector
bool
bool check_testvector ()
bool check_testvector ()<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
check_testvector
bool
bool check_testvector (size_t fromlevel)
bool check_testvector (size_t fromlevel)<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
check_testvector
bool
bool check_testvector (size_t fromlevel, size_t tolevel)
bool check_testvector (size_t fromlevel, size_t tolevel)<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
tostring
void
void tostring () const
void tostring ()<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_delta
number
number get_delta () const
number get_delta ()<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>returns delta<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_theta
number
number get_theta () const
number get_theta ()<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>returns theta<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_prolongation_truncation
number
number get_prolongation_truncation () const
number get_prolongation_truncation ()<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>returns prolongation_tr<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_galerkin_truncation
number
number get_galerkin_truncation () const
number get_galerkin_truncation ()<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>returns galerkin_tr<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_H_reduce_interpolation_nodes_parameter
number
number get_H_reduce_interpolation_nodes_parameter () const
number get_H_reduce_interpolation_nodes_parameter ()<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>returns HreduceParameter<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_prereduce_A_parameter
number
number get_prereduce_A_parameter () const
number get_prereduce_A_parameter ()<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>returns prereduceA<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
;
class
FAMGPreconditionerCPU2
VectorDebugWritingObjectCPU2 DebugWritingObjectCPU2 ILinearIteratorCPU2 IPreconditionerCPU2 AMGBaseCPU2 
Classgroup <b>FAMGPreconditioner</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b><br>class has constructor.  Tag <b>alg=CPU2;</b><br>Filtering Algebraic Multigrid<br>Inheritance: <a href="VectorDebugWritingObjectCPU2.html">VectorDebugWritingObjectCPU2</a> <a href="DebugWritingObjectCPU2.html">DebugWritingObjectCPU2</a> <a href="ILinearIteratorCPU2.html">ILinearIteratorCPU2</a> <a href="IPreconditionerCPU2.html">IPreconditionerCPU2</a> <a href="AMGBaseCPU2.html">AMGBaseCPU2</a> <a href="FAMGPreconditionerCPU2.html">FAMGPreconditionerCPU2</a> <br><table><tr><td colspan=2><h3>FAMGPreconditioner Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>FAMGPreconditionerCPU2 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>FAMGPreconditioner Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_testvector (<a href="VectorCPU1.html">Vector</a> *adds a testvector with weight, number )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns testVector#weight<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_testvector (<a href="IVectorWriterCPU1.html">IVectorWriter</a> *adds a testvector with weight by using the IVectorWriter interface, number )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns testVector#weight<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check_testvector (size_t fromlevel, size_t tolevel)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check_testvector (size_t fromlevel)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check_testvector ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_strong_connection_external ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>reset_testvectors ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_H_reduce_interpolation_nodes_parameter (number HreduceParameter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: we can restrict the number of parent nodes by looking at the entries of H(i,j) to prevent high fill in rates (e.g. 1e-3)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_aggressive_coarsening (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damping_for_smoother_in_interpolation_calculation (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_after_communciate_prolongation (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_aggressive_coarsening (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_calculate_parent_pairs (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_coloring (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_communicate_prolongation (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_external_coarsening (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_get_ratings (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_overlap (size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_phase_3 (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_precalculate_coarsening (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_recv_coarsening (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_send_coarsening (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_testvector_calc (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_delta (number delta)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: "Interpolation quality" F may not be worse than this (F < m_delta). e.g. 0.5<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_external_coarsening (bool You need to set_parallel_coarsening in parallel.)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns bExternalCoarsening<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_galerkin_truncation (number galerkin_tr)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets galerkin truncation, a parameter used to truncate the galerkin product. use with care! (like 1e-9)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_parallel_coarsening (<a href="IParallelCoarsening.html">IParallelCoarsening</a> *parallelCoarsening)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: e.g. GetColorCoarsening()<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_prereduce_A_parameter (number prereduceA)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: by setting this != 0.0, we reduce the matrix A before using it to its strong connections. (e.g. 1e-3)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_prolongation_truncation (number prolongation_tr)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets prolongation_truncation, a parameter used for truncation of interpolation. use with care! (like 1e-5)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_read_coarsening ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_strong_connection_external (number set strong_connection value for coarsening (like set_epsilon_strong in RSAMG))</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns epsilon<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_testvector_from_matrix_rows ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_testvector_smoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; sets the smoother to smooth testvectors)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns smoother<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_testvector_smooths (size_t number of smoothing steps to smooth testvectors)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns n<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_testvectors_LE (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_theta (number theta)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: with multiple parents paris, discard pairs with m_theta * F > min F. e.g. 0.9<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_use_precalculate (bool bUsePrecalculate)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: experimental way of coarsening. beta.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_write_coarsening ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_write_f_values (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_write_testvectors (bool if true, write testvectors to path specified in set_matrix_write_path)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns bWrite<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>FAMGPreconditioner Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_H_reduce_interpolation_nodes_parameter ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns HreduceParameter<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_delta ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns delta<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_galerkin_truncation ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns galerkin_tr<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_prereduce_A_parameter ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns prereduceA<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_prolongation_truncation ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns prolongation_tr<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_theta ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns theta<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>tostring ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited AMGBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check (const <a href="VectorCPU1.html">Vector</a> *x, const <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: performs a check of convergence on all levels<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check2 (const <a href="VectorCPU1.html">Vector</a> *x, const <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: performs a check of convergence on all levels<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check_fsmoothing ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_Y_cycle (integer , number , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_base_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; basesmoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_checkLevel_post_iterations (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_cycle_type (size_t gamma)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets cycle type in multigrid cycle (gamma)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_fsmoothing (bool enable)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_matrix_write_path (c_string matrixWritePath)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: set the path where connectionviewer matrices of the levels are written<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_max_fill_before_base (number fillrate)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets maximal fill rate before base solver is used<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_max_levels (size_t max_levels)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets max nr of AMG levels<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_max_nodes_for_base (size_t maxNrOfNodes)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets the maximal nr of nodes for base solver<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_min_nodes_on_one_processor (size_t minNrOfNodes)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: if the node number on one processor falls below this, agglomerate<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_nr_of_preiterations_at_check (size_t i)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: nr of mg cycles performed before checking<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_postsmooth (size_t nu2)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets nr. of postsmoothing steps (nu2)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_presmooth (size_t nu1)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets nr. of presmoothing steps (nu1)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_one_init (bool b)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_position_provider (<a href="IPositionProvider2d.html">IPositionProvider</a> *prov)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: needed for connectionviewer output<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_position_provider (<a href="IPositionProvider2d.html">IPositionProvider</a> *prov)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: needed for connectionviewer output<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_postsmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; postsmoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_preferred_nodes_on_one_processor (size_t preferredNrOfNodes)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: if we need to agglomerate, ensure all nodes have more than this number of unknowns<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_preiterations_mimum_defect_at_check (number d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: minimum defect for preiterations before checking<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_presmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; presmoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>write_interfaces ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited AMGBase Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_cycle_type ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns cycle type in multigrid cycle (gamma)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>get_fsmoothing ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns f smoothing enabled<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_grid_complexity ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns grid complexity c_G<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: c_G = total number of nodes of all levels divided by number of nodes on level 0<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const <a href="AMGLevelInformationCPU1.html">AMGLevelInformation</a> *</td><td class="memItemRight" valign=bottom>get_level_information (size_t L)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns information about the level L<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_max_fill_before_base ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns maximal fill rate before base solver is used<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_max_levels ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns max nr of AMG levels<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_max_nodes_for_base ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns maximal nr of nodes for base solver<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_min_nodes_on_one_processor ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns minNrOfNodes<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: if the node number on one processor falls below this, agglomerate<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_num_postsmooth ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr. of postsmoothing steps (nu2)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_num_presmooth ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr. of presmoothing steps (nu1)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_operator_complexity ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns operator complexity c_A<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: c_A = total nnz of all matrices divided by nnz of matrix A<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_preferred_nodes_on_one_processor ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns preferredNrOfNodes<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: if we need to agglomerate, ensure all nodes have more than this number of unknowns<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_timing_coarse_solver_setup_ms ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the time spent in the coarse solver setup in ms<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_timing_whole_setup_ms ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the time spent on the whole setup in ms<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_used_levels ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns used nr of AMG levels<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
FAMGPreconditionerCPU2

FAMGPreconditionerCPU2 ()
FAMGPreconditionerCPU2 ()<br>Constructor of class <b>FAMGPreconditionerCPU2</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_aggressive_coarsening
void
void set_aggressive_coarsening (bool )
void set_aggressive_coarsening (bool )<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_delta
void
void set_delta (number delta)
void set_delta (number delta)<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>tooltip: "Interpolation quality" F may not be worse than this (F < m_delta). e.g. 0.5<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_theta
void
void set_theta (number theta)
void set_theta (number theta)<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>tooltip: with multiple parents paris, discard pairs with m_theta * F > min F. e.g. 0.9<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_damping_for_smoother_in_interpolation_calculation
void
void set_damping_for_smoother_in_interpolation_calculation (number )
void set_damping_for_smoother_in_interpolation_calculation (number )<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
add_testvector
void
void add_testvector (Vector *adds a testvector with weight, number )
void add_testvector (<a href="VectorCPU1.html">Vector</a> *adds a testvector with weight, number )<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>returns testVector#weight<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
add_testvector
void
void add_testvector (IVectorWriter *adds a testvector with weight by using the IVectorWriter interface, number )
void add_testvector (<a href="IVectorWriterCPU1.html">IVectorWriter</a> *adds a testvector with weight by using the IVectorWriter interface, number )<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>returns testVector#weight<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_write_testvectors
void
void set_write_testvectors (bool if true, write testvectors to path specified in set_matrix_write_path)
void set_write_testvectors (bool if true, write testvectors to path specified in set_matrix_write_path)<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>returns bWrite<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_testvector_smoother
void
void set_testvector_smoother (SmartPtr<ILinearIterator> sets the smoother to smooth testvectors)
void set_testvector_smoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; sets the smoother to smooth testvectors)<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>returns smoother<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_testvector_smooths
void
void set_testvector_smooths (size_t number of smoothing steps to smooth testvectors)
void set_testvector_smooths (size_t number of smoothing steps to smooth testvectors)<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>returns n<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_testvector_from_matrix_rows
void
void set_testvector_from_matrix_rows ()
void set_testvector_from_matrix_rows ()<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_testvectors_LE
void
void set_testvectors_LE (number )
void set_testvectors_LE (number )<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
reset_testvectors
void
void reset_testvectors ()
void reset_testvectors ()<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_prolongation_truncation
void
void set_prolongation_truncation (number prolongation_tr)
void set_prolongation_truncation (number prolongation_tr)<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>tooltip: sets prolongation_truncation, a parameter used for truncation of interpolation. use with care! (like 1e-5)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_galerkin_truncation
void
void set_galerkin_truncation (number galerkin_tr)
void set_galerkin_truncation (number galerkin_tr)<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>tooltip: sets galerkin truncation, a parameter used to truncate the galerkin product. use with care! (like 1e-9)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_H_reduce_interpolation_nodes_parameter
void
void set_H_reduce_interpolation_nodes_parameter (number HreduceParameter)
void set_H_reduce_interpolation_nodes_parameter (number HreduceParameter)<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>tooltip: we can restrict the number of parent nodes by looking at the entries of H(i,j) to prevent high fill in rates (e.g. 1e-3)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_prereduce_A_parameter
void
void set_prereduce_A_parameter (number prereduceA)
void set_prereduce_A_parameter (number prereduceA)<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>tooltip: by setting this != 0.0, we reduce the matrix A before using it to its strong connections. (e.g. 1e-3)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_external_coarsening
void
void set_external_coarsening (bool You need to set_parallel_coarsening in parallel.)
void set_external_coarsening (bool You need to set_parallel_coarsening in parallel.)<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>returns bExternalCoarsening<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_strong_connection_external
void
void set_strong_connection_external (number set strong_connection value for coarsening (like set_epsilon_strong in RSAMG))
void set_strong_connection_external (number set strong_connection value for coarsening (like set_epsilon_strong in RSAMG))<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>returns epsilon<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_strong_connection_external
number
number get_strong_connection_external ()
number get_strong_connection_external ()<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_write_coarsening
void
void set_write_coarsening ()
void set_write_coarsening ()<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_read_coarsening
void
void set_read_coarsening ()
void set_read_coarsening ()<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_parallel_coarsening
void
void set_parallel_coarsening (IParallelCoarsening *parallelCoarsening)
void set_parallel_coarsening (<a href="IParallelCoarsening.html">IParallelCoarsening</a> *parallelCoarsening)<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>tooltip: e.g. GetColorCoarsening()<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_use_precalculate
void
void set_use_precalculate (bool bUsePrecalculate)
void set_use_precalculate (bool bUsePrecalculate)<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>tooltip: experimental way of coarsening. beta.<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_overlap
void
void set_debug_level_overlap (size_t , size_t )
void set_debug_level_overlap (size_t , size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_testvector_calc
void
void set_debug_level_testvector_calc (size_t )
void set_debug_level_testvector_calc (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_phase_3
void
void set_debug_level_phase_3 (size_t )
void set_debug_level_phase_3 (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_calculate_parent_pairs
void
void set_debug_level_calculate_parent_pairs (size_t )
void set_debug_level_calculate_parent_pairs (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_recv_coarsening
void
void set_debug_level_recv_coarsening (size_t )
void set_debug_level_recv_coarsening (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_coloring
void
void set_debug_level_coloring (size_t )
void set_debug_level_coloring (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_get_ratings
void
void set_debug_level_get_ratings (size_t )
void set_debug_level_get_ratings (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_precalculate_coarsening
void
void set_debug_level_precalculate_coarsening (size_t )
void set_debug_level_precalculate_coarsening (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_aggressive_coarsening
void
void set_debug_level_aggressive_coarsening (size_t )
void set_debug_level_aggressive_coarsening (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_send_coarsening
void
void set_debug_level_send_coarsening (size_t )
void set_debug_level_send_coarsening (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_communicate_prolongation
void
void set_debug_level_communicate_prolongation (size_t )
void set_debug_level_communicate_prolongation (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_after_communciate_prolongation
void
void set_debug_level_after_communciate_prolongation (size_t )
void set_debug_level_after_communciate_prolongation (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_external_coarsening
void
void set_debug_level_external_coarsening (size_t )
void set_debug_level_external_coarsening (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_write_f_values
void
void set_write_f_values (bool )
void set_write_f_values (bool )<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
check_testvector
bool
bool check_testvector ()
bool check_testvector ()<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
check_testvector
bool
bool check_testvector (size_t fromlevel)
bool check_testvector (size_t fromlevel)<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
check_testvector
bool
bool check_testvector (size_t fromlevel, size_t tolevel)
bool check_testvector (size_t fromlevel, size_t tolevel)<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
tostring
void
void tostring () const
void tostring ()<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_delta
number
number get_delta () const
number get_delta ()<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>returns delta<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_theta
number
number get_theta () const
number get_theta ()<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>returns theta<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_prolongation_truncation
number
number get_prolongation_truncation () const
number get_prolongation_truncation ()<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>returns prolongation_tr<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_galerkin_truncation
number
number get_galerkin_truncation () const
number get_galerkin_truncation ()<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>returns galerkin_tr<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_H_reduce_interpolation_nodes_parameter
number
number get_H_reduce_interpolation_nodes_parameter () const
number get_H_reduce_interpolation_nodes_parameter ()<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>returns HreduceParameter<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_prereduce_A_parameter
number
number get_prereduce_A_parameter () const
number get_prereduce_A_parameter ()<br><br>Member function of class <b>FAMGPreconditionerCPU2</b><br>returns prereduceA<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
;
class
FAMGPreconditionerCPU3
VectorDebugWritingObjectCPU3 DebugWritingObjectCPU3 ILinearIteratorCPU3 IPreconditionerCPU3 AMGBaseCPU3 
Classgroup <b>FAMGPreconditioner</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b><br>class has constructor.  Tag <b>alg=CPU3;</b><br>Filtering Algebraic Multigrid<br>Inheritance: <a href="VectorDebugWritingObjectCPU3.html">VectorDebugWritingObjectCPU3</a> <a href="DebugWritingObjectCPU3.html">DebugWritingObjectCPU3</a> <a href="ILinearIteratorCPU3.html">ILinearIteratorCPU3</a> <a href="IPreconditionerCPU3.html">IPreconditionerCPU3</a> <a href="AMGBaseCPU3.html">AMGBaseCPU3</a> <a href="FAMGPreconditionerCPU3.html">FAMGPreconditionerCPU3</a> <br><table><tr><td colspan=2><h3>FAMGPreconditioner Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>FAMGPreconditionerCPU3 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>FAMGPreconditioner Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_testvector (<a href="VectorCPU1.html">Vector</a> *adds a testvector with weight, number )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns testVector#weight<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_testvector (<a href="IVectorWriterCPU1.html">IVectorWriter</a> *adds a testvector with weight by using the IVectorWriter interface, number )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns testVector#weight<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check_testvector (size_t fromlevel, size_t tolevel)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check_testvector (size_t fromlevel)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check_testvector ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_strong_connection_external ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>reset_testvectors ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_H_reduce_interpolation_nodes_parameter (number HreduceParameter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: we can restrict the number of parent nodes by looking at the entries of H(i,j) to prevent high fill in rates (e.g. 1e-3)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_aggressive_coarsening (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damping_for_smoother_in_interpolation_calculation (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_after_communciate_prolongation (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_aggressive_coarsening (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_calculate_parent_pairs (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_coloring (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_communicate_prolongation (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_external_coarsening (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_get_ratings (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_overlap (size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_phase_3 (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_precalculate_coarsening (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_recv_coarsening (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_send_coarsening (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_testvector_calc (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_delta (number delta)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: "Interpolation quality" F may not be worse than this (F < m_delta). e.g. 0.5<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_external_coarsening (bool You need to set_parallel_coarsening in parallel.)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns bExternalCoarsening<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_galerkin_truncation (number galerkin_tr)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets galerkin truncation, a parameter used to truncate the galerkin product. use with care! (like 1e-9)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_parallel_coarsening (<a href="IParallelCoarsening.html">IParallelCoarsening</a> *parallelCoarsening)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: e.g. GetColorCoarsening()<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_prereduce_A_parameter (number prereduceA)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: by setting this != 0.0, we reduce the matrix A before using it to its strong connections. (e.g. 1e-3)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_prolongation_truncation (number prolongation_tr)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets prolongation_truncation, a parameter used for truncation of interpolation. use with care! (like 1e-5)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_read_coarsening ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_strong_connection_external (number set strong_connection value for coarsening (like set_epsilon_strong in RSAMG))</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns epsilon<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_testvector_from_matrix_rows ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_testvector_smoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; sets the smoother to smooth testvectors)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns smoother<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_testvector_smooths (size_t number of smoothing steps to smooth testvectors)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns n<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_testvectors_LE (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_theta (number theta)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: with multiple parents paris, discard pairs with m_theta * F > min F. e.g. 0.9<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_use_precalculate (bool bUsePrecalculate)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: experimental way of coarsening. beta.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_write_coarsening ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_write_f_values (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_write_testvectors (bool if true, write testvectors to path specified in set_matrix_write_path)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns bWrite<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>FAMGPreconditioner Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_H_reduce_interpolation_nodes_parameter ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns HreduceParameter<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_delta ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns delta<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_galerkin_truncation ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns galerkin_tr<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_prereduce_A_parameter ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns prereduceA<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_prolongation_truncation ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns prolongation_tr<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_theta ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns theta<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>tostring ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited AMGBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check (const <a href="VectorCPU1.html">Vector</a> *x, const <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: performs a check of convergence on all levels<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check2 (const <a href="VectorCPU1.html">Vector</a> *x, const <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: performs a check of convergence on all levels<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check_fsmoothing ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_Y_cycle (integer , number , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_base_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; basesmoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_checkLevel_post_iterations (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_cycle_type (size_t gamma)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets cycle type in multigrid cycle (gamma)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_fsmoothing (bool enable)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_matrix_write_path (c_string matrixWritePath)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: set the path where connectionviewer matrices of the levels are written<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_max_fill_before_base (number fillrate)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets maximal fill rate before base solver is used<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_max_levels (size_t max_levels)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets max nr of AMG levels<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_max_nodes_for_base (size_t maxNrOfNodes)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets the maximal nr of nodes for base solver<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_min_nodes_on_one_processor (size_t minNrOfNodes)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: if the node number on one processor falls below this, agglomerate<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_nr_of_preiterations_at_check (size_t i)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: nr of mg cycles performed before checking<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_postsmooth (size_t nu2)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets nr. of postsmoothing steps (nu2)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_presmooth (size_t nu1)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets nr. of presmoothing steps (nu1)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_one_init (bool b)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_position_provider (<a href="IPositionProvider2d.html">IPositionProvider</a> *prov)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: needed for connectionviewer output<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_position_provider (<a href="IPositionProvider2d.html">IPositionProvider</a> *prov)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: needed for connectionviewer output<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_postsmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; postsmoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_preferred_nodes_on_one_processor (size_t preferredNrOfNodes)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: if we need to agglomerate, ensure all nodes have more than this number of unknowns<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_preiterations_mimum_defect_at_check (number d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: minimum defect for preiterations before checking<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_presmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; presmoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>write_interfaces ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited AMGBase Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_cycle_type ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns cycle type in multigrid cycle (gamma)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>get_fsmoothing ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns f smoothing enabled<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_grid_complexity ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns grid complexity c_G<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: c_G = total number of nodes of all levels divided by number of nodes on level 0<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const <a href="AMGLevelInformationCPU1.html">AMGLevelInformation</a> *</td><td class="memItemRight" valign=bottom>get_level_information (size_t L)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns information about the level L<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_max_fill_before_base ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns maximal fill rate before base solver is used<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_max_levels ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns max nr of AMG levels<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_max_nodes_for_base ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns maximal nr of nodes for base solver<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_min_nodes_on_one_processor ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns minNrOfNodes<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: if the node number on one processor falls below this, agglomerate<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_num_postsmooth ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr. of postsmoothing steps (nu2)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_num_presmooth ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr. of presmoothing steps (nu1)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_operator_complexity ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns operator complexity c_A<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: c_A = total nnz of all matrices divided by nnz of matrix A<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_preferred_nodes_on_one_processor ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns preferredNrOfNodes<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: if we need to agglomerate, ensure all nodes have more than this number of unknowns<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_timing_coarse_solver_setup_ms ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the time spent in the coarse solver setup in ms<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_timing_whole_setup_ms ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the time spent on the whole setup in ms<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_used_levels ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns used nr of AMG levels<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
FAMGPreconditionerCPU3

FAMGPreconditionerCPU3 ()
FAMGPreconditionerCPU3 ()<br>Constructor of class <b>FAMGPreconditionerCPU3</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_aggressive_coarsening
void
void set_aggressive_coarsening (bool )
void set_aggressive_coarsening (bool )<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_delta
void
void set_delta (number delta)
void set_delta (number delta)<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>tooltip: "Interpolation quality" F may not be worse than this (F < m_delta). e.g. 0.5<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_theta
void
void set_theta (number theta)
void set_theta (number theta)<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>tooltip: with multiple parents paris, discard pairs with m_theta * F > min F. e.g. 0.9<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_damping_for_smoother_in_interpolation_calculation
void
void set_damping_for_smoother_in_interpolation_calculation (number )
void set_damping_for_smoother_in_interpolation_calculation (number )<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
add_testvector
void
void add_testvector (Vector *adds a testvector with weight, number )
void add_testvector (<a href="VectorCPU1.html">Vector</a> *adds a testvector with weight, number )<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>returns testVector#weight<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
add_testvector
void
void add_testvector (IVectorWriter *adds a testvector with weight by using the IVectorWriter interface, number )
void add_testvector (<a href="IVectorWriterCPU1.html">IVectorWriter</a> *adds a testvector with weight by using the IVectorWriter interface, number )<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>returns testVector#weight<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_write_testvectors
void
void set_write_testvectors (bool if true, write testvectors to path specified in set_matrix_write_path)
void set_write_testvectors (bool if true, write testvectors to path specified in set_matrix_write_path)<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>returns bWrite<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_testvector_smoother
void
void set_testvector_smoother (SmartPtr<ILinearIterator> sets the smoother to smooth testvectors)
void set_testvector_smoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; sets the smoother to smooth testvectors)<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>returns smoother<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_testvector_smooths
void
void set_testvector_smooths (size_t number of smoothing steps to smooth testvectors)
void set_testvector_smooths (size_t number of smoothing steps to smooth testvectors)<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>returns n<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_testvector_from_matrix_rows
void
void set_testvector_from_matrix_rows ()
void set_testvector_from_matrix_rows ()<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_testvectors_LE
void
void set_testvectors_LE (number )
void set_testvectors_LE (number )<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
reset_testvectors
void
void reset_testvectors ()
void reset_testvectors ()<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_prolongation_truncation
void
void set_prolongation_truncation (number prolongation_tr)
void set_prolongation_truncation (number prolongation_tr)<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>tooltip: sets prolongation_truncation, a parameter used for truncation of interpolation. use with care! (like 1e-5)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_galerkin_truncation
void
void set_galerkin_truncation (number galerkin_tr)
void set_galerkin_truncation (number galerkin_tr)<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>tooltip: sets galerkin truncation, a parameter used to truncate the galerkin product. use with care! (like 1e-9)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_H_reduce_interpolation_nodes_parameter
void
void set_H_reduce_interpolation_nodes_parameter (number HreduceParameter)
void set_H_reduce_interpolation_nodes_parameter (number HreduceParameter)<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>tooltip: we can restrict the number of parent nodes by looking at the entries of H(i,j) to prevent high fill in rates (e.g. 1e-3)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_prereduce_A_parameter
void
void set_prereduce_A_parameter (number prereduceA)
void set_prereduce_A_parameter (number prereduceA)<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>tooltip: by setting this != 0.0, we reduce the matrix A before using it to its strong connections. (e.g. 1e-3)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_external_coarsening
void
void set_external_coarsening (bool You need to set_parallel_coarsening in parallel.)
void set_external_coarsening (bool You need to set_parallel_coarsening in parallel.)<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>returns bExternalCoarsening<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_strong_connection_external
void
void set_strong_connection_external (number set strong_connection value for coarsening (like set_epsilon_strong in RSAMG))
void set_strong_connection_external (number set strong_connection value for coarsening (like set_epsilon_strong in RSAMG))<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>returns epsilon<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_strong_connection_external
number
number get_strong_connection_external ()
number get_strong_connection_external ()<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_write_coarsening
void
void set_write_coarsening ()
void set_write_coarsening ()<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_read_coarsening
void
void set_read_coarsening ()
void set_read_coarsening ()<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_parallel_coarsening
void
void set_parallel_coarsening (IParallelCoarsening *parallelCoarsening)
void set_parallel_coarsening (<a href="IParallelCoarsening.html">IParallelCoarsening</a> *parallelCoarsening)<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>tooltip: e.g. GetColorCoarsening()<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_use_precalculate
void
void set_use_precalculate (bool bUsePrecalculate)
void set_use_precalculate (bool bUsePrecalculate)<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>tooltip: experimental way of coarsening. beta.<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_overlap
void
void set_debug_level_overlap (size_t , size_t )
void set_debug_level_overlap (size_t , size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_testvector_calc
void
void set_debug_level_testvector_calc (size_t )
void set_debug_level_testvector_calc (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_phase_3
void
void set_debug_level_phase_3 (size_t )
void set_debug_level_phase_3 (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_calculate_parent_pairs
void
void set_debug_level_calculate_parent_pairs (size_t )
void set_debug_level_calculate_parent_pairs (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_recv_coarsening
void
void set_debug_level_recv_coarsening (size_t )
void set_debug_level_recv_coarsening (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_coloring
void
void set_debug_level_coloring (size_t )
void set_debug_level_coloring (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_get_ratings
void
void set_debug_level_get_ratings (size_t )
void set_debug_level_get_ratings (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_precalculate_coarsening
void
void set_debug_level_precalculate_coarsening (size_t )
void set_debug_level_precalculate_coarsening (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_aggressive_coarsening
void
void set_debug_level_aggressive_coarsening (size_t )
void set_debug_level_aggressive_coarsening (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_send_coarsening
void
void set_debug_level_send_coarsening (size_t )
void set_debug_level_send_coarsening (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_communicate_prolongation
void
void set_debug_level_communicate_prolongation (size_t )
void set_debug_level_communicate_prolongation (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_after_communciate_prolongation
void
void set_debug_level_after_communciate_prolongation (size_t )
void set_debug_level_after_communciate_prolongation (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_external_coarsening
void
void set_debug_level_external_coarsening (size_t )
void set_debug_level_external_coarsening (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_write_f_values
void
void set_write_f_values (bool )
void set_write_f_values (bool )<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
check_testvector
bool
bool check_testvector ()
bool check_testvector ()<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
check_testvector
bool
bool check_testvector (size_t fromlevel)
bool check_testvector (size_t fromlevel)<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
check_testvector
bool
bool check_testvector (size_t fromlevel, size_t tolevel)
bool check_testvector (size_t fromlevel, size_t tolevel)<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
tostring
void
void tostring () const
void tostring ()<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_delta
number
number get_delta () const
number get_delta ()<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>returns delta<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_theta
number
number get_theta () const
number get_theta ()<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>returns theta<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_prolongation_truncation
number
number get_prolongation_truncation () const
number get_prolongation_truncation ()<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>returns prolongation_tr<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_galerkin_truncation
number
number get_galerkin_truncation () const
number get_galerkin_truncation ()<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>returns galerkin_tr<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_H_reduce_interpolation_nodes_parameter
number
number get_H_reduce_interpolation_nodes_parameter () const
number get_H_reduce_interpolation_nodes_parameter ()<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>returns HreduceParameter<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_prereduce_A_parameter
number
number get_prereduce_A_parameter () const
number get_prereduce_A_parameter ()<br><br>Member function of class <b>FAMGPreconditionerCPU3</b><br>returns prereduceA<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
;
class
FETICPU1
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 ILinearOperatorInverseCPU1 IMatrixOperatorInverseCPU1 
Classgroup <b>FETI</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has constructor.  Tag <b>alg=CPU1;</b><br>FETI Domain Decomposition Solver<br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverseCPU1</a> <a href="IMatrixOperatorInverseCPU1.html">IMatrixOperatorInverseCPU1</a> <a href="FETICPU1.html">FETICPU1</a> <br><table><tr><td colspan=2><h3>FETI Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>FETICPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>FETI Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print_statistic_of_inner_solver (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_coarse_problem_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Coarse Problem Solver)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_dirichlet_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Dirichlet Solver)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_domain_decomp_info (<a href="IDomainDecompositionInfo.html">IDomainDecompositionInfo</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_neumann_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Neumann Solver)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_test_one_to_many_layouts (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>test_layouts (bool )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u, const <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u), f remains constant<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply_return_defect (<a href="VectorCPU1.html">Vector</a> *u, <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u),  f := f - A*u becomes new defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; , const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited ILinearOperatorInverse Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; </td><td class="memItemRight" valign=bottom>convergence_check ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
FETICPU1

FETICPU1 ()
FETICPU1 ()<br>Constructor of class <b>FETICPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_neumann_solver
void
void set_neumann_solver (SmartPtr<ILinearOperatorInverse> Neumann Solver)
void set_neumann_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Neumann Solver)<br><br>Member function of class <b>FETICPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_dirichlet_solver
void
void set_dirichlet_solver (SmartPtr<ILinearOperatorInverse> Dirichlet Solver)
void set_dirichlet_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Dirichlet Solver)<br><br>Member function of class <b>FETICPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_coarse_problem_solver
void
void set_coarse_problem_solver (SmartPtr<ILinearOperatorInverse> Coarse Problem Solver)
void set_coarse_problem_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Coarse Problem Solver)<br><br>Member function of class <b>FETICPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_domain_decomp_info
void
void set_domain_decomp_info (IDomainDecompositionInfo *)
void set_domain_decomp_info (<a href="IDomainDecompositionInfo.html">IDomainDecompositionInfo</a> *)<br><br>Member function of class <b>FETICPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
print_statistic_of_inner_solver
void
void print_statistic_of_inner_solver (bool )
void print_statistic_of_inner_solver (bool )<br><br>Member function of class <b>FETICPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_debug
void
void set_debug (SmartPtr<IDebugWriter> )
void set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )<br><br>Member function of class <b>FETICPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
test_layouts
void
void test_layouts (bool )
void test_layouts (bool )<br><br>Member function of class <b>FETICPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_test_one_to_many_layouts
void
void set_test_one_to_many_layouts (bool )
void set_test_one_to_many_layouts (bool )<br><br>Member function of class <b>FETICPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
;
class
FETICPU2
VectorDebugWritingObjectCPU2 DebugWritingObjectCPU2 ILinearOperatorInverseCPU2 IMatrixOperatorInverseCPU2 
Classgroup <b>FETI</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has constructor.  Tag <b>alg=CPU2;</b><br>FETI Domain Decomposition Solver<br>Inheritance: <a href="VectorDebugWritingObjectCPU2.html">VectorDebugWritingObjectCPU2</a> <a href="DebugWritingObjectCPU2.html">DebugWritingObjectCPU2</a> <a href="ILinearOperatorInverseCPU2.html">ILinearOperatorInverseCPU2</a> <a href="IMatrixOperatorInverseCPU2.html">IMatrixOperatorInverseCPU2</a> <a href="FETICPU2.html">FETICPU2</a> <br><table><tr><td colspan=2><h3>FETI Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>FETICPU2 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>FETI Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print_statistic_of_inner_solver (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_coarse_problem_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Coarse Problem Solver)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_dirichlet_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Dirichlet Solver)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_domain_decomp_info (<a href="IDomainDecompositionInfo.html">IDomainDecompositionInfo</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_neumann_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Neumann Solver)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_test_one_to_many_layouts (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>test_layouts (bool )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u, const <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u), f remains constant<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply_return_defect (<a href="VectorCPU1.html">Vector</a> *u, <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u),  f := f - A*u becomes new defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; , const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited ILinearOperatorInverse Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; </td><td class="memItemRight" valign=bottom>convergence_check ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
FETICPU2

FETICPU2 ()
FETICPU2 ()<br>Constructor of class <b>FETICPU2</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_neumann_solver
void
void set_neumann_solver (SmartPtr<ILinearOperatorInverse> Neumann Solver)
void set_neumann_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Neumann Solver)<br><br>Member function of class <b>FETICPU2</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_dirichlet_solver
void
void set_dirichlet_solver (SmartPtr<ILinearOperatorInverse> Dirichlet Solver)
void set_dirichlet_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Dirichlet Solver)<br><br>Member function of class <b>FETICPU2</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_coarse_problem_solver
void
void set_coarse_problem_solver (SmartPtr<ILinearOperatorInverse> Coarse Problem Solver)
void set_coarse_problem_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Coarse Problem Solver)<br><br>Member function of class <b>FETICPU2</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_domain_decomp_info
void
void set_domain_decomp_info (IDomainDecompositionInfo *)
void set_domain_decomp_info (<a href="IDomainDecompositionInfo.html">IDomainDecompositionInfo</a> *)<br><br>Member function of class <b>FETICPU2</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
print_statistic_of_inner_solver
void
void print_statistic_of_inner_solver (bool )
void print_statistic_of_inner_solver (bool )<br><br>Member function of class <b>FETICPU2</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_debug
void
void set_debug (SmartPtr<IDebugWriter> )
void set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )<br><br>Member function of class <b>FETICPU2</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
test_layouts
void
void test_layouts (bool )
void test_layouts (bool )<br><br>Member function of class <b>FETICPU2</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_test_one_to_many_layouts
void
void set_test_one_to_many_layouts (bool )
void set_test_one_to_many_layouts (bool )<br><br>Member function of class <b>FETICPU2</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
;
class
FETICPU3
VectorDebugWritingObjectCPU3 DebugWritingObjectCPU3 ILinearOperatorInverseCPU3 IMatrixOperatorInverseCPU3 
Classgroup <b>FETI</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has constructor.  Tag <b>alg=CPU3;</b><br>FETI Domain Decomposition Solver<br>Inheritance: <a href="VectorDebugWritingObjectCPU3.html">VectorDebugWritingObjectCPU3</a> <a href="DebugWritingObjectCPU3.html">DebugWritingObjectCPU3</a> <a href="ILinearOperatorInverseCPU3.html">ILinearOperatorInverseCPU3</a> <a href="IMatrixOperatorInverseCPU3.html">IMatrixOperatorInverseCPU3</a> <a href="FETICPU3.html">FETICPU3</a> <br><table><tr><td colspan=2><h3>FETI Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>FETICPU3 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>FETI Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print_statistic_of_inner_solver (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_coarse_problem_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Coarse Problem Solver)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_dirichlet_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Dirichlet Solver)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_domain_decomp_info (<a href="IDomainDecompositionInfo.html">IDomainDecompositionInfo</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_neumann_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Neumann Solver)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_test_one_to_many_layouts (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>test_layouts (bool )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u, const <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u), f remains constant<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply_return_defect (<a href="VectorCPU1.html">Vector</a> *u, <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u),  f := f - A*u becomes new defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; , const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited ILinearOperatorInverse Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; </td><td class="memItemRight" valign=bottom>convergence_check ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
FETICPU3

FETICPU3 ()
FETICPU3 ()<br>Constructor of class <b>FETICPU3</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_neumann_solver
void
void set_neumann_solver (SmartPtr<ILinearOperatorInverse> Neumann Solver)
void set_neumann_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Neumann Solver)<br><br>Member function of class <b>FETICPU3</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_dirichlet_solver
void
void set_dirichlet_solver (SmartPtr<ILinearOperatorInverse> Dirichlet Solver)
void set_dirichlet_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Dirichlet Solver)<br><br>Member function of class <b>FETICPU3</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_coarse_problem_solver
void
void set_coarse_problem_solver (SmartPtr<ILinearOperatorInverse> Coarse Problem Solver)
void set_coarse_problem_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Coarse Problem Solver)<br><br>Member function of class <b>FETICPU3</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_domain_decomp_info
void
void set_domain_decomp_info (IDomainDecompositionInfo *)
void set_domain_decomp_info (<a href="IDomainDecompositionInfo.html">IDomainDecompositionInfo</a> *)<br><br>Member function of class <b>FETICPU3</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
print_statistic_of_inner_solver
void
void print_statistic_of_inner_solver (bool )
void print_statistic_of_inner_solver (bool )<br><br>Member function of class <b>FETICPU3</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_debug
void
void set_debug (SmartPtr<IDebugWriter> )
void set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )<br><br>Member function of class <b>FETICPU3</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
test_layouts
void
void test_layouts (bool )
void test_layouts (bool )<br><br>Member function of class <b>FETICPU3</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_test_one_to_many_layouts
void
void set_test_one_to_many_layouts (bool )
void set_test_one_to_many_layouts (bool )<br><br>Member function of class <b>FETICPU3</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
;
class
FV1DynamicTurbViscData2dCPU1
INewtonUpdate ICplUserData2d UserNumber2d 
Classgroup <b>FV1DynamicTurbViscData</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU1;</b><br>Inheritance: <a href="INewtonUpdate.html">INewtonUpdate</a> <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserNumber2d.html">UserNumber2d</a> <a href="FV1DynamicTurbViscData2dCPU1.html">FV1DynamicTurbViscData2dCPU1</a> <br><table><tr><td colspan=2><h3>FV1DynamicTurbViscData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>FV1DynamicTurbViscData2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>FV1DynamicTurbViscData Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (number KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (c_string KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_space_filter (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_time_filter (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_time_filter_eps (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_turbulence_zero_bnd (c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
FV1DynamicTurbViscData2dCPU1

FV1DynamicTurbViscData2dCPU1 (SmartPtr<ApproximationSpace> Approximation space, grid function, SmartPtr<GridFunction> )
FV1DynamicTurbViscData2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )<br>Constructor of class <b>FV1DynamicTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (SmartPtr<UserNumber> KinematicViscosity)
void set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)<br><br>Member function of class <b>FV1DynamicTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (number KinematicViscosity)
void set_kinematic_viscosity (number KinematicViscosity)<br><br>Member function of class <b>FV1DynamicTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (c_string KinematicViscosity)
void set_kinematic_viscosity (c_string KinematicViscosity)<br><br>Member function of class <b>FV1DynamicTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_turbulence_zero_bnd
void
void set_turbulence_zero_bnd (c_string )
void set_turbulence_zero_bnd (c_string )<br><br>Member function of class <b>FV1DynamicTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_time_filter
void
void set_time_filter (bool )
void set_time_filter (bool )<br><br>Member function of class <b>FV1DynamicTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_time_filter_eps
void
void set_time_filter_eps (number )
void set_time_filter_eps (number )<br><br>Member function of class <b>FV1DynamicTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_space_filter
void
void set_space_filter (bool )
void set_space_filter (bool )<br><br>Member function of class <b>FV1DynamicTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
FV1DynamicTurbViscData2dCPU2
INewtonUpdate ICplUserData2d UserNumber2d 
Classgroup <b>FV1DynamicTurbViscData</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU2;</b><br>Inheritance: <a href="INewtonUpdate.html">INewtonUpdate</a> <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserNumber2d.html">UserNumber2d</a> <a href="FV1DynamicTurbViscData2dCPU2.html">FV1DynamicTurbViscData2dCPU2</a> <br><table><tr><td colspan=2><h3>FV1DynamicTurbViscData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>FV1DynamicTurbViscData2dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>FV1DynamicTurbViscData Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (number KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (c_string KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_space_filter (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_time_filter (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_time_filter_eps (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_turbulence_zero_bnd (c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
FV1DynamicTurbViscData2dCPU2

FV1DynamicTurbViscData2dCPU2 (SmartPtr<ApproximationSpace> Approximation space, grid function, SmartPtr<GridFunction> )
FV1DynamicTurbViscData2dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )<br>Constructor of class <b>FV1DynamicTurbViscData2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (SmartPtr<UserNumber> KinematicViscosity)
void set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)<br><br>Member function of class <b>FV1DynamicTurbViscData2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (number KinematicViscosity)
void set_kinematic_viscosity (number KinematicViscosity)<br><br>Member function of class <b>FV1DynamicTurbViscData2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (c_string KinematicViscosity)
void set_kinematic_viscosity (c_string KinematicViscosity)<br><br>Member function of class <b>FV1DynamicTurbViscData2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_turbulence_zero_bnd
void
void set_turbulence_zero_bnd (c_string )
void set_turbulence_zero_bnd (c_string )<br><br>Member function of class <b>FV1DynamicTurbViscData2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_time_filter
void
void set_time_filter (bool )
void set_time_filter (bool )<br><br>Member function of class <b>FV1DynamicTurbViscData2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_time_filter_eps
void
void set_time_filter_eps (number )
void set_time_filter_eps (number )<br><br>Member function of class <b>FV1DynamicTurbViscData2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_space_filter
void
void set_space_filter (bool )
void set_space_filter (bool )<br><br>Member function of class <b>FV1DynamicTurbViscData2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
FV1DynamicTurbViscData2dCPU3
INewtonUpdate ICplUserData2d UserNumber2d 
Classgroup <b>FV1DynamicTurbViscData</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU3;</b><br>Inheritance: <a href="INewtonUpdate.html">INewtonUpdate</a> <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserNumber2d.html">UserNumber2d</a> <a href="FV1DynamicTurbViscData2dCPU3.html">FV1DynamicTurbViscData2dCPU3</a> <br><table><tr><td colspan=2><h3>FV1DynamicTurbViscData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>FV1DynamicTurbViscData2dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>FV1DynamicTurbViscData Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (number KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (c_string KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_space_filter (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_time_filter (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_time_filter_eps (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_turbulence_zero_bnd (c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
FV1DynamicTurbViscData2dCPU3

FV1DynamicTurbViscData2dCPU3 (SmartPtr<ApproximationSpace> Approximation space, grid function, SmartPtr<GridFunction> )
FV1DynamicTurbViscData2dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )<br>Constructor of class <b>FV1DynamicTurbViscData2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (SmartPtr<UserNumber> KinematicViscosity)
void set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)<br><br>Member function of class <b>FV1DynamicTurbViscData2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (number KinematicViscosity)
void set_kinematic_viscosity (number KinematicViscosity)<br><br>Member function of class <b>FV1DynamicTurbViscData2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (c_string KinematicViscosity)
void set_kinematic_viscosity (c_string KinematicViscosity)<br><br>Member function of class <b>FV1DynamicTurbViscData2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_turbulence_zero_bnd
void
void set_turbulence_zero_bnd (c_string )
void set_turbulence_zero_bnd (c_string )<br><br>Member function of class <b>FV1DynamicTurbViscData2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_time_filter
void
void set_time_filter (bool )
void set_time_filter (bool )<br><br>Member function of class <b>FV1DynamicTurbViscData2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_time_filter_eps
void
void set_time_filter_eps (number )
void set_time_filter_eps (number )<br><br>Member function of class <b>FV1DynamicTurbViscData2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_space_filter
void
void set_space_filter (bool )
void set_space_filter (bool )<br><br>Member function of class <b>FV1DynamicTurbViscData2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
FV1DynamicTurbViscData3dCPU1
INewtonUpdate ICplUserData3d UserNumber3d 
Classgroup <b>FV1DynamicTurbViscData</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU1;</b><br>Inheritance: <a href="INewtonUpdate.html">INewtonUpdate</a> <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserNumber3d.html">UserNumber3d</a> <a href="FV1DynamicTurbViscData3dCPU1.html">FV1DynamicTurbViscData3dCPU1</a> <br><table><tr><td colspan=2><h3>FV1DynamicTurbViscData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>FV1DynamicTurbViscData3dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>FV1DynamicTurbViscData Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (number KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (c_string KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_space_filter (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_time_filter (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_time_filter_eps (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_turbulence_zero_bnd (c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
FV1DynamicTurbViscData3dCPU1

FV1DynamicTurbViscData3dCPU1 (SmartPtr<ApproximationSpace> Approximation space, grid function, SmartPtr<GridFunction> )
FV1DynamicTurbViscData3dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )<br>Constructor of class <b>FV1DynamicTurbViscData3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (SmartPtr<UserNumber> KinematicViscosity)
void set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)<br><br>Member function of class <b>FV1DynamicTurbViscData3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (number KinematicViscosity)
void set_kinematic_viscosity (number KinematicViscosity)<br><br>Member function of class <b>FV1DynamicTurbViscData3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (c_string KinematicViscosity)
void set_kinematic_viscosity (c_string KinematicViscosity)<br><br>Member function of class <b>FV1DynamicTurbViscData3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_turbulence_zero_bnd
void
void set_turbulence_zero_bnd (c_string )
void set_turbulence_zero_bnd (c_string )<br><br>Member function of class <b>FV1DynamicTurbViscData3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_time_filter
void
void set_time_filter (bool )
void set_time_filter (bool )<br><br>Member function of class <b>FV1DynamicTurbViscData3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_time_filter_eps
void
void set_time_filter_eps (number )
void set_time_filter_eps (number )<br><br>Member function of class <b>FV1DynamicTurbViscData3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_space_filter
void
void set_space_filter (bool )
void set_space_filter (bool )<br><br>Member function of class <b>FV1DynamicTurbViscData3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
FV1DynamicTurbViscData3dCPU2
INewtonUpdate ICplUserData3d UserNumber3d 
Classgroup <b>FV1DynamicTurbViscData</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU2;</b><br>Inheritance: <a href="INewtonUpdate.html">INewtonUpdate</a> <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserNumber3d.html">UserNumber3d</a> <a href="FV1DynamicTurbViscData3dCPU2.html">FV1DynamicTurbViscData3dCPU2</a> <br><table><tr><td colspan=2><h3>FV1DynamicTurbViscData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>FV1DynamicTurbViscData3dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>FV1DynamicTurbViscData Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (number KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (c_string KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_space_filter (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_time_filter (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_time_filter_eps (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_turbulence_zero_bnd (c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
FV1DynamicTurbViscData3dCPU2

FV1DynamicTurbViscData3dCPU2 (SmartPtr<ApproximationSpace> Approximation space, grid function, SmartPtr<GridFunction> )
FV1DynamicTurbViscData3dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )<br>Constructor of class <b>FV1DynamicTurbViscData3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (SmartPtr<UserNumber> KinematicViscosity)
void set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)<br><br>Member function of class <b>FV1DynamicTurbViscData3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (number KinematicViscosity)
void set_kinematic_viscosity (number KinematicViscosity)<br><br>Member function of class <b>FV1DynamicTurbViscData3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (c_string KinematicViscosity)
void set_kinematic_viscosity (c_string KinematicViscosity)<br><br>Member function of class <b>FV1DynamicTurbViscData3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_turbulence_zero_bnd
void
void set_turbulence_zero_bnd (c_string )
void set_turbulence_zero_bnd (c_string )<br><br>Member function of class <b>FV1DynamicTurbViscData3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_time_filter
void
void set_time_filter (bool )
void set_time_filter (bool )<br><br>Member function of class <b>FV1DynamicTurbViscData3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_time_filter_eps
void
void set_time_filter_eps (number )
void set_time_filter_eps (number )<br><br>Member function of class <b>FV1DynamicTurbViscData3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_space_filter
void
void set_space_filter (bool )
void set_space_filter (bool )<br><br>Member function of class <b>FV1DynamicTurbViscData3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
FV1DynamicTurbViscData3dCPU3
INewtonUpdate ICplUserData3d UserNumber3d 
Classgroup <b>FV1DynamicTurbViscData</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU3;</b><br>Inheritance: <a href="INewtonUpdate.html">INewtonUpdate</a> <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserNumber3d.html">UserNumber3d</a> <a href="FV1DynamicTurbViscData3dCPU3.html">FV1DynamicTurbViscData3dCPU3</a> <br><table><tr><td colspan=2><h3>FV1DynamicTurbViscData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>FV1DynamicTurbViscData3dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>FV1DynamicTurbViscData Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (number KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (c_string KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_space_filter (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_time_filter (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_time_filter_eps (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_turbulence_zero_bnd (c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
FV1DynamicTurbViscData3dCPU3

FV1DynamicTurbViscData3dCPU3 (SmartPtr<ApproximationSpace> Approximation space, grid function, SmartPtr<GridFunction> )
FV1DynamicTurbViscData3dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )<br>Constructor of class <b>FV1DynamicTurbViscData3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (SmartPtr<UserNumber> KinematicViscosity)
void set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)<br><br>Member function of class <b>FV1DynamicTurbViscData3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (number KinematicViscosity)
void set_kinematic_viscosity (number KinematicViscosity)<br><br>Member function of class <b>FV1DynamicTurbViscData3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (c_string KinematicViscosity)
void set_kinematic_viscosity (c_string KinematicViscosity)<br><br>Member function of class <b>FV1DynamicTurbViscData3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_turbulence_zero_bnd
void
void set_turbulence_zero_bnd (c_string )
void set_turbulence_zero_bnd (c_string )<br><br>Member function of class <b>FV1DynamicTurbViscData3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_time_filter
void
void set_time_filter (bool )
void set_time_filter (bool )<br><br>Member function of class <b>FV1DynamicTurbViscData3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_time_filter_eps
void
void set_time_filter_eps (number )
void set_time_filter_eps (number )<br><br>Member function of class <b>FV1DynamicTurbViscData3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_space_filter
void
void set_space_filter (bool )
void set_space_filter (bool )<br><br>Member function of class <b>FV1DynamicTurbViscData3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
FV1InnerBoundary1d
IElemDisc1d 
Classgroup <b>FV1InnerBoundary</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b><br>class has no constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="IElemDisc1d.html">IElemDisc1d</a> <a href="FV1InnerBoundary1d.html">FV1InnerBoundary1d</a> <br><table><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
;
class
FV1InnerBoundary2d
IElemDisc2d 
Classgroup <b>FV1InnerBoundary</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b><br>class has no constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="FV1InnerBoundary2d.html">FV1InnerBoundary2d</a> <br><table><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
;
class
FV1InnerBoundary3d
IElemDisc3d 
Classgroup <b>FV1InnerBoundary</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b><br>class has no constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IElemDisc3d.html">IElemDisc3d</a> <a href="FV1InnerBoundary3d.html">FV1InnerBoundary3d</a> <br><table><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
;
class
FV1SmagorinskyTurbViscData2dCPU1
INewtonUpdate ICplUserData2d UserNumber2d 
Classgroup <b>FV1SmagorinskyTurbViscData</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU1;</b><br>Inheritance: <a href="INewtonUpdate.html">INewtonUpdate</a> <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserNumber2d.html">UserNumber2d</a> <a href="FV1SmagorinskyTurbViscData2dCPU1.html">FV1SmagorinskyTurbViscData2dCPU1</a> <br><table><tr><td colspan=2><h3>FV1SmagorinskyTurbViscData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>FV1SmagorinskyTurbViscData2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, model parameter, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>FV1SmagorinskyTurbViscData Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (number KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (c_string KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_model_parameter (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_turbulence_zero_bnd (c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
FV1SmagorinskyTurbViscData2dCPU1

FV1SmagorinskyTurbViscData2dCPU1 (SmartPtr<ApproximationSpace> Approximation space, grid function, model parameter, SmartPtr<GridFunction> , number )
FV1SmagorinskyTurbViscData2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, model parameter, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , number )<br>Constructor of class <b>FV1SmagorinskyTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_model_parameter
void
void set_model_parameter (number )
void set_model_parameter (number )<br><br>Member function of class <b>FV1SmagorinskyTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (SmartPtr<UserNumber> KinematicViscosity)
void set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)<br><br>Member function of class <b>FV1SmagorinskyTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (number KinematicViscosity)
void set_kinematic_viscosity (number KinematicViscosity)<br><br>Member function of class <b>FV1SmagorinskyTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (c_string KinematicViscosity)
void set_kinematic_viscosity (c_string KinematicViscosity)<br><br>Member function of class <b>FV1SmagorinskyTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_turbulence_zero_bnd
void
void set_turbulence_zero_bnd (c_string )
void set_turbulence_zero_bnd (c_string )<br><br>Member function of class <b>FV1SmagorinskyTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
FV1SmagorinskyTurbViscData2dCPU2
INewtonUpdate ICplUserData2d UserNumber2d 
Classgroup <b>FV1SmagorinskyTurbViscData</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU2;</b><br>Inheritance: <a href="INewtonUpdate.html">INewtonUpdate</a> <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserNumber2d.html">UserNumber2d</a> <a href="FV1SmagorinskyTurbViscData2dCPU2.html">FV1SmagorinskyTurbViscData2dCPU2</a> <br><table><tr><td colspan=2><h3>FV1SmagorinskyTurbViscData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>FV1SmagorinskyTurbViscData2dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, model parameter, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>FV1SmagorinskyTurbViscData Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (number KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (c_string KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_model_parameter (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_turbulence_zero_bnd (c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
FV1SmagorinskyTurbViscData2dCPU2

FV1SmagorinskyTurbViscData2dCPU2 (SmartPtr<ApproximationSpace> Approximation space, grid function, model parameter, SmartPtr<GridFunction> , number )
FV1SmagorinskyTurbViscData2dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, model parameter, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , number )<br>Constructor of class <b>FV1SmagorinskyTurbViscData2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_model_parameter
void
void set_model_parameter (number )
void set_model_parameter (number )<br><br>Member function of class <b>FV1SmagorinskyTurbViscData2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (SmartPtr<UserNumber> KinematicViscosity)
void set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)<br><br>Member function of class <b>FV1SmagorinskyTurbViscData2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (number KinematicViscosity)
void set_kinematic_viscosity (number KinematicViscosity)<br><br>Member function of class <b>FV1SmagorinskyTurbViscData2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (c_string KinematicViscosity)
void set_kinematic_viscosity (c_string KinematicViscosity)<br><br>Member function of class <b>FV1SmagorinskyTurbViscData2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_turbulence_zero_bnd
void
void set_turbulence_zero_bnd (c_string )
void set_turbulence_zero_bnd (c_string )<br><br>Member function of class <b>FV1SmagorinskyTurbViscData2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
FV1SmagorinskyTurbViscData2dCPU3
INewtonUpdate ICplUserData2d UserNumber2d 
Classgroup <b>FV1SmagorinskyTurbViscData</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU3;</b><br>Inheritance: <a href="INewtonUpdate.html">INewtonUpdate</a> <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserNumber2d.html">UserNumber2d</a> <a href="FV1SmagorinskyTurbViscData2dCPU3.html">FV1SmagorinskyTurbViscData2dCPU3</a> <br><table><tr><td colspan=2><h3>FV1SmagorinskyTurbViscData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>FV1SmagorinskyTurbViscData2dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, model parameter, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>FV1SmagorinskyTurbViscData Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (number KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (c_string KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_model_parameter (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_turbulence_zero_bnd (c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
FV1SmagorinskyTurbViscData2dCPU3

FV1SmagorinskyTurbViscData2dCPU3 (SmartPtr<ApproximationSpace> Approximation space, grid function, model parameter, SmartPtr<GridFunction> , number )
FV1SmagorinskyTurbViscData2dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, model parameter, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , number )<br>Constructor of class <b>FV1SmagorinskyTurbViscData2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_model_parameter
void
void set_model_parameter (number )
void set_model_parameter (number )<br><br>Member function of class <b>FV1SmagorinskyTurbViscData2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (SmartPtr<UserNumber> KinematicViscosity)
void set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)<br><br>Member function of class <b>FV1SmagorinskyTurbViscData2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (number KinematicViscosity)
void set_kinematic_viscosity (number KinematicViscosity)<br><br>Member function of class <b>FV1SmagorinskyTurbViscData2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (c_string KinematicViscosity)
void set_kinematic_viscosity (c_string KinematicViscosity)<br><br>Member function of class <b>FV1SmagorinskyTurbViscData2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_turbulence_zero_bnd
void
void set_turbulence_zero_bnd (c_string )
void set_turbulence_zero_bnd (c_string )<br><br>Member function of class <b>FV1SmagorinskyTurbViscData2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
FV1SmagorinskyTurbViscData3dCPU1
INewtonUpdate ICplUserData3d UserNumber3d 
Classgroup <b>FV1SmagorinskyTurbViscData</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU1;</b><br>Inheritance: <a href="INewtonUpdate.html">INewtonUpdate</a> <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserNumber3d.html">UserNumber3d</a> <a href="FV1SmagorinskyTurbViscData3dCPU1.html">FV1SmagorinskyTurbViscData3dCPU1</a> <br><table><tr><td colspan=2><h3>FV1SmagorinskyTurbViscData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>FV1SmagorinskyTurbViscData3dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, model parameter, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>FV1SmagorinskyTurbViscData Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (number KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (c_string KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_model_parameter (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_turbulence_zero_bnd (c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
FV1SmagorinskyTurbViscData3dCPU1

FV1SmagorinskyTurbViscData3dCPU1 (SmartPtr<ApproximationSpace> Approximation space, grid function, model parameter, SmartPtr<GridFunction> , number )
FV1SmagorinskyTurbViscData3dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, model parameter, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , number )<br>Constructor of class <b>FV1SmagorinskyTurbViscData3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_model_parameter
void
void set_model_parameter (number )
void set_model_parameter (number )<br><br>Member function of class <b>FV1SmagorinskyTurbViscData3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (SmartPtr<UserNumber> KinematicViscosity)
void set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)<br><br>Member function of class <b>FV1SmagorinskyTurbViscData3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (number KinematicViscosity)
void set_kinematic_viscosity (number KinematicViscosity)<br><br>Member function of class <b>FV1SmagorinskyTurbViscData3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (c_string KinematicViscosity)
void set_kinematic_viscosity (c_string KinematicViscosity)<br><br>Member function of class <b>FV1SmagorinskyTurbViscData3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_turbulence_zero_bnd
void
void set_turbulence_zero_bnd (c_string )
void set_turbulence_zero_bnd (c_string )<br><br>Member function of class <b>FV1SmagorinskyTurbViscData3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
FV1SmagorinskyTurbViscData3dCPU2
INewtonUpdate ICplUserData3d UserNumber3d 
Classgroup <b>FV1SmagorinskyTurbViscData</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU2;</b><br>Inheritance: <a href="INewtonUpdate.html">INewtonUpdate</a> <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserNumber3d.html">UserNumber3d</a> <a href="FV1SmagorinskyTurbViscData3dCPU2.html">FV1SmagorinskyTurbViscData3dCPU2</a> <br><table><tr><td colspan=2><h3>FV1SmagorinskyTurbViscData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>FV1SmagorinskyTurbViscData3dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, model parameter, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>FV1SmagorinskyTurbViscData Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (number KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (c_string KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_model_parameter (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_turbulence_zero_bnd (c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
FV1SmagorinskyTurbViscData3dCPU2

FV1SmagorinskyTurbViscData3dCPU2 (SmartPtr<ApproximationSpace> Approximation space, grid function, model parameter, SmartPtr<GridFunction> , number )
FV1SmagorinskyTurbViscData3dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, model parameter, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , number )<br>Constructor of class <b>FV1SmagorinskyTurbViscData3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_model_parameter
void
void set_model_parameter (number )
void set_model_parameter (number )<br><br>Member function of class <b>FV1SmagorinskyTurbViscData3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (SmartPtr<UserNumber> KinematicViscosity)
void set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)<br><br>Member function of class <b>FV1SmagorinskyTurbViscData3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (number KinematicViscosity)
void set_kinematic_viscosity (number KinematicViscosity)<br><br>Member function of class <b>FV1SmagorinskyTurbViscData3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (c_string KinematicViscosity)
void set_kinematic_viscosity (c_string KinematicViscosity)<br><br>Member function of class <b>FV1SmagorinskyTurbViscData3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_turbulence_zero_bnd
void
void set_turbulence_zero_bnd (c_string )
void set_turbulence_zero_bnd (c_string )<br><br>Member function of class <b>FV1SmagorinskyTurbViscData3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
FV1SmagorinskyTurbViscData3dCPU3
INewtonUpdate ICplUserData3d UserNumber3d 
Classgroup <b>FV1SmagorinskyTurbViscData</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU3;</b><br>Inheritance: <a href="INewtonUpdate.html">INewtonUpdate</a> <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserNumber3d.html">UserNumber3d</a> <a href="FV1SmagorinskyTurbViscData3dCPU3.html">FV1SmagorinskyTurbViscData3dCPU3</a> <br><table><tr><td colspan=2><h3>FV1SmagorinskyTurbViscData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>FV1SmagorinskyTurbViscData3dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, model parameter, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>FV1SmagorinskyTurbViscData Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (number KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (c_string KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_model_parameter (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_turbulence_zero_bnd (c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
FV1SmagorinskyTurbViscData3dCPU3

FV1SmagorinskyTurbViscData3dCPU3 (SmartPtr<ApproximationSpace> Approximation space, grid function, model parameter, SmartPtr<GridFunction> , number )
FV1SmagorinskyTurbViscData3dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, model parameter, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , number )<br>Constructor of class <b>FV1SmagorinskyTurbViscData3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_model_parameter
void
void set_model_parameter (number )
void set_model_parameter (number )<br><br>Member function of class <b>FV1SmagorinskyTurbViscData3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (SmartPtr<UserNumber> KinematicViscosity)
void set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)<br><br>Member function of class <b>FV1SmagorinskyTurbViscData3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (number KinematicViscosity)
void set_kinematic_viscosity (number KinematicViscosity)<br><br>Member function of class <b>FV1SmagorinskyTurbViscData3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (c_string KinematicViscosity)
void set_kinematic_viscosity (c_string KinematicViscosity)<br><br>Member function of class <b>FV1SmagorinskyTurbViscData3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_turbulence_zero_bnd
void
void set_turbulence_zero_bnd (c_string )
void set_turbulence_zero_bnd (c_string )<br><br>Member function of class <b>FV1SmagorinskyTurbViscData3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
FV1TimeNeumannBoundary1d
IElemDisc1d 
Classgroup <b>FV1TimeNeumannBoundary</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="IElemDisc1d.html">IElemDisc1d</a> <a href="FV1TimeNeumannBoundary1d.html">FV1TimeNeumannBoundary1d</a> <br><table><tr><td colspan=2><h3>FV1TimeNeumannBoundary Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>FV1TimeNeumannBoundary1d (c_string Functions, c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>FV1TimeNeumannBoundary Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_activemembrane (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_capacity (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_dendrite (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_ifInjection (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_injection (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_myelin (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_psc (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_sign (number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
FV1TimeNeumannBoundary1d

FV1TimeNeumannBoundary1d (c_string Functions, c_string Subset(s))
FV1TimeNeumannBoundary1d (c_string Functions, c_string Subset(s))<br>Constructor of class <b>FV1TimeNeumannBoundary1d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_capacity
void
void set_capacity (number )
void set_capacity (number )<br><br>Member function of class <b>FV1TimeNeumannBoundary1d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_sign
void
void set_sign (number )
void set_sign (number )<br><br>Member function of class <b>FV1TimeNeumannBoundary1d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_injection
void
void set_injection (SmartPtr<UserNumber> )
void set_injection (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>FV1TimeNeumannBoundary1d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_myelin
void
void set_myelin (number )
void set_myelin (number )<br><br>Member function of class <b>FV1TimeNeumannBoundary1d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_activemembrane
void
void set_activemembrane (number )
void set_activemembrane (number )<br><br>Member function of class <b>FV1TimeNeumannBoundary1d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_dendrite
void
void set_dendrite (number )
void set_dendrite (number )<br><br>Member function of class <b>FV1TimeNeumannBoundary1d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_psc
void
void set_psc (number )
void set_psc (number )<br><br>Member function of class <b>FV1TimeNeumannBoundary1d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_ifInjection
void
void set_ifInjection (number )
void set_ifInjection (number )<br><br>Member function of class <b>FV1TimeNeumannBoundary1d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
;
class
FV1TimeNeumannBoundary2d
IElemDisc2d 
Classgroup <b>FV1TimeNeumannBoundary</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="FV1TimeNeumannBoundary2d.html">FV1TimeNeumannBoundary2d</a> <br><table><tr><td colspan=2><h3>FV1TimeNeumannBoundary Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>FV1TimeNeumannBoundary2d (c_string Functions, c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>FV1TimeNeumannBoundary Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_activemembrane (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_capacity (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_dendrite (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_ifInjection (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_injection (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_myelin (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_psc (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_sign (number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
FV1TimeNeumannBoundary2d

FV1TimeNeumannBoundary2d (c_string Functions, c_string Subset(s))
FV1TimeNeumannBoundary2d (c_string Functions, c_string Subset(s))<br>Constructor of class <b>FV1TimeNeumannBoundary2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_capacity
void
void set_capacity (number )
void set_capacity (number )<br><br>Member function of class <b>FV1TimeNeumannBoundary2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_sign
void
void set_sign (number )
void set_sign (number )<br><br>Member function of class <b>FV1TimeNeumannBoundary2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_injection
void
void set_injection (SmartPtr<UserNumber> )
void set_injection (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>FV1TimeNeumannBoundary2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_myelin
void
void set_myelin (number )
void set_myelin (number )<br><br>Member function of class <b>FV1TimeNeumannBoundary2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_activemembrane
void
void set_activemembrane (number )
void set_activemembrane (number )<br><br>Member function of class <b>FV1TimeNeumannBoundary2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_dendrite
void
void set_dendrite (number )
void set_dendrite (number )<br><br>Member function of class <b>FV1TimeNeumannBoundary2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_psc
void
void set_psc (number )
void set_psc (number )<br><br>Member function of class <b>FV1TimeNeumannBoundary2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_ifInjection
void
void set_ifInjection (number )
void set_ifInjection (number )<br><br>Member function of class <b>FV1TimeNeumannBoundary2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
;
class
FV1TimeNeumannBoundary3d
IElemDisc3d 
Classgroup <b>FV1TimeNeumannBoundary</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IElemDisc3d.html">IElemDisc3d</a> <a href="FV1TimeNeumannBoundary3d.html">FV1TimeNeumannBoundary3d</a> <br><table><tr><td colspan=2><h3>FV1TimeNeumannBoundary Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>FV1TimeNeumannBoundary3d (c_string Functions, c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>FV1TimeNeumannBoundary Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_activemembrane (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_capacity (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_dendrite (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_ifInjection (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_injection (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_myelin (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_psc (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_sign (number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
FV1TimeNeumannBoundary3d

FV1TimeNeumannBoundary3d (c_string Functions, c_string Subset(s))
FV1TimeNeumannBoundary3d (c_string Functions, c_string Subset(s))<br>Constructor of class <b>FV1TimeNeumannBoundary3d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_capacity
void
void set_capacity (number )
void set_capacity (number )<br><br>Member function of class <b>FV1TimeNeumannBoundary3d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_sign
void
void set_sign (number )
void set_sign (number )<br><br>Member function of class <b>FV1TimeNeumannBoundary3d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_injection
void
void set_injection (SmartPtr<UserNumber> )
void set_injection (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>FV1TimeNeumannBoundary3d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_myelin
void
void set_myelin (number )
void set_myelin (number )<br><br>Member function of class <b>FV1TimeNeumannBoundary3d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_activemembrane
void
void set_activemembrane (number )
void set_activemembrane (number )<br><br>Member function of class <b>FV1TimeNeumannBoundary3d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_dendrite
void
void set_dendrite (number )
void set_dendrite (number )<br><br>Member function of class <b>FV1TimeNeumannBoundary3d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_psc
void
void set_psc (number )
void set_psc (number )<br><br>Member function of class <b>FV1TimeNeumannBoundary3d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_ifInjection
void
void set_ifInjection (number )
void set_ifInjection (number )<br><br>Member function of class <b>FV1TimeNeumannBoundary3d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
;
class
FileHandling

Registry Group: <b>(Plugin) ug4//Biogas</b><br>class has constructor. <br><table><tr><td colspan=2><h3>FileHandling Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>FileHandling ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>FileHandling Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>create_xml (c_string filename)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>initialise_output_to_file (c_string filename)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>output_column_title (std_string column_title)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns output_column_title<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>output_params (c_string name)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: read in file<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>output_params_by_index (number index)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: read in file<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>output_to_csv (number Wert, std_string end)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns output_to_csv<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>read_file (c_string filename)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns read_file<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: reads in the given File<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>read_param_file (c_string filename)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: read param file<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>write_file ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns write_file<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>FileHandling Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>find_neighbour_value_down (number spalten, number zeitreihe)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: read in file<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>find_neighbour_value_up (number spalten, number Zeitreihe)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: read in file<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>interpolate (number column, number row1, number row2, number Zeit)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: read in file<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>output (c_string name, number Zeit)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns output<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: gives back the value of name at a certain point of time<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>output_by_index (number spaltenIndex, number Zeit)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: gives back the value of name at a certain point of time<br/></td></tr><tr><td><br></td></tr></table>
constructor
FileHandling

FileHandling ()
FileHandling ()<br>Constructor of class <b>FileHandling</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
read_file
void
void read_file (c_string filename)
void read_file (c_string filename)<br><br>Member function of class <b>FileHandling</b><br>returns read_file<br>tooltip: reads in the given File<br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
read_param_file
void
void read_param_file (c_string filename)
void read_param_file (c_string filename)<br><br>Member function of class <b>FileHandling</b><br>tooltip: read param file<br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
output_params
number
number output_params (c_string name)
number output_params (c_string name)<br><br>Member function of class <b>FileHandling</b><br>tooltip: read in file<br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
output_params_by_index
number
number output_params_by_index (number index)
number output_params_by_index (number index)<br><br>Member function of class <b>FileHandling</b><br>tooltip: read in file<br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
output_to_csv
void
void output_to_csv (number Wert, std_string end)
void output_to_csv (number Wert, std_string end)<br><br>Member function of class <b>FileHandling</b><br>returns output_to_csv<br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
write_file
void
void write_file ()
void write_file ()<br><br>Member function of class <b>FileHandling</b><br>returns write_file<br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
output_column_title
void
void output_column_title (std_string column_title)
void output_column_title (std_string column_title)<br><br>Member function of class <b>FileHandling</b><br>returns output_column_title<br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
initialise_output_to_file
void
void initialise_output_to_file (c_string filename)
void initialise_output_to_file (c_string filename)<br><br>Member function of class <b>FileHandling</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
create_xml
void
void create_xml (c_string filename)
void create_xml (c_string filename)<br><br>Member function of class <b>FileHandling</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
output
number
number output (c_string name, number Zeit) const
number output (c_string name, number Zeit)<br><br>Member function of class <b>FileHandling</b><br>returns output<br>tooltip: gives back the value of name at a certain point of time<br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
output_by_index
number
number output_by_index (number spaltenIndex, number Zeit) const
number output_by_index (number spaltenIndex, number Zeit)<br><br>Member function of class <b>FileHandling</b><br>tooltip: gives back the value of name at a certain point of time<br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
interpolate
number
number interpolate (number column, number row1, number row2, number Zeit) const
number interpolate (number column, number row1, number row2, number Zeit)<br><br>Member function of class <b>FileHandling</b><br>tooltip: read in file<br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
find_neighbour_value_down
number
number find_neighbour_value_down (number spalten, number zeitreihe) const
number find_neighbour_value_down (number spalten, number zeitreihe)<br><br>Member function of class <b>FileHandling</b><br>tooltip: read in file<br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
find_neighbour_value_up
number
number find_neighbour_value_up (number spalten, number Zeitreihe) const
number find_neighbour_value_up (number spalten, number Zeitreihe)<br><br>Member function of class <b>FileHandling</b><br>tooltip: read in file<br>Registry Group: <b>(Plugin) ug4//Biogas</b>
;
class
FractureInfoVec

Registry Group: <b>/ug4/Grid</b><br>class has no constructor. <br><table></table>
;
class
FullUpwind1d
IConvectionShapes1d 
Classgroup <b>FullUpwind</b><br>Registry Group: <b>/ug4/SpatialDisc/Upwind</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="IConvectionShapes1d.html">IConvectionShapes1d</a> <a href="FullUpwind1d.html">FullUpwind1d</a> <br><table><tr><td colspan=2><h3>FullUpwind Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>FullUpwind1d ()</td></tr><tr><td><br></td></tr></table>
constructor
FullUpwind1d

FullUpwind1d ()
FullUpwind1d ()<br>Constructor of class <b>FullUpwind1d</b><br>Registry Group: <b>/ug4/SpatialDisc/Upwind</b>
;
class
FullUpwind2d
IConvectionShapes2d 
Classgroup <b>FullUpwind</b><br>Registry Group: <b>/ug4/SpatialDisc/Upwind</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IConvectionShapes2d.html">IConvectionShapes2d</a> <a href="FullUpwind2d.html">FullUpwind2d</a> <br><table><tr><td colspan=2><h3>FullUpwind Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>FullUpwind2d ()</td></tr><tr><td><br></td></tr></table>
constructor
FullUpwind2d

FullUpwind2d ()
FullUpwind2d ()<br>Constructor of class <b>FullUpwind2d</b><br>Registry Group: <b>/ug4/SpatialDisc/Upwind</b>
;
class
FullUpwind3d
IConvectionShapes3d 
Classgroup <b>FullUpwind</b><br>Registry Group: <b>/ug4/SpatialDisc/Upwind</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IConvectionShapes3d.html">IConvectionShapes3d</a> <a href="FullUpwind3d.html">FullUpwind3d</a> <br><table><tr><td colspan=2><h3>FullUpwind Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>FullUpwind3d ()</td></tr><tr><td><br></td></tr></table>
constructor
FullUpwind3d

FullUpwind3d ()
FullUpwind3d ()<br>Constructor of class <b>FullUpwind3d</b><br>Registry Group: <b>/ug4/SpatialDisc/Upwind</b>
;
class
FunctionPattern

Registry Group: <b>/ug4/Discretization</b><br>class has no constructor. <br><table><tr><td colspan=2><h3>FunctionPattern Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_fct (c_string Name, c_string Type, integer Order, c_string Subsets)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Adds a function to the Function Pattern<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">help: currently no help available<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_fct (c_string Name, c_string Type, integer Order)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Adds a function to the Function Pattern<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">help: currently no help available<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_fct (c_string Name, c_string Type)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Adds a function to the Function Pattern<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">help: currently no help available<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_fct (std::vector&ltstd_string &gtName, c_string Type, integer Order, std::vector&ltstd_string &gtSubsets)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Adds a function to the Function Pattern<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">help: currently no help available<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_fct (std::vector&ltstd_string &gtName, c_string Type, integer Order)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Adds a function to the Function Pattern<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">help: currently no help available<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_fct (std::vector&ltstd_string &gtName, c_string Type)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Adds a function to the Function Pattern<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">help: currently no help available<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>FunctionPattern Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>dim (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>c_string </td><td class="memItemRight" valign=bottom>name (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_fct ()</td></tr><tr><td><br></td></tr></table>
memberfunction
clear
void
void clear ()
void clear ()<br><br>Member function of class <b>FunctionPattern</b><br>Registry Group: <b>/ug4/Discretization</b>
memberfunction
add_fct
void
void add_fct (c_string Name, c_string Type, integer Order, c_string Subsets)
void add_fct (c_string Name, c_string Type, integer Order, c_string Subsets)<br><br>Member function of class <b>FunctionPattern</b><br>tooltip: Adds a function to the Function Pattern<br>help: currently no help available<br>Registry Group: <b>/ug4/Discretization</b>
memberfunction
add_fct
void
void add_fct (c_string Name, c_string Type, integer Order)
void add_fct (c_string Name, c_string Type, integer Order)<br><br>Member function of class <b>FunctionPattern</b><br>tooltip: Adds a function to the Function Pattern<br>help: currently no help available<br>Registry Group: <b>/ug4/Discretization</b>
memberfunction
add_fct
void
void add_fct (c_string Name, c_string Type)
void add_fct (c_string Name, c_string Type)<br><br>Member function of class <b>FunctionPattern</b><br>tooltip: Adds a function to the Function Pattern<br>help: currently no help available<br>Registry Group: <b>/ug4/Discretization</b>
memberfunction
add_fct
void
void add_fct (std::vector<std_string >Name, c_string Type, integer Order, std::vector<std_string >Subsets)
void add_fct (std::vector&ltstd_string &gtName, c_string Type, integer Order, std::vector&ltstd_string &gtSubsets)<br><br>Member function of class <b>FunctionPattern</b><br>tooltip: Adds a function to the Function Pattern<br>help: currently no help available<br>Registry Group: <b>/ug4/Discretization</b>
memberfunction
add_fct
void
void add_fct (std::vector<std_string >Name, c_string Type, integer Order)
void add_fct (std::vector&ltstd_string &gtName, c_string Type, integer Order)<br><br>Member function of class <b>FunctionPattern</b><br>tooltip: Adds a function to the Function Pattern<br>help: currently no help available<br>Registry Group: <b>/ug4/Discretization</b>
memberfunction
add_fct
void
void add_fct (std::vector<std_string >Name, c_string Type)
void add_fct (std::vector&ltstd_string &gtName, c_string Type)<br><br>Member function of class <b>FunctionPattern</b><br>tooltip: Adds a function to the Function Pattern<br>help: currently no help available<br>Registry Group: <b>/ug4/Discretization</b>
memberfunction
num_fct
unknown
size_t num_fct () const
size_t num_fct ()<br><br>Member function of class <b>FunctionPattern</b><br>Registry Group: <b>/ug4/Discretization</b>
memberfunction
name
string
c_string name (size_t ) const
c_string name (size_t )<br><br>Member function of class <b>FunctionPattern</b><br>Registry Group: <b>/ug4/Discretization</b>
memberfunction
dim
integer
integer dim (size_t ) const
integer dim (size_t )<br><br>Member function of class <b>FunctionPattern</b><br>Registry Group: <b>/ug4/Discretization</b>
;
class
GaussSeidelCPU1
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 ILinearIteratorCPU1 IPreconditionerCPU1 
Classgroup <b>GaussSeidel</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>alg=CPU1;</b><br>Gauss-Seidel Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="IPreconditionerCPU1.html">IPreconditionerCPU1</a> <a href="GaussSeidelCPU1.html">GaussSeidelCPU1</a> <br><table><tr><td colspan=2><h3>GaussSeidel Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GaussSeidelCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
GaussSeidelCPU1

GaussSeidelCPU1 ()
GaussSeidelCPU1 ()<br>Constructor of class <b>GaussSeidelCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
GaussSeidelCPU2
VectorDebugWritingObjectCPU2 DebugWritingObjectCPU2 ILinearIteratorCPU2 IPreconditionerCPU2 
Classgroup <b>GaussSeidel</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>alg=CPU2;</b><br>Gauss-Seidel Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU2.html">VectorDebugWritingObjectCPU2</a> <a href="DebugWritingObjectCPU2.html">DebugWritingObjectCPU2</a> <a href="ILinearIteratorCPU2.html">ILinearIteratorCPU2</a> <a href="IPreconditionerCPU2.html">IPreconditionerCPU2</a> <a href="GaussSeidelCPU2.html">GaussSeidelCPU2</a> <br><table><tr><td colspan=2><h3>GaussSeidel Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GaussSeidelCPU2 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
GaussSeidelCPU2

GaussSeidelCPU2 ()
GaussSeidelCPU2 ()<br>Constructor of class <b>GaussSeidelCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
GaussSeidelCPU3
VectorDebugWritingObjectCPU3 DebugWritingObjectCPU3 ILinearIteratorCPU3 IPreconditionerCPU3 
Classgroup <b>GaussSeidel</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>alg=CPU3;</b><br>Gauss-Seidel Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU3.html">VectorDebugWritingObjectCPU3</a> <a href="DebugWritingObjectCPU3.html">DebugWritingObjectCPU3</a> <a href="ILinearIteratorCPU3.html">ILinearIteratorCPU3</a> <a href="IPreconditionerCPU3.html">IPreconditionerCPU3</a> <a href="GaussSeidelCPU3.html">GaussSeidelCPU3</a> <br><table><tr><td colspan=2><h3>GaussSeidel Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GaussSeidelCPU3 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
GaussSeidelCPU3

GaussSeidelCPU3 ()
GaussSeidelCPU3 ()<br>Constructor of class <b>GaussSeidelCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
GeometricMultiGrid1dCPU1
ILinearIteratorCPU1 
Classgroup <b>GeometricMultiGrid</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU1;</b><br>Inheritance: <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="GeometricMultiGrid1dCPU1.html">GeometricMultiGrid1dCPU1</a> <br><table><tr><td colspan=2><h3>GeometricMultiGrid Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GeometricMultiGrid1dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GeometricMultiGrid Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_prolongation_post_process (SmartPtr&lt;<a href="ITransferPostProcessCPU1.html">ITransferPostProcess</a>&gt; Prolongation Post Process)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_restriction_post_process (SmartPtr&lt;<a href="ITransferPostProcessCPU1.html">ITransferPostProcess</a>&gt; Restriction Post Process)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_base_level (integer Base Level)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_base_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Base Solver)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_cycle_type (integer Cycle Type)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_discretization (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; Discretization)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_postsmooth (integer Number PostSmooth Steps)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_presmooth (integer Number PreSmooth Steps)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_parallel_base_solver (bool Specifies if base solver works in parallel)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_postsmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_presmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_projection (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Projection)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_prolongation (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Prolongation)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_restriction (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Restriction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_smoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_surface_level (integer Surface Level)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_transfer (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Transfer)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
GeometricMultiGrid1dCPU1

GeometricMultiGrid1dCPU1 (SmartPtr<ApproximationSpace> Approximation Space)
GeometricMultiGrid1dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>GeometricMultiGrid1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_discretization
void
void set_discretization (SmartPtr<IAssemble> Discretization)
void set_discretization (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; Discretization)<br><br>Member function of class <b>GeometricMultiGrid1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_base_level
void
void set_base_level (integer Base Level)
void set_base_level (integer Base Level)<br><br>Member function of class <b>GeometricMultiGrid1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_surface_level
void
void set_surface_level (integer Surface Level)
void set_surface_level (integer Surface Level)<br><br>Member function of class <b>GeometricMultiGrid1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_parallel_base_solver
void
void set_parallel_base_solver (bool Specifies if base solver works in parallel)
void set_parallel_base_solver (bool Specifies if base solver works in parallel)<br><br>Member function of class <b>GeometricMultiGrid1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_base_solver
void
void set_base_solver (SmartPtr<ILinearOperatorInverse> Base Solver)
void set_base_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Base Solver)<br><br>Member function of class <b>GeometricMultiGrid1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_smoother
void
void set_smoother (SmartPtr<ILinearIterator> Smoother)
void set_smoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)<br><br>Member function of class <b>GeometricMultiGrid1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_presmoother
void
void set_presmoother (SmartPtr<ILinearIterator> Smoother)
void set_presmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)<br><br>Member function of class <b>GeometricMultiGrid1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_postsmoother
void
void set_postsmoother (SmartPtr<ILinearIterator> Smoother)
void set_postsmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)<br><br>Member function of class <b>GeometricMultiGrid1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_cycle_type
void
void set_cycle_type (integer Cycle Type)
void set_cycle_type (integer Cycle Type)<br><br>Member function of class <b>GeometricMultiGrid1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_num_presmooth
void
void set_num_presmooth (integer Number PreSmooth Steps)
void set_num_presmooth (integer Number PreSmooth Steps)<br><br>Member function of class <b>GeometricMultiGrid1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_num_postsmooth
void
void set_num_postsmooth (integer Number PostSmooth Steps)
void set_num_postsmooth (integer Number PostSmooth Steps)<br><br>Member function of class <b>GeometricMultiGrid1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_transfer
void
void set_transfer (SmartPtr<ITransferOperator> Transfer)
void set_transfer (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Transfer)<br><br>Member function of class <b>GeometricMultiGrid1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_prolongation
void
void set_prolongation (SmartPtr<ITransferOperator> Prolongation)
void set_prolongation (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Prolongation)<br><br>Member function of class <b>GeometricMultiGrid1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_restriction
void
void set_restriction (SmartPtr<ITransferOperator> Restriction)
void set_restriction (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Restriction)<br><br>Member function of class <b>GeometricMultiGrid1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_projection
void
void set_projection (SmartPtr<ITransferOperator> Projection)
void set_projection (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Projection)<br><br>Member function of class <b>GeometricMultiGrid1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
add_prolongation_post_process
void
void add_prolongation_post_process (SmartPtr<ITransferPostProcess> Prolongation Post Process)
void add_prolongation_post_process (SmartPtr&lt;<a href="ITransferPostProcessCPU1.html">ITransferPostProcess</a>&gt; Prolongation Post Process)<br><br>Member function of class <b>GeometricMultiGrid1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
add_restriction_post_process
void
void add_restriction_post_process (SmartPtr<ITransferPostProcess> Restriction Post Process)
void add_restriction_post_process (SmartPtr&lt;<a href="ITransferPostProcessCPU1.html">ITransferPostProcess</a>&gt; Restriction Post Process)<br><br>Member function of class <b>GeometricMultiGrid1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_debug
void
void set_debug (SmartPtr<IDebugWriter> )
void set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )<br><br>Member function of class <b>GeometricMultiGrid1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
GeometricMultiGrid1dCPU2
ILinearIteratorCPU2 
Classgroup <b>GeometricMultiGrid</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU2;</b><br>Inheritance: <a href="ILinearIteratorCPU2.html">ILinearIteratorCPU2</a> <a href="GeometricMultiGrid1dCPU2.html">GeometricMultiGrid1dCPU2</a> <br><table><tr><td colspan=2><h3>GeometricMultiGrid Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GeometricMultiGrid1dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GeometricMultiGrid Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_prolongation_post_process (SmartPtr&lt;<a href="ITransferPostProcessCPU1.html">ITransferPostProcess</a>&gt; Prolongation Post Process)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_restriction_post_process (SmartPtr&lt;<a href="ITransferPostProcessCPU1.html">ITransferPostProcess</a>&gt; Restriction Post Process)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_base_level (integer Base Level)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_base_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Base Solver)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_cycle_type (integer Cycle Type)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_discretization (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; Discretization)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_postsmooth (integer Number PostSmooth Steps)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_presmooth (integer Number PreSmooth Steps)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_parallel_base_solver (bool Specifies if base solver works in parallel)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_postsmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_presmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_projection (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Projection)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_prolongation (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Prolongation)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_restriction (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Restriction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_smoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_surface_level (integer Surface Level)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_transfer (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Transfer)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
GeometricMultiGrid1dCPU2

GeometricMultiGrid1dCPU2 (SmartPtr<ApproximationSpace> Approximation Space)
GeometricMultiGrid1dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>GeometricMultiGrid1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_discretization
void
void set_discretization (SmartPtr<IAssemble> Discretization)
void set_discretization (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; Discretization)<br><br>Member function of class <b>GeometricMultiGrid1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_base_level
void
void set_base_level (integer Base Level)
void set_base_level (integer Base Level)<br><br>Member function of class <b>GeometricMultiGrid1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_surface_level
void
void set_surface_level (integer Surface Level)
void set_surface_level (integer Surface Level)<br><br>Member function of class <b>GeometricMultiGrid1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_parallel_base_solver
void
void set_parallel_base_solver (bool Specifies if base solver works in parallel)
void set_parallel_base_solver (bool Specifies if base solver works in parallel)<br><br>Member function of class <b>GeometricMultiGrid1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_base_solver
void
void set_base_solver (SmartPtr<ILinearOperatorInverse> Base Solver)
void set_base_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Base Solver)<br><br>Member function of class <b>GeometricMultiGrid1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_smoother
void
void set_smoother (SmartPtr<ILinearIterator> Smoother)
void set_smoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)<br><br>Member function of class <b>GeometricMultiGrid1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_presmoother
void
void set_presmoother (SmartPtr<ILinearIterator> Smoother)
void set_presmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)<br><br>Member function of class <b>GeometricMultiGrid1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_postsmoother
void
void set_postsmoother (SmartPtr<ILinearIterator> Smoother)
void set_postsmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)<br><br>Member function of class <b>GeometricMultiGrid1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_cycle_type
void
void set_cycle_type (integer Cycle Type)
void set_cycle_type (integer Cycle Type)<br><br>Member function of class <b>GeometricMultiGrid1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_num_presmooth
void
void set_num_presmooth (integer Number PreSmooth Steps)
void set_num_presmooth (integer Number PreSmooth Steps)<br><br>Member function of class <b>GeometricMultiGrid1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_num_postsmooth
void
void set_num_postsmooth (integer Number PostSmooth Steps)
void set_num_postsmooth (integer Number PostSmooth Steps)<br><br>Member function of class <b>GeometricMultiGrid1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_transfer
void
void set_transfer (SmartPtr<ITransferOperator> Transfer)
void set_transfer (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Transfer)<br><br>Member function of class <b>GeometricMultiGrid1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_prolongation
void
void set_prolongation (SmartPtr<ITransferOperator> Prolongation)
void set_prolongation (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Prolongation)<br><br>Member function of class <b>GeometricMultiGrid1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_restriction
void
void set_restriction (SmartPtr<ITransferOperator> Restriction)
void set_restriction (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Restriction)<br><br>Member function of class <b>GeometricMultiGrid1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_projection
void
void set_projection (SmartPtr<ITransferOperator> Projection)
void set_projection (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Projection)<br><br>Member function of class <b>GeometricMultiGrid1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
add_prolongation_post_process
void
void add_prolongation_post_process (SmartPtr<ITransferPostProcess> Prolongation Post Process)
void add_prolongation_post_process (SmartPtr&lt;<a href="ITransferPostProcessCPU1.html">ITransferPostProcess</a>&gt; Prolongation Post Process)<br><br>Member function of class <b>GeometricMultiGrid1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
add_restriction_post_process
void
void add_restriction_post_process (SmartPtr<ITransferPostProcess> Restriction Post Process)
void add_restriction_post_process (SmartPtr&lt;<a href="ITransferPostProcessCPU1.html">ITransferPostProcess</a>&gt; Restriction Post Process)<br><br>Member function of class <b>GeometricMultiGrid1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_debug
void
void set_debug (SmartPtr<IDebugWriter> )
void set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )<br><br>Member function of class <b>GeometricMultiGrid1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
GeometricMultiGrid1dCPU3
ILinearIteratorCPU3 
Classgroup <b>GeometricMultiGrid</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU3;</b><br>Inheritance: <a href="ILinearIteratorCPU3.html">ILinearIteratorCPU3</a> <a href="GeometricMultiGrid1dCPU3.html">GeometricMultiGrid1dCPU3</a> <br><table><tr><td colspan=2><h3>GeometricMultiGrid Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GeometricMultiGrid1dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GeometricMultiGrid Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_prolongation_post_process (SmartPtr&lt;<a href="ITransferPostProcessCPU1.html">ITransferPostProcess</a>&gt; Prolongation Post Process)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_restriction_post_process (SmartPtr&lt;<a href="ITransferPostProcessCPU1.html">ITransferPostProcess</a>&gt; Restriction Post Process)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_base_level (integer Base Level)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_base_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Base Solver)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_cycle_type (integer Cycle Type)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_discretization (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; Discretization)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_postsmooth (integer Number PostSmooth Steps)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_presmooth (integer Number PreSmooth Steps)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_parallel_base_solver (bool Specifies if base solver works in parallel)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_postsmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_presmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_projection (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Projection)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_prolongation (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Prolongation)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_restriction (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Restriction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_smoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_surface_level (integer Surface Level)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_transfer (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Transfer)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
GeometricMultiGrid1dCPU3

GeometricMultiGrid1dCPU3 (SmartPtr<ApproximationSpace> Approximation Space)
GeometricMultiGrid1dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>GeometricMultiGrid1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_discretization
void
void set_discretization (SmartPtr<IAssemble> Discretization)
void set_discretization (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; Discretization)<br><br>Member function of class <b>GeometricMultiGrid1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_base_level
void
void set_base_level (integer Base Level)
void set_base_level (integer Base Level)<br><br>Member function of class <b>GeometricMultiGrid1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_surface_level
void
void set_surface_level (integer Surface Level)
void set_surface_level (integer Surface Level)<br><br>Member function of class <b>GeometricMultiGrid1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_parallel_base_solver
void
void set_parallel_base_solver (bool Specifies if base solver works in parallel)
void set_parallel_base_solver (bool Specifies if base solver works in parallel)<br><br>Member function of class <b>GeometricMultiGrid1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_base_solver
void
void set_base_solver (SmartPtr<ILinearOperatorInverse> Base Solver)
void set_base_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Base Solver)<br><br>Member function of class <b>GeometricMultiGrid1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_smoother
void
void set_smoother (SmartPtr<ILinearIterator> Smoother)
void set_smoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)<br><br>Member function of class <b>GeometricMultiGrid1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_presmoother
void
void set_presmoother (SmartPtr<ILinearIterator> Smoother)
void set_presmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)<br><br>Member function of class <b>GeometricMultiGrid1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_postsmoother
void
void set_postsmoother (SmartPtr<ILinearIterator> Smoother)
void set_postsmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)<br><br>Member function of class <b>GeometricMultiGrid1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_cycle_type
void
void set_cycle_type (integer Cycle Type)
void set_cycle_type (integer Cycle Type)<br><br>Member function of class <b>GeometricMultiGrid1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_num_presmooth
void
void set_num_presmooth (integer Number PreSmooth Steps)
void set_num_presmooth (integer Number PreSmooth Steps)<br><br>Member function of class <b>GeometricMultiGrid1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_num_postsmooth
void
void set_num_postsmooth (integer Number PostSmooth Steps)
void set_num_postsmooth (integer Number PostSmooth Steps)<br><br>Member function of class <b>GeometricMultiGrid1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_transfer
void
void set_transfer (SmartPtr<ITransferOperator> Transfer)
void set_transfer (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Transfer)<br><br>Member function of class <b>GeometricMultiGrid1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_prolongation
void
void set_prolongation (SmartPtr<ITransferOperator> Prolongation)
void set_prolongation (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Prolongation)<br><br>Member function of class <b>GeometricMultiGrid1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_restriction
void
void set_restriction (SmartPtr<ITransferOperator> Restriction)
void set_restriction (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Restriction)<br><br>Member function of class <b>GeometricMultiGrid1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_projection
void
void set_projection (SmartPtr<ITransferOperator> Projection)
void set_projection (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Projection)<br><br>Member function of class <b>GeometricMultiGrid1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
add_prolongation_post_process
void
void add_prolongation_post_process (SmartPtr<ITransferPostProcess> Prolongation Post Process)
void add_prolongation_post_process (SmartPtr&lt;<a href="ITransferPostProcessCPU1.html">ITransferPostProcess</a>&gt; Prolongation Post Process)<br><br>Member function of class <b>GeometricMultiGrid1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
add_restriction_post_process
void
void add_restriction_post_process (SmartPtr<ITransferPostProcess> Restriction Post Process)
void add_restriction_post_process (SmartPtr&lt;<a href="ITransferPostProcessCPU1.html">ITransferPostProcess</a>&gt; Restriction Post Process)<br><br>Member function of class <b>GeometricMultiGrid1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_debug
void
void set_debug (SmartPtr<IDebugWriter> )
void set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )<br><br>Member function of class <b>GeometricMultiGrid1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
GeometricMultiGrid2dCPU1
ILinearIteratorCPU1 
Classgroup <b>GeometricMultiGrid</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU1;</b><br>Inheritance: <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="GeometricMultiGrid2dCPU1.html">GeometricMultiGrid2dCPU1</a> <br><table><tr><td colspan=2><h3>GeometricMultiGrid Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GeometricMultiGrid2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GeometricMultiGrid Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_prolongation_post_process (SmartPtr&lt;<a href="ITransferPostProcessCPU1.html">ITransferPostProcess</a>&gt; Prolongation Post Process)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_restriction_post_process (SmartPtr&lt;<a href="ITransferPostProcessCPU1.html">ITransferPostProcess</a>&gt; Restriction Post Process)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_base_level (integer Base Level)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_base_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Base Solver)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_cycle_type (integer Cycle Type)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_discretization (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; Discretization)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_postsmooth (integer Number PostSmooth Steps)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_presmooth (integer Number PreSmooth Steps)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_parallel_base_solver (bool Specifies if base solver works in parallel)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_postsmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_presmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_projection (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Projection)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_prolongation (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Prolongation)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_restriction (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Restriction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_smoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_surface_level (integer Surface Level)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_transfer (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Transfer)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
GeometricMultiGrid2dCPU1

GeometricMultiGrid2dCPU1 (SmartPtr<ApproximationSpace> Approximation Space)
GeometricMultiGrid2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>GeometricMultiGrid2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_discretization
void
void set_discretization (SmartPtr<IAssemble> Discretization)
void set_discretization (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; Discretization)<br><br>Member function of class <b>GeometricMultiGrid2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_base_level
void
void set_base_level (integer Base Level)
void set_base_level (integer Base Level)<br><br>Member function of class <b>GeometricMultiGrid2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_surface_level
void
void set_surface_level (integer Surface Level)
void set_surface_level (integer Surface Level)<br><br>Member function of class <b>GeometricMultiGrid2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_parallel_base_solver
void
void set_parallel_base_solver (bool Specifies if base solver works in parallel)
void set_parallel_base_solver (bool Specifies if base solver works in parallel)<br><br>Member function of class <b>GeometricMultiGrid2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_base_solver
void
void set_base_solver (SmartPtr<ILinearOperatorInverse> Base Solver)
void set_base_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Base Solver)<br><br>Member function of class <b>GeometricMultiGrid2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_smoother
void
void set_smoother (SmartPtr<ILinearIterator> Smoother)
void set_smoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)<br><br>Member function of class <b>GeometricMultiGrid2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_presmoother
void
void set_presmoother (SmartPtr<ILinearIterator> Smoother)
void set_presmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)<br><br>Member function of class <b>GeometricMultiGrid2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_postsmoother
void
void set_postsmoother (SmartPtr<ILinearIterator> Smoother)
void set_postsmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)<br><br>Member function of class <b>GeometricMultiGrid2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_cycle_type
void
void set_cycle_type (integer Cycle Type)
void set_cycle_type (integer Cycle Type)<br><br>Member function of class <b>GeometricMultiGrid2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_num_presmooth
void
void set_num_presmooth (integer Number PreSmooth Steps)
void set_num_presmooth (integer Number PreSmooth Steps)<br><br>Member function of class <b>GeometricMultiGrid2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_num_postsmooth
void
void set_num_postsmooth (integer Number PostSmooth Steps)
void set_num_postsmooth (integer Number PostSmooth Steps)<br><br>Member function of class <b>GeometricMultiGrid2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_transfer
void
void set_transfer (SmartPtr<ITransferOperator> Transfer)
void set_transfer (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Transfer)<br><br>Member function of class <b>GeometricMultiGrid2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_prolongation
void
void set_prolongation (SmartPtr<ITransferOperator> Prolongation)
void set_prolongation (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Prolongation)<br><br>Member function of class <b>GeometricMultiGrid2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_restriction
void
void set_restriction (SmartPtr<ITransferOperator> Restriction)
void set_restriction (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Restriction)<br><br>Member function of class <b>GeometricMultiGrid2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_projection
void
void set_projection (SmartPtr<ITransferOperator> Projection)
void set_projection (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Projection)<br><br>Member function of class <b>GeometricMultiGrid2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
add_prolongation_post_process
void
void add_prolongation_post_process (SmartPtr<ITransferPostProcess> Prolongation Post Process)
void add_prolongation_post_process (SmartPtr&lt;<a href="ITransferPostProcessCPU1.html">ITransferPostProcess</a>&gt; Prolongation Post Process)<br><br>Member function of class <b>GeometricMultiGrid2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
add_restriction_post_process
void
void add_restriction_post_process (SmartPtr<ITransferPostProcess> Restriction Post Process)
void add_restriction_post_process (SmartPtr&lt;<a href="ITransferPostProcessCPU1.html">ITransferPostProcess</a>&gt; Restriction Post Process)<br><br>Member function of class <b>GeometricMultiGrid2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_debug
void
void set_debug (SmartPtr<IDebugWriter> )
void set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )<br><br>Member function of class <b>GeometricMultiGrid2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
GeometricMultiGrid2dCPU2
ILinearIteratorCPU2 
Classgroup <b>GeometricMultiGrid</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU2;</b><br>Inheritance: <a href="ILinearIteratorCPU2.html">ILinearIteratorCPU2</a> <a href="GeometricMultiGrid2dCPU2.html">GeometricMultiGrid2dCPU2</a> <br><table><tr><td colspan=2><h3>GeometricMultiGrid Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GeometricMultiGrid2dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GeometricMultiGrid Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_prolongation_post_process (SmartPtr&lt;<a href="ITransferPostProcessCPU1.html">ITransferPostProcess</a>&gt; Prolongation Post Process)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_restriction_post_process (SmartPtr&lt;<a href="ITransferPostProcessCPU1.html">ITransferPostProcess</a>&gt; Restriction Post Process)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_base_level (integer Base Level)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_base_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Base Solver)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_cycle_type (integer Cycle Type)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_discretization (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; Discretization)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_postsmooth (integer Number PostSmooth Steps)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_presmooth (integer Number PreSmooth Steps)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_parallel_base_solver (bool Specifies if base solver works in parallel)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_postsmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_presmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_projection (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Projection)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_prolongation (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Prolongation)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_restriction (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Restriction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_smoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_surface_level (integer Surface Level)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_transfer (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Transfer)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
GeometricMultiGrid2dCPU2

GeometricMultiGrid2dCPU2 (SmartPtr<ApproximationSpace> Approximation Space)
GeometricMultiGrid2dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>GeometricMultiGrid2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_discretization
void
void set_discretization (SmartPtr<IAssemble> Discretization)
void set_discretization (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; Discretization)<br><br>Member function of class <b>GeometricMultiGrid2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_base_level
void
void set_base_level (integer Base Level)
void set_base_level (integer Base Level)<br><br>Member function of class <b>GeometricMultiGrid2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_surface_level
void
void set_surface_level (integer Surface Level)
void set_surface_level (integer Surface Level)<br><br>Member function of class <b>GeometricMultiGrid2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_parallel_base_solver
void
void set_parallel_base_solver (bool Specifies if base solver works in parallel)
void set_parallel_base_solver (bool Specifies if base solver works in parallel)<br><br>Member function of class <b>GeometricMultiGrid2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_base_solver
void
void set_base_solver (SmartPtr<ILinearOperatorInverse> Base Solver)
void set_base_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Base Solver)<br><br>Member function of class <b>GeometricMultiGrid2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_smoother
void
void set_smoother (SmartPtr<ILinearIterator> Smoother)
void set_smoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)<br><br>Member function of class <b>GeometricMultiGrid2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_presmoother
void
void set_presmoother (SmartPtr<ILinearIterator> Smoother)
void set_presmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)<br><br>Member function of class <b>GeometricMultiGrid2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_postsmoother
void
void set_postsmoother (SmartPtr<ILinearIterator> Smoother)
void set_postsmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)<br><br>Member function of class <b>GeometricMultiGrid2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_cycle_type
void
void set_cycle_type (integer Cycle Type)
void set_cycle_type (integer Cycle Type)<br><br>Member function of class <b>GeometricMultiGrid2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_num_presmooth
void
void set_num_presmooth (integer Number PreSmooth Steps)
void set_num_presmooth (integer Number PreSmooth Steps)<br><br>Member function of class <b>GeometricMultiGrid2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_num_postsmooth
void
void set_num_postsmooth (integer Number PostSmooth Steps)
void set_num_postsmooth (integer Number PostSmooth Steps)<br><br>Member function of class <b>GeometricMultiGrid2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_transfer
void
void set_transfer (SmartPtr<ITransferOperator> Transfer)
void set_transfer (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Transfer)<br><br>Member function of class <b>GeometricMultiGrid2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_prolongation
void
void set_prolongation (SmartPtr<ITransferOperator> Prolongation)
void set_prolongation (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Prolongation)<br><br>Member function of class <b>GeometricMultiGrid2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_restriction
void
void set_restriction (SmartPtr<ITransferOperator> Restriction)
void set_restriction (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Restriction)<br><br>Member function of class <b>GeometricMultiGrid2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_projection
void
void set_projection (SmartPtr<ITransferOperator> Projection)
void set_projection (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Projection)<br><br>Member function of class <b>GeometricMultiGrid2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
add_prolongation_post_process
void
void add_prolongation_post_process (SmartPtr<ITransferPostProcess> Prolongation Post Process)
void add_prolongation_post_process (SmartPtr&lt;<a href="ITransferPostProcessCPU1.html">ITransferPostProcess</a>&gt; Prolongation Post Process)<br><br>Member function of class <b>GeometricMultiGrid2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
add_restriction_post_process
void
void add_restriction_post_process (SmartPtr<ITransferPostProcess> Restriction Post Process)
void add_restriction_post_process (SmartPtr&lt;<a href="ITransferPostProcessCPU1.html">ITransferPostProcess</a>&gt; Restriction Post Process)<br><br>Member function of class <b>GeometricMultiGrid2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_debug
void
void set_debug (SmartPtr<IDebugWriter> )
void set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )<br><br>Member function of class <b>GeometricMultiGrid2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
GeometricMultiGrid2dCPU3
ILinearIteratorCPU3 
Classgroup <b>GeometricMultiGrid</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU3;</b><br>Inheritance: <a href="ILinearIteratorCPU3.html">ILinearIteratorCPU3</a> <a href="GeometricMultiGrid2dCPU3.html">GeometricMultiGrid2dCPU3</a> <br><table><tr><td colspan=2><h3>GeometricMultiGrid Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GeometricMultiGrid2dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GeometricMultiGrid Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_prolongation_post_process (SmartPtr&lt;<a href="ITransferPostProcessCPU1.html">ITransferPostProcess</a>&gt; Prolongation Post Process)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_restriction_post_process (SmartPtr&lt;<a href="ITransferPostProcessCPU1.html">ITransferPostProcess</a>&gt; Restriction Post Process)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_base_level (integer Base Level)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_base_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Base Solver)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_cycle_type (integer Cycle Type)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_discretization (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; Discretization)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_postsmooth (integer Number PostSmooth Steps)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_presmooth (integer Number PreSmooth Steps)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_parallel_base_solver (bool Specifies if base solver works in parallel)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_postsmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_presmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_projection (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Projection)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_prolongation (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Prolongation)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_restriction (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Restriction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_smoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_surface_level (integer Surface Level)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_transfer (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Transfer)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
GeometricMultiGrid2dCPU3

GeometricMultiGrid2dCPU3 (SmartPtr<ApproximationSpace> Approximation Space)
GeometricMultiGrid2dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>GeometricMultiGrid2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_discretization
void
void set_discretization (SmartPtr<IAssemble> Discretization)
void set_discretization (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; Discretization)<br><br>Member function of class <b>GeometricMultiGrid2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_base_level
void
void set_base_level (integer Base Level)
void set_base_level (integer Base Level)<br><br>Member function of class <b>GeometricMultiGrid2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_surface_level
void
void set_surface_level (integer Surface Level)
void set_surface_level (integer Surface Level)<br><br>Member function of class <b>GeometricMultiGrid2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_parallel_base_solver
void
void set_parallel_base_solver (bool Specifies if base solver works in parallel)
void set_parallel_base_solver (bool Specifies if base solver works in parallel)<br><br>Member function of class <b>GeometricMultiGrid2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_base_solver
void
void set_base_solver (SmartPtr<ILinearOperatorInverse> Base Solver)
void set_base_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Base Solver)<br><br>Member function of class <b>GeometricMultiGrid2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_smoother
void
void set_smoother (SmartPtr<ILinearIterator> Smoother)
void set_smoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)<br><br>Member function of class <b>GeometricMultiGrid2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_presmoother
void
void set_presmoother (SmartPtr<ILinearIterator> Smoother)
void set_presmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)<br><br>Member function of class <b>GeometricMultiGrid2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_postsmoother
void
void set_postsmoother (SmartPtr<ILinearIterator> Smoother)
void set_postsmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)<br><br>Member function of class <b>GeometricMultiGrid2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_cycle_type
void
void set_cycle_type (integer Cycle Type)
void set_cycle_type (integer Cycle Type)<br><br>Member function of class <b>GeometricMultiGrid2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_num_presmooth
void
void set_num_presmooth (integer Number PreSmooth Steps)
void set_num_presmooth (integer Number PreSmooth Steps)<br><br>Member function of class <b>GeometricMultiGrid2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_num_postsmooth
void
void set_num_postsmooth (integer Number PostSmooth Steps)
void set_num_postsmooth (integer Number PostSmooth Steps)<br><br>Member function of class <b>GeometricMultiGrid2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_transfer
void
void set_transfer (SmartPtr<ITransferOperator> Transfer)
void set_transfer (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Transfer)<br><br>Member function of class <b>GeometricMultiGrid2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_prolongation
void
void set_prolongation (SmartPtr<ITransferOperator> Prolongation)
void set_prolongation (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Prolongation)<br><br>Member function of class <b>GeometricMultiGrid2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_restriction
void
void set_restriction (SmartPtr<ITransferOperator> Restriction)
void set_restriction (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Restriction)<br><br>Member function of class <b>GeometricMultiGrid2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_projection
void
void set_projection (SmartPtr<ITransferOperator> Projection)
void set_projection (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Projection)<br><br>Member function of class <b>GeometricMultiGrid2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
add_prolongation_post_process
void
void add_prolongation_post_process (SmartPtr<ITransferPostProcess> Prolongation Post Process)
void add_prolongation_post_process (SmartPtr&lt;<a href="ITransferPostProcessCPU1.html">ITransferPostProcess</a>&gt; Prolongation Post Process)<br><br>Member function of class <b>GeometricMultiGrid2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
add_restriction_post_process
void
void add_restriction_post_process (SmartPtr<ITransferPostProcess> Restriction Post Process)
void add_restriction_post_process (SmartPtr&lt;<a href="ITransferPostProcessCPU1.html">ITransferPostProcess</a>&gt; Restriction Post Process)<br><br>Member function of class <b>GeometricMultiGrid2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_debug
void
void set_debug (SmartPtr<IDebugWriter> )
void set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )<br><br>Member function of class <b>GeometricMultiGrid2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
GeometricMultiGrid3dCPU1
ILinearIteratorCPU1 
Classgroup <b>GeometricMultiGrid</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU1;</b><br>Inheritance: <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="GeometricMultiGrid3dCPU1.html">GeometricMultiGrid3dCPU1</a> <br><table><tr><td colspan=2><h3>GeometricMultiGrid Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GeometricMultiGrid3dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GeometricMultiGrid Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_prolongation_post_process (SmartPtr&lt;<a href="ITransferPostProcessCPU1.html">ITransferPostProcess</a>&gt; Prolongation Post Process)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_restriction_post_process (SmartPtr&lt;<a href="ITransferPostProcessCPU1.html">ITransferPostProcess</a>&gt; Restriction Post Process)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_base_level (integer Base Level)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_base_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Base Solver)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_cycle_type (integer Cycle Type)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_discretization (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; Discretization)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_postsmooth (integer Number PostSmooth Steps)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_presmooth (integer Number PreSmooth Steps)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_parallel_base_solver (bool Specifies if base solver works in parallel)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_postsmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_presmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_projection (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Projection)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_prolongation (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Prolongation)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_restriction (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Restriction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_smoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_surface_level (integer Surface Level)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_transfer (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Transfer)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
GeometricMultiGrid3dCPU1

GeometricMultiGrid3dCPU1 (SmartPtr<ApproximationSpace> Approximation Space)
GeometricMultiGrid3dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>GeometricMultiGrid3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_discretization
void
void set_discretization (SmartPtr<IAssemble> Discretization)
void set_discretization (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; Discretization)<br><br>Member function of class <b>GeometricMultiGrid3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_base_level
void
void set_base_level (integer Base Level)
void set_base_level (integer Base Level)<br><br>Member function of class <b>GeometricMultiGrid3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_surface_level
void
void set_surface_level (integer Surface Level)
void set_surface_level (integer Surface Level)<br><br>Member function of class <b>GeometricMultiGrid3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_parallel_base_solver
void
void set_parallel_base_solver (bool Specifies if base solver works in parallel)
void set_parallel_base_solver (bool Specifies if base solver works in parallel)<br><br>Member function of class <b>GeometricMultiGrid3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_base_solver
void
void set_base_solver (SmartPtr<ILinearOperatorInverse> Base Solver)
void set_base_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Base Solver)<br><br>Member function of class <b>GeometricMultiGrid3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_smoother
void
void set_smoother (SmartPtr<ILinearIterator> Smoother)
void set_smoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)<br><br>Member function of class <b>GeometricMultiGrid3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_presmoother
void
void set_presmoother (SmartPtr<ILinearIterator> Smoother)
void set_presmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)<br><br>Member function of class <b>GeometricMultiGrid3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_postsmoother
void
void set_postsmoother (SmartPtr<ILinearIterator> Smoother)
void set_postsmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)<br><br>Member function of class <b>GeometricMultiGrid3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_cycle_type
void
void set_cycle_type (integer Cycle Type)
void set_cycle_type (integer Cycle Type)<br><br>Member function of class <b>GeometricMultiGrid3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_num_presmooth
void
void set_num_presmooth (integer Number PreSmooth Steps)
void set_num_presmooth (integer Number PreSmooth Steps)<br><br>Member function of class <b>GeometricMultiGrid3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_num_postsmooth
void
void set_num_postsmooth (integer Number PostSmooth Steps)
void set_num_postsmooth (integer Number PostSmooth Steps)<br><br>Member function of class <b>GeometricMultiGrid3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_transfer
void
void set_transfer (SmartPtr<ITransferOperator> Transfer)
void set_transfer (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Transfer)<br><br>Member function of class <b>GeometricMultiGrid3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_prolongation
void
void set_prolongation (SmartPtr<ITransferOperator> Prolongation)
void set_prolongation (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Prolongation)<br><br>Member function of class <b>GeometricMultiGrid3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_restriction
void
void set_restriction (SmartPtr<ITransferOperator> Restriction)
void set_restriction (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Restriction)<br><br>Member function of class <b>GeometricMultiGrid3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_projection
void
void set_projection (SmartPtr<ITransferOperator> Projection)
void set_projection (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Projection)<br><br>Member function of class <b>GeometricMultiGrid3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
add_prolongation_post_process
void
void add_prolongation_post_process (SmartPtr<ITransferPostProcess> Prolongation Post Process)
void add_prolongation_post_process (SmartPtr&lt;<a href="ITransferPostProcessCPU1.html">ITransferPostProcess</a>&gt; Prolongation Post Process)<br><br>Member function of class <b>GeometricMultiGrid3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
add_restriction_post_process
void
void add_restriction_post_process (SmartPtr<ITransferPostProcess> Restriction Post Process)
void add_restriction_post_process (SmartPtr&lt;<a href="ITransferPostProcessCPU1.html">ITransferPostProcess</a>&gt; Restriction Post Process)<br><br>Member function of class <b>GeometricMultiGrid3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_debug
void
void set_debug (SmartPtr<IDebugWriter> )
void set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )<br><br>Member function of class <b>GeometricMultiGrid3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
GeometricMultiGrid3dCPU2
ILinearIteratorCPU2 
Classgroup <b>GeometricMultiGrid</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU2;</b><br>Inheritance: <a href="ILinearIteratorCPU2.html">ILinearIteratorCPU2</a> <a href="GeometricMultiGrid3dCPU2.html">GeometricMultiGrid3dCPU2</a> <br><table><tr><td colspan=2><h3>GeometricMultiGrid Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GeometricMultiGrid3dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GeometricMultiGrid Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_prolongation_post_process (SmartPtr&lt;<a href="ITransferPostProcessCPU1.html">ITransferPostProcess</a>&gt; Prolongation Post Process)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_restriction_post_process (SmartPtr&lt;<a href="ITransferPostProcessCPU1.html">ITransferPostProcess</a>&gt; Restriction Post Process)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_base_level (integer Base Level)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_base_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Base Solver)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_cycle_type (integer Cycle Type)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_discretization (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; Discretization)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_postsmooth (integer Number PostSmooth Steps)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_presmooth (integer Number PreSmooth Steps)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_parallel_base_solver (bool Specifies if base solver works in parallel)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_postsmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_presmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_projection (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Projection)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_prolongation (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Prolongation)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_restriction (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Restriction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_smoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_surface_level (integer Surface Level)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_transfer (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Transfer)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
GeometricMultiGrid3dCPU2

GeometricMultiGrid3dCPU2 (SmartPtr<ApproximationSpace> Approximation Space)
GeometricMultiGrid3dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>GeometricMultiGrid3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_discretization
void
void set_discretization (SmartPtr<IAssemble> Discretization)
void set_discretization (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; Discretization)<br><br>Member function of class <b>GeometricMultiGrid3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_base_level
void
void set_base_level (integer Base Level)
void set_base_level (integer Base Level)<br><br>Member function of class <b>GeometricMultiGrid3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_surface_level
void
void set_surface_level (integer Surface Level)
void set_surface_level (integer Surface Level)<br><br>Member function of class <b>GeometricMultiGrid3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_parallel_base_solver
void
void set_parallel_base_solver (bool Specifies if base solver works in parallel)
void set_parallel_base_solver (bool Specifies if base solver works in parallel)<br><br>Member function of class <b>GeometricMultiGrid3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_base_solver
void
void set_base_solver (SmartPtr<ILinearOperatorInverse> Base Solver)
void set_base_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Base Solver)<br><br>Member function of class <b>GeometricMultiGrid3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_smoother
void
void set_smoother (SmartPtr<ILinearIterator> Smoother)
void set_smoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)<br><br>Member function of class <b>GeometricMultiGrid3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_presmoother
void
void set_presmoother (SmartPtr<ILinearIterator> Smoother)
void set_presmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)<br><br>Member function of class <b>GeometricMultiGrid3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_postsmoother
void
void set_postsmoother (SmartPtr<ILinearIterator> Smoother)
void set_postsmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)<br><br>Member function of class <b>GeometricMultiGrid3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_cycle_type
void
void set_cycle_type (integer Cycle Type)
void set_cycle_type (integer Cycle Type)<br><br>Member function of class <b>GeometricMultiGrid3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_num_presmooth
void
void set_num_presmooth (integer Number PreSmooth Steps)
void set_num_presmooth (integer Number PreSmooth Steps)<br><br>Member function of class <b>GeometricMultiGrid3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_num_postsmooth
void
void set_num_postsmooth (integer Number PostSmooth Steps)
void set_num_postsmooth (integer Number PostSmooth Steps)<br><br>Member function of class <b>GeometricMultiGrid3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_transfer
void
void set_transfer (SmartPtr<ITransferOperator> Transfer)
void set_transfer (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Transfer)<br><br>Member function of class <b>GeometricMultiGrid3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_prolongation
void
void set_prolongation (SmartPtr<ITransferOperator> Prolongation)
void set_prolongation (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Prolongation)<br><br>Member function of class <b>GeometricMultiGrid3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_restriction
void
void set_restriction (SmartPtr<ITransferOperator> Restriction)
void set_restriction (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Restriction)<br><br>Member function of class <b>GeometricMultiGrid3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_projection
void
void set_projection (SmartPtr<ITransferOperator> Projection)
void set_projection (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Projection)<br><br>Member function of class <b>GeometricMultiGrid3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
add_prolongation_post_process
void
void add_prolongation_post_process (SmartPtr<ITransferPostProcess> Prolongation Post Process)
void add_prolongation_post_process (SmartPtr&lt;<a href="ITransferPostProcessCPU1.html">ITransferPostProcess</a>&gt; Prolongation Post Process)<br><br>Member function of class <b>GeometricMultiGrid3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
add_restriction_post_process
void
void add_restriction_post_process (SmartPtr<ITransferPostProcess> Restriction Post Process)
void add_restriction_post_process (SmartPtr&lt;<a href="ITransferPostProcessCPU1.html">ITransferPostProcess</a>&gt; Restriction Post Process)<br><br>Member function of class <b>GeometricMultiGrid3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_debug
void
void set_debug (SmartPtr<IDebugWriter> )
void set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )<br><br>Member function of class <b>GeometricMultiGrid3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
GeometricMultiGrid3dCPU3
ILinearIteratorCPU3 
Classgroup <b>GeometricMultiGrid</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU3;</b><br>Inheritance: <a href="ILinearIteratorCPU3.html">ILinearIteratorCPU3</a> <a href="GeometricMultiGrid3dCPU3.html">GeometricMultiGrid3dCPU3</a> <br><table><tr><td colspan=2><h3>GeometricMultiGrid Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GeometricMultiGrid3dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GeometricMultiGrid Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_prolongation_post_process (SmartPtr&lt;<a href="ITransferPostProcessCPU1.html">ITransferPostProcess</a>&gt; Prolongation Post Process)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_restriction_post_process (SmartPtr&lt;<a href="ITransferPostProcessCPU1.html">ITransferPostProcess</a>&gt; Restriction Post Process)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_base_level (integer Base Level)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_base_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Base Solver)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_cycle_type (integer Cycle Type)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_discretization (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; Discretization)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_postsmooth (integer Number PostSmooth Steps)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_presmooth (integer Number PreSmooth Steps)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_parallel_base_solver (bool Specifies if base solver works in parallel)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_postsmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_presmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_projection (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Projection)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_prolongation (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Prolongation)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_restriction (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Restriction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_smoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_surface_level (integer Surface Level)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_transfer (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Transfer)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
GeometricMultiGrid3dCPU3

GeometricMultiGrid3dCPU3 (SmartPtr<ApproximationSpace> Approximation Space)
GeometricMultiGrid3dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>GeometricMultiGrid3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_discretization
void
void set_discretization (SmartPtr<IAssemble> Discretization)
void set_discretization (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; Discretization)<br><br>Member function of class <b>GeometricMultiGrid3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_base_level
void
void set_base_level (integer Base Level)
void set_base_level (integer Base Level)<br><br>Member function of class <b>GeometricMultiGrid3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_surface_level
void
void set_surface_level (integer Surface Level)
void set_surface_level (integer Surface Level)<br><br>Member function of class <b>GeometricMultiGrid3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_parallel_base_solver
void
void set_parallel_base_solver (bool Specifies if base solver works in parallel)
void set_parallel_base_solver (bool Specifies if base solver works in parallel)<br><br>Member function of class <b>GeometricMultiGrid3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_base_solver
void
void set_base_solver (SmartPtr<ILinearOperatorInverse> Base Solver)
void set_base_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Base Solver)<br><br>Member function of class <b>GeometricMultiGrid3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_smoother
void
void set_smoother (SmartPtr<ILinearIterator> Smoother)
void set_smoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)<br><br>Member function of class <b>GeometricMultiGrid3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_presmoother
void
void set_presmoother (SmartPtr<ILinearIterator> Smoother)
void set_presmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)<br><br>Member function of class <b>GeometricMultiGrid3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_postsmoother
void
void set_postsmoother (SmartPtr<ILinearIterator> Smoother)
void set_postsmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)<br><br>Member function of class <b>GeometricMultiGrid3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_cycle_type
void
void set_cycle_type (integer Cycle Type)
void set_cycle_type (integer Cycle Type)<br><br>Member function of class <b>GeometricMultiGrid3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_num_presmooth
void
void set_num_presmooth (integer Number PreSmooth Steps)
void set_num_presmooth (integer Number PreSmooth Steps)<br><br>Member function of class <b>GeometricMultiGrid3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_num_postsmooth
void
void set_num_postsmooth (integer Number PostSmooth Steps)
void set_num_postsmooth (integer Number PostSmooth Steps)<br><br>Member function of class <b>GeometricMultiGrid3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_transfer
void
void set_transfer (SmartPtr<ITransferOperator> Transfer)
void set_transfer (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Transfer)<br><br>Member function of class <b>GeometricMultiGrid3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_prolongation
void
void set_prolongation (SmartPtr<ITransferOperator> Prolongation)
void set_prolongation (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Prolongation)<br><br>Member function of class <b>GeometricMultiGrid3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_restriction
void
void set_restriction (SmartPtr<ITransferOperator> Restriction)
void set_restriction (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Restriction)<br><br>Member function of class <b>GeometricMultiGrid3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_projection
void
void set_projection (SmartPtr<ITransferOperator> Projection)
void set_projection (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Projection)<br><br>Member function of class <b>GeometricMultiGrid3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
add_prolongation_post_process
void
void add_prolongation_post_process (SmartPtr<ITransferPostProcess> Prolongation Post Process)
void add_prolongation_post_process (SmartPtr&lt;<a href="ITransferPostProcessCPU1.html">ITransferPostProcess</a>&gt; Prolongation Post Process)<br><br>Member function of class <b>GeometricMultiGrid3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
add_restriction_post_process
void
void add_restriction_post_process (SmartPtr<ITransferPostProcess> Restriction Post Process)
void add_restriction_post_process (SmartPtr&lt;<a href="ITransferPostProcessCPU1.html">ITransferPostProcess</a>&gt; Restriction Post Process)<br><br>Member function of class <b>GeometricMultiGrid3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_debug
void
void set_debug (SmartPtr<IDebugWriter> )
void set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )<br><br>Member function of class <b>GeometricMultiGrid3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
GlobalFracturedMediumRefiner
IRefiner 
Registry Group: <b>/ug4/Grid</b><br>class has constructor. <br>Inheritance: <a href="IRefiner.html">IRefiner</a> <a href="GlobalFracturedMediumRefiner.html">GlobalFracturedMediumRefiner</a> <br><table><tr><td colspan=2><h3>GlobalFracturedMediumRefiner Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GlobalFracturedMediumRefiner ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GlobalFracturedMediumRefiner Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assign_grid (<a href="MultiGrid.html">MultiGrid</a> *g)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>is_fracture (integer subInd)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>mark_as_fracture (integer subInd, bool bIsFracture)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_subset_handler (<a href="ISubsetHandler.html">ISubsetHandler</a> *sh)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IRefiner Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear_marks ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>coarsen ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>refine ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>save_marks_to_file (c_string filename)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_adjusted_marks_debug_filename (c_string filename)</td></tr><tr><td><br></td></tr></table>
constructor
GlobalFracturedMediumRefiner

GlobalFracturedMediumRefiner ()
GlobalFracturedMediumRefiner ()<br>Constructor of class <b>GlobalFracturedMediumRefiner</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
assign_grid
void
void assign_grid (MultiGrid *g)
void assign_grid (<a href="MultiGrid.html">MultiGrid</a> *g)<br><br>Member function of class <b>GlobalFracturedMediumRefiner</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
set_subset_handler
void
void set_subset_handler (ISubsetHandler *sh)
void set_subset_handler (<a href="ISubsetHandler.html">ISubsetHandler</a> *sh)<br><br>Member function of class <b>GlobalFracturedMediumRefiner</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
mark_as_fracture
void
void mark_as_fracture (integer subInd, bool bIsFracture)
void mark_as_fracture (integer subInd, bool bIsFracture)<br><br>Member function of class <b>GlobalFracturedMediumRefiner</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
is_fracture
bool
bool is_fracture (integer subInd)
bool is_fracture (integer subInd)<br><br>Member function of class <b>GlobalFracturedMediumRefiner</b><br>Registry Group: <b>/ug4/Grid</b>
;
class
GlobalMultiGridRefiner
IRefiner 
Registry Group: <b>/ug4/Grid</b><br>class has constructor. <br>Inheritance: <a href="IRefiner.html">IRefiner</a> <a href="GlobalMultiGridRefiner.html">GlobalMultiGridRefiner</a> <br><table><tr><td colspan=2><h3>GlobalMultiGridRefiner Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GlobalMultiGridRefiner ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GlobalMultiGridRefiner Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assign_grid (<a href="MultiGrid.html">MultiGrid</a> *mg)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IRefiner Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear_marks ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>coarsen ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>refine ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>save_marks_to_file (c_string filename)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_adjusted_marks_debug_filename (c_string filename)</td></tr><tr><td><br></td></tr></table>
constructor
GlobalMultiGridRefiner

GlobalMultiGridRefiner ()
GlobalMultiGridRefiner ()<br>Constructor of class <b>GlobalMultiGridRefiner</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
assign_grid
void
void assign_grid (MultiGrid *mg)
void assign_grid (<a href="MultiGrid.html">MultiGrid</a> *mg)<br><br>Member function of class <b>GlobalMultiGridRefiner</b><br>Registry Group: <b>/ug4/Grid</b>
;
class
Grid

Registry Group: <b>/ug4/Grid</b><br>class has constructor. <br><table><tr><td colspan=2><h3>Grid Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>Grid ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Grid Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear_geometry ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>reserve_edges (size_t num)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>reserve_faces (size_t num)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>reserve_vertices (size_t num)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>reserve_volumes (size_t num)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Grid Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_edges ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_faces ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_hexahedrons ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_prisms ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_pyramids ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_quadrilaterals ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_tetrahedrons ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_triangles ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_vertices ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_volumes ()</td></tr><tr><td><br></td></tr></table>
constructor
Grid

Grid ()
Grid ()<br>Constructor of class <b>Grid</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
clear
void
void clear ()
void clear ()<br><br>Member function of class <b>Grid</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
clear_geometry
void
void clear_geometry ()
void clear_geometry ()<br><br>Member function of class <b>Grid</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
reserve_vertices
void
void reserve_vertices (size_t num)
void reserve_vertices (size_t num)<br><br>Member function of class <b>Grid</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
reserve_edges
void
void reserve_edges (size_t num)
void reserve_edges (size_t num)<br><br>Member function of class <b>Grid</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
reserve_faces
void
void reserve_faces (size_t num)
void reserve_faces (size_t num)<br><br>Member function of class <b>Grid</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
reserve_volumes
void
void reserve_volumes (size_t num)
void reserve_volumes (size_t num)<br><br>Member function of class <b>Grid</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
num_vertices
unknown
size_t num_vertices () const
size_t num_vertices ()<br><br>Member function of class <b>Grid</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
num_edges
unknown
size_t num_edges () const
size_t num_edges ()<br><br>Member function of class <b>Grid</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
num_faces
unknown
size_t num_faces () const
size_t num_faces ()<br><br>Member function of class <b>Grid</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
num_triangles
unknown
size_t num_triangles () const
size_t num_triangles ()<br><br>Member function of class <b>Grid</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
num_quadrilaterals
unknown
size_t num_quadrilaterals () const
size_t num_quadrilaterals ()<br><br>Member function of class <b>Grid</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
num_volumes
unknown
size_t num_volumes () const
size_t num_volumes ()<br><br>Member function of class <b>Grid</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
num_tetrahedrons
unknown
size_t num_tetrahedrons () const
size_t num_tetrahedrons ()<br><br>Member function of class <b>Grid</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
num_pyramids
unknown
size_t num_pyramids () const
size_t num_pyramids ()<br><br>Member function of class <b>Grid</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
num_prisms
unknown
size_t num_prisms () const
size_t num_prisms ()<br><br>Member function of class <b>Grid</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
num_hexahedrons
unknown
size_t num_hexahedrons () const
size_t num_hexahedrons ()<br><br>Member function of class <b>Grid</b><br>Registry Group: <b>/ug4/Grid</b>
;
class
GridFunction1dCPU1
VectorCPU1 
Classgroup <b>GridFunction</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU1;</b><br>Inheritance: <a href="VectorCPU1.html">VectorCPU1</a> <a href="GridFunction1dCPU1.html">GridFunction1dCPU1</a> <br><table><tr><td colspan=2><h3>GridFunction Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunction1dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunction1dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace, Level, integer )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunction Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_transfer (SmartPtr&lt;<a href="ILocalTransferAlgebraCPU1.html">ILocalTransferAlgebra</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_transfer (SmartPtr&lt;<a href="ILocalTransfer.html">ILocalTransfer</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assign (const <a href="VectorCPU1.html">Vector</a> *Vector)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear_transfers ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const <a href="GridLevel.html">GridLevel</a> *</td><td class="memItemRight" valign=bottom>grid_level ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>remove_transfer (SmartPtr&lt;<a href="ILocalTransfer.html">ILocalTransfer</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunction Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; </td><td class="memItemRight" valign=bottom>clone ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Vector Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>VectorCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited Vector Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>set (number Number)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>set_random (number Number, number )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited Vector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>size ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Size<br/></td></tr><tr><td><br></td></tr></table>
constructor
GridFunction1dCPU1

GridFunction1dCPU1 (SmartPtr<ApproximationSpace> ApproximationSpace)
GridFunction1dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)<br>Constructor of class <b>GridFunction1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
constructor
GridFunction1dCPU1

GridFunction1dCPU1 (SmartPtr<ApproximationSpace> ApproximationSpace, Level, integer )
GridFunction1dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace, Level, integer )<br>Constructor of class <b>GridFunction1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
assign
void
void assign (const Vector *Vector)
void assign (const <a href="VectorCPU1.html">Vector</a> *Vector)<br><br>Member function of class <b>GridFunction1dCPU1</b><br>returns Success<br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
add_transfer
void
void add_transfer (SmartPtr<ILocalTransferAlgebra> )
void add_transfer (SmartPtr&lt;<a href="ILocalTransferAlgebraCPU1.html">ILocalTransferAlgebra</a>&gt; )<br><br>Member function of class <b>GridFunction1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
add_transfer
void
void add_transfer (SmartPtr<ILocalTransfer> )
void add_transfer (SmartPtr&lt;<a href="ILocalTransfer.html">ILocalTransfer</a>&gt; )<br><br>Member function of class <b>GridFunction1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
remove_transfer
void
void remove_transfer (SmartPtr<ILocalTransfer> )
void remove_transfer (SmartPtr&lt;<a href="ILocalTransfer.html">ILocalTransfer</a>&gt; )<br><br>Member function of class <b>GridFunction1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
clear_transfers
void
void clear_transfers ()
void clear_transfers ()<br><br>Member function of class <b>GridFunction1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
grid_level
const GridLevel*
const GridLevel *grid_level ()
const <a href="GridLevel.html">GridLevel</a> *grid_level ()<br><br>Member function of class <b>GridFunction1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
clone
SmartPtr<GridFunction1dCPU1>
SmartPtr<GridFunction> clone () const
SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; clone ()<br><br>Member function of class <b>GridFunction1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunction1dCPU2
VectorCPU2 
Classgroup <b>GridFunction</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU2;</b><br>Inheritance: <a href="VectorCPU2.html">VectorCPU2</a> <a href="GridFunction1dCPU2.html">GridFunction1dCPU2</a> <br><table><tr><td colspan=2><h3>GridFunction Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunction1dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunction1dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace, Level, integer )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunction Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_transfer (SmartPtr&lt;<a href="ILocalTransferAlgebraCPU1.html">ILocalTransferAlgebra</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_transfer (SmartPtr&lt;<a href="ILocalTransfer.html">ILocalTransfer</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assign (const <a href="VectorCPU1.html">Vector</a> *Vector)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear_transfers ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const <a href="GridLevel.html">GridLevel</a> *</td><td class="memItemRight" valign=bottom>grid_level ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>remove_transfer (SmartPtr&lt;<a href="ILocalTransfer.html">ILocalTransfer</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunction Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; </td><td class="memItemRight" valign=bottom>clone ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Vector Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>VectorCPU2 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited Vector Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>set (number Number)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>set_random (number Number, number )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited Vector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>size ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Size<br/></td></tr><tr><td><br></td></tr></table>
constructor
GridFunction1dCPU2

GridFunction1dCPU2 (SmartPtr<ApproximationSpace> ApproximationSpace)
GridFunction1dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)<br>Constructor of class <b>GridFunction1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
constructor
GridFunction1dCPU2

GridFunction1dCPU2 (SmartPtr<ApproximationSpace> ApproximationSpace, Level, integer )
GridFunction1dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace, Level, integer )<br>Constructor of class <b>GridFunction1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
assign
void
void assign (const Vector *Vector)
void assign (const <a href="VectorCPU1.html">Vector</a> *Vector)<br><br>Member function of class <b>GridFunction1dCPU2</b><br>returns Success<br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
add_transfer
void
void add_transfer (SmartPtr<ILocalTransferAlgebra> )
void add_transfer (SmartPtr&lt;<a href="ILocalTransferAlgebraCPU1.html">ILocalTransferAlgebra</a>&gt; )<br><br>Member function of class <b>GridFunction1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
add_transfer
void
void add_transfer (SmartPtr<ILocalTransfer> )
void add_transfer (SmartPtr&lt;<a href="ILocalTransfer.html">ILocalTransfer</a>&gt; )<br><br>Member function of class <b>GridFunction1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
remove_transfer
void
void remove_transfer (SmartPtr<ILocalTransfer> )
void remove_transfer (SmartPtr&lt;<a href="ILocalTransfer.html">ILocalTransfer</a>&gt; )<br><br>Member function of class <b>GridFunction1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
clear_transfers
void
void clear_transfers ()
void clear_transfers ()<br><br>Member function of class <b>GridFunction1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
grid_level
const GridLevel*
const GridLevel *grid_level ()
const <a href="GridLevel.html">GridLevel</a> *grid_level ()<br><br>Member function of class <b>GridFunction1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
clone
SmartPtr<GridFunction1dCPU2>
SmartPtr<GridFunction> clone () const
SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; clone ()<br><br>Member function of class <b>GridFunction1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunction1dCPU3
VectorCPU3 
Classgroup <b>GridFunction</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU3;</b><br>Inheritance: <a href="VectorCPU3.html">VectorCPU3</a> <a href="GridFunction1dCPU3.html">GridFunction1dCPU3</a> <br><table><tr><td colspan=2><h3>GridFunction Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunction1dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunction1dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace, Level, integer )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunction Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_transfer (SmartPtr&lt;<a href="ILocalTransferAlgebraCPU1.html">ILocalTransferAlgebra</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_transfer (SmartPtr&lt;<a href="ILocalTransfer.html">ILocalTransfer</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assign (const <a href="VectorCPU1.html">Vector</a> *Vector)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear_transfers ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const <a href="GridLevel.html">GridLevel</a> *</td><td class="memItemRight" valign=bottom>grid_level ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>remove_transfer (SmartPtr&lt;<a href="ILocalTransfer.html">ILocalTransfer</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunction Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; </td><td class="memItemRight" valign=bottom>clone ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Vector Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>VectorCPU3 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited Vector Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>set (number Number)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>set_random (number Number, number )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited Vector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>size ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Size<br/></td></tr><tr><td><br></td></tr></table>
constructor
GridFunction1dCPU3

GridFunction1dCPU3 (SmartPtr<ApproximationSpace> ApproximationSpace)
GridFunction1dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)<br>Constructor of class <b>GridFunction1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
constructor
GridFunction1dCPU3

GridFunction1dCPU3 (SmartPtr<ApproximationSpace> ApproximationSpace, Level, integer )
GridFunction1dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace, Level, integer )<br>Constructor of class <b>GridFunction1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
assign
void
void assign (const Vector *Vector)
void assign (const <a href="VectorCPU1.html">Vector</a> *Vector)<br><br>Member function of class <b>GridFunction1dCPU3</b><br>returns Success<br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
add_transfer
void
void add_transfer (SmartPtr<ILocalTransferAlgebra> )
void add_transfer (SmartPtr&lt;<a href="ILocalTransferAlgebraCPU1.html">ILocalTransferAlgebra</a>&gt; )<br><br>Member function of class <b>GridFunction1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
add_transfer
void
void add_transfer (SmartPtr<ILocalTransfer> )
void add_transfer (SmartPtr&lt;<a href="ILocalTransfer.html">ILocalTransfer</a>&gt; )<br><br>Member function of class <b>GridFunction1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
remove_transfer
void
void remove_transfer (SmartPtr<ILocalTransfer> )
void remove_transfer (SmartPtr&lt;<a href="ILocalTransfer.html">ILocalTransfer</a>&gt; )<br><br>Member function of class <b>GridFunction1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
clear_transfers
void
void clear_transfers ()
void clear_transfers ()<br><br>Member function of class <b>GridFunction1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
grid_level
const GridLevel*
const GridLevel *grid_level ()
const <a href="GridLevel.html">GridLevel</a> *grid_level ()<br><br>Member function of class <b>GridFunction1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
clone
SmartPtr<GridFunction1dCPU3>
SmartPtr<GridFunction> clone () const
SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; clone ()<br><br>Member function of class <b>GridFunction1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunction2dCPU1
VectorCPU1 
Classgroup <b>GridFunction</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU1;</b><br>Inheritance: <a href="VectorCPU1.html">VectorCPU1</a> <a href="GridFunction2dCPU1.html">GridFunction2dCPU1</a> <br><table><tr><td colspan=2><h3>GridFunction Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunction2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunction2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace, Level, integer )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunction Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_transfer (SmartPtr&lt;<a href="ILocalTransferAlgebraCPU1.html">ILocalTransferAlgebra</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_transfer (SmartPtr&lt;<a href="ILocalTransfer.html">ILocalTransfer</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assign (const <a href="VectorCPU1.html">Vector</a> *Vector)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear_transfers ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const <a href="GridLevel.html">GridLevel</a> *</td><td class="memItemRight" valign=bottom>grid_level ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>remove_transfer (SmartPtr&lt;<a href="ILocalTransfer.html">ILocalTransfer</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunction Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; </td><td class="memItemRight" valign=bottom>clone ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Vector Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>VectorCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited Vector Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>set (number Number)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>set_random (number Number, number )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited Vector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>size ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Size<br/></td></tr><tr><td><br></td></tr></table>
constructor
GridFunction2dCPU1

GridFunction2dCPU1 (SmartPtr<ApproximationSpace> ApproximationSpace)
GridFunction2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)<br>Constructor of class <b>GridFunction2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
constructor
GridFunction2dCPU1

GridFunction2dCPU1 (SmartPtr<ApproximationSpace> ApproximationSpace, Level, integer )
GridFunction2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace, Level, integer )<br>Constructor of class <b>GridFunction2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
assign
void
void assign (const Vector *Vector)
void assign (const <a href="VectorCPU1.html">Vector</a> *Vector)<br><br>Member function of class <b>GridFunction2dCPU1</b><br>returns Success<br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
add_transfer
void
void add_transfer (SmartPtr<ILocalTransferAlgebra> )
void add_transfer (SmartPtr&lt;<a href="ILocalTransferAlgebraCPU1.html">ILocalTransferAlgebra</a>&gt; )<br><br>Member function of class <b>GridFunction2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
add_transfer
void
void add_transfer (SmartPtr<ILocalTransfer> )
void add_transfer (SmartPtr&lt;<a href="ILocalTransfer.html">ILocalTransfer</a>&gt; )<br><br>Member function of class <b>GridFunction2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
remove_transfer
void
void remove_transfer (SmartPtr<ILocalTransfer> )
void remove_transfer (SmartPtr&lt;<a href="ILocalTransfer.html">ILocalTransfer</a>&gt; )<br><br>Member function of class <b>GridFunction2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
clear_transfers
void
void clear_transfers ()
void clear_transfers ()<br><br>Member function of class <b>GridFunction2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
grid_level
const GridLevel*
const GridLevel *grid_level ()
const <a href="GridLevel.html">GridLevel</a> *grid_level ()<br><br>Member function of class <b>GridFunction2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
clone
SmartPtr<GridFunction2dCPU1>
SmartPtr<GridFunction> clone () const
SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; clone ()<br><br>Member function of class <b>GridFunction2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunction2dCPU2
VectorCPU2 
Classgroup <b>GridFunction</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU2;</b><br>Inheritance: <a href="VectorCPU2.html">VectorCPU2</a> <a href="GridFunction2dCPU2.html">GridFunction2dCPU2</a> <br><table><tr><td colspan=2><h3>GridFunction Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunction2dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunction2dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace, Level, integer )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunction Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_transfer (SmartPtr&lt;<a href="ILocalTransferAlgebraCPU1.html">ILocalTransferAlgebra</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_transfer (SmartPtr&lt;<a href="ILocalTransfer.html">ILocalTransfer</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assign (const <a href="VectorCPU1.html">Vector</a> *Vector)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear_transfers ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const <a href="GridLevel.html">GridLevel</a> *</td><td class="memItemRight" valign=bottom>grid_level ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>remove_transfer (SmartPtr&lt;<a href="ILocalTransfer.html">ILocalTransfer</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunction Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; </td><td class="memItemRight" valign=bottom>clone ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Vector Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>VectorCPU2 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited Vector Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>set (number Number)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>set_random (number Number, number )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited Vector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>size ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Size<br/></td></tr><tr><td><br></td></tr></table>
constructor
GridFunction2dCPU2

GridFunction2dCPU2 (SmartPtr<ApproximationSpace> ApproximationSpace)
GridFunction2dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)<br>Constructor of class <b>GridFunction2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
constructor
GridFunction2dCPU2

GridFunction2dCPU2 (SmartPtr<ApproximationSpace> ApproximationSpace, Level, integer )
GridFunction2dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace, Level, integer )<br>Constructor of class <b>GridFunction2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
assign
void
void assign (const Vector *Vector)
void assign (const <a href="VectorCPU1.html">Vector</a> *Vector)<br><br>Member function of class <b>GridFunction2dCPU2</b><br>returns Success<br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
add_transfer
void
void add_transfer (SmartPtr<ILocalTransferAlgebra> )
void add_transfer (SmartPtr&lt;<a href="ILocalTransferAlgebraCPU1.html">ILocalTransferAlgebra</a>&gt; )<br><br>Member function of class <b>GridFunction2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
add_transfer
void
void add_transfer (SmartPtr<ILocalTransfer> )
void add_transfer (SmartPtr&lt;<a href="ILocalTransfer.html">ILocalTransfer</a>&gt; )<br><br>Member function of class <b>GridFunction2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
remove_transfer
void
void remove_transfer (SmartPtr<ILocalTransfer> )
void remove_transfer (SmartPtr&lt;<a href="ILocalTransfer.html">ILocalTransfer</a>&gt; )<br><br>Member function of class <b>GridFunction2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
clear_transfers
void
void clear_transfers ()
void clear_transfers ()<br><br>Member function of class <b>GridFunction2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
grid_level
const GridLevel*
const GridLevel *grid_level ()
const <a href="GridLevel.html">GridLevel</a> *grid_level ()<br><br>Member function of class <b>GridFunction2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
clone
SmartPtr<GridFunction2dCPU2>
SmartPtr<GridFunction> clone () const
SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; clone ()<br><br>Member function of class <b>GridFunction2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunction2dCPU3
VectorCPU3 
Classgroup <b>GridFunction</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU3;</b><br>Inheritance: <a href="VectorCPU3.html">VectorCPU3</a> <a href="GridFunction2dCPU3.html">GridFunction2dCPU3</a> <br><table><tr><td colspan=2><h3>GridFunction Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunction2dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunction2dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace, Level, integer )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunction Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_transfer (SmartPtr&lt;<a href="ILocalTransferAlgebraCPU1.html">ILocalTransferAlgebra</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_transfer (SmartPtr&lt;<a href="ILocalTransfer.html">ILocalTransfer</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assign (const <a href="VectorCPU1.html">Vector</a> *Vector)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear_transfers ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const <a href="GridLevel.html">GridLevel</a> *</td><td class="memItemRight" valign=bottom>grid_level ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>remove_transfer (SmartPtr&lt;<a href="ILocalTransfer.html">ILocalTransfer</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunction Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; </td><td class="memItemRight" valign=bottom>clone ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Vector Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>VectorCPU3 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited Vector Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>set (number Number)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>set_random (number Number, number )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited Vector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>size ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Size<br/></td></tr><tr><td><br></td></tr></table>
constructor
GridFunction2dCPU3

GridFunction2dCPU3 (SmartPtr<ApproximationSpace> ApproximationSpace)
GridFunction2dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)<br>Constructor of class <b>GridFunction2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
constructor
GridFunction2dCPU3

GridFunction2dCPU3 (SmartPtr<ApproximationSpace> ApproximationSpace, Level, integer )
GridFunction2dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace, Level, integer )<br>Constructor of class <b>GridFunction2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
assign
void
void assign (const Vector *Vector)
void assign (const <a href="VectorCPU1.html">Vector</a> *Vector)<br><br>Member function of class <b>GridFunction2dCPU3</b><br>returns Success<br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
add_transfer
void
void add_transfer (SmartPtr<ILocalTransferAlgebra> )
void add_transfer (SmartPtr&lt;<a href="ILocalTransferAlgebraCPU1.html">ILocalTransferAlgebra</a>&gt; )<br><br>Member function of class <b>GridFunction2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
add_transfer
void
void add_transfer (SmartPtr<ILocalTransfer> )
void add_transfer (SmartPtr&lt;<a href="ILocalTransfer.html">ILocalTransfer</a>&gt; )<br><br>Member function of class <b>GridFunction2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
remove_transfer
void
void remove_transfer (SmartPtr<ILocalTransfer> )
void remove_transfer (SmartPtr&lt;<a href="ILocalTransfer.html">ILocalTransfer</a>&gt; )<br><br>Member function of class <b>GridFunction2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
clear_transfers
void
void clear_transfers ()
void clear_transfers ()<br><br>Member function of class <b>GridFunction2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
grid_level
const GridLevel*
const GridLevel *grid_level ()
const <a href="GridLevel.html">GridLevel</a> *grid_level ()<br><br>Member function of class <b>GridFunction2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
clone
SmartPtr<GridFunction2dCPU3>
SmartPtr<GridFunction> clone () const
SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; clone ()<br><br>Member function of class <b>GridFunction2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunction3dCPU1
VectorCPU1 
Classgroup <b>GridFunction</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU1;</b><br>Inheritance: <a href="VectorCPU1.html">VectorCPU1</a> <a href="GridFunction3dCPU1.html">GridFunction3dCPU1</a> <br><table><tr><td colspan=2><h3>GridFunction Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunction3dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunction3dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace, Level, integer )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunction Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_transfer (SmartPtr&lt;<a href="ILocalTransferAlgebraCPU1.html">ILocalTransferAlgebra</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_transfer (SmartPtr&lt;<a href="ILocalTransfer.html">ILocalTransfer</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assign (const <a href="VectorCPU1.html">Vector</a> *Vector)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear_transfers ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const <a href="GridLevel.html">GridLevel</a> *</td><td class="memItemRight" valign=bottom>grid_level ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>remove_transfer (SmartPtr&lt;<a href="ILocalTransfer.html">ILocalTransfer</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunction Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; </td><td class="memItemRight" valign=bottom>clone ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Vector Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>VectorCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited Vector Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>set (number Number)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>set_random (number Number, number )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited Vector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>size ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Size<br/></td></tr><tr><td><br></td></tr></table>
constructor
GridFunction3dCPU1

GridFunction3dCPU1 (SmartPtr<ApproximationSpace> ApproximationSpace)
GridFunction3dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)<br>Constructor of class <b>GridFunction3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
constructor
GridFunction3dCPU1

GridFunction3dCPU1 (SmartPtr<ApproximationSpace> ApproximationSpace, Level, integer )
GridFunction3dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace, Level, integer )<br>Constructor of class <b>GridFunction3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
assign
void
void assign (const Vector *Vector)
void assign (const <a href="VectorCPU1.html">Vector</a> *Vector)<br><br>Member function of class <b>GridFunction3dCPU1</b><br>returns Success<br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
add_transfer
void
void add_transfer (SmartPtr<ILocalTransferAlgebra> )
void add_transfer (SmartPtr&lt;<a href="ILocalTransferAlgebraCPU1.html">ILocalTransferAlgebra</a>&gt; )<br><br>Member function of class <b>GridFunction3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
add_transfer
void
void add_transfer (SmartPtr<ILocalTransfer> )
void add_transfer (SmartPtr&lt;<a href="ILocalTransfer.html">ILocalTransfer</a>&gt; )<br><br>Member function of class <b>GridFunction3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
remove_transfer
void
void remove_transfer (SmartPtr<ILocalTransfer> )
void remove_transfer (SmartPtr&lt;<a href="ILocalTransfer.html">ILocalTransfer</a>&gt; )<br><br>Member function of class <b>GridFunction3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
clear_transfers
void
void clear_transfers ()
void clear_transfers ()<br><br>Member function of class <b>GridFunction3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
grid_level
const GridLevel*
const GridLevel *grid_level ()
const <a href="GridLevel.html">GridLevel</a> *grid_level ()<br><br>Member function of class <b>GridFunction3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
clone
SmartPtr<GridFunction3dCPU1>
SmartPtr<GridFunction> clone () const
SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; clone ()<br><br>Member function of class <b>GridFunction3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunction3dCPU2
VectorCPU2 
Classgroup <b>GridFunction</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU2;</b><br>Inheritance: <a href="VectorCPU2.html">VectorCPU2</a> <a href="GridFunction3dCPU2.html">GridFunction3dCPU2</a> <br><table><tr><td colspan=2><h3>GridFunction Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunction3dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunction3dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace, Level, integer )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunction Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_transfer (SmartPtr&lt;<a href="ILocalTransferAlgebraCPU1.html">ILocalTransferAlgebra</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_transfer (SmartPtr&lt;<a href="ILocalTransfer.html">ILocalTransfer</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assign (const <a href="VectorCPU1.html">Vector</a> *Vector)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear_transfers ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const <a href="GridLevel.html">GridLevel</a> *</td><td class="memItemRight" valign=bottom>grid_level ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>remove_transfer (SmartPtr&lt;<a href="ILocalTransfer.html">ILocalTransfer</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunction Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; </td><td class="memItemRight" valign=bottom>clone ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Vector Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>VectorCPU2 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited Vector Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>set (number Number)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>set_random (number Number, number )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited Vector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>size ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Size<br/></td></tr><tr><td><br></td></tr></table>
constructor
GridFunction3dCPU2

GridFunction3dCPU2 (SmartPtr<ApproximationSpace> ApproximationSpace)
GridFunction3dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)<br>Constructor of class <b>GridFunction3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
constructor
GridFunction3dCPU2

GridFunction3dCPU2 (SmartPtr<ApproximationSpace> ApproximationSpace, Level, integer )
GridFunction3dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace, Level, integer )<br>Constructor of class <b>GridFunction3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
assign
void
void assign (const Vector *Vector)
void assign (const <a href="VectorCPU1.html">Vector</a> *Vector)<br><br>Member function of class <b>GridFunction3dCPU2</b><br>returns Success<br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
add_transfer
void
void add_transfer (SmartPtr<ILocalTransferAlgebra> )
void add_transfer (SmartPtr&lt;<a href="ILocalTransferAlgebraCPU1.html">ILocalTransferAlgebra</a>&gt; )<br><br>Member function of class <b>GridFunction3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
add_transfer
void
void add_transfer (SmartPtr<ILocalTransfer> )
void add_transfer (SmartPtr&lt;<a href="ILocalTransfer.html">ILocalTransfer</a>&gt; )<br><br>Member function of class <b>GridFunction3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
remove_transfer
void
void remove_transfer (SmartPtr<ILocalTransfer> )
void remove_transfer (SmartPtr&lt;<a href="ILocalTransfer.html">ILocalTransfer</a>&gt; )<br><br>Member function of class <b>GridFunction3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
clear_transfers
void
void clear_transfers ()
void clear_transfers ()<br><br>Member function of class <b>GridFunction3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
grid_level
const GridLevel*
const GridLevel *grid_level ()
const <a href="GridLevel.html">GridLevel</a> *grid_level ()<br><br>Member function of class <b>GridFunction3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
clone
SmartPtr<GridFunction3dCPU2>
SmartPtr<GridFunction> clone () const
SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; clone ()<br><br>Member function of class <b>GridFunction3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunction3dCPU3
VectorCPU3 
Classgroup <b>GridFunction</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU3;</b><br>Inheritance: <a href="VectorCPU3.html">VectorCPU3</a> <a href="GridFunction3dCPU3.html">GridFunction3dCPU3</a> <br><table><tr><td colspan=2><h3>GridFunction Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunction3dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunction3dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace, Level, integer )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunction Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_transfer (SmartPtr&lt;<a href="ILocalTransferAlgebraCPU1.html">ILocalTransferAlgebra</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_transfer (SmartPtr&lt;<a href="ILocalTransfer.html">ILocalTransfer</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assign (const <a href="VectorCPU1.html">Vector</a> *Vector)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear_transfers ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const <a href="GridLevel.html">GridLevel</a> *</td><td class="memItemRight" valign=bottom>grid_level ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>remove_transfer (SmartPtr&lt;<a href="ILocalTransfer.html">ILocalTransfer</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunction Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; </td><td class="memItemRight" valign=bottom>clone ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Vector Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>VectorCPU3 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited Vector Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>set (number Number)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>set_random (number Number, number )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited Vector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>size ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Size<br/></td></tr><tr><td><br></td></tr></table>
constructor
GridFunction3dCPU3

GridFunction3dCPU3 (SmartPtr<ApproximationSpace> ApproximationSpace)
GridFunction3dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)<br>Constructor of class <b>GridFunction3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
constructor
GridFunction3dCPU3

GridFunction3dCPU3 (SmartPtr<ApproximationSpace> ApproximationSpace, Level, integer )
GridFunction3dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace, Level, integer )<br>Constructor of class <b>GridFunction3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
assign
void
void assign (const Vector *Vector)
void assign (const <a href="VectorCPU1.html">Vector</a> *Vector)<br><br>Member function of class <b>GridFunction3dCPU3</b><br>returns Success<br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
add_transfer
void
void add_transfer (SmartPtr<ILocalTransferAlgebra> )
void add_transfer (SmartPtr&lt;<a href="ILocalTransferAlgebraCPU1.html">ILocalTransferAlgebra</a>&gt; )<br><br>Member function of class <b>GridFunction3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
add_transfer
void
void add_transfer (SmartPtr<ILocalTransfer> )
void add_transfer (SmartPtr&lt;<a href="ILocalTransfer.html">ILocalTransfer</a>&gt; )<br><br>Member function of class <b>GridFunction3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
remove_transfer
void
void remove_transfer (SmartPtr<ILocalTransfer> )
void remove_transfer (SmartPtr&lt;<a href="ILocalTransfer.html">ILocalTransfer</a>&gt; )<br><br>Member function of class <b>GridFunction3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
clear_transfers
void
void clear_transfers ()
void clear_transfers ()<br><br>Member function of class <b>GridFunction3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
grid_level
const GridLevel*
const GridLevel *grid_level ()
const <a href="GridLevel.html">GridLevel</a> *grid_level ()<br><br>Member function of class <b>GridFunction3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
clone
SmartPtr<GridFunction3dCPU3>
SmartPtr<GridFunction> clone () const
SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; clone ()<br><br>Member function of class <b>GridFunction3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunctionDebugWriter1dCPU1
IVectorDebugWriterCPU1 IDebugWriterCPU1 
Classgroup <b>GridFunctionDebugWriter</b><br>Registry Group: <b>/ug4/Discretization/Output</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU1;</b><br>Inheritance: <a href="IVectorDebugWriterCPU1.html">IVectorDebugWriterCPU1</a> <a href="IDebugWriterCPU1.html">IDebugWriterCPU1</a> <a href="GridFunctionDebugWriter1dCPU1.html">GridFunctionDebugWriter1dCPU1</a> <br><table><tr><td colspan=2><h3>GridFunctionDebugWriter Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionDebugWriter1dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunctionDebugWriter Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>reset ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_base_dir (c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_conn_viewer_output (bool cvOutput)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_print_consistent (bool printConsistent)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vtk_output (bool vtkOutput)</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionDebugWriter1dCPU1

GridFunctionDebugWriter1dCPU1 (SmartPtr<ApproximationSpace> )
GridFunctionDebugWriter1dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )<br>Constructor of class <b>GridFunctionDebugWriter1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
reset
void
void reset ()
void reset ()<br><br>Member function of class <b>GridFunctionDebugWriter1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_vtk_output
void
void set_vtk_output (bool vtkOutput)
void set_vtk_output (bool vtkOutput)<br><br>Member function of class <b>GridFunctionDebugWriter1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_conn_viewer_output
void
void set_conn_viewer_output (bool cvOutput)
void set_conn_viewer_output (bool cvOutput)<br><br>Member function of class <b>GridFunctionDebugWriter1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_print_consistent
void
void set_print_consistent (bool printConsistent)
void set_print_consistent (bool printConsistent)<br><br>Member function of class <b>GridFunctionDebugWriter1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_base_dir
void
void set_base_dir (c_string )
void set_base_dir (c_string )<br><br>Member function of class <b>GridFunctionDebugWriter1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
;
class
GridFunctionDebugWriter1dCPU2
IVectorDebugWriterCPU2 IDebugWriterCPU2 
Classgroup <b>GridFunctionDebugWriter</b><br>Registry Group: <b>/ug4/Discretization/Output</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU2;</b><br>Inheritance: <a href="IVectorDebugWriterCPU2.html">IVectorDebugWriterCPU2</a> <a href="IDebugWriterCPU2.html">IDebugWriterCPU2</a> <a href="GridFunctionDebugWriter1dCPU2.html">GridFunctionDebugWriter1dCPU2</a> <br><table><tr><td colspan=2><h3>GridFunctionDebugWriter Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionDebugWriter1dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunctionDebugWriter Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>reset ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_base_dir (c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_conn_viewer_output (bool cvOutput)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_print_consistent (bool printConsistent)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vtk_output (bool vtkOutput)</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionDebugWriter1dCPU2

GridFunctionDebugWriter1dCPU2 (SmartPtr<ApproximationSpace> )
GridFunctionDebugWriter1dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )<br>Constructor of class <b>GridFunctionDebugWriter1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
reset
void
void reset ()
void reset ()<br><br>Member function of class <b>GridFunctionDebugWriter1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_vtk_output
void
void set_vtk_output (bool vtkOutput)
void set_vtk_output (bool vtkOutput)<br><br>Member function of class <b>GridFunctionDebugWriter1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_conn_viewer_output
void
void set_conn_viewer_output (bool cvOutput)
void set_conn_viewer_output (bool cvOutput)<br><br>Member function of class <b>GridFunctionDebugWriter1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_print_consistent
void
void set_print_consistent (bool printConsistent)
void set_print_consistent (bool printConsistent)<br><br>Member function of class <b>GridFunctionDebugWriter1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_base_dir
void
void set_base_dir (c_string )
void set_base_dir (c_string )<br><br>Member function of class <b>GridFunctionDebugWriter1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
;
class
GridFunctionDebugWriter1dCPU3
IVectorDebugWriterCPU3 IDebugWriterCPU3 
Classgroup <b>GridFunctionDebugWriter</b><br>Registry Group: <b>/ug4/Discretization/Output</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU3;</b><br>Inheritance: <a href="IVectorDebugWriterCPU3.html">IVectorDebugWriterCPU3</a> <a href="IDebugWriterCPU3.html">IDebugWriterCPU3</a> <a href="GridFunctionDebugWriter1dCPU3.html">GridFunctionDebugWriter1dCPU3</a> <br><table><tr><td colspan=2><h3>GridFunctionDebugWriter Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionDebugWriter1dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunctionDebugWriter Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>reset ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_base_dir (c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_conn_viewer_output (bool cvOutput)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_print_consistent (bool printConsistent)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vtk_output (bool vtkOutput)</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionDebugWriter1dCPU3

GridFunctionDebugWriter1dCPU3 (SmartPtr<ApproximationSpace> )
GridFunctionDebugWriter1dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )<br>Constructor of class <b>GridFunctionDebugWriter1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
reset
void
void reset ()
void reset ()<br><br>Member function of class <b>GridFunctionDebugWriter1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_vtk_output
void
void set_vtk_output (bool vtkOutput)
void set_vtk_output (bool vtkOutput)<br><br>Member function of class <b>GridFunctionDebugWriter1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_conn_viewer_output
void
void set_conn_viewer_output (bool cvOutput)
void set_conn_viewer_output (bool cvOutput)<br><br>Member function of class <b>GridFunctionDebugWriter1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_print_consistent
void
void set_print_consistent (bool printConsistent)
void set_print_consistent (bool printConsistent)<br><br>Member function of class <b>GridFunctionDebugWriter1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_base_dir
void
void set_base_dir (c_string )
void set_base_dir (c_string )<br><br>Member function of class <b>GridFunctionDebugWriter1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
;
class
GridFunctionDebugWriter2dCPU1
IVectorDebugWriterCPU1 IDebugWriterCPU1 
Classgroup <b>GridFunctionDebugWriter</b><br>Registry Group: <b>/ug4/Discretization/Output</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU1;</b><br>Inheritance: <a href="IVectorDebugWriterCPU1.html">IVectorDebugWriterCPU1</a> <a href="IDebugWriterCPU1.html">IDebugWriterCPU1</a> <a href="GridFunctionDebugWriter2dCPU1.html">GridFunctionDebugWriter2dCPU1</a> <br><table><tr><td colspan=2><h3>GridFunctionDebugWriter Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionDebugWriter2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunctionDebugWriter Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>reset ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_base_dir (c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_conn_viewer_output (bool cvOutput)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_print_consistent (bool printConsistent)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vtk_output (bool vtkOutput)</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionDebugWriter2dCPU1

GridFunctionDebugWriter2dCPU1 (SmartPtr<ApproximationSpace> )
GridFunctionDebugWriter2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )<br>Constructor of class <b>GridFunctionDebugWriter2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
reset
void
void reset ()
void reset ()<br><br>Member function of class <b>GridFunctionDebugWriter2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_vtk_output
void
void set_vtk_output (bool vtkOutput)
void set_vtk_output (bool vtkOutput)<br><br>Member function of class <b>GridFunctionDebugWriter2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_conn_viewer_output
void
void set_conn_viewer_output (bool cvOutput)
void set_conn_viewer_output (bool cvOutput)<br><br>Member function of class <b>GridFunctionDebugWriter2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_print_consistent
void
void set_print_consistent (bool printConsistent)
void set_print_consistent (bool printConsistent)<br><br>Member function of class <b>GridFunctionDebugWriter2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_base_dir
void
void set_base_dir (c_string )
void set_base_dir (c_string )<br><br>Member function of class <b>GridFunctionDebugWriter2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
;
class
GridFunctionDebugWriter2dCPU2
IVectorDebugWriterCPU2 IDebugWriterCPU2 
Classgroup <b>GridFunctionDebugWriter</b><br>Registry Group: <b>/ug4/Discretization/Output</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU2;</b><br>Inheritance: <a href="IVectorDebugWriterCPU2.html">IVectorDebugWriterCPU2</a> <a href="IDebugWriterCPU2.html">IDebugWriterCPU2</a> <a href="GridFunctionDebugWriter2dCPU2.html">GridFunctionDebugWriter2dCPU2</a> <br><table><tr><td colspan=2><h3>GridFunctionDebugWriter Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionDebugWriter2dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunctionDebugWriter Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>reset ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_base_dir (c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_conn_viewer_output (bool cvOutput)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_print_consistent (bool printConsistent)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vtk_output (bool vtkOutput)</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionDebugWriter2dCPU2

GridFunctionDebugWriter2dCPU2 (SmartPtr<ApproximationSpace> )
GridFunctionDebugWriter2dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )<br>Constructor of class <b>GridFunctionDebugWriter2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
reset
void
void reset ()
void reset ()<br><br>Member function of class <b>GridFunctionDebugWriter2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_vtk_output
void
void set_vtk_output (bool vtkOutput)
void set_vtk_output (bool vtkOutput)<br><br>Member function of class <b>GridFunctionDebugWriter2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_conn_viewer_output
void
void set_conn_viewer_output (bool cvOutput)
void set_conn_viewer_output (bool cvOutput)<br><br>Member function of class <b>GridFunctionDebugWriter2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_print_consistent
void
void set_print_consistent (bool printConsistent)
void set_print_consistent (bool printConsistent)<br><br>Member function of class <b>GridFunctionDebugWriter2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_base_dir
void
void set_base_dir (c_string )
void set_base_dir (c_string )<br><br>Member function of class <b>GridFunctionDebugWriter2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
;
class
GridFunctionDebugWriter2dCPU3
IVectorDebugWriterCPU3 IDebugWriterCPU3 
Classgroup <b>GridFunctionDebugWriter</b><br>Registry Group: <b>/ug4/Discretization/Output</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU3;</b><br>Inheritance: <a href="IVectorDebugWriterCPU3.html">IVectorDebugWriterCPU3</a> <a href="IDebugWriterCPU3.html">IDebugWriterCPU3</a> <a href="GridFunctionDebugWriter2dCPU3.html">GridFunctionDebugWriter2dCPU3</a> <br><table><tr><td colspan=2><h3>GridFunctionDebugWriter Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionDebugWriter2dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunctionDebugWriter Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>reset ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_base_dir (c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_conn_viewer_output (bool cvOutput)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_print_consistent (bool printConsistent)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vtk_output (bool vtkOutput)</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionDebugWriter2dCPU3

GridFunctionDebugWriter2dCPU3 (SmartPtr<ApproximationSpace> )
GridFunctionDebugWriter2dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )<br>Constructor of class <b>GridFunctionDebugWriter2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
reset
void
void reset ()
void reset ()<br><br>Member function of class <b>GridFunctionDebugWriter2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_vtk_output
void
void set_vtk_output (bool vtkOutput)
void set_vtk_output (bool vtkOutput)<br><br>Member function of class <b>GridFunctionDebugWriter2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_conn_viewer_output
void
void set_conn_viewer_output (bool cvOutput)
void set_conn_viewer_output (bool cvOutput)<br><br>Member function of class <b>GridFunctionDebugWriter2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_print_consistent
void
void set_print_consistent (bool printConsistent)
void set_print_consistent (bool printConsistent)<br><br>Member function of class <b>GridFunctionDebugWriter2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_base_dir
void
void set_base_dir (c_string )
void set_base_dir (c_string )<br><br>Member function of class <b>GridFunctionDebugWriter2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
;
class
GridFunctionDebugWriter3dCPU1
IVectorDebugWriterCPU1 IDebugWriterCPU1 
Classgroup <b>GridFunctionDebugWriter</b><br>Registry Group: <b>/ug4/Discretization/Output</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU1;</b><br>Inheritance: <a href="IVectorDebugWriterCPU1.html">IVectorDebugWriterCPU1</a> <a href="IDebugWriterCPU1.html">IDebugWriterCPU1</a> <a href="GridFunctionDebugWriter3dCPU1.html">GridFunctionDebugWriter3dCPU1</a> <br><table><tr><td colspan=2><h3>GridFunctionDebugWriter Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionDebugWriter3dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunctionDebugWriter Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>reset ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_base_dir (c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_conn_viewer_output (bool cvOutput)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_print_consistent (bool printConsistent)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vtk_output (bool vtkOutput)</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionDebugWriter3dCPU1

GridFunctionDebugWriter3dCPU1 (SmartPtr<ApproximationSpace> )
GridFunctionDebugWriter3dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )<br>Constructor of class <b>GridFunctionDebugWriter3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
reset
void
void reset ()
void reset ()<br><br>Member function of class <b>GridFunctionDebugWriter3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_vtk_output
void
void set_vtk_output (bool vtkOutput)
void set_vtk_output (bool vtkOutput)<br><br>Member function of class <b>GridFunctionDebugWriter3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_conn_viewer_output
void
void set_conn_viewer_output (bool cvOutput)
void set_conn_viewer_output (bool cvOutput)<br><br>Member function of class <b>GridFunctionDebugWriter3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_print_consistent
void
void set_print_consistent (bool printConsistent)
void set_print_consistent (bool printConsistent)<br><br>Member function of class <b>GridFunctionDebugWriter3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_base_dir
void
void set_base_dir (c_string )
void set_base_dir (c_string )<br><br>Member function of class <b>GridFunctionDebugWriter3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
;
class
GridFunctionDebugWriter3dCPU2
IVectorDebugWriterCPU2 IDebugWriterCPU2 
Classgroup <b>GridFunctionDebugWriter</b><br>Registry Group: <b>/ug4/Discretization/Output</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU2;</b><br>Inheritance: <a href="IVectorDebugWriterCPU2.html">IVectorDebugWriterCPU2</a> <a href="IDebugWriterCPU2.html">IDebugWriterCPU2</a> <a href="GridFunctionDebugWriter3dCPU2.html">GridFunctionDebugWriter3dCPU2</a> <br><table><tr><td colspan=2><h3>GridFunctionDebugWriter Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionDebugWriter3dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunctionDebugWriter Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>reset ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_base_dir (c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_conn_viewer_output (bool cvOutput)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_print_consistent (bool printConsistent)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vtk_output (bool vtkOutput)</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionDebugWriter3dCPU2

GridFunctionDebugWriter3dCPU2 (SmartPtr<ApproximationSpace> )
GridFunctionDebugWriter3dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )<br>Constructor of class <b>GridFunctionDebugWriter3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
reset
void
void reset ()
void reset ()<br><br>Member function of class <b>GridFunctionDebugWriter3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_vtk_output
void
void set_vtk_output (bool vtkOutput)
void set_vtk_output (bool vtkOutput)<br><br>Member function of class <b>GridFunctionDebugWriter3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_conn_viewer_output
void
void set_conn_viewer_output (bool cvOutput)
void set_conn_viewer_output (bool cvOutput)<br><br>Member function of class <b>GridFunctionDebugWriter3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_print_consistent
void
void set_print_consistent (bool printConsistent)
void set_print_consistent (bool printConsistent)<br><br>Member function of class <b>GridFunctionDebugWriter3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_base_dir
void
void set_base_dir (c_string )
void set_base_dir (c_string )<br><br>Member function of class <b>GridFunctionDebugWriter3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
;
class
GridFunctionDebugWriter3dCPU3
IVectorDebugWriterCPU3 IDebugWriterCPU3 
Classgroup <b>GridFunctionDebugWriter</b><br>Registry Group: <b>/ug4/Discretization/Output</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU3;</b><br>Inheritance: <a href="IVectorDebugWriterCPU3.html">IVectorDebugWriterCPU3</a> <a href="IDebugWriterCPU3.html">IDebugWriterCPU3</a> <a href="GridFunctionDebugWriter3dCPU3.html">GridFunctionDebugWriter3dCPU3</a> <br><table><tr><td colspan=2><h3>GridFunctionDebugWriter Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionDebugWriter3dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunctionDebugWriter Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>reset ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_base_dir (c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_conn_viewer_output (bool cvOutput)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_print_consistent (bool printConsistent)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vtk_output (bool vtkOutput)</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionDebugWriter3dCPU3

GridFunctionDebugWriter3dCPU3 (SmartPtr<ApproximationSpace> )
GridFunctionDebugWriter3dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )<br>Constructor of class <b>GridFunctionDebugWriter3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
reset
void
void reset ()
void reset ()<br><br>Member function of class <b>GridFunctionDebugWriter3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_vtk_output
void
void set_vtk_output (bool vtkOutput)
void set_vtk_output (bool vtkOutput)<br><br>Member function of class <b>GridFunctionDebugWriter3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_conn_viewer_output
void
void set_conn_viewer_output (bool cvOutput)
void set_conn_viewer_output (bool cvOutput)<br><br>Member function of class <b>GridFunctionDebugWriter3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_print_consistent
void
void set_print_consistent (bool printConsistent)
void set_print_consistent (bool printConsistent)<br><br>Member function of class <b>GridFunctionDebugWriter3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_base_dir
void
void set_base_dir (c_string )
void set_base_dir (c_string )<br><br>Member function of class <b>GridFunctionDebugWriter3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
;
class
GridFunctionGradientComponentData1dCPU1
ICplUserData1d UserNumber1d 
Classgroup <b>GridFunctionGradientComponentData</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU1;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="UserNumber1d.html">UserNumber1d</a> <a href="GridFunctionGradientComponentData1dCPU1.html">GridFunctionGradientComponentData1dCPU1</a> <br><table><tr><td colspan=2><h3>GridFunctionGradientComponentData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionGradientComponentData1dCPU1 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Components, size_t )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionGradientComponentData1dCPU1

GridFunctionGradientComponentData1dCPU1 (SmartPtr<GridFunction> GridFunction, c_string Components, size_t )
GridFunctionGradientComponentData1dCPU1 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Components, size_t )<br>Constructor of class <b>GridFunctionGradientComponentData1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunctionGradientComponentData1dCPU2
ICplUserData1d UserNumber1d 
Classgroup <b>GridFunctionGradientComponentData</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU2;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="UserNumber1d.html">UserNumber1d</a> <a href="GridFunctionGradientComponentData1dCPU2.html">GridFunctionGradientComponentData1dCPU2</a> <br><table><tr><td colspan=2><h3>GridFunctionGradientComponentData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionGradientComponentData1dCPU2 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Components, size_t )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionGradientComponentData1dCPU2

GridFunctionGradientComponentData1dCPU2 (SmartPtr<GridFunction> GridFunction, c_string Components, size_t )
GridFunctionGradientComponentData1dCPU2 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Components, size_t )<br>Constructor of class <b>GridFunctionGradientComponentData1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunctionGradientComponentData1dCPU3
ICplUserData1d UserNumber1d 
Classgroup <b>GridFunctionGradientComponentData</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU3;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="UserNumber1d.html">UserNumber1d</a> <a href="GridFunctionGradientComponentData1dCPU3.html">GridFunctionGradientComponentData1dCPU3</a> <br><table><tr><td colspan=2><h3>GridFunctionGradientComponentData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionGradientComponentData1dCPU3 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Components, size_t )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionGradientComponentData1dCPU3

GridFunctionGradientComponentData1dCPU3 (SmartPtr<GridFunction> GridFunction, c_string Components, size_t )
GridFunctionGradientComponentData1dCPU3 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Components, size_t )<br>Constructor of class <b>GridFunctionGradientComponentData1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunctionGradientComponentData2dCPU1
ICplUserData2d UserNumber2d 
Classgroup <b>GridFunctionGradientComponentData</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU1;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserNumber2d.html">UserNumber2d</a> <a href="GridFunctionGradientComponentData2dCPU1.html">GridFunctionGradientComponentData2dCPU1</a> <br><table><tr><td colspan=2><h3>GridFunctionGradientComponentData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionGradientComponentData2dCPU1 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Components, size_t )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionGradientComponentData2dCPU1

GridFunctionGradientComponentData2dCPU1 (SmartPtr<GridFunction> GridFunction, c_string Components, size_t )
GridFunctionGradientComponentData2dCPU1 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Components, size_t )<br>Constructor of class <b>GridFunctionGradientComponentData2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunctionGradientComponentData2dCPU2
ICplUserData2d UserNumber2d 
Classgroup <b>GridFunctionGradientComponentData</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU2;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserNumber2d.html">UserNumber2d</a> <a href="GridFunctionGradientComponentData2dCPU2.html">GridFunctionGradientComponentData2dCPU2</a> <br><table><tr><td colspan=2><h3>GridFunctionGradientComponentData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionGradientComponentData2dCPU2 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Components, size_t )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionGradientComponentData2dCPU2

GridFunctionGradientComponentData2dCPU2 (SmartPtr<GridFunction> GridFunction, c_string Components, size_t )
GridFunctionGradientComponentData2dCPU2 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Components, size_t )<br>Constructor of class <b>GridFunctionGradientComponentData2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunctionGradientComponentData2dCPU3
ICplUserData2d UserNumber2d 
Classgroup <b>GridFunctionGradientComponentData</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU3;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserNumber2d.html">UserNumber2d</a> <a href="GridFunctionGradientComponentData2dCPU3.html">GridFunctionGradientComponentData2dCPU3</a> <br><table><tr><td colspan=2><h3>GridFunctionGradientComponentData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionGradientComponentData2dCPU3 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Components, size_t )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionGradientComponentData2dCPU3

GridFunctionGradientComponentData2dCPU3 (SmartPtr<GridFunction> GridFunction, c_string Components, size_t )
GridFunctionGradientComponentData2dCPU3 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Components, size_t )<br>Constructor of class <b>GridFunctionGradientComponentData2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunctionGradientComponentData3dCPU1
ICplUserData3d UserNumber3d 
Classgroup <b>GridFunctionGradientComponentData</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU1;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserNumber3d.html">UserNumber3d</a> <a href="GridFunctionGradientComponentData3dCPU1.html">GridFunctionGradientComponentData3dCPU1</a> <br><table><tr><td colspan=2><h3>GridFunctionGradientComponentData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionGradientComponentData3dCPU1 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Components, size_t )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionGradientComponentData3dCPU1

GridFunctionGradientComponentData3dCPU1 (SmartPtr<GridFunction> GridFunction, c_string Components, size_t )
GridFunctionGradientComponentData3dCPU1 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Components, size_t )<br>Constructor of class <b>GridFunctionGradientComponentData3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunctionGradientComponentData3dCPU2
ICplUserData3d UserNumber3d 
Classgroup <b>GridFunctionGradientComponentData</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU2;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserNumber3d.html">UserNumber3d</a> <a href="GridFunctionGradientComponentData3dCPU2.html">GridFunctionGradientComponentData3dCPU2</a> <br><table><tr><td colspan=2><h3>GridFunctionGradientComponentData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionGradientComponentData3dCPU2 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Components, size_t )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionGradientComponentData3dCPU2

GridFunctionGradientComponentData3dCPU2 (SmartPtr<GridFunction> GridFunction, c_string Components, size_t )
GridFunctionGradientComponentData3dCPU2 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Components, size_t )<br>Constructor of class <b>GridFunctionGradientComponentData3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunctionGradientComponentData3dCPU3
ICplUserData3d UserNumber3d 
Classgroup <b>GridFunctionGradientComponentData</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU3;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserNumber3d.html">UserNumber3d</a> <a href="GridFunctionGradientComponentData3dCPU3.html">GridFunctionGradientComponentData3dCPU3</a> <br><table><tr><td colspan=2><h3>GridFunctionGradientComponentData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionGradientComponentData3dCPU3 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Components, size_t )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionGradientComponentData3dCPU3

GridFunctionGradientComponentData3dCPU3 (SmartPtr<GridFunction> GridFunction, c_string Components, size_t )
GridFunctionGradientComponentData3dCPU3 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Components, size_t )<br>Constructor of class <b>GridFunctionGradientComponentData3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunctionGradientData1dCPU1
ICplUserData1d UserVector1d 
Classgroup <b>GridFunctionGradientData</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU1;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="UserVector1d.html">UserVector1d</a> <a href="GridFunctionGradientData1dCPU1.html">GridFunctionGradientData1dCPU1</a> <br><table><tr><td colspan=2><h3>GridFunctionGradientData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionGradientData1dCPU1 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionGradientData1dCPU1

GridFunctionGradientData1dCPU1 (SmartPtr<GridFunction> GridFunction, c_string Component)
GridFunctionGradientData1dCPU1 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br>Constructor of class <b>GridFunctionGradientData1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunctionGradientData1dCPU2
ICplUserData1d UserVector1d 
Classgroup <b>GridFunctionGradientData</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU2;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="UserVector1d.html">UserVector1d</a> <a href="GridFunctionGradientData1dCPU2.html">GridFunctionGradientData1dCPU2</a> <br><table><tr><td colspan=2><h3>GridFunctionGradientData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionGradientData1dCPU2 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionGradientData1dCPU2

GridFunctionGradientData1dCPU2 (SmartPtr<GridFunction> GridFunction, c_string Component)
GridFunctionGradientData1dCPU2 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br>Constructor of class <b>GridFunctionGradientData1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunctionGradientData1dCPU3
ICplUserData1d UserVector1d 
Classgroup <b>GridFunctionGradientData</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU3;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="UserVector1d.html">UserVector1d</a> <a href="GridFunctionGradientData1dCPU3.html">GridFunctionGradientData1dCPU3</a> <br><table><tr><td colspan=2><h3>GridFunctionGradientData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionGradientData1dCPU3 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionGradientData1dCPU3

GridFunctionGradientData1dCPU3 (SmartPtr<GridFunction> GridFunction, c_string Component)
GridFunctionGradientData1dCPU3 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br>Constructor of class <b>GridFunctionGradientData1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunctionGradientData2dCPU1
ICplUserData2d UserVector2d 
Classgroup <b>GridFunctionGradientData</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU1;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserVector2d.html">UserVector2d</a> <a href="GridFunctionGradientData2dCPU1.html">GridFunctionGradientData2dCPU1</a> <br><table><tr><td colspan=2><h3>GridFunctionGradientData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionGradientData2dCPU1 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionGradientData2dCPU1

GridFunctionGradientData2dCPU1 (SmartPtr<GridFunction> GridFunction, c_string Component)
GridFunctionGradientData2dCPU1 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br>Constructor of class <b>GridFunctionGradientData2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunctionGradientData2dCPU2
ICplUserData2d UserVector2d 
Classgroup <b>GridFunctionGradientData</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU2;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserVector2d.html">UserVector2d</a> <a href="GridFunctionGradientData2dCPU2.html">GridFunctionGradientData2dCPU2</a> <br><table><tr><td colspan=2><h3>GridFunctionGradientData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionGradientData2dCPU2 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionGradientData2dCPU2

GridFunctionGradientData2dCPU2 (SmartPtr<GridFunction> GridFunction, c_string Component)
GridFunctionGradientData2dCPU2 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br>Constructor of class <b>GridFunctionGradientData2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunctionGradientData2dCPU3
ICplUserData2d UserVector2d 
Classgroup <b>GridFunctionGradientData</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU3;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserVector2d.html">UserVector2d</a> <a href="GridFunctionGradientData2dCPU3.html">GridFunctionGradientData2dCPU3</a> <br><table><tr><td colspan=2><h3>GridFunctionGradientData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionGradientData2dCPU3 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionGradientData2dCPU3

GridFunctionGradientData2dCPU3 (SmartPtr<GridFunction> GridFunction, c_string Component)
GridFunctionGradientData2dCPU3 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br>Constructor of class <b>GridFunctionGradientData2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunctionGradientData3dCPU1
ICplUserData3d UserVector3d 
Classgroup <b>GridFunctionGradientData</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU1;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserVector3d.html">UserVector3d</a> <a href="GridFunctionGradientData3dCPU1.html">GridFunctionGradientData3dCPU1</a> <br><table><tr><td colspan=2><h3>GridFunctionGradientData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionGradientData3dCPU1 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionGradientData3dCPU1

GridFunctionGradientData3dCPU1 (SmartPtr<GridFunction> GridFunction, c_string Component)
GridFunctionGradientData3dCPU1 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br>Constructor of class <b>GridFunctionGradientData3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunctionGradientData3dCPU2
ICplUserData3d UserVector3d 
Classgroup <b>GridFunctionGradientData</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU2;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserVector3d.html">UserVector3d</a> <a href="GridFunctionGradientData3dCPU2.html">GridFunctionGradientData3dCPU2</a> <br><table><tr><td colspan=2><h3>GridFunctionGradientData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionGradientData3dCPU2 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionGradientData3dCPU2

GridFunctionGradientData3dCPU2 (SmartPtr<GridFunction> GridFunction, c_string Component)
GridFunctionGradientData3dCPU2 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br>Constructor of class <b>GridFunctionGradientData3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunctionGradientData3dCPU3
ICplUserData3d UserVector3d 
Classgroup <b>GridFunctionGradientData</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU3;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserVector3d.html">UserVector3d</a> <a href="GridFunctionGradientData3dCPU3.html">GridFunctionGradientData3dCPU3</a> <br><table><tr><td colspan=2><h3>GridFunctionGradientData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionGradientData3dCPU3 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionGradientData3dCPU3

GridFunctionGradientData3dCPU3 (SmartPtr<GridFunction> GridFunction, c_string Component)
GridFunctionGradientData3dCPU3 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br>Constructor of class <b>GridFunctionGradientData3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunctionNumberData1dCPU1
ICplUserData1d UserNumber1d 
Classgroup <b>GridFunctionNumberData</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU1;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="UserNumber1d.html">UserNumber1d</a> <a href="GridFunctionNumberData1dCPU1.html">GridFunctionNumberData1dCPU1</a> <br><table><tr><td colspan=2><h3>GridFunctionNumberData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionNumberData1dCPU1 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionNumberData1dCPU1

GridFunctionNumberData1dCPU1 (SmartPtr<GridFunction> GridFunction, c_string Component)
GridFunctionNumberData1dCPU1 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br>Constructor of class <b>GridFunctionNumberData1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunctionNumberData1dCPU2
ICplUserData1d UserNumber1d 
Classgroup <b>GridFunctionNumberData</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU2;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="UserNumber1d.html">UserNumber1d</a> <a href="GridFunctionNumberData1dCPU2.html">GridFunctionNumberData1dCPU2</a> <br><table><tr><td colspan=2><h3>GridFunctionNumberData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionNumberData1dCPU2 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionNumberData1dCPU2

GridFunctionNumberData1dCPU2 (SmartPtr<GridFunction> GridFunction, c_string Component)
GridFunctionNumberData1dCPU2 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br>Constructor of class <b>GridFunctionNumberData1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunctionNumberData1dCPU3
ICplUserData1d UserNumber1d 
Classgroup <b>GridFunctionNumberData</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU3;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="UserNumber1d.html">UserNumber1d</a> <a href="GridFunctionNumberData1dCPU3.html">GridFunctionNumberData1dCPU3</a> <br><table><tr><td colspan=2><h3>GridFunctionNumberData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionNumberData1dCPU3 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionNumberData1dCPU3

GridFunctionNumberData1dCPU3 (SmartPtr<GridFunction> GridFunction, c_string Component)
GridFunctionNumberData1dCPU3 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br>Constructor of class <b>GridFunctionNumberData1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunctionNumberData2dCPU1
ICplUserData2d UserNumber2d 
Classgroup <b>GridFunctionNumberData</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU1;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserNumber2d.html">UserNumber2d</a> <a href="GridFunctionNumberData2dCPU1.html">GridFunctionNumberData2dCPU1</a> <br><table><tr><td colspan=2><h3>GridFunctionNumberData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionNumberData2dCPU1 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionNumberData2dCPU1

GridFunctionNumberData2dCPU1 (SmartPtr<GridFunction> GridFunction, c_string Component)
GridFunctionNumberData2dCPU1 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br>Constructor of class <b>GridFunctionNumberData2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunctionNumberData2dCPU2
ICplUserData2d UserNumber2d 
Classgroup <b>GridFunctionNumberData</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU2;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserNumber2d.html">UserNumber2d</a> <a href="GridFunctionNumberData2dCPU2.html">GridFunctionNumberData2dCPU2</a> <br><table><tr><td colspan=2><h3>GridFunctionNumberData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionNumberData2dCPU2 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionNumberData2dCPU2

GridFunctionNumberData2dCPU2 (SmartPtr<GridFunction> GridFunction, c_string Component)
GridFunctionNumberData2dCPU2 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br>Constructor of class <b>GridFunctionNumberData2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunctionNumberData2dCPU3
ICplUserData2d UserNumber2d 
Classgroup <b>GridFunctionNumberData</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU3;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserNumber2d.html">UserNumber2d</a> <a href="GridFunctionNumberData2dCPU3.html">GridFunctionNumberData2dCPU3</a> <br><table><tr><td colspan=2><h3>GridFunctionNumberData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionNumberData2dCPU3 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionNumberData2dCPU3

GridFunctionNumberData2dCPU3 (SmartPtr<GridFunction> GridFunction, c_string Component)
GridFunctionNumberData2dCPU3 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br>Constructor of class <b>GridFunctionNumberData2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunctionNumberData3dCPU1
ICplUserData3d UserNumber3d 
Classgroup <b>GridFunctionNumberData</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU1;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserNumber3d.html">UserNumber3d</a> <a href="GridFunctionNumberData3dCPU1.html">GridFunctionNumberData3dCPU1</a> <br><table><tr><td colspan=2><h3>GridFunctionNumberData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionNumberData3dCPU1 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionNumberData3dCPU1

GridFunctionNumberData3dCPU1 (SmartPtr<GridFunction> GridFunction, c_string Component)
GridFunctionNumberData3dCPU1 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br>Constructor of class <b>GridFunctionNumberData3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunctionNumberData3dCPU2
ICplUserData3d UserNumber3d 
Classgroup <b>GridFunctionNumberData</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU2;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserNumber3d.html">UserNumber3d</a> <a href="GridFunctionNumberData3dCPU2.html">GridFunctionNumberData3dCPU2</a> <br><table><tr><td colspan=2><h3>GridFunctionNumberData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionNumberData3dCPU2 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionNumberData3dCPU2

GridFunctionNumberData3dCPU2 (SmartPtr<GridFunction> GridFunction, c_string Component)
GridFunctionNumberData3dCPU2 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br>Constructor of class <b>GridFunctionNumberData3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunctionNumberData3dCPU3
ICplUserData3d UserNumber3d 
Classgroup <b>GridFunctionNumberData</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU3;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserNumber3d.html">UserNumber3d</a> <a href="GridFunctionNumberData3dCPU3.html">GridFunctionNumberData3dCPU3</a> <br><table><tr><td colspan=2><h3>GridFunctionNumberData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionNumberData3dCPU3 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionNumberData3dCPU3

GridFunctionNumberData3dCPU3 (SmartPtr<GridFunction> GridFunction, c_string Component)
GridFunctionNumberData3dCPU3 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br>Constructor of class <b>GridFunctionNumberData3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunctionPositionProvider1dCPU1
IPositionProvider1d 
Classgroup <b>GridFunctionPositionProvider</b><br>Registry Group: <b>/ug4/Discretization/Output</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU1;</b><br>Inheritance: <a href="IPositionProvider1d.html">IPositionProvider1d</a> <a href="GridFunctionPositionProvider1dCPU1.html">GridFunctionPositionProvider1dCPU1</a> <br><table><tr><td colspan=2><h3>GridFunctionPositionProvider Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionPositionProvider1dCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunctionPositionProvider Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reference_grid_function (const <a href="GridFunction2dCPU1.html">GridFunction</a> *gridFunction)</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionPositionProvider1dCPU1

GridFunctionPositionProvider1dCPU1 ()
GridFunctionPositionProvider1dCPU1 ()<br>Constructor of class <b>GridFunctionPositionProvider1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_reference_grid_function
void
void set_reference_grid_function (const GridFunction *gridFunction)
void set_reference_grid_function (const <a href="GridFunction2dCPU1.html">GridFunction</a> *gridFunction)<br><br>Member function of class <b>GridFunctionPositionProvider1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
;
class
GridFunctionPositionProvider1dCPU2
IPositionProvider1d 
Classgroup <b>GridFunctionPositionProvider</b><br>Registry Group: <b>/ug4/Discretization/Output</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU2;</b><br>Inheritance: <a href="IPositionProvider1d.html">IPositionProvider1d</a> <a href="GridFunctionPositionProvider1dCPU2.html">GridFunctionPositionProvider1dCPU2</a> <br><table><tr><td colspan=2><h3>GridFunctionPositionProvider Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionPositionProvider1dCPU2 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunctionPositionProvider Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reference_grid_function (const <a href="GridFunction2dCPU1.html">GridFunction</a> *gridFunction)</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionPositionProvider1dCPU2

GridFunctionPositionProvider1dCPU2 ()
GridFunctionPositionProvider1dCPU2 ()<br>Constructor of class <b>GridFunctionPositionProvider1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_reference_grid_function
void
void set_reference_grid_function (const GridFunction *gridFunction)
void set_reference_grid_function (const <a href="GridFunction2dCPU1.html">GridFunction</a> *gridFunction)<br><br>Member function of class <b>GridFunctionPositionProvider1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
;
class
GridFunctionPositionProvider1dCPU3
IPositionProvider1d 
Classgroup <b>GridFunctionPositionProvider</b><br>Registry Group: <b>/ug4/Discretization/Output</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU3;</b><br>Inheritance: <a href="IPositionProvider1d.html">IPositionProvider1d</a> <a href="GridFunctionPositionProvider1dCPU3.html">GridFunctionPositionProvider1dCPU3</a> <br><table><tr><td colspan=2><h3>GridFunctionPositionProvider Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionPositionProvider1dCPU3 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunctionPositionProvider Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reference_grid_function (const <a href="GridFunction2dCPU1.html">GridFunction</a> *gridFunction)</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionPositionProvider1dCPU3

GridFunctionPositionProvider1dCPU3 ()
GridFunctionPositionProvider1dCPU3 ()<br>Constructor of class <b>GridFunctionPositionProvider1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_reference_grid_function
void
void set_reference_grid_function (const GridFunction *gridFunction)
void set_reference_grid_function (const <a href="GridFunction2dCPU1.html">GridFunction</a> *gridFunction)<br><br>Member function of class <b>GridFunctionPositionProvider1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
;
class
GridFunctionPositionProvider2dCPU1
IPositionProvider2d 
Classgroup <b>GridFunctionPositionProvider</b><br>Registry Group: <b>/ug4/Discretization/Output</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU1;</b><br>Inheritance: <a href="IPositionProvider2d.html">IPositionProvider2d</a> <a href="GridFunctionPositionProvider2dCPU1.html">GridFunctionPositionProvider2dCPU1</a> <br><table><tr><td colspan=2><h3>GridFunctionPositionProvider Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionPositionProvider2dCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunctionPositionProvider Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reference_grid_function (const <a href="GridFunction2dCPU1.html">GridFunction</a> *gridFunction)</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionPositionProvider2dCPU1

GridFunctionPositionProvider2dCPU1 ()
GridFunctionPositionProvider2dCPU1 ()<br>Constructor of class <b>GridFunctionPositionProvider2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_reference_grid_function
void
void set_reference_grid_function (const GridFunction *gridFunction)
void set_reference_grid_function (const <a href="GridFunction2dCPU1.html">GridFunction</a> *gridFunction)<br><br>Member function of class <b>GridFunctionPositionProvider2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
;
class
GridFunctionPositionProvider2dCPU2
IPositionProvider2d 
Classgroup <b>GridFunctionPositionProvider</b><br>Registry Group: <b>/ug4/Discretization/Output</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU2;</b><br>Inheritance: <a href="IPositionProvider2d.html">IPositionProvider2d</a> <a href="GridFunctionPositionProvider2dCPU2.html">GridFunctionPositionProvider2dCPU2</a> <br><table><tr><td colspan=2><h3>GridFunctionPositionProvider Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionPositionProvider2dCPU2 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunctionPositionProvider Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reference_grid_function (const <a href="GridFunction2dCPU1.html">GridFunction</a> *gridFunction)</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionPositionProvider2dCPU2

GridFunctionPositionProvider2dCPU2 ()
GridFunctionPositionProvider2dCPU2 ()<br>Constructor of class <b>GridFunctionPositionProvider2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_reference_grid_function
void
void set_reference_grid_function (const GridFunction *gridFunction)
void set_reference_grid_function (const <a href="GridFunction2dCPU1.html">GridFunction</a> *gridFunction)<br><br>Member function of class <b>GridFunctionPositionProvider2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
;
class
GridFunctionPositionProvider2dCPU3
IPositionProvider2d 
Classgroup <b>GridFunctionPositionProvider</b><br>Registry Group: <b>/ug4/Discretization/Output</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU3;</b><br>Inheritance: <a href="IPositionProvider2d.html">IPositionProvider2d</a> <a href="GridFunctionPositionProvider2dCPU3.html">GridFunctionPositionProvider2dCPU3</a> <br><table><tr><td colspan=2><h3>GridFunctionPositionProvider Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionPositionProvider2dCPU3 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunctionPositionProvider Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reference_grid_function (const <a href="GridFunction2dCPU1.html">GridFunction</a> *gridFunction)</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionPositionProvider2dCPU3

GridFunctionPositionProvider2dCPU3 ()
GridFunctionPositionProvider2dCPU3 ()<br>Constructor of class <b>GridFunctionPositionProvider2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_reference_grid_function
void
void set_reference_grid_function (const GridFunction *gridFunction)
void set_reference_grid_function (const <a href="GridFunction2dCPU1.html">GridFunction</a> *gridFunction)<br><br>Member function of class <b>GridFunctionPositionProvider2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
;
class
GridFunctionPositionProvider3dCPU1
IPositionProvider3d 
Classgroup <b>GridFunctionPositionProvider</b><br>Registry Group: <b>/ug4/Discretization/Output</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU1;</b><br>Inheritance: <a href="IPositionProvider3d.html">IPositionProvider3d</a> <a href="GridFunctionPositionProvider3dCPU1.html">GridFunctionPositionProvider3dCPU1</a> <br><table><tr><td colspan=2><h3>GridFunctionPositionProvider Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionPositionProvider3dCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunctionPositionProvider Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reference_grid_function (const <a href="GridFunction2dCPU1.html">GridFunction</a> *gridFunction)</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionPositionProvider3dCPU1

GridFunctionPositionProvider3dCPU1 ()
GridFunctionPositionProvider3dCPU1 ()<br>Constructor of class <b>GridFunctionPositionProvider3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_reference_grid_function
void
void set_reference_grid_function (const GridFunction *gridFunction)
void set_reference_grid_function (const <a href="GridFunction2dCPU1.html">GridFunction</a> *gridFunction)<br><br>Member function of class <b>GridFunctionPositionProvider3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
;
class
GridFunctionPositionProvider3dCPU2
IPositionProvider3d 
Classgroup <b>GridFunctionPositionProvider</b><br>Registry Group: <b>/ug4/Discretization/Output</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU2;</b><br>Inheritance: <a href="IPositionProvider3d.html">IPositionProvider3d</a> <a href="GridFunctionPositionProvider3dCPU2.html">GridFunctionPositionProvider3dCPU2</a> <br><table><tr><td colspan=2><h3>GridFunctionPositionProvider Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionPositionProvider3dCPU2 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunctionPositionProvider Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reference_grid_function (const <a href="GridFunction2dCPU1.html">GridFunction</a> *gridFunction)</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionPositionProvider3dCPU2

GridFunctionPositionProvider3dCPU2 ()
GridFunctionPositionProvider3dCPU2 ()<br>Constructor of class <b>GridFunctionPositionProvider3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_reference_grid_function
void
void set_reference_grid_function (const GridFunction *gridFunction)
void set_reference_grid_function (const <a href="GridFunction2dCPU1.html">GridFunction</a> *gridFunction)<br><br>Member function of class <b>GridFunctionPositionProvider3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
;
class
GridFunctionPositionProvider3dCPU3
IPositionProvider3d 
Classgroup <b>GridFunctionPositionProvider</b><br>Registry Group: <b>/ug4/Discretization/Output</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU3;</b><br>Inheritance: <a href="IPositionProvider3d.html">IPositionProvider3d</a> <a href="GridFunctionPositionProvider3dCPU3.html">GridFunctionPositionProvider3dCPU3</a> <br><table><tr><td colspan=2><h3>GridFunctionPositionProvider Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionPositionProvider3dCPU3 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunctionPositionProvider Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reference_grid_function (const <a href="GridFunction2dCPU1.html">GridFunction</a> *gridFunction)</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionPositionProvider3dCPU3

GridFunctionPositionProvider3dCPU3 ()
GridFunctionPositionProvider3dCPU3 ()<br>Constructor of class <b>GridFunctionPositionProvider3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_reference_grid_function
void
void set_reference_grid_function (const GridFunction *gridFunction)
void set_reference_grid_function (const <a href="GridFunction2dCPU1.html">GridFunction</a> *gridFunction)<br><br>Member function of class <b>GridFunctionPositionProvider3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
;
class
GridFunctionVectorData1dCPU1
ICplUserData1d UserVector1d 
Classgroup <b>GridFunctionVectorData</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU1;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="UserVector1d.html">UserVector1d</a> <a href="GridFunctionVectorData1dCPU1.html">GridFunctionVectorData1dCPU1</a> <br><table><tr><td colspan=2><h3>GridFunctionVectorData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionVectorData1dCPU1 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Components)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionVectorData1dCPU1

GridFunctionVectorData1dCPU1 (SmartPtr<GridFunction> GridFunction, c_string Components)
GridFunctionVectorData1dCPU1 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Components)<br>Constructor of class <b>GridFunctionVectorData1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunctionVectorData1dCPU2
ICplUserData1d UserVector1d 
Classgroup <b>GridFunctionVectorData</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU2;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="UserVector1d.html">UserVector1d</a> <a href="GridFunctionVectorData1dCPU2.html">GridFunctionVectorData1dCPU2</a> <br><table><tr><td colspan=2><h3>GridFunctionVectorData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionVectorData1dCPU2 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Components)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionVectorData1dCPU2

GridFunctionVectorData1dCPU2 (SmartPtr<GridFunction> GridFunction, c_string Components)
GridFunctionVectorData1dCPU2 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Components)<br>Constructor of class <b>GridFunctionVectorData1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunctionVectorData1dCPU3
ICplUserData1d UserVector1d 
Classgroup <b>GridFunctionVectorData</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU3;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="UserVector1d.html">UserVector1d</a> <a href="GridFunctionVectorData1dCPU3.html">GridFunctionVectorData1dCPU3</a> <br><table><tr><td colspan=2><h3>GridFunctionVectorData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionVectorData1dCPU3 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Components)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionVectorData1dCPU3

GridFunctionVectorData1dCPU3 (SmartPtr<GridFunction> GridFunction, c_string Components)
GridFunctionVectorData1dCPU3 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Components)<br>Constructor of class <b>GridFunctionVectorData1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunctionVectorData2dCPU1
ICplUserData2d UserVector2d 
Classgroup <b>GridFunctionVectorData</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU1;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserVector2d.html">UserVector2d</a> <a href="GridFunctionVectorData2dCPU1.html">GridFunctionVectorData2dCPU1</a> <br><table><tr><td colspan=2><h3>GridFunctionVectorData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionVectorData2dCPU1 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Components)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionVectorData2dCPU1

GridFunctionVectorData2dCPU1 (SmartPtr<GridFunction> GridFunction, c_string Components)
GridFunctionVectorData2dCPU1 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Components)<br>Constructor of class <b>GridFunctionVectorData2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunctionVectorData2dCPU2
ICplUserData2d UserVector2d 
Classgroup <b>GridFunctionVectorData</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU2;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserVector2d.html">UserVector2d</a> <a href="GridFunctionVectorData2dCPU2.html">GridFunctionVectorData2dCPU2</a> <br><table><tr><td colspan=2><h3>GridFunctionVectorData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionVectorData2dCPU2 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Components)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionVectorData2dCPU2

GridFunctionVectorData2dCPU2 (SmartPtr<GridFunction> GridFunction, c_string Components)
GridFunctionVectorData2dCPU2 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Components)<br>Constructor of class <b>GridFunctionVectorData2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunctionVectorData2dCPU3
ICplUserData2d UserVector2d 
Classgroup <b>GridFunctionVectorData</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU3;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserVector2d.html">UserVector2d</a> <a href="GridFunctionVectorData2dCPU3.html">GridFunctionVectorData2dCPU3</a> <br><table><tr><td colspan=2><h3>GridFunctionVectorData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionVectorData2dCPU3 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Components)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionVectorData2dCPU3

GridFunctionVectorData2dCPU3 (SmartPtr<GridFunction> GridFunction, c_string Components)
GridFunctionVectorData2dCPU3 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Components)<br>Constructor of class <b>GridFunctionVectorData2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunctionVectorData3dCPU1
ICplUserData3d UserVector3d 
Classgroup <b>GridFunctionVectorData</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU1;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserVector3d.html">UserVector3d</a> <a href="GridFunctionVectorData3dCPU1.html">GridFunctionVectorData3dCPU1</a> <br><table><tr><td colspan=2><h3>GridFunctionVectorData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionVectorData3dCPU1 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Components)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionVectorData3dCPU1

GridFunctionVectorData3dCPU1 (SmartPtr<GridFunction> GridFunction, c_string Components)
GridFunctionVectorData3dCPU1 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Components)<br>Constructor of class <b>GridFunctionVectorData3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunctionVectorData3dCPU2
ICplUserData3d UserVector3d 
Classgroup <b>GridFunctionVectorData</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU2;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserVector3d.html">UserVector3d</a> <a href="GridFunctionVectorData3dCPU2.html">GridFunctionVectorData3dCPU2</a> <br><table><tr><td colspan=2><h3>GridFunctionVectorData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionVectorData3dCPU2 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Components)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionVectorData3dCPU2

GridFunctionVectorData3dCPU2 (SmartPtr<GridFunction> GridFunction, c_string Components)
GridFunctionVectorData3dCPU2 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Components)<br>Constructor of class <b>GridFunctionVectorData3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunctionVectorData3dCPU3
ICplUserData3d UserVector3d 
Classgroup <b>GridFunctionVectorData</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU3;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserVector3d.html">UserVector3d</a> <a href="GridFunctionVectorData3dCPU3.html">GridFunctionVectorData3dCPU3</a> <br><table><tr><td colspan=2><h3>GridFunctionVectorData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionVectorData3dCPU3 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Components)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionVectorData3dCPU3

GridFunctionVectorData3dCPU3 (SmartPtr<GridFunction> GridFunction, c_string Components)
GridFunctionVectorData3dCPU3 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Components)<br>Constructor of class <b>GridFunctionVectorData3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunctionVectorWriter1dCPU1
IVectorWriterCPU1 
Classgroup <b>GridFunctionVectorWriter</b><br>Registry Group: <b>/ug4/Discretization/Output</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU1;</b><br>Inheritance: <a href="IVectorWriterCPU1.html">IVectorWriterCPU1</a> <a href="GridFunctionVectorWriter1dCPU1.html">GridFunctionVectorWriter1dCPU1</a> <br><table><tr><td colspan=2><h3>GridFunctionVectorWriter Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionVectorWriter1dCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunctionVectorWriter Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reference_grid_function (const <a href="GridFunction2dCPU1.html">GridFunction</a> *gridFunction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_user_data (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; userData)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IVectorWriter Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (<a href="VectorCPU1.html">Vector</a> *v)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: updates the vector v<br/></td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionVectorWriter1dCPU1

GridFunctionVectorWriter1dCPU1 ()
GridFunctionVectorWriter1dCPU1 ()<br>Constructor of class <b>GridFunctionVectorWriter1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_reference_grid_function
void
void set_reference_grid_function (const GridFunction *gridFunction)
void set_reference_grid_function (const <a href="GridFunction2dCPU1.html">GridFunction</a> *gridFunction)<br><br>Member function of class <b>GridFunctionVectorWriter1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_user_data
void
void set_user_data (SmartPtr<UserNumber> userData)
void set_user_data (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; userData)<br><br>Member function of class <b>GridFunctionVectorWriter1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
;
class
GridFunctionVectorWriter1dCPU2
IVectorWriterCPU2 
Classgroup <b>GridFunctionVectorWriter</b><br>Registry Group: <b>/ug4/Discretization/Output</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU2;</b><br>Inheritance: <a href="IVectorWriterCPU2.html">IVectorWriterCPU2</a> <a href="GridFunctionVectorWriter1dCPU2.html">GridFunctionVectorWriter1dCPU2</a> <br><table><tr><td colspan=2><h3>GridFunctionVectorWriter Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionVectorWriter1dCPU2 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunctionVectorWriter Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reference_grid_function (const <a href="GridFunction2dCPU1.html">GridFunction</a> *gridFunction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_user_data (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; userData)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IVectorWriter Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (<a href="VectorCPU1.html">Vector</a> *v)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: updates the vector v<br/></td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionVectorWriter1dCPU2

GridFunctionVectorWriter1dCPU2 ()
GridFunctionVectorWriter1dCPU2 ()<br>Constructor of class <b>GridFunctionVectorWriter1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_reference_grid_function
void
void set_reference_grid_function (const GridFunction *gridFunction)
void set_reference_grid_function (const <a href="GridFunction2dCPU1.html">GridFunction</a> *gridFunction)<br><br>Member function of class <b>GridFunctionVectorWriter1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_user_data
void
void set_user_data (SmartPtr<UserNumber> userData)
void set_user_data (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; userData)<br><br>Member function of class <b>GridFunctionVectorWriter1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
;
class
GridFunctionVectorWriter1dCPU3
IVectorWriterCPU3 
Classgroup <b>GridFunctionVectorWriter</b><br>Registry Group: <b>/ug4/Discretization/Output</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU3;</b><br>Inheritance: <a href="IVectorWriterCPU3.html">IVectorWriterCPU3</a> <a href="GridFunctionVectorWriter1dCPU3.html">GridFunctionVectorWriter1dCPU3</a> <br><table><tr><td colspan=2><h3>GridFunctionVectorWriter Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionVectorWriter1dCPU3 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunctionVectorWriter Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reference_grid_function (const <a href="GridFunction2dCPU1.html">GridFunction</a> *gridFunction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_user_data (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; userData)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IVectorWriter Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (<a href="VectorCPU1.html">Vector</a> *v)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: updates the vector v<br/></td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionVectorWriter1dCPU3

GridFunctionVectorWriter1dCPU3 ()
GridFunctionVectorWriter1dCPU3 ()<br>Constructor of class <b>GridFunctionVectorWriter1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_reference_grid_function
void
void set_reference_grid_function (const GridFunction *gridFunction)
void set_reference_grid_function (const <a href="GridFunction2dCPU1.html">GridFunction</a> *gridFunction)<br><br>Member function of class <b>GridFunctionVectorWriter1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_user_data
void
void set_user_data (SmartPtr<UserNumber> userData)
void set_user_data (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; userData)<br><br>Member function of class <b>GridFunctionVectorWriter1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
;
class
GridFunctionVectorWriter2dCPU1
IVectorWriterCPU1 
Classgroup <b>GridFunctionVectorWriter</b><br>Registry Group: <b>/ug4/Discretization/Output</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU1;</b><br>Inheritance: <a href="IVectorWriterCPU1.html">IVectorWriterCPU1</a> <a href="GridFunctionVectorWriter2dCPU1.html">GridFunctionVectorWriter2dCPU1</a> <br><table><tr><td colspan=2><h3>GridFunctionVectorWriter Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionVectorWriter2dCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunctionVectorWriter Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reference_grid_function (const <a href="GridFunction2dCPU1.html">GridFunction</a> *gridFunction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_user_data (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; userData)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IVectorWriter Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (<a href="VectorCPU1.html">Vector</a> *v)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: updates the vector v<br/></td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionVectorWriter2dCPU1

GridFunctionVectorWriter2dCPU1 ()
GridFunctionVectorWriter2dCPU1 ()<br>Constructor of class <b>GridFunctionVectorWriter2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_reference_grid_function
void
void set_reference_grid_function (const GridFunction *gridFunction)
void set_reference_grid_function (const <a href="GridFunction2dCPU1.html">GridFunction</a> *gridFunction)<br><br>Member function of class <b>GridFunctionVectorWriter2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_user_data
void
void set_user_data (SmartPtr<UserNumber> userData)
void set_user_data (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; userData)<br><br>Member function of class <b>GridFunctionVectorWriter2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
;
class
GridFunctionVectorWriter2dCPU2
IVectorWriterCPU2 
Classgroup <b>GridFunctionVectorWriter</b><br>Registry Group: <b>/ug4/Discretization/Output</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU2;</b><br>Inheritance: <a href="IVectorWriterCPU2.html">IVectorWriterCPU2</a> <a href="GridFunctionVectorWriter2dCPU2.html">GridFunctionVectorWriter2dCPU2</a> <br><table><tr><td colspan=2><h3>GridFunctionVectorWriter Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionVectorWriter2dCPU2 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunctionVectorWriter Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reference_grid_function (const <a href="GridFunction2dCPU1.html">GridFunction</a> *gridFunction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_user_data (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; userData)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IVectorWriter Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (<a href="VectorCPU1.html">Vector</a> *v)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: updates the vector v<br/></td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionVectorWriter2dCPU2

GridFunctionVectorWriter2dCPU2 ()
GridFunctionVectorWriter2dCPU2 ()<br>Constructor of class <b>GridFunctionVectorWriter2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_reference_grid_function
void
void set_reference_grid_function (const GridFunction *gridFunction)
void set_reference_grid_function (const <a href="GridFunction2dCPU1.html">GridFunction</a> *gridFunction)<br><br>Member function of class <b>GridFunctionVectorWriter2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_user_data
void
void set_user_data (SmartPtr<UserNumber> userData)
void set_user_data (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; userData)<br><br>Member function of class <b>GridFunctionVectorWriter2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
;
class
GridFunctionVectorWriter2dCPU3
IVectorWriterCPU3 
Classgroup <b>GridFunctionVectorWriter</b><br>Registry Group: <b>/ug4/Discretization/Output</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU3;</b><br>Inheritance: <a href="IVectorWriterCPU3.html">IVectorWriterCPU3</a> <a href="GridFunctionVectorWriter2dCPU3.html">GridFunctionVectorWriter2dCPU3</a> <br><table><tr><td colspan=2><h3>GridFunctionVectorWriter Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionVectorWriter2dCPU3 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunctionVectorWriter Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reference_grid_function (const <a href="GridFunction2dCPU1.html">GridFunction</a> *gridFunction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_user_data (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; userData)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IVectorWriter Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (<a href="VectorCPU1.html">Vector</a> *v)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: updates the vector v<br/></td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionVectorWriter2dCPU3

GridFunctionVectorWriter2dCPU3 ()
GridFunctionVectorWriter2dCPU3 ()<br>Constructor of class <b>GridFunctionVectorWriter2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_reference_grid_function
void
void set_reference_grid_function (const GridFunction *gridFunction)
void set_reference_grid_function (const <a href="GridFunction2dCPU1.html">GridFunction</a> *gridFunction)<br><br>Member function of class <b>GridFunctionVectorWriter2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_user_data
void
void set_user_data (SmartPtr<UserNumber> userData)
void set_user_data (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; userData)<br><br>Member function of class <b>GridFunctionVectorWriter2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
;
class
GridFunctionVectorWriter3dCPU1
IVectorWriterCPU1 
Classgroup <b>GridFunctionVectorWriter</b><br>Registry Group: <b>/ug4/Discretization/Output</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU1;</b><br>Inheritance: <a href="IVectorWriterCPU1.html">IVectorWriterCPU1</a> <a href="GridFunctionVectorWriter3dCPU1.html">GridFunctionVectorWriter3dCPU1</a> <br><table><tr><td colspan=2><h3>GridFunctionVectorWriter Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionVectorWriter3dCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunctionVectorWriter Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reference_grid_function (const <a href="GridFunction2dCPU1.html">GridFunction</a> *gridFunction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_user_data (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; userData)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IVectorWriter Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (<a href="VectorCPU1.html">Vector</a> *v)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: updates the vector v<br/></td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionVectorWriter3dCPU1

GridFunctionVectorWriter3dCPU1 ()
GridFunctionVectorWriter3dCPU1 ()<br>Constructor of class <b>GridFunctionVectorWriter3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_reference_grid_function
void
void set_reference_grid_function (const GridFunction *gridFunction)
void set_reference_grid_function (const <a href="GridFunction2dCPU1.html">GridFunction</a> *gridFunction)<br><br>Member function of class <b>GridFunctionVectorWriter3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_user_data
void
void set_user_data (SmartPtr<UserNumber> userData)
void set_user_data (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; userData)<br><br>Member function of class <b>GridFunctionVectorWriter3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
;
class
GridFunctionVectorWriter3dCPU2
IVectorWriterCPU2 
Classgroup <b>GridFunctionVectorWriter</b><br>Registry Group: <b>/ug4/Discretization/Output</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU2;</b><br>Inheritance: <a href="IVectorWriterCPU2.html">IVectorWriterCPU2</a> <a href="GridFunctionVectorWriter3dCPU2.html">GridFunctionVectorWriter3dCPU2</a> <br><table><tr><td colspan=2><h3>GridFunctionVectorWriter Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionVectorWriter3dCPU2 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunctionVectorWriter Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reference_grid_function (const <a href="GridFunction2dCPU1.html">GridFunction</a> *gridFunction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_user_data (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; userData)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IVectorWriter Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (<a href="VectorCPU1.html">Vector</a> *v)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: updates the vector v<br/></td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionVectorWriter3dCPU2

GridFunctionVectorWriter3dCPU2 ()
GridFunctionVectorWriter3dCPU2 ()<br>Constructor of class <b>GridFunctionVectorWriter3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_reference_grid_function
void
void set_reference_grid_function (const GridFunction *gridFunction)
void set_reference_grid_function (const <a href="GridFunction2dCPU1.html">GridFunction</a> *gridFunction)<br><br>Member function of class <b>GridFunctionVectorWriter3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_user_data
void
void set_user_data (SmartPtr<UserNumber> userData)
void set_user_data (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; userData)<br><br>Member function of class <b>GridFunctionVectorWriter3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
;
class
GridFunctionVectorWriter3dCPU3
IVectorWriterCPU3 
Classgroup <b>GridFunctionVectorWriter</b><br>Registry Group: <b>/ug4/Discretization/Output</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU3;</b><br>Inheritance: <a href="IVectorWriterCPU3.html">IVectorWriterCPU3</a> <a href="GridFunctionVectorWriter3dCPU3.html">GridFunctionVectorWriter3dCPU3</a> <br><table><tr><td colspan=2><h3>GridFunctionVectorWriter Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionVectorWriter3dCPU3 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunctionVectorWriter Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reference_grid_function (const <a href="GridFunction2dCPU1.html">GridFunction</a> *gridFunction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_user_data (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; userData)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IVectorWriter Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (<a href="VectorCPU1.html">Vector</a> *v)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: updates the vector v<br/></td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionVectorWriter3dCPU3

GridFunctionVectorWriter3dCPU3 ()
GridFunctionVectorWriter3dCPU3 ()<br>Constructor of class <b>GridFunctionVectorWriter3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_reference_grid_function
void
void set_reference_grid_function (const GridFunction *gridFunction)
void set_reference_grid_function (const <a href="GridFunction2dCPU1.html">GridFunction</a> *gridFunction)<br><br>Member function of class <b>GridFunctionVectorWriter3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_user_data
void
void set_user_data (SmartPtr<UserNumber> userData)
void set_user_data (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; userData)<br><br>Member function of class <b>GridFunctionVectorWriter3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
;
class
GridFunctionVectorWriterDirichlet01dCPU1
IVectorWriterCPU1 
Classgroup <b>GridFunctionVectorWriterDirichlet0</b><br>Registry Group: <b>/ug4/Discretization/Output</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU1;</b><br>Inheritance: <a href="IVectorWriterCPU1.html">IVectorWriterCPU1</a> <a href="GridFunctionVectorWriterDirichlet01dCPU1.html">GridFunctionVectorWriterDirichlet01dCPU1</a> <br><table><tr><td colspan=2><h3>GridFunctionVectorWriterDirichlet0 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionVectorWriterDirichlet01dCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunctionVectorWriterDirichlet0 Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="IConstraintCPU1.html">IConstraint</a>&gt; postProcess, <a href="ApproximationSpace2d.html">ApproximationSpace</a> *approxSpace)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_level (size_t level)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IVectorWriter Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (<a href="VectorCPU1.html">Vector</a> *v)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: updates the vector v<br/></td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionVectorWriterDirichlet01dCPU1

GridFunctionVectorWriterDirichlet01dCPU1 ()
GridFunctionVectorWriterDirichlet01dCPU1 ()<br>Constructor of class <b>GridFunctionVectorWriterDirichlet01dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
init
void
void init (SmartPtr<IConstraint> postProcess, ApproximationSpace *approxSpace)
void init (SmartPtr&lt;<a href="IConstraintCPU1.html">IConstraint</a>&gt; postProcess, <a href="ApproximationSpace2d.html">ApproximationSpace</a> *approxSpace)<br><br>Member function of class <b>GridFunctionVectorWriterDirichlet01dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_level
void
void set_level (size_t level)
void set_level (size_t level)<br><br>Member function of class <b>GridFunctionVectorWriterDirichlet01dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
;
class
GridFunctionVectorWriterDirichlet01dCPU2
IVectorWriterCPU2 
Classgroup <b>GridFunctionVectorWriterDirichlet0</b><br>Registry Group: <b>/ug4/Discretization/Output</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU2;</b><br>Inheritance: <a href="IVectorWriterCPU2.html">IVectorWriterCPU2</a> <a href="GridFunctionVectorWriterDirichlet01dCPU2.html">GridFunctionVectorWriterDirichlet01dCPU2</a> <br><table><tr><td colspan=2><h3>GridFunctionVectorWriterDirichlet0 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionVectorWriterDirichlet01dCPU2 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunctionVectorWriterDirichlet0 Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="IConstraintCPU1.html">IConstraint</a>&gt; postProcess, <a href="ApproximationSpace2d.html">ApproximationSpace</a> *approxSpace)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_level (size_t level)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IVectorWriter Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (<a href="VectorCPU1.html">Vector</a> *v)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: updates the vector v<br/></td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionVectorWriterDirichlet01dCPU2

GridFunctionVectorWriterDirichlet01dCPU2 ()
GridFunctionVectorWriterDirichlet01dCPU2 ()<br>Constructor of class <b>GridFunctionVectorWriterDirichlet01dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
init
void
void init (SmartPtr<IConstraint> postProcess, ApproximationSpace *approxSpace)
void init (SmartPtr&lt;<a href="IConstraintCPU1.html">IConstraint</a>&gt; postProcess, <a href="ApproximationSpace2d.html">ApproximationSpace</a> *approxSpace)<br><br>Member function of class <b>GridFunctionVectorWriterDirichlet01dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_level
void
void set_level (size_t level)
void set_level (size_t level)<br><br>Member function of class <b>GridFunctionVectorWriterDirichlet01dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
;
class
GridFunctionVectorWriterDirichlet01dCPU3
IVectorWriterCPU3 
Classgroup <b>GridFunctionVectorWriterDirichlet0</b><br>Registry Group: <b>/ug4/Discretization/Output</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU3;</b><br>Inheritance: <a href="IVectorWriterCPU3.html">IVectorWriterCPU3</a> <a href="GridFunctionVectorWriterDirichlet01dCPU3.html">GridFunctionVectorWriterDirichlet01dCPU3</a> <br><table><tr><td colspan=2><h3>GridFunctionVectorWriterDirichlet0 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionVectorWriterDirichlet01dCPU3 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunctionVectorWriterDirichlet0 Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="IConstraintCPU1.html">IConstraint</a>&gt; postProcess, <a href="ApproximationSpace2d.html">ApproximationSpace</a> *approxSpace)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_level (size_t level)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IVectorWriter Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (<a href="VectorCPU1.html">Vector</a> *v)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: updates the vector v<br/></td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionVectorWriterDirichlet01dCPU3

GridFunctionVectorWriterDirichlet01dCPU3 ()
GridFunctionVectorWriterDirichlet01dCPU3 ()<br>Constructor of class <b>GridFunctionVectorWriterDirichlet01dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
init
void
void init (SmartPtr<IConstraint> postProcess, ApproximationSpace *approxSpace)
void init (SmartPtr&lt;<a href="IConstraintCPU1.html">IConstraint</a>&gt; postProcess, <a href="ApproximationSpace2d.html">ApproximationSpace</a> *approxSpace)<br><br>Member function of class <b>GridFunctionVectorWriterDirichlet01dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_level
void
void set_level (size_t level)
void set_level (size_t level)<br><br>Member function of class <b>GridFunctionVectorWriterDirichlet01dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
;
class
GridFunctionVectorWriterDirichlet02dCPU1
IVectorWriterCPU1 
Classgroup <b>GridFunctionVectorWriterDirichlet0</b><br>Registry Group: <b>/ug4/Discretization/Output</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU1;</b><br>Inheritance: <a href="IVectorWriterCPU1.html">IVectorWriterCPU1</a> <a href="GridFunctionVectorWriterDirichlet02dCPU1.html">GridFunctionVectorWriterDirichlet02dCPU1</a> <br><table><tr><td colspan=2><h3>GridFunctionVectorWriterDirichlet0 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionVectorWriterDirichlet02dCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunctionVectorWriterDirichlet0 Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="IConstraintCPU1.html">IConstraint</a>&gt; postProcess, <a href="ApproximationSpace2d.html">ApproximationSpace</a> *approxSpace)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_level (size_t level)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IVectorWriter Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (<a href="VectorCPU1.html">Vector</a> *v)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: updates the vector v<br/></td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionVectorWriterDirichlet02dCPU1

GridFunctionVectorWriterDirichlet02dCPU1 ()
GridFunctionVectorWriterDirichlet02dCPU1 ()<br>Constructor of class <b>GridFunctionVectorWriterDirichlet02dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
init
void
void init (SmartPtr<IConstraint> postProcess, ApproximationSpace *approxSpace)
void init (SmartPtr&lt;<a href="IConstraintCPU1.html">IConstraint</a>&gt; postProcess, <a href="ApproximationSpace2d.html">ApproximationSpace</a> *approxSpace)<br><br>Member function of class <b>GridFunctionVectorWriterDirichlet02dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_level
void
void set_level (size_t level)
void set_level (size_t level)<br><br>Member function of class <b>GridFunctionVectorWriterDirichlet02dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
;
class
GridFunctionVectorWriterDirichlet02dCPU2
IVectorWriterCPU2 
Classgroup <b>GridFunctionVectorWriterDirichlet0</b><br>Registry Group: <b>/ug4/Discretization/Output</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU2;</b><br>Inheritance: <a href="IVectorWriterCPU2.html">IVectorWriterCPU2</a> <a href="GridFunctionVectorWriterDirichlet02dCPU2.html">GridFunctionVectorWriterDirichlet02dCPU2</a> <br><table><tr><td colspan=2><h3>GridFunctionVectorWriterDirichlet0 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionVectorWriterDirichlet02dCPU2 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunctionVectorWriterDirichlet0 Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="IConstraintCPU1.html">IConstraint</a>&gt; postProcess, <a href="ApproximationSpace2d.html">ApproximationSpace</a> *approxSpace)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_level (size_t level)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IVectorWriter Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (<a href="VectorCPU1.html">Vector</a> *v)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: updates the vector v<br/></td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionVectorWriterDirichlet02dCPU2

GridFunctionVectorWriterDirichlet02dCPU2 ()
GridFunctionVectorWriterDirichlet02dCPU2 ()<br>Constructor of class <b>GridFunctionVectorWriterDirichlet02dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
init
void
void init (SmartPtr<IConstraint> postProcess, ApproximationSpace *approxSpace)
void init (SmartPtr&lt;<a href="IConstraintCPU1.html">IConstraint</a>&gt; postProcess, <a href="ApproximationSpace2d.html">ApproximationSpace</a> *approxSpace)<br><br>Member function of class <b>GridFunctionVectorWriterDirichlet02dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_level
void
void set_level (size_t level)
void set_level (size_t level)<br><br>Member function of class <b>GridFunctionVectorWriterDirichlet02dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
;
class
GridFunctionVectorWriterDirichlet02dCPU3
IVectorWriterCPU3 
Classgroup <b>GridFunctionVectorWriterDirichlet0</b><br>Registry Group: <b>/ug4/Discretization/Output</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU3;</b><br>Inheritance: <a href="IVectorWriterCPU3.html">IVectorWriterCPU3</a> <a href="GridFunctionVectorWriterDirichlet02dCPU3.html">GridFunctionVectorWriterDirichlet02dCPU3</a> <br><table><tr><td colspan=2><h3>GridFunctionVectorWriterDirichlet0 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionVectorWriterDirichlet02dCPU3 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunctionVectorWriterDirichlet0 Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="IConstraintCPU1.html">IConstraint</a>&gt; postProcess, <a href="ApproximationSpace2d.html">ApproximationSpace</a> *approxSpace)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_level (size_t level)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IVectorWriter Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (<a href="VectorCPU1.html">Vector</a> *v)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: updates the vector v<br/></td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionVectorWriterDirichlet02dCPU3

GridFunctionVectorWriterDirichlet02dCPU3 ()
GridFunctionVectorWriterDirichlet02dCPU3 ()<br>Constructor of class <b>GridFunctionVectorWriterDirichlet02dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
init
void
void init (SmartPtr<IConstraint> postProcess, ApproximationSpace *approxSpace)
void init (SmartPtr&lt;<a href="IConstraintCPU1.html">IConstraint</a>&gt; postProcess, <a href="ApproximationSpace2d.html">ApproximationSpace</a> *approxSpace)<br><br>Member function of class <b>GridFunctionVectorWriterDirichlet02dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_level
void
void set_level (size_t level)
void set_level (size_t level)<br><br>Member function of class <b>GridFunctionVectorWriterDirichlet02dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
;
class
GridFunctionVectorWriterDirichlet03dCPU1
IVectorWriterCPU1 
Classgroup <b>GridFunctionVectorWriterDirichlet0</b><br>Registry Group: <b>/ug4/Discretization/Output</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU1;</b><br>Inheritance: <a href="IVectorWriterCPU1.html">IVectorWriterCPU1</a> <a href="GridFunctionVectorWriterDirichlet03dCPU1.html">GridFunctionVectorWriterDirichlet03dCPU1</a> <br><table><tr><td colspan=2><h3>GridFunctionVectorWriterDirichlet0 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionVectorWriterDirichlet03dCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunctionVectorWriterDirichlet0 Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="IConstraintCPU1.html">IConstraint</a>&gt; postProcess, <a href="ApproximationSpace2d.html">ApproximationSpace</a> *approxSpace)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_level (size_t level)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IVectorWriter Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (<a href="VectorCPU1.html">Vector</a> *v)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: updates the vector v<br/></td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionVectorWriterDirichlet03dCPU1

GridFunctionVectorWriterDirichlet03dCPU1 ()
GridFunctionVectorWriterDirichlet03dCPU1 ()<br>Constructor of class <b>GridFunctionVectorWriterDirichlet03dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
init
void
void init (SmartPtr<IConstraint> postProcess, ApproximationSpace *approxSpace)
void init (SmartPtr&lt;<a href="IConstraintCPU1.html">IConstraint</a>&gt; postProcess, <a href="ApproximationSpace2d.html">ApproximationSpace</a> *approxSpace)<br><br>Member function of class <b>GridFunctionVectorWriterDirichlet03dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_level
void
void set_level (size_t level)
void set_level (size_t level)<br><br>Member function of class <b>GridFunctionVectorWriterDirichlet03dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
;
class
GridFunctionVectorWriterDirichlet03dCPU2
IVectorWriterCPU2 
Classgroup <b>GridFunctionVectorWriterDirichlet0</b><br>Registry Group: <b>/ug4/Discretization/Output</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU2;</b><br>Inheritance: <a href="IVectorWriterCPU2.html">IVectorWriterCPU2</a> <a href="GridFunctionVectorWriterDirichlet03dCPU2.html">GridFunctionVectorWriterDirichlet03dCPU2</a> <br><table><tr><td colspan=2><h3>GridFunctionVectorWriterDirichlet0 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionVectorWriterDirichlet03dCPU2 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunctionVectorWriterDirichlet0 Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="IConstraintCPU1.html">IConstraint</a>&gt; postProcess, <a href="ApproximationSpace2d.html">ApproximationSpace</a> *approxSpace)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_level (size_t level)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IVectorWriter Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (<a href="VectorCPU1.html">Vector</a> *v)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: updates the vector v<br/></td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionVectorWriterDirichlet03dCPU2

GridFunctionVectorWriterDirichlet03dCPU2 ()
GridFunctionVectorWriterDirichlet03dCPU2 ()<br>Constructor of class <b>GridFunctionVectorWriterDirichlet03dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
init
void
void init (SmartPtr<IConstraint> postProcess, ApproximationSpace *approxSpace)
void init (SmartPtr&lt;<a href="IConstraintCPU1.html">IConstraint</a>&gt; postProcess, <a href="ApproximationSpace2d.html">ApproximationSpace</a> *approxSpace)<br><br>Member function of class <b>GridFunctionVectorWriterDirichlet03dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_level
void
void set_level (size_t level)
void set_level (size_t level)<br><br>Member function of class <b>GridFunctionVectorWriterDirichlet03dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
;
class
GridFunctionVectorWriterDirichlet03dCPU3
IVectorWriterCPU3 
Classgroup <b>GridFunctionVectorWriterDirichlet0</b><br>Registry Group: <b>/ug4/Discretization/Output</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU3;</b><br>Inheritance: <a href="IVectorWriterCPU3.html">IVectorWriterCPU3</a> <a href="GridFunctionVectorWriterDirichlet03dCPU3.html">GridFunctionVectorWriterDirichlet03dCPU3</a> <br><table><tr><td colspan=2><h3>GridFunctionVectorWriterDirichlet0 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionVectorWriterDirichlet03dCPU3 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunctionVectorWriterDirichlet0 Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="IConstraintCPU1.html">IConstraint</a>&gt; postProcess, <a href="ApproximationSpace2d.html">ApproximationSpace</a> *approxSpace)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_level (size_t level)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IVectorWriter Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (<a href="VectorCPU1.html">Vector</a> *v)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: updates the vector v<br/></td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionVectorWriterDirichlet03dCPU3

GridFunctionVectorWriterDirichlet03dCPU3 ()
GridFunctionVectorWriterDirichlet03dCPU3 ()<br>Constructor of class <b>GridFunctionVectorWriterDirichlet03dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
init
void
void init (SmartPtr<IConstraint> postProcess, ApproximationSpace *approxSpace)
void init (SmartPtr&lt;<a href="IConstraintCPU1.html">IConstraint</a>&gt; postProcess, <a href="ApproximationSpace2d.html">ApproximationSpace</a> *approxSpace)<br><br>Member function of class <b>GridFunctionVectorWriterDirichlet03dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_level
void
void set_level (size_t level)
void set_level (size_t level)<br><br>Member function of class <b>GridFunctionVectorWriterDirichlet03dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
;
class
GridLevel

Registry Group: <b>/ug4/Discretization</b><br>class has constructor. <br><table><tr><td colspan=2><h3>GridLevel Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridLevel ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridLevel (integer Level)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridLevel (integer Level, Type, std_string )</td></tr><tr><td><br></td></tr></table>
constructor
GridLevel

GridLevel ()
GridLevel ()<br>Constructor of class <b>GridLevel</b><br>Registry Group: <b>/ug4/Discretization</b>
constructor
GridLevel

GridLevel (integer Level)
GridLevel (integer Level)<br>Constructor of class <b>GridLevel</b><br>Registry Group: <b>/ug4/Discretization</b>
constructor
GridLevel

GridLevel (integer Level, Type, std_string )
GridLevel (integer Level, Type, std_string )<br>Constructor of class <b>GridLevel</b><br>Registry Group: <b>/ug4/Discretization</b>
;
class
GridObject
Grid 
Registry Group: <b>/ug4/Grid</b><br>class has constructor. <br>Inheritance: <a href="Grid.html">Grid</a> <a href="GridObject.html">GridObject</a> <br><table><tr><td colspan=2><h3>GridObject Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridObject ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top><a href="Grid.html">Grid</a> *</td><td class="memItemRight" valign=bottom>grid ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top><a href="SubsetHandler.html">SubsetHandler</a> *</td><td class="memItemRight" valign=bottom>subset_handler ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Grid Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>Grid ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited Grid Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear_geometry ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>reserve_edges (size_t num)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>reserve_faces (size_t num)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>reserve_vertices (size_t num)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>reserve_volumes (size_t num)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited Grid Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_edges ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_faces ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_hexahedrons ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_prisms ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_pyramids ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_quadrilaterals ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_tetrahedrons ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_triangles ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_vertices ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_volumes ()</td></tr><tr><td><br></td></tr></table>
constructor
GridObject

GridObject ()
GridObject ()<br>Constructor of class <b>GridObject</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
grid
Grid*
Grid *grid ()
<a href="Grid.html">Grid</a> *grid ()<br><br>Member function of class <b>GridObject</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
subset_handler
SubsetHandler*
SubsetHandler *subset_handler ()
<a href="SubsetHandler.html">SubsetHandler</a> *subset_handler ()<br><br>Member function of class <b>GridObject</b><br>Registry Group: <b>/ug4/Grid</b>
;
class
HangingNodeRefiner_Grid
IRefiner 
Registry Group: <b>/ug4/Grid</b><br>class has constructor. <br>Inheritance: <a href="IRefiner.html">IRefiner</a> <a href="HangingNodeRefiner_Grid.html">HangingNodeRefiner_Grid</a> <br><table><tr><td colspan=2><h3>HangingNodeRefiner_Grid Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>HangingNodeRefiner_Grid ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>HangingNodeRefiner_Grid Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assign_grid (<a href="Grid.html">Grid</a> *g)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IRefiner Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear_marks ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>coarsen ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>refine ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>save_marks_to_file (c_string filename)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_adjusted_marks_debug_filename (c_string filename)</td></tr><tr><td><br></td></tr></table>
constructor
HangingNodeRefiner_Grid

HangingNodeRefiner_Grid ()
HangingNodeRefiner_Grid ()<br>Constructor of class <b>HangingNodeRefiner_Grid</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
assign_grid
void
void assign_grid (Grid *g)
void assign_grid (<a href="Grid.html">Grid</a> *g)<br><br>Member function of class <b>HangingNodeRefiner_Grid</b><br>Registry Group: <b>/ug4/Grid</b>
;
class
HangingNodeRefiner_MultiGrid
IRefiner 
Registry Group: <b>/ug4/Grid</b><br>class has constructor. <br>Inheritance: <a href="IRefiner.html">IRefiner</a> <a href="HangingNodeRefiner_MultiGrid.html">HangingNodeRefiner_MultiGrid</a> <br><table><tr><td colspan=2><h3>HangingNodeRefiner_MultiGrid Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>HangingNodeRefiner_MultiGrid ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>HangingNodeRefiner_MultiGrid Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assign_grid (<a href="MultiGrid.html">MultiGrid</a> *mg)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IRefiner Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear_marks ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>coarsen ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>refine ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>save_marks_to_file (c_string filename)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_adjusted_marks_debug_filename (c_string filename)</td></tr><tr><td><br></td></tr></table>
constructor
HangingNodeRefiner_MultiGrid

HangingNodeRefiner_MultiGrid ()
HangingNodeRefiner_MultiGrid ()<br>Constructor of class <b>HangingNodeRefiner_MultiGrid</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
assign_grid
void
void assign_grid (MultiGrid *mg)
void assign_grid (<a href="MultiGrid.html">MultiGrid</a> *mg)<br><br>Member function of class <b>HangingNodeRefiner_MultiGrid</b><br>Registry Group: <b>/ug4/Grid</b>
;
class
IApproximationSpace
FunctionPattern DoFDistributionInfo 
Registry Group: <b>/ug4/Discretization</b><br>class has no constructor. <br>Inheritance: <a href="FunctionPattern.html">FunctionPattern</a> <a href="DoFDistributionInfo.html">DoFDistributionInfo</a> <a href="IApproximationSpace.html">IApproximationSpace</a> <br><table><tr><td colspan=2><h3>IApproximationSpace Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>defragment ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init_levels ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init_surfaces ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init_top_surface ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>IApproximationSpace Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_levels ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print_layout_statistic (integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print_layout_statistic ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print_statistic (integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print_statistic ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DoFDistributionInfo Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print_local_dof_statistic (integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print_local_dof_statistic ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited FunctionPattern Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_fct (c_string Name, c_string Type, integer Order, c_string Subsets)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Adds a function to the Function Pattern<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">help: currently no help available<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_fct (c_string Name, c_string Type, integer Order)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Adds a function to the Function Pattern<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">help: currently no help available<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_fct (c_string Name, c_string Type)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Adds a function to the Function Pattern<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">help: currently no help available<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_fct (std::vector&ltstd_string &gtName, c_string Type, integer Order, std::vector&ltstd_string &gtSubsets)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Adds a function to the Function Pattern<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">help: currently no help available<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_fct (std::vector&ltstd_string &gtName, c_string Type, integer Order)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Adds a function to the Function Pattern<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">help: currently no help available<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_fct (std::vector&ltstd_string &gtName, c_string Type)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Adds a function to the Function Pattern<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">help: currently no help available<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited FunctionPattern Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>dim (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>c_string </td><td class="memItemRight" valign=bottom>name (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_fct ()</td></tr><tr><td><br></td></tr></table>
memberfunction
init_levels
void
void init_levels ()
void init_levels ()<br><br>Member function of class <b>IApproximationSpace</b><br>Registry Group: <b>/ug4/Discretization</b>
memberfunction
init_surfaces
void
void init_surfaces ()
void init_surfaces ()<br><br>Member function of class <b>IApproximationSpace</b><br>Registry Group: <b>/ug4/Discretization</b>
memberfunction
init_top_surface
void
void init_top_surface ()
void init_top_surface ()<br><br>Member function of class <b>IApproximationSpace</b><br>Registry Group: <b>/ug4/Discretization</b>
memberfunction
defragment
void
void defragment ()
void defragment ()<br><br>Member function of class <b>IApproximationSpace</b><br>Registry Group: <b>/ug4/Discretization</b>
memberfunction
print_statistic
void
void print_statistic (integer ) const
void print_statistic (integer )<br><br>Member function of class <b>IApproximationSpace</b><br>Registry Group: <b>/ug4/Discretization</b>
memberfunction
print_statistic
void
void print_statistic () const
void print_statistic ()<br><br>Member function of class <b>IApproximationSpace</b><br>Registry Group: <b>/ug4/Discretization</b>
memberfunction
print_layout_statistic
void
void print_layout_statistic (integer ) const
void print_layout_statistic (integer )<br><br>Member function of class <b>IApproximationSpace</b><br>Registry Group: <b>/ug4/Discretization</b>
memberfunction
print_layout_statistic
void
void print_layout_statistic () const
void print_layout_statistic ()<br><br>Member function of class <b>IApproximationSpace</b><br>Registry Group: <b>/ug4/Discretization</b>
memberfunction
num_levels
unknown
size_t num_levels () const
size_t num_levels ()<br><br>Member function of class <b>IApproximationSpace</b><br>Registry Group: <b>/ug4/Discretization</b>
;
class
IAssembleCPU1

Classgroup <b>IAssemble</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has no constructor.  Tag <b>alg=CPU1;</b><br><table><tr><td colspan=2><h3>IAssemble Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_matrix_rhs (<a href="MatrixCPU1.html">Matrix</a> *, <a href="VectorCPU1.html">Vector</a> *, std::vector&ltSmartPtr&lt;<a href="MultiIndex2.html">MultiIndex2</a>&gt; &gt, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on grid level.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_mass_matrix (<a href="MatrixCPU1.html">Matrix</a> *M, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles mass matrix on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_stiffness_matrix (<a href="MatrixCPU1.html">Matrix</a> *A, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles stiffness matrix on surface grid<br/></td></tr><tr><td><br></td></tr></table>
memberfunction
assemble_jacobian
void
void assemble_jacobian (Matrix *J(u), const Vector *u)
void assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>IAssembleCPU1</b><br>tooltip: assembles jacobian on surface grid<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_jacobian
void
void assemble_jacobian (Matrix *J(u), const Vector *u, const GridLevel *GridLevel)
void assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)<br><br>Member function of class <b>IAssembleCPU1</b><br>tooltip: assembles jacobian on grid level<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_defect
void
void assemble_defect (Vector *d(u), const Vector *u)
void assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>IAssembleCPU1</b><br>tooltip: Assembles Defect on surface grid.<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_defect
void
void assemble_defect (Vector *d(u), const Vector *u, const GridLevel *GridLevel)
void assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)<br><br>Member function of class <b>IAssembleCPU1</b><br>tooltip: Assembles Defect on grid level<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_linear
void
void assemble_linear (Matrix *A, Vector *b)
void assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b)<br><br>Member function of class <b>IAssembleCPU1</b><br>tooltip: Assembles Matrix and rhs on surface grid.<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_linear
void
void assemble_linear (Matrix *A, Vector *b, const GridLevel *GridLevel)
void assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b, const <a href="GridLevel.html">GridLevel</a> *GridLevel)<br><br>Member function of class <b>IAssembleCPU1</b><br>tooltip: Assembles Matrix and rhs on grid level.<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_rhs
void
void assemble_rhs (Vector *rhs, const Vector *u)
void assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>IAssembleCPU1</b><br>tooltip: assembles right-hand side on surface grid<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_rhs
void
void assemble_rhs (Vector *rhs, const Vector *u, const GridLevel *GridLevel)
void assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)<br><br>Member function of class <b>IAssembleCPU1</b><br>tooltip: assembles right-hand side on grid level<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_rhs
void
void assemble_rhs (Vector *rhs)
void assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs)<br><br>Member function of class <b>IAssembleCPU1</b><br>tooltip: assembles right-hand side on surface grid for linear case<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_rhs
void
void assemble_rhs (Vector *rhs, const GridLevel *)
void assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="GridLevel.html">GridLevel</a> *)<br><br>Member function of class <b>IAssembleCPU1</b><br>tooltip: assembles right-hand side on grid level for linear case<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_stiffness_matrix
void
void assemble_stiffness_matrix (Matrix *A, const Vector *u)
void assemble_stiffness_matrix (<a href="MatrixCPU1.html">Matrix</a> *A, const <a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>IAssembleCPU1</b><br>tooltip: assembles stiffness matrix on surface grid<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_mass_matrix
void
void assemble_mass_matrix (Matrix *M, const Vector *u)
void assemble_mass_matrix (<a href="MatrixCPU1.html">Matrix</a> *M, const <a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>IAssembleCPU1</b><br>tooltip: assembles mass matrix on surface grid<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
adjust_solution
void
void adjust_solution (Vector *)
void adjust_solution (<a href="VectorCPU1.html">Vector</a> *)<br><br>Member function of class <b>IAssembleCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
adjust_solution
void
void adjust_solution (Vector *, const GridLevel *)
void adjust_solution (<a href="VectorCPU1.html">Vector</a> *, const <a href="GridLevel.html">GridLevel</a> *)<br><br>Member function of class <b>IAssembleCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
adjust_matrix_rhs
void
void adjust_matrix_rhs (Matrix *, Vector *, std::vector<SmartPtr<MultiIndex2> >, const Vector *)
void adjust_matrix_rhs (<a href="MatrixCPU1.html">Matrix</a> *, <a href="VectorCPU1.html">Vector</a> *, std::vector&ltSmartPtr&lt;<a href="MultiIndex2.html">MultiIndex2</a>&gt; &gt, const <a href="VectorCPU1.html">Vector</a> *)<br><br>Member function of class <b>IAssembleCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
IAssembleCPU2

Classgroup <b>IAssemble</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has no constructor.  Tag <b>alg=CPU2;</b><br><table><tr><td colspan=2><h3>IAssemble Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_matrix_rhs (<a href="MatrixCPU1.html">Matrix</a> *, <a href="VectorCPU1.html">Vector</a> *, std::vector&ltSmartPtr&lt;<a href="MultiIndex2.html">MultiIndex2</a>&gt; &gt, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on grid level.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_mass_matrix (<a href="MatrixCPU1.html">Matrix</a> *M, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles mass matrix on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_stiffness_matrix (<a href="MatrixCPU1.html">Matrix</a> *A, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles stiffness matrix on surface grid<br/></td></tr><tr><td><br></td></tr></table>
memberfunction
assemble_jacobian
void
void assemble_jacobian (Matrix *J(u), const Vector *u)
void assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>IAssembleCPU2</b><br>tooltip: assembles jacobian on surface grid<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_jacobian
void
void assemble_jacobian (Matrix *J(u), const Vector *u, const GridLevel *GridLevel)
void assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)<br><br>Member function of class <b>IAssembleCPU2</b><br>tooltip: assembles jacobian on grid level<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_defect
void
void assemble_defect (Vector *d(u), const Vector *u)
void assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>IAssembleCPU2</b><br>tooltip: Assembles Defect on surface grid.<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_defect
void
void assemble_defect (Vector *d(u), const Vector *u, const GridLevel *GridLevel)
void assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)<br><br>Member function of class <b>IAssembleCPU2</b><br>tooltip: Assembles Defect on grid level<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_linear
void
void assemble_linear (Matrix *A, Vector *b)
void assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b)<br><br>Member function of class <b>IAssembleCPU2</b><br>tooltip: Assembles Matrix and rhs on surface grid.<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_linear
void
void assemble_linear (Matrix *A, Vector *b, const GridLevel *GridLevel)
void assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b, const <a href="GridLevel.html">GridLevel</a> *GridLevel)<br><br>Member function of class <b>IAssembleCPU2</b><br>tooltip: Assembles Matrix and rhs on grid level.<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_rhs
void
void assemble_rhs (Vector *rhs, const Vector *u)
void assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>IAssembleCPU2</b><br>tooltip: assembles right-hand side on surface grid<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_rhs
void
void assemble_rhs (Vector *rhs, const Vector *u, const GridLevel *GridLevel)
void assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)<br><br>Member function of class <b>IAssembleCPU2</b><br>tooltip: assembles right-hand side on grid level<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_rhs
void
void assemble_rhs (Vector *rhs)
void assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs)<br><br>Member function of class <b>IAssembleCPU2</b><br>tooltip: assembles right-hand side on surface grid for linear case<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_rhs
void
void assemble_rhs (Vector *rhs, const GridLevel *)
void assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="GridLevel.html">GridLevel</a> *)<br><br>Member function of class <b>IAssembleCPU2</b><br>tooltip: assembles right-hand side on grid level for linear case<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_stiffness_matrix
void
void assemble_stiffness_matrix (Matrix *A, const Vector *u)
void assemble_stiffness_matrix (<a href="MatrixCPU1.html">Matrix</a> *A, const <a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>IAssembleCPU2</b><br>tooltip: assembles stiffness matrix on surface grid<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_mass_matrix
void
void assemble_mass_matrix (Matrix *M, const Vector *u)
void assemble_mass_matrix (<a href="MatrixCPU1.html">Matrix</a> *M, const <a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>IAssembleCPU2</b><br>tooltip: assembles mass matrix on surface grid<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
adjust_solution
void
void adjust_solution (Vector *)
void adjust_solution (<a href="VectorCPU1.html">Vector</a> *)<br><br>Member function of class <b>IAssembleCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
adjust_solution
void
void adjust_solution (Vector *, const GridLevel *)
void adjust_solution (<a href="VectorCPU1.html">Vector</a> *, const <a href="GridLevel.html">GridLevel</a> *)<br><br>Member function of class <b>IAssembleCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
adjust_matrix_rhs
void
void adjust_matrix_rhs (Matrix *, Vector *, std::vector<SmartPtr<MultiIndex2> >, const Vector *)
void adjust_matrix_rhs (<a href="MatrixCPU1.html">Matrix</a> *, <a href="VectorCPU1.html">Vector</a> *, std::vector&ltSmartPtr&lt;<a href="MultiIndex2.html">MultiIndex2</a>&gt; &gt, const <a href="VectorCPU1.html">Vector</a> *)<br><br>Member function of class <b>IAssembleCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
IAssembleCPU3

Classgroup <b>IAssemble</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has no constructor.  Tag <b>alg=CPU3;</b><br><table><tr><td colspan=2><h3>IAssemble Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_matrix_rhs (<a href="MatrixCPU1.html">Matrix</a> *, <a href="VectorCPU1.html">Vector</a> *, std::vector&ltSmartPtr&lt;<a href="MultiIndex2.html">MultiIndex2</a>&gt; &gt, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on grid level.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_mass_matrix (<a href="MatrixCPU1.html">Matrix</a> *M, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles mass matrix on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_stiffness_matrix (<a href="MatrixCPU1.html">Matrix</a> *A, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles stiffness matrix on surface grid<br/></td></tr><tr><td><br></td></tr></table>
memberfunction
assemble_jacobian
void
void assemble_jacobian (Matrix *J(u), const Vector *u)
void assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>IAssembleCPU3</b><br>tooltip: assembles jacobian on surface grid<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_jacobian
void
void assemble_jacobian (Matrix *J(u), const Vector *u, const GridLevel *GridLevel)
void assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)<br><br>Member function of class <b>IAssembleCPU3</b><br>tooltip: assembles jacobian on grid level<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_defect
void
void assemble_defect (Vector *d(u), const Vector *u)
void assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>IAssembleCPU3</b><br>tooltip: Assembles Defect on surface grid.<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_defect
void
void assemble_defect (Vector *d(u), const Vector *u, const GridLevel *GridLevel)
void assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)<br><br>Member function of class <b>IAssembleCPU3</b><br>tooltip: Assembles Defect on grid level<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_linear
void
void assemble_linear (Matrix *A, Vector *b)
void assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b)<br><br>Member function of class <b>IAssembleCPU3</b><br>tooltip: Assembles Matrix and rhs on surface grid.<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_linear
void
void assemble_linear (Matrix *A, Vector *b, const GridLevel *GridLevel)
void assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b, const <a href="GridLevel.html">GridLevel</a> *GridLevel)<br><br>Member function of class <b>IAssembleCPU3</b><br>tooltip: Assembles Matrix and rhs on grid level.<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_rhs
void
void assemble_rhs (Vector *rhs, const Vector *u)
void assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>IAssembleCPU3</b><br>tooltip: assembles right-hand side on surface grid<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_rhs
void
void assemble_rhs (Vector *rhs, const Vector *u, const GridLevel *GridLevel)
void assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)<br><br>Member function of class <b>IAssembleCPU3</b><br>tooltip: assembles right-hand side on grid level<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_rhs
void
void assemble_rhs (Vector *rhs)
void assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs)<br><br>Member function of class <b>IAssembleCPU3</b><br>tooltip: assembles right-hand side on surface grid for linear case<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_rhs
void
void assemble_rhs (Vector *rhs, const GridLevel *)
void assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="GridLevel.html">GridLevel</a> *)<br><br>Member function of class <b>IAssembleCPU3</b><br>tooltip: assembles right-hand side on grid level for linear case<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_stiffness_matrix
void
void assemble_stiffness_matrix (Matrix *A, const Vector *u)
void assemble_stiffness_matrix (<a href="MatrixCPU1.html">Matrix</a> *A, const <a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>IAssembleCPU3</b><br>tooltip: assembles stiffness matrix on surface grid<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_mass_matrix
void
void assemble_mass_matrix (Matrix *M, const Vector *u)
void assemble_mass_matrix (<a href="MatrixCPU1.html">Matrix</a> *M, const <a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>IAssembleCPU3</b><br>tooltip: assembles mass matrix on surface grid<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
adjust_solution
void
void adjust_solution (Vector *)
void adjust_solution (<a href="VectorCPU1.html">Vector</a> *)<br><br>Member function of class <b>IAssembleCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
adjust_solution
void
void adjust_solution (Vector *, const GridLevel *)
void adjust_solution (<a href="VectorCPU1.html">Vector</a> *, const <a href="GridLevel.html">GridLevel</a> *)<br><br>Member function of class <b>IAssembleCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
adjust_matrix_rhs
void
void adjust_matrix_rhs (Matrix *, Vector *, std::vector<SmartPtr<MultiIndex2> >, const Vector *)
void adjust_matrix_rhs (<a href="MatrixCPU1.html">Matrix</a> *, <a href="VectorCPU1.html">Vector</a> *, std::vector&ltSmartPtr&lt;<a href="MultiIndex2.html">MultiIndex2</a>&gt; &gt, const <a href="VectorCPU1.html">Vector</a> *)<br><br>Member function of class <b>IAssembleCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
IConstraintCPU1

Classgroup <b>IConstraint</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has no constructor.  Tag <b>alg=CPU1;</b><br><table></table>
;
class
IConstraintCPU2

Classgroup <b>IConstraint</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has no constructor.  Tag <b>alg=CPU2;</b><br><table></table>
;
class
IConstraintCPU3

Classgroup <b>IConstraint</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has no constructor.  Tag <b>alg=CPU3;</b><br><table></table>
;
class
IConvectionShapes1d

Classgroup <b>IConvectionShapes</b><br>Registry Group: <b>/ug4/SpatialDisc/Upwind</b><br>class has no constructor.  Tag <b>dim=1d;</b><br><table></table>
;
class
IConvectionShapes2d

Classgroup <b>IConvectionShapes</b><br>Registry Group: <b>/ug4/SpatialDisc/Upwind</b><br>class has no constructor.  Tag <b>dim=2d;</b><br><table></table>
;
class
IConvectionShapes3d

Classgroup <b>IConvectionShapes</b><br>Registry Group: <b>/ug4/SpatialDisc/Upwind</b><br>class has no constructor.  Tag <b>dim=3d;</b><br><table></table>
;
class
IConvergenceCheckCPU1

Classgroup <b>IConvergenceCheck</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>alg=CPU1;</b><br><table></table>
;
class
IConvergenceCheckCPU2

Classgroup <b>IConvergenceCheck</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>alg=CPU2;</b><br><table></table>
;
class
IConvergenceCheckCPU3

Classgroup <b>IConvergenceCheck</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>alg=CPU3;</b><br><table></table>
;
class
IDampingCPU1

Classgroup <b>IDamping</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has no constructor.  Tag <b>alg=CPU1;</b><br><table></table>
;
class
IDampingCPU2

Classgroup <b>IDamping</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has no constructor.  Tag <b>alg=CPU2;</b><br><table></table>
;
class
IDampingCPU3

Classgroup <b>IDamping</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has no constructor.  Tag <b>alg=CPU3;</b><br><table></table>
;
class
IDebugWriterCPU1
IVectorDebugWriterCPU1 
Classgroup <b>IDebugWriter</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>alg=CPU1;</b><br>Inheritance: <a href="IVectorDebugWriterCPU1.html">IVectorDebugWriterCPU1</a> <a href="IDebugWriterCPU1.html">IDebugWriterCPU1</a> <br><table></table>
;
class
IDebugWriterCPU2
IVectorDebugWriterCPU2 
Classgroup <b>IDebugWriter</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>alg=CPU2;</b><br>Inheritance: <a href="IVectorDebugWriterCPU2.html">IVectorDebugWriterCPU2</a> <a href="IDebugWriterCPU2.html">IDebugWriterCPU2</a> <br><table></table>
;
class
IDebugWriterCPU3
IVectorDebugWriterCPU3 
Classgroup <b>IDebugWriter</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>alg=CPU3;</b><br>Inheritance: <a href="IVectorDebugWriterCPU3.html">IVectorDebugWriterCPU3</a> <a href="IDebugWriterCPU3.html">IDebugWriterCPU3</a> <br><table></table>
;
class
IDiscretizationItem1dCPU1

Classgroup <b>IDiscretizationItem</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has no constructor.  Tag <b>dim=1d;alg=CPU1;</b><br><table></table>
;
class
IDiscretizationItem1dCPU2

Classgroup <b>IDiscretizationItem</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has no constructor.  Tag <b>dim=1d;alg=CPU2;</b><br><table></table>
;
class
IDiscretizationItem1dCPU3

Classgroup <b>IDiscretizationItem</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has no constructor.  Tag <b>dim=1d;alg=CPU3;</b><br><table></table>
;
class
IDiscretizationItem2dCPU1

Classgroup <b>IDiscretizationItem</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has no constructor.  Tag <b>dim=2d;alg=CPU1;</b><br><table></table>
;
class
IDiscretizationItem2dCPU2

Classgroup <b>IDiscretizationItem</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has no constructor.  Tag <b>dim=2d;alg=CPU2;</b><br><table></table>
;
class
IDiscretizationItem2dCPU3

Classgroup <b>IDiscretizationItem</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has no constructor.  Tag <b>dim=2d;alg=CPU3;</b><br><table></table>
;
class
IDiscretizationItem3dCPU1

Classgroup <b>IDiscretizationItem</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has no constructor.  Tag <b>dim=3d;alg=CPU1;</b><br><table></table>
;
class
IDiscretizationItem3dCPU2

Classgroup <b>IDiscretizationItem</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has no constructor.  Tag <b>dim=3d;alg=CPU2;</b><br><table></table>
;
class
IDiscretizationItem3dCPU3

Classgroup <b>IDiscretizationItem</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has no constructor.  Tag <b>dim=3d;alg=CPU3;</b><br><table></table>
;
class
IDomain

Registry Group: <b>/ug4/Domain</b><br>class has no constructor. <br><table><tr><td colspan=2><h3>IDomain Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="MultiGrid.html">MultiGrid</a>&gt; </td><td class="memItemRight" valign=bottom>grid ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="MGSubsetHandler.html">MGSubsetHandler</a>&gt; </td><td class="memItemRight" valign=bottom>subset_handler ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>IDomain Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const <a href="DomainInfo.html">DomainInfo</a> *</td><td class="memItemRight" valign=bottom>domain_info ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns DomainInfo<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td><br></td></tr></table>
memberfunction
subset_handler
SmartPtr<MGSubsetHandler>
SmartPtr<MGSubsetHandler> subset_handler ()
SmartPtr&lt;<a href="MGSubsetHandler.html">MGSubsetHandler</a>&gt; subset_handler ()<br><br>Member function of class <b>IDomain</b><br>Registry Group: <b>/ug4/Domain</b>
memberfunction
grid
SmartPtr<MultiGrid>
SmartPtr<MultiGrid> grid ()
SmartPtr&lt;<a href="MultiGrid.html">MultiGrid</a>&gt; grid ()<br><br>Member function of class <b>IDomain</b><br>returns grid<br>Registry Group: <b>/ug4/Domain</b>
memberfunction
get_dim
integer
integer get_dim () const
integer get_dim ()<br><br>Member function of class <b>IDomain</b><br>Registry Group: <b>/ug4/Domain</b>
memberfunction
domain_info
const DomainInfo*
const DomainInfo *domain_info () const
const <a href="DomainInfo.html">DomainInfo</a> *domain_info ()<br><br>Member function of class <b>IDomain</b><br>returns DomainInfo<br>Registry Group: <b>/ug4/Domain</b>
;
class
IDomainConstraint1dCPU1
IConstraintCPU1 
Classgroup <b>IDomainConstraint</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has no constructor.  Tag <b>dim=1d;alg=CPU1;</b><br>Inheritance: <a href="IConstraintCPU1.html">IConstraintCPU1</a> <a href="IDomainConstraint1dCPU1.html">IDomainConstraint1dCPU1</a> <br><table></table>
;
class
IDomainConstraint1dCPU2
IConstraintCPU2 
Classgroup <b>IDomainConstraint</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has no constructor.  Tag <b>dim=1d;alg=CPU2;</b><br>Inheritance: <a href="IConstraintCPU2.html">IConstraintCPU2</a> <a href="IDomainConstraint1dCPU2.html">IDomainConstraint1dCPU2</a> <br><table></table>
;
class
IDomainConstraint1dCPU3
IConstraintCPU3 
Classgroup <b>IDomainConstraint</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has no constructor.  Tag <b>dim=1d;alg=CPU3;</b><br>Inheritance: <a href="IConstraintCPU3.html">IConstraintCPU3</a> <a href="IDomainConstraint1dCPU3.html">IDomainConstraint1dCPU3</a> <br><table></table>
;
class
IDomainConstraint2dCPU1
IConstraintCPU1 
Classgroup <b>IDomainConstraint</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has no constructor.  Tag <b>dim=2d;alg=CPU1;</b><br>Inheritance: <a href="IConstraintCPU1.html">IConstraintCPU1</a> <a href="IDomainConstraint2dCPU1.html">IDomainConstraint2dCPU1</a> <br><table></table>
;
class
IDomainConstraint2dCPU2
IConstraintCPU2 
Classgroup <b>IDomainConstraint</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has no constructor.  Tag <b>dim=2d;alg=CPU2;</b><br>Inheritance: <a href="IConstraintCPU2.html">IConstraintCPU2</a> <a href="IDomainConstraint2dCPU2.html">IDomainConstraint2dCPU2</a> <br><table></table>
;
class
IDomainConstraint2dCPU3
IConstraintCPU3 
Classgroup <b>IDomainConstraint</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has no constructor.  Tag <b>dim=2d;alg=CPU3;</b><br>Inheritance: <a href="IConstraintCPU3.html">IConstraintCPU3</a> <a href="IDomainConstraint2dCPU3.html">IDomainConstraint2dCPU3</a> <br><table></table>
;
class
IDomainConstraint3dCPU1
IConstraintCPU1 
Classgroup <b>IDomainConstraint</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has no constructor.  Tag <b>dim=3d;alg=CPU1;</b><br>Inheritance: <a href="IConstraintCPU1.html">IConstraintCPU1</a> <a href="IDomainConstraint3dCPU1.html">IDomainConstraint3dCPU1</a> <br><table></table>
;
class
IDomainConstraint3dCPU2
IConstraintCPU2 
Classgroup <b>IDomainConstraint</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has no constructor.  Tag <b>dim=3d;alg=CPU2;</b><br>Inheritance: <a href="IConstraintCPU2.html">IConstraintCPU2</a> <a href="IDomainConstraint3dCPU2.html">IDomainConstraint3dCPU2</a> <br><table></table>
;
class
IDomainConstraint3dCPU3
IConstraintCPU3 
Classgroup <b>IDomainConstraint</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has no constructor.  Tag <b>dim=3d;alg=CPU3;</b><br>Inheritance: <a href="IConstraintCPU3.html">IConstraintCPU3</a> <a href="IDomainConstraint3dCPU3.html">IDomainConstraint3dCPU3</a> <br><table></table>
;
class
IDomainDecompositionInfo

Registry Group: <b>/ug4/Discretization</b><br>class has no constructor. <br><table></table>
;
class
IDomainDiscretizationCPU1
IAssembleCPU1 
Classgroup <b>IDomainDiscretization</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has no constructor.  Tag <b>alg=CPU1;</b><br>Inheritance: <a href="IAssembleCPU1.html">IAssembleCPU1</a> <a href="IDomainDiscretizationCPU1.html">IDomainDiscretizationCPU1</a> <br><table><tr><td colspan=2><h3>IDomainDiscretization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *, const SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IAssemble Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_matrix_rhs (<a href="MatrixCPU1.html">Matrix</a> *, <a href="VectorCPU1.html">Vector</a> *, std::vector&ltSmartPtr&lt;<a href="MultiIndex2.html">MultiIndex2</a>&gt; &gt, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on grid level.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_mass_matrix (<a href="MatrixCPU1.html">Matrix</a> *M, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles mass matrix on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_stiffness_matrix (<a href="MatrixCPU1.html">Matrix</a> *A, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles stiffness matrix on surface grid<br/></td></tr><tr><td><br></td></tr></table>
memberfunction
assemble_jacobian
void
void assemble_jacobian (Matrix *, const SmartPtr<SolutionTimeSeries> , number )
void assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *, const SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; , number )<br><br>Member function of class <b>IDomainDiscretizationCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
IDomainDiscretizationCPU2
IAssembleCPU2 
Classgroup <b>IDomainDiscretization</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has no constructor.  Tag <b>alg=CPU2;</b><br>Inheritance: <a href="IAssembleCPU2.html">IAssembleCPU2</a> <a href="IDomainDiscretizationCPU2.html">IDomainDiscretizationCPU2</a> <br><table><tr><td colspan=2><h3>IDomainDiscretization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *, const SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IAssemble Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_matrix_rhs (<a href="MatrixCPU1.html">Matrix</a> *, <a href="VectorCPU1.html">Vector</a> *, std::vector&ltSmartPtr&lt;<a href="MultiIndex2.html">MultiIndex2</a>&gt; &gt, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on grid level.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_mass_matrix (<a href="MatrixCPU1.html">Matrix</a> *M, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles mass matrix on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_stiffness_matrix (<a href="MatrixCPU1.html">Matrix</a> *A, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles stiffness matrix on surface grid<br/></td></tr><tr><td><br></td></tr></table>
memberfunction
assemble_jacobian
void
void assemble_jacobian (Matrix *, const SmartPtr<SolutionTimeSeries> , number )
void assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *, const SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; , number )<br><br>Member function of class <b>IDomainDiscretizationCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
IDomainDiscretizationCPU3
IAssembleCPU3 
Classgroup <b>IDomainDiscretization</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has no constructor.  Tag <b>alg=CPU3;</b><br>Inheritance: <a href="IAssembleCPU3.html">IAssembleCPU3</a> <a href="IDomainDiscretizationCPU3.html">IDomainDiscretizationCPU3</a> <br><table><tr><td colspan=2><h3>IDomainDiscretization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *, const SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IAssemble Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_matrix_rhs (<a href="MatrixCPU1.html">Matrix</a> *, <a href="VectorCPU1.html">Vector</a> *, std::vector&ltSmartPtr&lt;<a href="MultiIndex2.html">MultiIndex2</a>&gt; &gt, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on grid level.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_mass_matrix (<a href="MatrixCPU1.html">Matrix</a> *M, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles mass matrix on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_stiffness_matrix (<a href="MatrixCPU1.html">Matrix</a> *A, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles stiffness matrix on surface grid<br/></td></tr><tr><td><br></td></tr></table>
memberfunction
assemble_jacobian
void
void assemble_jacobian (Matrix *, const SmartPtr<SolutionTimeSeries> , number )
void assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *, const SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; , number )<br><br>Member function of class <b>IDomainDiscretizationCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
IElemDisc1d

Classgroup <b>IElemDisc</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b><br>class has no constructor.  Tag <b>dim=1d;</b><br><table><tr><td colspan=2><h3>IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
memberfunction
set_stationary
void
void set_stationary ()
void set_stationary ()<br><br>Member function of class <b>IElemDisc1d</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b>
;
class
IElemDisc2d

Classgroup <b>IElemDisc</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b><br>class has no constructor.  Tag <b>dim=2d;</b><br><table><tr><td colspan=2><h3>IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
memberfunction
set_stationary
void
void set_stationary ()
void set_stationary ()<br><br>Member function of class <b>IElemDisc2d</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b>
;
class
IElemDisc3d

Classgroup <b>IElemDisc</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b><br>class has no constructor.  Tag <b>dim=3d;</b><br><table><tr><td colspan=2><h3>IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
memberfunction
set_stationary
void
void set_stationary ()
void set_stationary ()<br><br>Member function of class <b>IElemDisc3d</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b>
;
class
IFunctionNumber

Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor. <br><table></table>
;
class
ILUCPU1
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 ILinearIteratorCPU1 IPreconditionerCPU1 
Classgroup <b>ILU</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>alg=CPU1;</b><br>Incomplete LU Decomposition<br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="IPreconditionerCPU1.html">IPreconditionerCPU1</a> <a href="ILUCPU1.html">ILUCPU1</a> <br><table><tr><td colspan=2><h3>ILU Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ILUCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ILU Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_beta (number beta)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
ILUCPU1

ILUCPU1 ()
ILUCPU1 ()<br>Constructor of class <b>ILUCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_beta
void
void set_beta (number beta)
void set_beta (number beta)<br><br>Member function of class <b>ILUCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
ILUCPU2
VectorDebugWritingObjectCPU2 DebugWritingObjectCPU2 ILinearIteratorCPU2 IPreconditionerCPU2 
Classgroup <b>ILU</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>alg=CPU2;</b><br>Incomplete LU Decomposition<br>Inheritance: <a href="VectorDebugWritingObjectCPU2.html">VectorDebugWritingObjectCPU2</a> <a href="DebugWritingObjectCPU2.html">DebugWritingObjectCPU2</a> <a href="ILinearIteratorCPU2.html">ILinearIteratorCPU2</a> <a href="IPreconditionerCPU2.html">IPreconditionerCPU2</a> <a href="ILUCPU2.html">ILUCPU2</a> <br><table><tr><td colspan=2><h3>ILU Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ILUCPU2 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ILU Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_beta (number beta)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
ILUCPU2

ILUCPU2 ()
ILUCPU2 ()<br>Constructor of class <b>ILUCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_beta
void
void set_beta (number beta)
void set_beta (number beta)<br><br>Member function of class <b>ILUCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
ILUCPU3
VectorDebugWritingObjectCPU3 DebugWritingObjectCPU3 ILinearIteratorCPU3 IPreconditionerCPU3 
Classgroup <b>ILU</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>alg=CPU3;</b><br>Incomplete LU Decomposition<br>Inheritance: <a href="VectorDebugWritingObjectCPU3.html">VectorDebugWritingObjectCPU3</a> <a href="DebugWritingObjectCPU3.html">DebugWritingObjectCPU3</a> <a href="ILinearIteratorCPU3.html">ILinearIteratorCPU3</a> <a href="IPreconditionerCPU3.html">IPreconditionerCPU3</a> <a href="ILUCPU3.html">ILUCPU3</a> <br><table><tr><td colspan=2><h3>ILU Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ILUCPU3 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ILU Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_beta (number beta)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
ILUCPU3

ILUCPU3 ()
ILUCPU3 ()<br>Constructor of class <b>ILUCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_beta
void
void set_beta (number beta)
void set_beta (number beta)<br><br>Member function of class <b>ILUCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
ILUTCPU1
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 ILinearIteratorCPU1 IPreconditionerCPU1 
Classgroup <b>ILUT</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>alg=CPU1;</b><br>Incomplete LU Decomposition with threshold<br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="IPreconditionerCPU1.html">IPreconditionerCPU1</a> <a href="ILUTCPU1.html">ILUTCPU1</a> <br><table><tr><td colspan=2><h3>ILUT Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ILUTCPU1 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ILUTCPU1 (number threshold parameter)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ILUT Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_info (bool info)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets storage information output<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_threshold (number threshold)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets threshold of incomplete LU factorisation<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
ILUTCPU1

ILUTCPU1 ()
ILUTCPU1 ()<br>Constructor of class <b>ILUTCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
constructor
ILUTCPU1

ILUTCPU1 (number threshold parameter)
ILUTCPU1 (number threshold parameter)<br>Constructor of class <b>ILUTCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_threshold
void
void set_threshold (number threshold)
void set_threshold (number threshold)<br><br>Member function of class <b>ILUTCPU1</b><br>tooltip: sets threshold of incomplete LU factorisation<br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_info
void
void set_info (bool info)
void set_info (bool info)<br><br>Member function of class <b>ILUTCPU1</b><br>tooltip: sets storage information output<br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
ILUTCPU2
VectorDebugWritingObjectCPU2 DebugWritingObjectCPU2 ILinearIteratorCPU2 IPreconditionerCPU2 
Classgroup <b>ILUT</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>alg=CPU2;</b><br>Incomplete LU Decomposition with threshold<br>Inheritance: <a href="VectorDebugWritingObjectCPU2.html">VectorDebugWritingObjectCPU2</a> <a href="DebugWritingObjectCPU2.html">DebugWritingObjectCPU2</a> <a href="ILinearIteratorCPU2.html">ILinearIteratorCPU2</a> <a href="IPreconditionerCPU2.html">IPreconditionerCPU2</a> <a href="ILUTCPU2.html">ILUTCPU2</a> <br><table><tr><td colspan=2><h3>ILUT Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ILUTCPU2 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ILUTCPU2 (number threshold parameter)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ILUT Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_info (bool info)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets storage information output<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_threshold (number threshold)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets threshold of incomplete LU factorisation<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
ILUTCPU2

ILUTCPU2 ()
ILUTCPU2 ()<br>Constructor of class <b>ILUTCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
constructor
ILUTCPU2

ILUTCPU2 (number threshold parameter)
ILUTCPU2 (number threshold parameter)<br>Constructor of class <b>ILUTCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_threshold
void
void set_threshold (number threshold)
void set_threshold (number threshold)<br><br>Member function of class <b>ILUTCPU2</b><br>tooltip: sets threshold of incomplete LU factorisation<br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_info
void
void set_info (bool info)
void set_info (bool info)<br><br>Member function of class <b>ILUTCPU2</b><br>tooltip: sets storage information output<br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
ILUTCPU3
VectorDebugWritingObjectCPU3 DebugWritingObjectCPU3 ILinearIteratorCPU3 IPreconditionerCPU3 
Classgroup <b>ILUT</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>alg=CPU3;</b><br>Incomplete LU Decomposition with threshold<br>Inheritance: <a href="VectorDebugWritingObjectCPU3.html">VectorDebugWritingObjectCPU3</a> <a href="DebugWritingObjectCPU3.html">DebugWritingObjectCPU3</a> <a href="ILinearIteratorCPU3.html">ILinearIteratorCPU3</a> <a href="IPreconditionerCPU3.html">IPreconditionerCPU3</a> <a href="ILUTCPU3.html">ILUTCPU3</a> <br><table><tr><td colspan=2><h3>ILUT Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ILUTCPU3 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ILUTCPU3 (number threshold parameter)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ILUT Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_info (bool info)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets storage information output<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_threshold (number threshold)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets threshold of incomplete LU factorisation<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
ILUTCPU3

ILUTCPU3 ()
ILUTCPU3 ()<br>Constructor of class <b>ILUTCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
constructor
ILUTCPU3

ILUTCPU3 (number threshold parameter)
ILUTCPU3 (number threshold parameter)<br>Constructor of class <b>ILUTCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_threshold
void
void set_threshold (number threshold)
void set_threshold (number threshold)<br><br>Member function of class <b>ILUTCPU3</b><br>tooltip: sets threshold of incomplete LU factorisation<br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_info
void
void set_info (bool info)
void set_info (bool info)<br><br>Member function of class <b>ILUTCPU3</b><br>tooltip: sets storage information output<br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
ILineSearchCPU1

Classgroup <b>ILineSearch</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b><br>class has no constructor.  Tag <b>alg=CPU1;</b><br><table></table>
;
class
ILineSearchCPU2

Classgroup <b>ILineSearch</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b><br>class has no constructor.  Tag <b>alg=CPU2;</b><br><table></table>
;
class
ILineSearchCPU3

Classgroup <b>ILineSearch</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b><br>class has no constructor.  Tag <b>alg=CPU3;</b><br><table></table>
;
class
ILinearIteratorCPU1

Classgroup <b>ILinearIterator</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>alg=CPU1;</b><br><table><tr><td colspan=2><h3>ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr></table>
memberfunction
set_damp
void
void set_damp (number )
void set_damp (number )<br><br>Member function of class <b>ILinearIteratorCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
set_damp
void
void set_damp (SmartPtr<IDamping> )
void set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )<br><br>Member function of class <b>ILinearIteratorCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
;
class
ILinearIteratorCPU2

Classgroup <b>ILinearIterator</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>alg=CPU2;</b><br><table><tr><td colspan=2><h3>ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr></table>
memberfunction
set_damp
void
void set_damp (number )
void set_damp (number )<br><br>Member function of class <b>ILinearIteratorCPU2</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
set_damp
void
void set_damp (SmartPtr<IDamping> )
void set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )<br><br>Member function of class <b>ILinearIteratorCPU2</b><br>Registry Group: <b>/ug4/Algebra</b>
;
class
ILinearIteratorCPU3

Classgroup <b>ILinearIterator</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>alg=CPU3;</b><br><table><tr><td colspan=2><h3>ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr></table>
memberfunction
set_damp
void
void set_damp (number )
void set_damp (number )<br><br>Member function of class <b>ILinearIteratorCPU3</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
set_damp
void
void set_damp (SmartPtr<IDamping> )
void set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )<br><br>Member function of class <b>ILinearIteratorCPU3</b><br>Registry Group: <b>/ug4/Algebra</b>
;
class
ILinearOperatorCPU1
IOperatorCPU1 
Classgroup <b>ILinearOperator</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>alg=CPU1;</b><br>Inheritance: <a href="IOperatorCPU1.html">IOperatorCPU1</a> <a href="ILinearOperatorCPU1.html">ILinearOperatorCPU1</a> <br><table><tr><td colspan=2><h3>ILinearOperator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns f#u<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init ()</td></tr><tr><td><br></td></tr></table>
memberfunction
init
void
void init ()
void init ()<br><br>Member function of class <b>ILinearOperatorCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
apply
void
void apply (Vector *, const Vector *)
void apply (<a href="VectorCPU1.html">Vector</a> *, const <a href="VectorCPU1.html">Vector</a> *)<br><br>Member function of class <b>ILinearOperatorCPU1</b><br>returns f#u<br>Registry Group: <b>/ug4/Algebra</b>
;
class
ILinearOperatorCPU2
IOperatorCPU2 
Classgroup <b>ILinearOperator</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>alg=CPU2;</b><br>Inheritance: <a href="IOperatorCPU2.html">IOperatorCPU2</a> <a href="ILinearOperatorCPU2.html">ILinearOperatorCPU2</a> <br><table><tr><td colspan=2><h3>ILinearOperator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns f#u<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init ()</td></tr><tr><td><br></td></tr></table>
memberfunction
init
void
void init ()
void init ()<br><br>Member function of class <b>ILinearOperatorCPU2</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
apply
void
void apply (Vector *, const Vector *)
void apply (<a href="VectorCPU1.html">Vector</a> *, const <a href="VectorCPU1.html">Vector</a> *)<br><br>Member function of class <b>ILinearOperatorCPU2</b><br>returns f#u<br>Registry Group: <b>/ug4/Algebra</b>
;
class
ILinearOperatorCPU3
IOperatorCPU3 
Classgroup <b>ILinearOperator</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>alg=CPU3;</b><br>Inheritance: <a href="IOperatorCPU3.html">IOperatorCPU3</a> <a href="ILinearOperatorCPU3.html">ILinearOperatorCPU3</a> <br><table><tr><td colspan=2><h3>ILinearOperator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns f#u<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init ()</td></tr><tr><td><br></td></tr></table>
memberfunction
init
void
void init ()
void init ()<br><br>Member function of class <b>ILinearOperatorCPU3</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
apply
void
void apply (Vector *, const Vector *)
void apply (<a href="VectorCPU1.html">Vector</a> *, const <a href="VectorCPU1.html">Vector</a> *)<br><br>Member function of class <b>ILinearOperatorCPU3</b><br>returns f#u<br>Registry Group: <b>/ug4/Algebra</b>
;
class
ILinearOperatorInverseCPU1

Classgroup <b>ILinearOperatorInverse</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>alg=CPU1;</b><br><table><tr><td colspan=2><h3>ILinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u, const <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u), f remains constant<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply_return_defect (<a href="VectorCPU1.html">Vector</a> *u, <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u),  f := f - A*u becomes new defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; , const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ILinearOperatorInverse Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; </td><td class="memItemRight" valign=bottom>convergence_check ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td><br></td></tr></table>
memberfunction
init
bool
bool init (SmartPtr<ILinearOperator> )
bool init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; )<br><br>Member function of class <b>ILinearOperatorInverseCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
init
bool
bool init (SmartPtr<ILinearOperator> , const Vector *)
bool init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; , const <a href="VectorCPU1.html">Vector</a> *)<br><br>Member function of class <b>ILinearOperatorInverseCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
apply_return_defect
bool
bool apply_return_defect (Vector *u, Vector *f)
bool apply_return_defect (<a href="VectorCPU1.html">Vector</a> *u, <a href="VectorCPU1.html">Vector</a> *f)<br><br>Member function of class <b>ILinearOperatorInverseCPU1</b><br>returns Success<br>tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u),  f := f - A*u becomes new defect<br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
apply
bool
bool apply (Vector *u, const Vector *f)
bool apply (<a href="VectorCPU1.html">Vector</a> *u, const <a href="VectorCPU1.html">Vector</a> *f)<br><br>Member function of class <b>ILinearOperatorInverseCPU1</b><br>returns Success<br>tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u), f remains constant<br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
set_convergence_check
void
void set_convergence_check (SmartPtr<IConvergenceCheck> )
void set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )<br><br>Member function of class <b>ILinearOperatorInverseCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
convergence_check
ConstSmartPtr<IConvergenceCheckCPU1>
const SmartPtr<IConvergenceCheck> convergence_check () const
const SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; convergence_check ()<br><br>Member function of class <b>ILinearOperatorInverseCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
defect
number
number defect () const
number defect ()<br><br>Member function of class <b>ILinearOperatorInverseCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
step
integer
integer step () const
integer step ()<br><br>Member function of class <b>ILinearOperatorInverseCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
reduction
number
number reduction () const
number reduction ()<br><br>Member function of class <b>ILinearOperatorInverseCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
;
class
ILinearOperatorInverseCPU2

Classgroup <b>ILinearOperatorInverse</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>alg=CPU2;</b><br><table><tr><td colspan=2><h3>ILinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u, const <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u), f remains constant<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply_return_defect (<a href="VectorCPU1.html">Vector</a> *u, <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u),  f := f - A*u becomes new defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; , const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ILinearOperatorInverse Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; </td><td class="memItemRight" valign=bottom>convergence_check ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td><br></td></tr></table>
memberfunction
init
bool
bool init (SmartPtr<ILinearOperator> )
bool init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; )<br><br>Member function of class <b>ILinearOperatorInverseCPU2</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
init
bool
bool init (SmartPtr<ILinearOperator> , const Vector *)
bool init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; , const <a href="VectorCPU1.html">Vector</a> *)<br><br>Member function of class <b>ILinearOperatorInverseCPU2</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
apply_return_defect
bool
bool apply_return_defect (Vector *u, Vector *f)
bool apply_return_defect (<a href="VectorCPU1.html">Vector</a> *u, <a href="VectorCPU1.html">Vector</a> *f)<br><br>Member function of class <b>ILinearOperatorInverseCPU2</b><br>returns Success<br>tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u),  f := f - A*u becomes new defect<br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
apply
bool
bool apply (Vector *u, const Vector *f)
bool apply (<a href="VectorCPU1.html">Vector</a> *u, const <a href="VectorCPU1.html">Vector</a> *f)<br><br>Member function of class <b>ILinearOperatorInverseCPU2</b><br>returns Success<br>tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u), f remains constant<br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
set_convergence_check
void
void set_convergence_check (SmartPtr<IConvergenceCheck> )
void set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )<br><br>Member function of class <b>ILinearOperatorInverseCPU2</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
convergence_check
ConstSmartPtr<IConvergenceCheckCPU2>
const SmartPtr<IConvergenceCheck> convergence_check () const
const SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; convergence_check ()<br><br>Member function of class <b>ILinearOperatorInverseCPU2</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
defect
number
number defect () const
number defect ()<br><br>Member function of class <b>ILinearOperatorInverseCPU2</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
step
integer
integer step () const
integer step ()<br><br>Member function of class <b>ILinearOperatorInverseCPU2</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
reduction
number
number reduction () const
number reduction ()<br><br>Member function of class <b>ILinearOperatorInverseCPU2</b><br>Registry Group: <b>/ug4/Algebra</b>
;
class
ILinearOperatorInverseCPU3

Classgroup <b>ILinearOperatorInverse</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>alg=CPU3;</b><br><table><tr><td colspan=2><h3>ILinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u, const <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u), f remains constant<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply_return_defect (<a href="VectorCPU1.html">Vector</a> *u, <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u),  f := f - A*u becomes new defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; , const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ILinearOperatorInverse Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; </td><td class="memItemRight" valign=bottom>convergence_check ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td><br></td></tr></table>
memberfunction
init
bool
bool init (SmartPtr<ILinearOperator> )
bool init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; )<br><br>Member function of class <b>ILinearOperatorInverseCPU3</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
init
bool
bool init (SmartPtr<ILinearOperator> , const Vector *)
bool init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; , const <a href="VectorCPU1.html">Vector</a> *)<br><br>Member function of class <b>ILinearOperatorInverseCPU3</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
apply_return_defect
bool
bool apply_return_defect (Vector *u, Vector *f)
bool apply_return_defect (<a href="VectorCPU1.html">Vector</a> *u, <a href="VectorCPU1.html">Vector</a> *f)<br><br>Member function of class <b>ILinearOperatorInverseCPU3</b><br>returns Success<br>tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u),  f := f - A*u becomes new defect<br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
apply
bool
bool apply (Vector *u, const Vector *f)
bool apply (<a href="VectorCPU1.html">Vector</a> *u, const <a href="VectorCPU1.html">Vector</a> *f)<br><br>Member function of class <b>ILinearOperatorInverseCPU3</b><br>returns Success<br>tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u), f remains constant<br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
set_convergence_check
void
void set_convergence_check (SmartPtr<IConvergenceCheck> )
void set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )<br><br>Member function of class <b>ILinearOperatorInverseCPU3</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
convergence_check
ConstSmartPtr<IConvergenceCheckCPU3>
const SmartPtr<IConvergenceCheck> convergence_check () const
const SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; convergence_check ()<br><br>Member function of class <b>ILinearOperatorInverseCPU3</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
defect
number
number defect () const
number defect ()<br><br>Member function of class <b>ILinearOperatorInverseCPU3</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
step
integer
integer step () const
integer step ()<br><br>Member function of class <b>ILinearOperatorInverseCPU3</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
reduction
number
number reduction () const
number reduction ()<br><br>Member function of class <b>ILinearOperatorInverseCPU3</b><br>Registry Group: <b>/ug4/Algebra</b>
;
class
ILocalToGlobalMapperCPU1

Classgroup <b>ILocalToGlobalMapper</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has no constructor.  Tag <b>alg=CPU1;</b><br><table></table>
;
class
ILocalToGlobalMapperCPU2

Classgroup <b>ILocalToGlobalMapper</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has no constructor.  Tag <b>alg=CPU2;</b><br><table></table>
;
class
ILocalToGlobalMapperCPU3

Classgroup <b>ILocalToGlobalMapper</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has no constructor.  Tag <b>alg=CPU3;</b><br><table></table>
;
class
ILocalTransfer

Registry Group: <b></b><br>class has no constructor. <br><table></table>
;
class
ILocalTransferAlgebraCPU1
ILocalTransfer 
Classgroup <b>ILocalTransferAlgebra</b><br>Registry Group: <b></b><br>class has no constructor.  Tag <b>alg=CPU1;</b><br>Inheritance: <a href="ILocalTransfer.html">ILocalTransfer</a> <a href="ILocalTransferAlgebraCPU1.html">ILocalTransferAlgebraCPU1</a> <br><table></table>
;
class
ILocalTransferAlgebraCPU2
ILocalTransfer 
Classgroup <b>ILocalTransferAlgebra</b><br>Registry Group: <b></b><br>class has no constructor.  Tag <b>alg=CPU2;</b><br>Inheritance: <a href="ILocalTransfer.html">ILocalTransfer</a> <a href="ILocalTransferAlgebraCPU2.html">ILocalTransferAlgebraCPU2</a> <br><table></table>
;
class
ILocalTransferAlgebraCPU3
ILocalTransfer 
Classgroup <b>ILocalTransferAlgebra</b><br>Registry Group: <b></b><br>class has no constructor.  Tag <b>alg=CPU3;</b><br>Inheritance: <a href="ILocalTransfer.html">ILocalTransfer</a> <a href="ILocalTransferAlgebraCPU3.html">ILocalTransferAlgebraCPU3</a> <br><table></table>
;
class
IMatrixOperatorInverseCPU1
ILinearOperatorInverseCPU1 
Classgroup <b>IMatrixOperatorInverse</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>alg=CPU1;</b><br>Inheritance: <a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverseCPU1</a> <a href="IMatrixOperatorInverseCPU1.html">IMatrixOperatorInverseCPU1</a> <br><table><tr><td colspan=2><h3>Inherited ILinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u, const <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u), f remains constant<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply_return_defect (<a href="VectorCPU1.html">Vector</a> *u, <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u),  f := f - A*u becomes new defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; , const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited ILinearOperatorInverse Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; </td><td class="memItemRight" valign=bottom>convergence_check ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td><br></td></tr></table>
;
class
IMatrixOperatorInverseCPU2
ILinearOperatorInverseCPU2 
Classgroup <b>IMatrixOperatorInverse</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>alg=CPU2;</b><br>Inheritance: <a href="ILinearOperatorInverseCPU2.html">ILinearOperatorInverseCPU2</a> <a href="IMatrixOperatorInverseCPU2.html">IMatrixOperatorInverseCPU2</a> <br><table><tr><td colspan=2><h3>Inherited ILinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u, const <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u), f remains constant<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply_return_defect (<a href="VectorCPU1.html">Vector</a> *u, <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u),  f := f - A*u becomes new defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; , const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited ILinearOperatorInverse Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; </td><td class="memItemRight" valign=bottom>convergence_check ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td><br></td></tr></table>
;
class
IMatrixOperatorInverseCPU3
ILinearOperatorInverseCPU3 
Classgroup <b>IMatrixOperatorInverse</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>alg=CPU3;</b><br>Inheritance: <a href="ILinearOperatorInverseCPU3.html">ILinearOperatorInverseCPU3</a> <a href="IMatrixOperatorInverseCPU3.html">IMatrixOperatorInverseCPU3</a> <br><table><tr><td colspan=2><h3>Inherited ILinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u, const <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u), f remains constant<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply_return_defect (<a href="VectorCPU1.html">Vector</a> *u, <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u),  f := f - A*u becomes new defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; , const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited ILinearOperatorInverse Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; </td><td class="memItemRight" valign=bottom>convergence_check ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td><br></td></tr></table>
;
class
INavierStokesFV1Stabilization2d

Classgroup <b>INavierStokesFV1Stabilization</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has no constructor.  Tag <b>dim=2d;</b><br><table><tr><td colspan=2><h3>INavierStokesFV1Stabilization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion_length (std_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_upwind (SmartPtr&lt;<a href="INavierStokesUpwind2d.html">INavierStokesUpwind</a>&gt; )</td></tr><tr><td><br></td></tr></table>
memberfunction
set_upwind
void
void set_upwind (SmartPtr<INavierStokesUpwind> )
void set_upwind (SmartPtr&lt;<a href="INavierStokesUpwind2d.html">INavierStokesUpwind</a>&gt; )<br><br>Member function of class <b>INavierStokesFV1Stabilization2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_diffusion_length
void
void set_diffusion_length (std_string )
void set_diffusion_length (std_string )<br><br>Member function of class <b>INavierStokesFV1Stabilization2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
INavierStokesFV1Stabilization3d

Classgroup <b>INavierStokesFV1Stabilization</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has no constructor.  Tag <b>dim=3d;</b><br><table><tr><td colspan=2><h3>INavierStokesFV1Stabilization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion_length (std_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_upwind (SmartPtr&lt;<a href="INavierStokesUpwind2d.html">INavierStokesUpwind</a>&gt; )</td></tr><tr><td><br></td></tr></table>
memberfunction
set_upwind
void
void set_upwind (SmartPtr<INavierStokesUpwind> )
void set_upwind (SmartPtr&lt;<a href="INavierStokesUpwind2d.html">INavierStokesUpwind</a>&gt; )<br><br>Member function of class <b>INavierStokesFV1Stabilization3d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_diffusion_length
void
void set_diffusion_length (std_string )
void set_diffusion_length (std_string )<br><br>Member function of class <b>INavierStokesFV1Stabilization3d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
INavierStokesUpwind2d

Classgroup <b>INavierStokesUpwind</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b><br>class has no constructor.  Tag <b>dim=2d;</b><br><table></table>
;
class
INavierStokesUpwind3d

Classgroup <b>INavierStokesUpwind</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b><br>class has no constructor.  Tag <b>dim=3d;</b><br><table></table>
;
class
INewtonUpdate

Registry Group: <b>/ug4/Discretization/Nonlinear</b><br>class has no constructor. <br><table></table>
;
class
IOperatorCPU1

Classgroup <b>IOperator</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>alg=CPU1;</b><br><table></table>
;
class
IOperatorCPU2

Classgroup <b>IOperator</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>alg=CPU2;</b><br><table></table>
;
class
IOperatorCPU3

Classgroup <b>IOperator</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>alg=CPU3;</b><br><table></table>
;
class
IOperatorInverseCPU1

Classgroup <b>IOperatorInverse</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>alg=CPU1;</b><br><table></table>
;
class
IOperatorInverseCPU2

Classgroup <b>IOperatorInverse</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>alg=CPU2;</b><br><table></table>
;
class
IOperatorInverseCPU3

Classgroup <b>IOperatorInverse</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>alg=CPU3;</b><br><table></table>
;
class
IParallelCoarsening

Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b><br>class has no constructor. <br>Parallel Coarsening Interface (RSAMG)<br><table></table>
;
class
IPartitioner1d

Classgroup <b>IPartitioner</b><br>Registry Group: <b>/ug4/LoadBalancing</b><br>class has no constructor.  Tag <b>dim=1d;</b><br><table></table>
;
class
IPartitioner2d

Classgroup <b>IPartitioner</b><br>Registry Group: <b>/ug4/LoadBalancing</b><br>class has no constructor.  Tag <b>dim=2d;</b><br><table></table>
;
class
IPartitioner3d

Classgroup <b>IPartitioner</b><br>Registry Group: <b>/ug4/LoadBalancing</b><br>class has no constructor.  Tag <b>dim=3d;</b><br><table></table>
;
class
IPositionProvider1d

Classgroup <b>IPositionProvider</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>dim=1d;</b><br><table></table>
;
class
IPositionProvider2d

Classgroup <b>IPositionProvider</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>dim=2d;</b><br><table></table>
;
class
IPositionProvider3d

Classgroup <b>IPositionProvider</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>dim=3d;</b><br><table></table>
;
class
IPreconditionedLinearOperatorInverseCPU1
VectorDebugWritingObjectCPU1 ILinearOperatorInverseCPU1 
Classgroup <b>IPreconditionedLinearOperatorInverse</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>alg=CPU1;</b><br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverseCPU1</a> <a href="IPreconditionedLinearOperatorInverseCPU1.html">IPreconditionedLinearOperatorInverseCPU1</a> <br><table><tr><td colspan=2><h3>IPreconditionedLinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_compute_fresh_defect_when_finished (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_preconditioner (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Preconditioner)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u, const <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u), f remains constant<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply_return_defect (<a href="VectorCPU1.html">Vector</a> *u, <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u),  f := f - A*u becomes new defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; , const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited ILinearOperatorInverse Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; </td><td class="memItemRight" valign=bottom>convergence_check ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
memberfunction
set_preconditioner
void
void set_preconditioner (SmartPtr<ILinearIterator> Preconditioner)
void set_preconditioner (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Preconditioner)<br><br>Member function of class <b>IPreconditionedLinearOperatorInverseCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
set_compute_fresh_defect_when_finished
void
void set_compute_fresh_defect_when_finished (bool )
void set_compute_fresh_defect_when_finished (bool )<br><br>Member function of class <b>IPreconditionedLinearOperatorInverseCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
;
class
IPreconditionedLinearOperatorInverseCPU2
VectorDebugWritingObjectCPU2 ILinearOperatorInverseCPU2 
Classgroup <b>IPreconditionedLinearOperatorInverse</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>alg=CPU2;</b><br>Inheritance: <a href="VectorDebugWritingObjectCPU2.html">VectorDebugWritingObjectCPU2</a> <a href="ILinearOperatorInverseCPU2.html">ILinearOperatorInverseCPU2</a> <a href="IPreconditionedLinearOperatorInverseCPU2.html">IPreconditionedLinearOperatorInverseCPU2</a> <br><table><tr><td colspan=2><h3>IPreconditionedLinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_compute_fresh_defect_when_finished (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_preconditioner (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Preconditioner)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u, const <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u), f remains constant<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply_return_defect (<a href="VectorCPU1.html">Vector</a> *u, <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u),  f := f - A*u becomes new defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; , const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited ILinearOperatorInverse Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; </td><td class="memItemRight" valign=bottom>convergence_check ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
memberfunction
set_preconditioner
void
void set_preconditioner (SmartPtr<ILinearIterator> Preconditioner)
void set_preconditioner (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Preconditioner)<br><br>Member function of class <b>IPreconditionedLinearOperatorInverseCPU2</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
set_compute_fresh_defect_when_finished
void
void set_compute_fresh_defect_when_finished (bool )
void set_compute_fresh_defect_when_finished (bool )<br><br>Member function of class <b>IPreconditionedLinearOperatorInverseCPU2</b><br>Registry Group: <b>/ug4/Algebra</b>
;
class
IPreconditionedLinearOperatorInverseCPU3
VectorDebugWritingObjectCPU3 ILinearOperatorInverseCPU3 
Classgroup <b>IPreconditionedLinearOperatorInverse</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>alg=CPU3;</b><br>Inheritance: <a href="VectorDebugWritingObjectCPU3.html">VectorDebugWritingObjectCPU3</a> <a href="ILinearOperatorInverseCPU3.html">ILinearOperatorInverseCPU3</a> <a href="IPreconditionedLinearOperatorInverseCPU3.html">IPreconditionedLinearOperatorInverseCPU3</a> <br><table><tr><td colspan=2><h3>IPreconditionedLinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_compute_fresh_defect_when_finished (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_preconditioner (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Preconditioner)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u, const <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u), f remains constant<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply_return_defect (<a href="VectorCPU1.html">Vector</a> *u, <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u),  f := f - A*u becomes new defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; , const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited ILinearOperatorInverse Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; </td><td class="memItemRight" valign=bottom>convergence_check ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
memberfunction
set_preconditioner
void
void set_preconditioner (SmartPtr<ILinearIterator> Preconditioner)
void set_preconditioner (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Preconditioner)<br><br>Member function of class <b>IPreconditionedLinearOperatorInverseCPU3</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
set_compute_fresh_defect_when_finished
void
void set_compute_fresh_defect_when_finished (bool )
void set_compute_fresh_defect_when_finished (bool )<br><br>Member function of class <b>IPreconditionedLinearOperatorInverseCPU3</b><br>Registry Group: <b>/ug4/Algebra</b>
;
class
IPreconditionerCPU1
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 ILinearIteratorCPU1 
Classgroup <b>IPreconditioner</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>alg=CPU1;</b><br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="IPreconditionerCPU1.html">IPreconditionerCPU1</a> <br><table><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
;
class
IPreconditionerCPU2
VectorDebugWritingObjectCPU2 DebugWritingObjectCPU2 ILinearIteratorCPU2 
Classgroup <b>IPreconditioner</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>alg=CPU2;</b><br>Inheritance: <a href="VectorDebugWritingObjectCPU2.html">VectorDebugWritingObjectCPU2</a> <a href="DebugWritingObjectCPU2.html">DebugWritingObjectCPU2</a> <a href="ILinearIteratorCPU2.html">ILinearIteratorCPU2</a> <a href="IPreconditionerCPU2.html">IPreconditionerCPU2</a> <br><table><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
;
class
IPreconditionerCPU3
VectorDebugWritingObjectCPU3 DebugWritingObjectCPU3 ILinearIteratorCPU3 
Classgroup <b>IPreconditioner</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>alg=CPU3;</b><br>Inheritance: <a href="VectorDebugWritingObjectCPU3.html">VectorDebugWritingObjectCPU3</a> <a href="DebugWritingObjectCPU3.html">DebugWritingObjectCPU3</a> <a href="ILinearIteratorCPU3.html">ILinearIteratorCPU3</a> <a href="IPreconditionerCPU3.html">IPreconditionerCPU3</a> <br><table><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
;
class
IRefiner

Registry Group: <b>/ug4/Grid</b><br>class has no constructor. <br><table><tr><td colspan=2><h3>IRefiner Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear_marks ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>coarsen ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>refine ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>save_marks_to_file (c_string filename)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_adjusted_marks_debug_filename (c_string filename)</td></tr><tr><td><br></td></tr></table>
memberfunction
refine
void
void refine ()
void refine ()<br><br>Member function of class <b>IRefiner</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
coarsen
bool
bool coarsen ()
bool coarsen ()<br><br>Member function of class <b>IRefiner</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
save_marks_to_file
bool
bool save_marks_to_file (c_string filename)
bool save_marks_to_file (c_string filename)<br><br>Member function of class <b>IRefiner</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
set_adjusted_marks_debug_filename
void
void set_adjusted_marks_debug_filename (c_string filename)
void set_adjusted_marks_debug_filename (c_string filename)<br><br>Member function of class <b>IRefiner</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
clear_marks
void
void clear_marks ()
void clear_marks ()<br><br>Member function of class <b>IRefiner</b><br>Registry Group: <b>/ug4/Grid</b>
;
class
ISelector

Registry Group: <b>/ug4/Grid</b><br>class has no constructor. <br><table></table>
;
class
IStressMaterialResponse1d

Classgroup <b>IStressMaterialResponse</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b><br>class has no constructor.  Tag <b>dim=1d;</b><br><table></table>
;
class
IStressMaterialResponse2d

Classgroup <b>IStressMaterialResponse</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b><br>class has no constructor.  Tag <b>dim=2d;</b><br><table></table>
;
class
IStressMaterialResponse3d

Classgroup <b>IStressMaterialResponse</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b><br>class has no constructor.  Tag <b>dim=3d;</b><br><table></table>
;
class
ISubsetHandler

Registry Group: <b>/ug4/Grid</b><br>class has no constructor. <br><table><tr><td colspan=2><h3>ISubsetHandler Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_subset_name (c_string name, integer subsetIndex)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ISubsetHandler Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_subset_index (c_string subsetName)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns subset index<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>c_string </td><td class="memItemRight" valign=bottom>get_subset_name (integer subsetIndex)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns subset name<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>num_subsets ()</td></tr><tr><td><br></td></tr></table>
memberfunction
set_subset_name
void
void set_subset_name (c_string name, integer subsetIndex)
void set_subset_name (c_string name, integer subsetIndex)<br><br>Member function of class <b>ISubsetHandler</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
num_subsets
integer
integer num_subsets () const
integer num_subsets ()<br><br>Member function of class <b>ISubsetHandler</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
get_subset_name
string
c_string get_subset_name (integer subsetIndex) const
c_string get_subset_name (integer subsetIndex)<br><br>Member function of class <b>ISubsetHandler</b><br>returns subset name<br>Registry Group: <b>/ug4/Grid</b>
memberfunction
get_subset_index
integer
integer get_subset_index (c_string subsetName) const
integer get_subset_index (c_string subsetName)<br><br>Member function of class <b>ISubsetHandler</b><br>returns subset index<br>Registry Group: <b>/ug4/Grid</b>
;
class
ITimeDiscretizationCPU1
IAssembleCPU1 
Classgroup <b>ITimeDiscretization</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b><br>class has no constructor.  Tag <b>alg=CPU1;</b><br>Inheritance: <a href="IAssembleCPU1.html">IAssembleCPU1</a> <a href="ITimeDiscretizationCPU1.html">ITimeDiscretizationCPU1</a> <br><table><tr><td colspan=2><h3>ITimeDiscretization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>finish_step_elem (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>prepare_step (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; prepares the assembling of Defect/Jacobian for a time step, number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>prepare_step_elem (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stage (size_t stage)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ITimeDiscretization Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>future_time ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the future time point (i.e. the one that will be computed)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_prev_steps ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_stages ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the number of stages<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IAssemble Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_matrix_rhs (<a href="MatrixCPU1.html">Matrix</a> *, <a href="VectorCPU1.html">Vector</a> *, std::vector&ltSmartPtr&lt;<a href="MultiIndex2.html">MultiIndex2</a>&gt; &gt, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on grid level.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_mass_matrix (<a href="MatrixCPU1.html">Matrix</a> *M, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles mass matrix on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_stiffness_matrix (<a href="MatrixCPU1.html">Matrix</a> *A, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles stiffness matrix on surface grid<br/></td></tr><tr><td><br></td></tr></table>
memberfunction
prepare_step
void
void prepare_step (SmartPtr<SolutionTimeSeries> prepares the assembling of Defect/Jacobian for a time step, number )
void prepare_step (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; prepares the assembling of Defect/Jacobian for a time step, number )<br><br>Member function of class <b>ITimeDiscretizationCPU1</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
prepare_step_elem
void
void prepare_step_elem (SmartPtr<SolutionTimeSeries> , number )
void prepare_step_elem (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; , number )<br><br>Member function of class <b>ITimeDiscretizationCPU1</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
finish_step_elem
void
void finish_step_elem (SmartPtr<SolutionTimeSeries> )
void finish_step_elem (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; )<br><br>Member function of class <b>ITimeDiscretizationCPU1</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
set_stage
void
void set_stage (size_t stage)
void set_stage (size_t stage)<br><br>Member function of class <b>ITimeDiscretizationCPU1</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
num_stages
unknown
size_t num_stages () const
size_t num_stages ()<br><br>Member function of class <b>ITimeDiscretizationCPU1</b><br>returns the number of stages<br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
future_time
number
number future_time () const
number future_time ()<br><br>Member function of class <b>ITimeDiscretizationCPU1</b><br>returns the future time point (i.e. the one that will be computed)<br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
num_prev_steps
unknown
size_t num_prev_steps () const
size_t num_prev_steps ()<br><br>Member function of class <b>ITimeDiscretizationCPU1</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
;
class
ITimeDiscretizationCPU2
IAssembleCPU2 
Classgroup <b>ITimeDiscretization</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b><br>class has no constructor.  Tag <b>alg=CPU2;</b><br>Inheritance: <a href="IAssembleCPU2.html">IAssembleCPU2</a> <a href="ITimeDiscretizationCPU2.html">ITimeDiscretizationCPU2</a> <br><table><tr><td colspan=2><h3>ITimeDiscretization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>finish_step_elem (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>prepare_step (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; prepares the assembling of Defect/Jacobian for a time step, number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>prepare_step_elem (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stage (size_t stage)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ITimeDiscretization Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>future_time ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the future time point (i.e. the one that will be computed)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_prev_steps ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_stages ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the number of stages<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IAssemble Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_matrix_rhs (<a href="MatrixCPU1.html">Matrix</a> *, <a href="VectorCPU1.html">Vector</a> *, std::vector&ltSmartPtr&lt;<a href="MultiIndex2.html">MultiIndex2</a>&gt; &gt, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on grid level.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_mass_matrix (<a href="MatrixCPU1.html">Matrix</a> *M, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles mass matrix on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_stiffness_matrix (<a href="MatrixCPU1.html">Matrix</a> *A, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles stiffness matrix on surface grid<br/></td></tr><tr><td><br></td></tr></table>
memberfunction
prepare_step
void
void prepare_step (SmartPtr<SolutionTimeSeries> prepares the assembling of Defect/Jacobian for a time step, number )
void prepare_step (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; prepares the assembling of Defect/Jacobian for a time step, number )<br><br>Member function of class <b>ITimeDiscretizationCPU2</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
prepare_step_elem
void
void prepare_step_elem (SmartPtr<SolutionTimeSeries> , number )
void prepare_step_elem (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; , number )<br><br>Member function of class <b>ITimeDiscretizationCPU2</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
finish_step_elem
void
void finish_step_elem (SmartPtr<SolutionTimeSeries> )
void finish_step_elem (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; )<br><br>Member function of class <b>ITimeDiscretizationCPU2</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
set_stage
void
void set_stage (size_t stage)
void set_stage (size_t stage)<br><br>Member function of class <b>ITimeDiscretizationCPU2</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
num_stages
unknown
size_t num_stages () const
size_t num_stages ()<br><br>Member function of class <b>ITimeDiscretizationCPU2</b><br>returns the number of stages<br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
future_time
number
number future_time () const
number future_time ()<br><br>Member function of class <b>ITimeDiscretizationCPU2</b><br>returns the future time point (i.e. the one that will be computed)<br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
num_prev_steps
unknown
size_t num_prev_steps () const
size_t num_prev_steps ()<br><br>Member function of class <b>ITimeDiscretizationCPU2</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
;
class
ITimeDiscretizationCPU3
IAssembleCPU3 
Classgroup <b>ITimeDiscretization</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b><br>class has no constructor.  Tag <b>alg=CPU3;</b><br>Inheritance: <a href="IAssembleCPU3.html">IAssembleCPU3</a> <a href="ITimeDiscretizationCPU3.html">ITimeDiscretizationCPU3</a> <br><table><tr><td colspan=2><h3>ITimeDiscretization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>finish_step_elem (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>prepare_step (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; prepares the assembling of Defect/Jacobian for a time step, number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>prepare_step_elem (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stage (size_t stage)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ITimeDiscretization Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>future_time ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the future time point (i.e. the one that will be computed)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_prev_steps ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_stages ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the number of stages<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IAssemble Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_matrix_rhs (<a href="MatrixCPU1.html">Matrix</a> *, <a href="VectorCPU1.html">Vector</a> *, std::vector&ltSmartPtr&lt;<a href="MultiIndex2.html">MultiIndex2</a>&gt; &gt, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on grid level.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_mass_matrix (<a href="MatrixCPU1.html">Matrix</a> *M, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles mass matrix on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_stiffness_matrix (<a href="MatrixCPU1.html">Matrix</a> *A, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles stiffness matrix on surface grid<br/></td></tr><tr><td><br></td></tr></table>
memberfunction
prepare_step
void
void prepare_step (SmartPtr<SolutionTimeSeries> prepares the assembling of Defect/Jacobian for a time step, number )
void prepare_step (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; prepares the assembling of Defect/Jacobian for a time step, number )<br><br>Member function of class <b>ITimeDiscretizationCPU3</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
prepare_step_elem
void
void prepare_step_elem (SmartPtr<SolutionTimeSeries> , number )
void prepare_step_elem (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; , number )<br><br>Member function of class <b>ITimeDiscretizationCPU3</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
finish_step_elem
void
void finish_step_elem (SmartPtr<SolutionTimeSeries> )
void finish_step_elem (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; )<br><br>Member function of class <b>ITimeDiscretizationCPU3</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
set_stage
void
void set_stage (size_t stage)
void set_stage (size_t stage)<br><br>Member function of class <b>ITimeDiscretizationCPU3</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
num_stages
unknown
size_t num_stages () const
size_t num_stages ()<br><br>Member function of class <b>ITimeDiscretizationCPU3</b><br>returns the number of stages<br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
future_time
number
number future_time () const
number future_time ()<br><br>Member function of class <b>ITimeDiscretizationCPU3</b><br>returns the future time point (i.e. the one that will be computed)<br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
num_prev_steps
unknown
size_t num_prev_steps () const
size_t num_prev_steps ()<br><br>Member function of class <b>ITimeDiscretizationCPU3</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
;
class
ITransferOperatorCPU1

Classgroup <b>ITransferOperator</b><br>Registry Group: <b>/ug4/Discretization</b><br>class has no constructor.  Tag <b>alg=CPU1;</b><br><table></table>
;
class
ITransferOperatorCPU2

Classgroup <b>ITransferOperator</b><br>Registry Group: <b>/ug4/Discretization</b><br>class has no constructor.  Tag <b>alg=CPU2;</b><br><table></table>
;
class
ITransferOperatorCPU3

Classgroup <b>ITransferOperator</b><br>Registry Group: <b>/ug4/Discretization</b><br>class has no constructor.  Tag <b>alg=CPU3;</b><br><table></table>
;
class
ITransferPostProcessCPU1

Classgroup <b>ITransferPostProcess</b><br>Registry Group: <b>/ug4/Discretization</b><br>class has no constructor.  Tag <b>alg=CPU1;</b><br><table></table>
;
class
ITransferPostProcessCPU2

Classgroup <b>ITransferPostProcess</b><br>Registry Group: <b>/ug4/Discretization</b><br>class has no constructor.  Tag <b>alg=CPU2;</b><br><table></table>
;
class
ITransferPostProcessCPU3

Classgroup <b>ITransferPostProcess</b><br>Registry Group: <b>/ug4/Discretization</b><br>class has no constructor.  Tag <b>alg=CPU3;</b><br><table></table>
;
class
ICplUserData1d

Classgroup <b>ICplUserData</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=1d;</b><br><table></table>
;
class
ICplUserData2d

Classgroup <b>ICplUserData</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=2d;</b><br><table></table>
;
class
ICplUserData3d

Classgroup <b>ICplUserData</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=3d;</b><br><table></table>
;
class
IVectorDebugWriterCPU1

Classgroup <b>IVectorDebugWriter</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>alg=CPU1;</b><br><table></table>
;
class
IVectorDebugWriterCPU2

Classgroup <b>IVectorDebugWriter</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>alg=CPU2;</b><br><table></table>
;
class
IVectorDebugWriterCPU3

Classgroup <b>IVectorDebugWriter</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>alg=CPU3;</b><br><table></table>
;
class
IVectorWriterCPU1

Classgroup <b>IVectorWriter</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>alg=CPU1;</b><br><table><tr><td colspan=2><h3>IVectorWriter Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (<a href="VectorCPU1.html">Vector</a> *v)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: updates the vector v<br/></td></tr><tr><td><br></td></tr></table>
memberfunction
update
bool
bool update (Vector *v)
bool update (<a href="VectorCPU1.html">Vector</a> *v)<br><br>Member function of class <b>IVectorWriterCPU1</b><br>tooltip: updates the vector v<br>Registry Group: <b>/ug4/Algebra</b>
;
class
IVectorWriterCPU2

Classgroup <b>IVectorWriter</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>alg=CPU2;</b><br><table><tr><td colspan=2><h3>IVectorWriter Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (<a href="VectorCPU1.html">Vector</a> *v)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: updates the vector v<br/></td></tr><tr><td><br></td></tr></table>
memberfunction
update
bool
bool update (Vector *v)
bool update (<a href="VectorCPU1.html">Vector</a> *v)<br><br>Member function of class <b>IVectorWriterCPU2</b><br>tooltip: updates the vector v<br>Registry Group: <b>/ug4/Algebra</b>
;
class
IVectorWriterCPU3

Classgroup <b>IVectorWriter</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>alg=CPU3;</b><br><table><tr><td colspan=2><h3>IVectorWriter Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (<a href="VectorCPU1.html">Vector</a> *v)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: updates the vector v<br/></td></tr><tr><td><br></td></tr></table>
memberfunction
update
bool
bool update (Vector *v)
bool update (<a href="VectorCPU1.html">Vector</a> *v)<br><br>Member function of class <b>IVectorWriterCPU3</b><br>tooltip: updates the vector v<br>Registry Group: <b>/ug4/Algebra</b>
;
class
InjectionTransfer1dCPU1
ITransferOperatorCPU1 
Classgroup <b>InjectionTransfer</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU1;</b><br>Inheritance: <a href="ITransferOperatorCPU1.html">ITransferOperatorCPU1</a> <a href="InjectionTransfer1dCPU1.html">InjectionTransfer1dCPU1</a> <br><table><tr><td colspan=2><h3>InjectionTransfer Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>InjectionTransfer1dCPU1 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>InjectionTransfer1dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr></table>
constructor
InjectionTransfer1dCPU1

InjectionTransfer1dCPU1 ()
InjectionTransfer1dCPU1 ()<br>Constructor of class <b>InjectionTransfer1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
InjectionTransfer1dCPU1

InjectionTransfer1dCPU1 (SmartPtr<ApproximationSpace> Approximation Space)
InjectionTransfer1dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>InjectionTransfer1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
InjectionTransfer1dCPU2
ITransferOperatorCPU2 
Classgroup <b>InjectionTransfer</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU2;</b><br>Inheritance: <a href="ITransferOperatorCPU2.html">ITransferOperatorCPU2</a> <a href="InjectionTransfer1dCPU2.html">InjectionTransfer1dCPU2</a> <br><table><tr><td colspan=2><h3>InjectionTransfer Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>InjectionTransfer1dCPU2 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>InjectionTransfer1dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr></table>
constructor
InjectionTransfer1dCPU2

InjectionTransfer1dCPU2 ()
InjectionTransfer1dCPU2 ()<br>Constructor of class <b>InjectionTransfer1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
InjectionTransfer1dCPU2

InjectionTransfer1dCPU2 (SmartPtr<ApproximationSpace> Approximation Space)
InjectionTransfer1dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>InjectionTransfer1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
InjectionTransfer1dCPU3
ITransferOperatorCPU3 
Classgroup <b>InjectionTransfer</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU3;</b><br>Inheritance: <a href="ITransferOperatorCPU3.html">ITransferOperatorCPU3</a> <a href="InjectionTransfer1dCPU3.html">InjectionTransfer1dCPU3</a> <br><table><tr><td colspan=2><h3>InjectionTransfer Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>InjectionTransfer1dCPU3 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>InjectionTransfer1dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr></table>
constructor
InjectionTransfer1dCPU3

InjectionTransfer1dCPU3 ()
InjectionTransfer1dCPU3 ()<br>Constructor of class <b>InjectionTransfer1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
InjectionTransfer1dCPU3

InjectionTransfer1dCPU3 (SmartPtr<ApproximationSpace> Approximation Space)
InjectionTransfer1dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>InjectionTransfer1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
InjectionTransfer2dCPU1
ITransferOperatorCPU1 
Classgroup <b>InjectionTransfer</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU1;</b><br>Inheritance: <a href="ITransferOperatorCPU1.html">ITransferOperatorCPU1</a> <a href="InjectionTransfer2dCPU1.html">InjectionTransfer2dCPU1</a> <br><table><tr><td colspan=2><h3>InjectionTransfer Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>InjectionTransfer2dCPU1 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>InjectionTransfer2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr></table>
constructor
InjectionTransfer2dCPU1

InjectionTransfer2dCPU1 ()
InjectionTransfer2dCPU1 ()<br>Constructor of class <b>InjectionTransfer2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
InjectionTransfer2dCPU1

InjectionTransfer2dCPU1 (SmartPtr<ApproximationSpace> Approximation Space)
InjectionTransfer2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>InjectionTransfer2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
InjectionTransfer2dCPU2
ITransferOperatorCPU2 
Classgroup <b>InjectionTransfer</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU2;</b><br>Inheritance: <a href="ITransferOperatorCPU2.html">ITransferOperatorCPU2</a> <a href="InjectionTransfer2dCPU2.html">InjectionTransfer2dCPU2</a> <br><table><tr><td colspan=2><h3>InjectionTransfer Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>InjectionTransfer2dCPU2 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>InjectionTransfer2dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr></table>
constructor
InjectionTransfer2dCPU2

InjectionTransfer2dCPU2 ()
InjectionTransfer2dCPU2 ()<br>Constructor of class <b>InjectionTransfer2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
InjectionTransfer2dCPU2

InjectionTransfer2dCPU2 (SmartPtr<ApproximationSpace> Approximation Space)
InjectionTransfer2dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>InjectionTransfer2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
InjectionTransfer2dCPU3
ITransferOperatorCPU3 
Classgroup <b>InjectionTransfer</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU3;</b><br>Inheritance: <a href="ITransferOperatorCPU3.html">ITransferOperatorCPU3</a> <a href="InjectionTransfer2dCPU3.html">InjectionTransfer2dCPU3</a> <br><table><tr><td colspan=2><h3>InjectionTransfer Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>InjectionTransfer2dCPU3 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>InjectionTransfer2dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr></table>
constructor
InjectionTransfer2dCPU3

InjectionTransfer2dCPU3 ()
InjectionTransfer2dCPU3 ()<br>Constructor of class <b>InjectionTransfer2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
InjectionTransfer2dCPU3

InjectionTransfer2dCPU3 (SmartPtr<ApproximationSpace> Approximation Space)
InjectionTransfer2dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>InjectionTransfer2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
InjectionTransfer3dCPU1
ITransferOperatorCPU1 
Classgroup <b>InjectionTransfer</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU1;</b><br>Inheritance: <a href="ITransferOperatorCPU1.html">ITransferOperatorCPU1</a> <a href="InjectionTransfer3dCPU1.html">InjectionTransfer3dCPU1</a> <br><table><tr><td colspan=2><h3>InjectionTransfer Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>InjectionTransfer3dCPU1 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>InjectionTransfer3dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr></table>
constructor
InjectionTransfer3dCPU1

InjectionTransfer3dCPU1 ()
InjectionTransfer3dCPU1 ()<br>Constructor of class <b>InjectionTransfer3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
InjectionTransfer3dCPU1

InjectionTransfer3dCPU1 (SmartPtr<ApproximationSpace> Approximation Space)
InjectionTransfer3dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>InjectionTransfer3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
InjectionTransfer3dCPU2
ITransferOperatorCPU2 
Classgroup <b>InjectionTransfer</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU2;</b><br>Inheritance: <a href="ITransferOperatorCPU2.html">ITransferOperatorCPU2</a> <a href="InjectionTransfer3dCPU2.html">InjectionTransfer3dCPU2</a> <br><table><tr><td colspan=2><h3>InjectionTransfer Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>InjectionTransfer3dCPU2 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>InjectionTransfer3dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr></table>
constructor
InjectionTransfer3dCPU2

InjectionTransfer3dCPU2 ()
InjectionTransfer3dCPU2 ()<br>Constructor of class <b>InjectionTransfer3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
InjectionTransfer3dCPU2

InjectionTransfer3dCPU2 (SmartPtr<ApproximationSpace> Approximation Space)
InjectionTransfer3dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>InjectionTransfer3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
InjectionTransfer3dCPU3
ITransferOperatorCPU3 
Classgroup <b>InjectionTransfer</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU3;</b><br>Inheritance: <a href="ITransferOperatorCPU3.html">ITransferOperatorCPU3</a> <a href="InjectionTransfer3dCPU3.html">InjectionTransfer3dCPU3</a> <br><table><tr><td colspan=2><h3>InjectionTransfer Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>InjectionTransfer3dCPU3 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>InjectionTransfer3dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr></table>
constructor
InjectionTransfer3dCPU3

InjectionTransfer3dCPU3 ()
InjectionTransfer3dCPU3 ()<br>Constructor of class <b>InjectionTransfer3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
InjectionTransfer3dCPU3

InjectionTransfer3dCPU3 (SmartPtr<ApproximationSpace> Approximation Space)
InjectionTransfer3dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>InjectionTransfer3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
InterSubsetPartitionWeighting
PartitionWeighting 
Registry Group: <b>/ug4/Grid</b><br>class has constructor. <br>Inheritance: <a href="PartitionWeighting.html">PartitionWeighting</a> <a href="InterSubsetPartitionWeighting.html">InterSubsetPartitionWeighting</a> <br><table><tr><td colspan=2><h3>InterSubsetPartitionWeighting Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>InterSubsetPartitionWeighting ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>InterSubsetPartitionWeighting Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_inter_subset_weight (integer si1, integer si2, integer weight)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>PartitionWeighting Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>PartitionWeighting ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited PartitionWeighting Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_default_weights (integer hWeight, integer vWeight)</td></tr><tr><td><br></td></tr></table>
constructor
InterSubsetPartitionWeighting

InterSubsetPartitionWeighting ()
InterSubsetPartitionWeighting ()<br>Constructor of class <b>InterSubsetPartitionWeighting</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
set_inter_subset_weight
void
void set_inter_subset_weight (integer si1, integer si2, integer weight)
void set_inter_subset_weight (integer si1, integer si2, integer weight)<br><br>Member function of class <b>InterSubsetPartitionWeighting</b><br>Registry Group: <b>/ug4/Grid</b>
;
class
InverseLinker1d
ICplUserData1d UserNumber1d DependentUserDataNumber1d DataLinkerNumber1d 
Classgroup <b>InverseLinker</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="UserNumber1d.html">UserNumber1d</a> <a href="DependentUserDataNumber1d.html">DependentUserDataNumber1d</a> <a href="DataLinkerNumber1d.html">DataLinkerNumber1d</a> <a href="InverseLinker1d.html">InverseLinker1d</a> <br><table><tr><td colspan=2><h3>InverseLinker Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>InverseLinker1d ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>InverseLinker1d (const <a href="InverseLinker2d.html">InverseLinker</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>InverseLinker Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>divide (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>divide (number , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>divide (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>divide (number , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
InverseLinker1d

InverseLinker1d ()
InverseLinker1d ()<br>Constructor of class <b>InverseLinker1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
constructor
InverseLinker1d

InverseLinker1d (const InverseLinker *)
InverseLinker1d (const <a href="InverseLinker2d.html">InverseLinker</a> *)<br>Constructor of class <b>InverseLinker1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
divide
void
void divide (SmartPtr<UserNumber> , SmartPtr<UserNumber> )
void divide (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>InverseLinker1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
divide
void
void divide (number , SmartPtr<UserNumber> )
void divide (number , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>InverseLinker1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
divide
void
void divide (SmartPtr<UserNumber> , number )
void divide (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , number )<br><br>Member function of class <b>InverseLinker1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
divide
void
void divide (number , number )
void divide (number , number )<br><br>Member function of class <b>InverseLinker1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
InverseLinker2d
ICplUserData2d UserNumber2d DependentUserDataNumber2d DataLinkerNumber2d 
Classgroup <b>InverseLinker</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserNumber2d.html">UserNumber2d</a> <a href="DependentUserDataNumber2d.html">DependentUserDataNumber2d</a> <a href="DataLinkerNumber2d.html">DataLinkerNumber2d</a> <a href="InverseLinker2d.html">InverseLinker2d</a> <br><table><tr><td colspan=2><h3>InverseLinker Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>InverseLinker2d ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>InverseLinker2d (const <a href="InverseLinker2d.html">InverseLinker</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>InverseLinker Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>divide (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>divide (number , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>divide (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>divide (number , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
InverseLinker2d

InverseLinker2d ()
InverseLinker2d ()<br>Constructor of class <b>InverseLinker2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
constructor
InverseLinker2d

InverseLinker2d (const InverseLinker *)
InverseLinker2d (const <a href="InverseLinker2d.html">InverseLinker</a> *)<br>Constructor of class <b>InverseLinker2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
divide
void
void divide (SmartPtr<UserNumber> , SmartPtr<UserNumber> )
void divide (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>InverseLinker2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
divide
void
void divide (number , SmartPtr<UserNumber> )
void divide (number , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>InverseLinker2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
divide
void
void divide (SmartPtr<UserNumber> , number )
void divide (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , number )<br><br>Member function of class <b>InverseLinker2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
divide
void
void divide (number , number )
void divide (number , number )<br><br>Member function of class <b>InverseLinker2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
InverseLinker3d
ICplUserData3d UserNumber3d DependentUserDataNumber3d DataLinkerNumber3d 
Classgroup <b>InverseLinker</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserNumber3d.html">UserNumber3d</a> <a href="DependentUserDataNumber3d.html">DependentUserDataNumber3d</a> <a href="DataLinkerNumber3d.html">DataLinkerNumber3d</a> <a href="InverseLinker3d.html">InverseLinker3d</a> <br><table><tr><td colspan=2><h3>InverseLinker Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>InverseLinker3d ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>InverseLinker3d (const <a href="InverseLinker2d.html">InverseLinker</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>InverseLinker Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>divide (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>divide (number , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>divide (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>divide (number , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
InverseLinker3d

InverseLinker3d ()
InverseLinker3d ()<br>Constructor of class <b>InverseLinker3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
constructor
InverseLinker3d

InverseLinker3d (const InverseLinker *)
InverseLinker3d (const <a href="InverseLinker2d.html">InverseLinker</a> *)<br>Constructor of class <b>InverseLinker3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
divide
void
void divide (SmartPtr<UserNumber> , SmartPtr<UserNumber> )
void divide (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>InverseLinker3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
divide
void
void divide (number , SmartPtr<UserNumber> )
void divide (number , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>InverseLinker3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
divide
void
void divide (SmartPtr<UserNumber> , number )
void divide (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , number )<br><br>Member function of class <b>InverseLinker3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
divide
void
void divide (number , number )
void divide (number , number )<br><br>Member function of class <b>InverseLinker3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
JacobiCPU1
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 ILinearIteratorCPU1 IPreconditionerCPU1 
Classgroup <b>Jacobi</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>alg=CPU1;</b><br>Jacobi Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="IPreconditionerCPU1.html">IPreconditionerCPU1</a> <a href="JacobiCPU1.html">JacobiCPU1</a> <br><table><tr><td colspan=2><h3>Jacobi Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>JacobiCPU1 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>JacobiCPU1 (number DampingFactor)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
JacobiCPU1

JacobiCPU1 ()
JacobiCPU1 ()<br>Constructor of class <b>JacobiCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
constructor
JacobiCPU1

JacobiCPU1 (number DampingFactor)
JacobiCPU1 (number DampingFactor)<br>Constructor of class <b>JacobiCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
JacobiCPU2
VectorDebugWritingObjectCPU2 DebugWritingObjectCPU2 ILinearIteratorCPU2 IPreconditionerCPU2 
Classgroup <b>Jacobi</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>alg=CPU2;</b><br>Jacobi Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU2.html">VectorDebugWritingObjectCPU2</a> <a href="DebugWritingObjectCPU2.html">DebugWritingObjectCPU2</a> <a href="ILinearIteratorCPU2.html">ILinearIteratorCPU2</a> <a href="IPreconditionerCPU2.html">IPreconditionerCPU2</a> <a href="JacobiCPU2.html">JacobiCPU2</a> <br><table><tr><td colspan=2><h3>Jacobi Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>JacobiCPU2 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>JacobiCPU2 (number DampingFactor)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
JacobiCPU2

JacobiCPU2 ()
JacobiCPU2 ()<br>Constructor of class <b>JacobiCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
constructor
JacobiCPU2

JacobiCPU2 (number DampingFactor)
JacobiCPU2 (number DampingFactor)<br>Constructor of class <b>JacobiCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
JacobiCPU3
VectorDebugWritingObjectCPU3 DebugWritingObjectCPU3 ILinearIteratorCPU3 IPreconditionerCPU3 
Classgroup <b>Jacobi</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>alg=CPU3;</b><br>Jacobi Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU3.html">VectorDebugWritingObjectCPU3</a> <a href="DebugWritingObjectCPU3.html">DebugWritingObjectCPU3</a> <a href="ILinearIteratorCPU3.html">ILinearIteratorCPU3</a> <a href="IPreconditionerCPU3.html">IPreconditionerCPU3</a> <a href="JacobiCPU3.html">JacobiCPU3</a> <br><table><tr><td colspan=2><h3>Jacobi Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>JacobiCPU3 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>JacobiCPU3 (number DampingFactor)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
JacobiCPU3

JacobiCPU3 ()
JacobiCPU3 ()<br>Constructor of class <b>JacobiCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
constructor
JacobiCPU3

JacobiCPU3 (number DampingFactor)
JacobiCPU3 (number DampingFactor)<br>Constructor of class <b>JacobiCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
LUCPU1
ILinearOperatorInverseCPU1 
Classgroup <b>LU</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has constructor.  Tag <b>alg=CPU1;</b><br>LU-Decomposition exact solver<br>Inheritance: <a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverseCPU1</a> <a href="LUCPU1.html">LUCPU1</a> <br><table><tr><td colspan=2><h3>LU Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LUCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u, const <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u), f remains constant<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply_return_defect (<a href="VectorCPU1.html">Vector</a> *u, <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u),  f := f - A*u becomes new defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; , const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited ILinearOperatorInverse Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; </td><td class="memItemRight" valign=bottom>convergence_check ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td><br></td></tr></table>
constructor
LUCPU1

LUCPU1 ()
LUCPU1 ()<br>Constructor of class <b>LUCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
;
class
LUCPU2
ILinearOperatorInverseCPU2 
Classgroup <b>LU</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has constructor.  Tag <b>alg=CPU2;</b><br>LU-Decomposition exact solver<br>Inheritance: <a href="ILinearOperatorInverseCPU2.html">ILinearOperatorInverseCPU2</a> <a href="LUCPU2.html">LUCPU2</a> <br><table><tr><td colspan=2><h3>LU Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LUCPU2 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u, const <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u), f remains constant<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply_return_defect (<a href="VectorCPU1.html">Vector</a> *u, <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u),  f := f - A*u becomes new defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; , const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited ILinearOperatorInverse Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; </td><td class="memItemRight" valign=bottom>convergence_check ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td><br></td></tr></table>
constructor
LUCPU2

LUCPU2 ()
LUCPU2 ()<br>Constructor of class <b>LUCPU2</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
;
class
LUCPU3
ILinearOperatorInverseCPU3 
Classgroup <b>LU</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has constructor.  Tag <b>alg=CPU3;</b><br>LU-Decomposition exact solver<br>Inheritance: <a href="ILinearOperatorInverseCPU3.html">ILinearOperatorInverseCPU3</a> <a href="LUCPU3.html">LUCPU3</a> <br><table><tr><td colspan=2><h3>LU Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LUCPU3 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u, const <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u), f remains constant<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply_return_defect (<a href="VectorCPU1.html">Vector</a> *u, <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u),  f := f - A*u becomes new defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; , const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited ILinearOperatorInverse Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; </td><td class="memItemRight" valign=bottom>convergence_check ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td><br></td></tr></table>
constructor
LUCPU3

LUCPU3 ()
LUCPU3 ()<br>Constructor of class <b>LUCPU3</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
;
class
LagrangeDifferenceBoundary1dCPU1
IConstraintCPU1 IDomainConstraint1dCPU1 
Classgroup <b>LagrangeDifferenceBoundary</b><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/1d</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU1;</b><br>Inheritance: <a href="IConstraintCPU1.html">IConstraintCPU1</a> <a href="IDomainConstraint1dCPU1.html">IDomainConstraint1dCPU1</a> <a href="LagrangeDifferenceBoundary1dCPU1.html">LagrangeDifferenceBoundary1dCPU1</a> <br><table><tr><td colspan=2><h3>LagrangeDifferenceBoundary Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LagrangeDifferenceBoundary1dCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LagrangeDifferenceBoundary Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>set (c_string Value, c_string Function, c_string Subsets)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
LagrangeDifferenceBoundary1dCPU1

LagrangeDifferenceBoundary1dCPU1 ()
LagrangeDifferenceBoundary1dCPU1 ()<br>Constructor of class <b>LagrangeDifferenceBoundary1dCPU1</b><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/1d</b>
memberfunction
set
bool
bool set (c_string Value, c_string Function, c_string Subsets)
bool set (c_string Value, c_string Function, c_string Subsets)<br><br>Member function of class <b>LagrangeDifferenceBoundary1dCPU1</b><br>returns Success<br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/1d</b>
memberfunction
set_approximation_space
void
void set_approximation_space (SmartPtr<ApproximationSpace> )
void set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )<br><br>Member function of class <b>LagrangeDifferenceBoundary1dCPU1</b><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/1d</b>
;
class
LagrangeDifferenceBoundary1dCPU2
IConstraintCPU2 IDomainConstraint1dCPU2 
Classgroup <b>LagrangeDifferenceBoundary</b><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/1d</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU2;</b><br>Inheritance: <a href="IConstraintCPU2.html">IConstraintCPU2</a> <a href="IDomainConstraint1dCPU2.html">IDomainConstraint1dCPU2</a> <a href="LagrangeDifferenceBoundary1dCPU2.html">LagrangeDifferenceBoundary1dCPU2</a> <br><table><tr><td colspan=2><h3>LagrangeDifferenceBoundary Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LagrangeDifferenceBoundary1dCPU2 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LagrangeDifferenceBoundary Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>set (c_string Value, c_string Function, c_string Subsets)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
LagrangeDifferenceBoundary1dCPU2

LagrangeDifferenceBoundary1dCPU2 ()
LagrangeDifferenceBoundary1dCPU2 ()<br>Constructor of class <b>LagrangeDifferenceBoundary1dCPU2</b><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/1d</b>
memberfunction
set
bool
bool set (c_string Value, c_string Function, c_string Subsets)
bool set (c_string Value, c_string Function, c_string Subsets)<br><br>Member function of class <b>LagrangeDifferenceBoundary1dCPU2</b><br>returns Success<br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/1d</b>
memberfunction
set_approximation_space
void
void set_approximation_space (SmartPtr<ApproximationSpace> )
void set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )<br><br>Member function of class <b>LagrangeDifferenceBoundary1dCPU2</b><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/1d</b>
;
class
LagrangeDifferenceBoundary1dCPU3
IConstraintCPU3 IDomainConstraint1dCPU3 
Classgroup <b>LagrangeDifferenceBoundary</b><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/1d</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU3;</b><br>Inheritance: <a href="IConstraintCPU3.html">IConstraintCPU3</a> <a href="IDomainConstraint1dCPU3.html">IDomainConstraint1dCPU3</a> <a href="LagrangeDifferenceBoundary1dCPU3.html">LagrangeDifferenceBoundary1dCPU3</a> <br><table><tr><td colspan=2><h3>LagrangeDifferenceBoundary Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LagrangeDifferenceBoundary1dCPU3 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LagrangeDifferenceBoundary Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>set (c_string Value, c_string Function, c_string Subsets)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
LagrangeDifferenceBoundary1dCPU3

LagrangeDifferenceBoundary1dCPU3 ()
LagrangeDifferenceBoundary1dCPU3 ()<br>Constructor of class <b>LagrangeDifferenceBoundary1dCPU3</b><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/1d</b>
memberfunction
set
bool
bool set (c_string Value, c_string Function, c_string Subsets)
bool set (c_string Value, c_string Function, c_string Subsets)<br><br>Member function of class <b>LagrangeDifferenceBoundary1dCPU3</b><br>returns Success<br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/1d</b>
memberfunction
set_approximation_space
void
void set_approximation_space (SmartPtr<ApproximationSpace> )
void set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )<br><br>Member function of class <b>LagrangeDifferenceBoundary1dCPU3</b><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/1d</b>
;
class
LagrangeDifferenceBoundary2dCPU1
IConstraintCPU1 IDomainConstraint2dCPU1 
Classgroup <b>LagrangeDifferenceBoundary</b><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/2d</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU1;</b><br>Inheritance: <a href="IConstraintCPU1.html">IConstraintCPU1</a> <a href="IDomainConstraint2dCPU1.html">IDomainConstraint2dCPU1</a> <a href="LagrangeDifferenceBoundary2dCPU1.html">LagrangeDifferenceBoundary2dCPU1</a> <br><table><tr><td colspan=2><h3>LagrangeDifferenceBoundary Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LagrangeDifferenceBoundary2dCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LagrangeDifferenceBoundary Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>set (c_string Value, c_string Function, c_string Subsets)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
LagrangeDifferenceBoundary2dCPU1

LagrangeDifferenceBoundary2dCPU1 ()
LagrangeDifferenceBoundary2dCPU1 ()<br>Constructor of class <b>LagrangeDifferenceBoundary2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/2d</b>
memberfunction
set
bool
bool set (c_string Value, c_string Function, c_string Subsets)
bool set (c_string Value, c_string Function, c_string Subsets)<br><br>Member function of class <b>LagrangeDifferenceBoundary2dCPU1</b><br>returns Success<br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/2d</b>
memberfunction
set_approximation_space
void
void set_approximation_space (SmartPtr<ApproximationSpace> )
void set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )<br><br>Member function of class <b>LagrangeDifferenceBoundary2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/2d</b>
;
class
LagrangeDifferenceBoundary2dCPU2
IConstraintCPU2 IDomainConstraint2dCPU2 
Classgroup <b>LagrangeDifferenceBoundary</b><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/2d</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU2;</b><br>Inheritance: <a href="IConstraintCPU2.html">IConstraintCPU2</a> <a href="IDomainConstraint2dCPU2.html">IDomainConstraint2dCPU2</a> <a href="LagrangeDifferenceBoundary2dCPU2.html">LagrangeDifferenceBoundary2dCPU2</a> <br><table><tr><td colspan=2><h3>LagrangeDifferenceBoundary Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LagrangeDifferenceBoundary2dCPU2 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LagrangeDifferenceBoundary Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>set (c_string Value, c_string Function, c_string Subsets)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
LagrangeDifferenceBoundary2dCPU2

LagrangeDifferenceBoundary2dCPU2 ()
LagrangeDifferenceBoundary2dCPU2 ()<br>Constructor of class <b>LagrangeDifferenceBoundary2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/2d</b>
memberfunction
set
bool
bool set (c_string Value, c_string Function, c_string Subsets)
bool set (c_string Value, c_string Function, c_string Subsets)<br><br>Member function of class <b>LagrangeDifferenceBoundary2dCPU2</b><br>returns Success<br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/2d</b>
memberfunction
set_approximation_space
void
void set_approximation_space (SmartPtr<ApproximationSpace> )
void set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )<br><br>Member function of class <b>LagrangeDifferenceBoundary2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/2d</b>
;
class
LagrangeDifferenceBoundary2dCPU3
IConstraintCPU3 IDomainConstraint2dCPU3 
Classgroup <b>LagrangeDifferenceBoundary</b><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/2d</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU3;</b><br>Inheritance: <a href="IConstraintCPU3.html">IConstraintCPU3</a> <a href="IDomainConstraint2dCPU3.html">IDomainConstraint2dCPU3</a> <a href="LagrangeDifferenceBoundary2dCPU3.html">LagrangeDifferenceBoundary2dCPU3</a> <br><table><tr><td colspan=2><h3>LagrangeDifferenceBoundary Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LagrangeDifferenceBoundary2dCPU3 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LagrangeDifferenceBoundary Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>set (c_string Value, c_string Function, c_string Subsets)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
LagrangeDifferenceBoundary2dCPU3

LagrangeDifferenceBoundary2dCPU3 ()
LagrangeDifferenceBoundary2dCPU3 ()<br>Constructor of class <b>LagrangeDifferenceBoundary2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/2d</b>
memberfunction
set
bool
bool set (c_string Value, c_string Function, c_string Subsets)
bool set (c_string Value, c_string Function, c_string Subsets)<br><br>Member function of class <b>LagrangeDifferenceBoundary2dCPU3</b><br>returns Success<br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/2d</b>
memberfunction
set_approximation_space
void
void set_approximation_space (SmartPtr<ApproximationSpace> )
void set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )<br><br>Member function of class <b>LagrangeDifferenceBoundary2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/2d</b>
;
class
LagrangeDifferenceBoundary3dCPU1
IConstraintCPU1 IDomainConstraint3dCPU1 
Classgroup <b>LagrangeDifferenceBoundary</b><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/3d</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU1;</b><br>Inheritance: <a href="IConstraintCPU1.html">IConstraintCPU1</a> <a href="IDomainConstraint3dCPU1.html">IDomainConstraint3dCPU1</a> <a href="LagrangeDifferenceBoundary3dCPU1.html">LagrangeDifferenceBoundary3dCPU1</a> <br><table><tr><td colspan=2><h3>LagrangeDifferenceBoundary Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LagrangeDifferenceBoundary3dCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LagrangeDifferenceBoundary Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>set (c_string Value, c_string Function, c_string Subsets)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
LagrangeDifferenceBoundary3dCPU1

LagrangeDifferenceBoundary3dCPU1 ()
LagrangeDifferenceBoundary3dCPU1 ()<br>Constructor of class <b>LagrangeDifferenceBoundary3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/3d</b>
memberfunction
set
bool
bool set (c_string Value, c_string Function, c_string Subsets)
bool set (c_string Value, c_string Function, c_string Subsets)<br><br>Member function of class <b>LagrangeDifferenceBoundary3dCPU1</b><br>returns Success<br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/3d</b>
memberfunction
set_approximation_space
void
void set_approximation_space (SmartPtr<ApproximationSpace> )
void set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )<br><br>Member function of class <b>LagrangeDifferenceBoundary3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/3d</b>
;
class
LagrangeDifferenceBoundary3dCPU2
IConstraintCPU2 IDomainConstraint3dCPU2 
Classgroup <b>LagrangeDifferenceBoundary</b><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/3d</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU2;</b><br>Inheritance: <a href="IConstraintCPU2.html">IConstraintCPU2</a> <a href="IDomainConstraint3dCPU2.html">IDomainConstraint3dCPU2</a> <a href="LagrangeDifferenceBoundary3dCPU2.html">LagrangeDifferenceBoundary3dCPU2</a> <br><table><tr><td colspan=2><h3>LagrangeDifferenceBoundary Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LagrangeDifferenceBoundary3dCPU2 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LagrangeDifferenceBoundary Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>set (c_string Value, c_string Function, c_string Subsets)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
LagrangeDifferenceBoundary3dCPU2

LagrangeDifferenceBoundary3dCPU2 ()
LagrangeDifferenceBoundary3dCPU2 ()<br>Constructor of class <b>LagrangeDifferenceBoundary3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/3d</b>
memberfunction
set
bool
bool set (c_string Value, c_string Function, c_string Subsets)
bool set (c_string Value, c_string Function, c_string Subsets)<br><br>Member function of class <b>LagrangeDifferenceBoundary3dCPU2</b><br>returns Success<br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/3d</b>
memberfunction
set_approximation_space
void
void set_approximation_space (SmartPtr<ApproximationSpace> )
void set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )<br><br>Member function of class <b>LagrangeDifferenceBoundary3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/3d</b>
;
class
LagrangeDifferenceBoundary3dCPU3
IConstraintCPU3 IDomainConstraint3dCPU3 
Classgroup <b>LagrangeDifferenceBoundary</b><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/3d</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU3;</b><br>Inheritance: <a href="IConstraintCPU3.html">IConstraintCPU3</a> <a href="IDomainConstraint3dCPU3.html">IDomainConstraint3dCPU3</a> <a href="LagrangeDifferenceBoundary3dCPU3.html">LagrangeDifferenceBoundary3dCPU3</a> <br><table><tr><td colspan=2><h3>LagrangeDifferenceBoundary Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LagrangeDifferenceBoundary3dCPU3 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LagrangeDifferenceBoundary Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>set (c_string Value, c_string Function, c_string Subsets)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
LagrangeDifferenceBoundary3dCPU3

LagrangeDifferenceBoundary3dCPU3 ()
LagrangeDifferenceBoundary3dCPU3 ()<br>Constructor of class <b>LagrangeDifferenceBoundary3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/3d</b>
memberfunction
set
bool
bool set (c_string Value, c_string Function, c_string Subsets)
bool set (c_string Value, c_string Function, c_string Subsets)<br><br>Member function of class <b>LagrangeDifferenceBoundary3dCPU3</b><br>returns Success<br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/3d</b>
memberfunction
set_approximation_space
void
void set_approximation_space (SmartPtr<ApproximationSpace> )
void set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )<br><br>Member function of class <b>LagrangeDifferenceBoundary3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/3d</b>
;
class
LinProjElementEvaluator1d

Classgroup <b>LinProjElementEvaluator</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b><br>class has no constructor.  Tag <b>dim=1d;</b><br><table></table>
;
class
LinProjElementEvaluator2d

Classgroup <b>LinProjElementEvaluator</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b><br>class has no constructor.  Tag <b>dim=2d;</b><br><table></table>
;
class
LinProjElementEvaluator3d

Classgroup <b>LinProjElementEvaluator</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b><br>class has no constructor.  Tag <b>dim=3d;</b><br><table></table>
;
class
LineGaussSeidel1dCPU1
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 ILinearIteratorCPU1 IPreconditionerCPU1 
Classgroup <b>LineGaussSeidel</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU1;</b><br>Line Gauss-Seidel Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="IPreconditionerCPU1.html">IPreconditionerCPU1</a> <a href="LineGaussSeidel1dCPU1.html">LineGaussSeidel1dCPU1</a> <br><table><tr><td colspan=2><h3>LineGaussSeidel Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LineGaussSeidel1dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LineGaussSeidel Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t , size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (size_t update)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
LineGaussSeidel1dCPU1

LineGaussSeidel1dCPU1 (SmartPtr<ApproximationSpace> Approximation Space)
LineGaussSeidel1dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>LineGaussSeidel1dCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
update
bool
bool update (size_t update)
bool update (size_t update)<br><br>Member function of class <b>LineGaussSeidel1dCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )<br><br>Member function of class <b>LineGaussSeidel1dCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t )
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t )<br><br>Member function of class <b>LineGaussSeidel1dCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t )
void set_num_steps (size_t set_num_steps, size_t )<br><br>Member function of class <b>LineGaussSeidel1dCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
LineGaussSeidel1dCPU2
VectorDebugWritingObjectCPU2 DebugWritingObjectCPU2 ILinearIteratorCPU2 IPreconditionerCPU2 
Classgroup <b>LineGaussSeidel</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU2;</b><br>Line Gauss-Seidel Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU2.html">VectorDebugWritingObjectCPU2</a> <a href="DebugWritingObjectCPU2.html">DebugWritingObjectCPU2</a> <a href="ILinearIteratorCPU2.html">ILinearIteratorCPU2</a> <a href="IPreconditionerCPU2.html">IPreconditionerCPU2</a> <a href="LineGaussSeidel1dCPU2.html">LineGaussSeidel1dCPU2</a> <br><table><tr><td colspan=2><h3>LineGaussSeidel Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LineGaussSeidel1dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LineGaussSeidel Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t , size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (size_t update)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
LineGaussSeidel1dCPU2

LineGaussSeidel1dCPU2 (SmartPtr<ApproximationSpace> Approximation Space)
LineGaussSeidel1dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>LineGaussSeidel1dCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
update
bool
bool update (size_t update)
bool update (size_t update)<br><br>Member function of class <b>LineGaussSeidel1dCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )<br><br>Member function of class <b>LineGaussSeidel1dCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t )
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t )<br><br>Member function of class <b>LineGaussSeidel1dCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t )
void set_num_steps (size_t set_num_steps, size_t )<br><br>Member function of class <b>LineGaussSeidel1dCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
LineGaussSeidel1dCPU3
VectorDebugWritingObjectCPU3 DebugWritingObjectCPU3 ILinearIteratorCPU3 IPreconditionerCPU3 
Classgroup <b>LineGaussSeidel</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU3;</b><br>Line Gauss-Seidel Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU3.html">VectorDebugWritingObjectCPU3</a> <a href="DebugWritingObjectCPU3.html">DebugWritingObjectCPU3</a> <a href="ILinearIteratorCPU3.html">ILinearIteratorCPU3</a> <a href="IPreconditionerCPU3.html">IPreconditionerCPU3</a> <a href="LineGaussSeidel1dCPU3.html">LineGaussSeidel1dCPU3</a> <br><table><tr><td colspan=2><h3>LineGaussSeidel Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LineGaussSeidel1dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LineGaussSeidel Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t , size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (size_t update)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
LineGaussSeidel1dCPU3

LineGaussSeidel1dCPU3 (SmartPtr<ApproximationSpace> Approximation Space)
LineGaussSeidel1dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>LineGaussSeidel1dCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
update
bool
bool update (size_t update)
bool update (size_t update)<br><br>Member function of class <b>LineGaussSeidel1dCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )<br><br>Member function of class <b>LineGaussSeidel1dCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t )
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t )<br><br>Member function of class <b>LineGaussSeidel1dCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t )
void set_num_steps (size_t set_num_steps, size_t )<br><br>Member function of class <b>LineGaussSeidel1dCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
LineGaussSeidel2dCPU1
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 ILinearIteratorCPU1 IPreconditionerCPU1 
Classgroup <b>LineGaussSeidel</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU1;</b><br>Line Gauss-Seidel Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="IPreconditionerCPU1.html">IPreconditionerCPU1</a> <a href="LineGaussSeidel2dCPU1.html">LineGaussSeidel2dCPU1</a> <br><table><tr><td colspan=2><h3>LineGaussSeidel Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LineGaussSeidel2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LineGaussSeidel Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t , size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (size_t update)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
LineGaussSeidel2dCPU1

LineGaussSeidel2dCPU1 (SmartPtr<ApproximationSpace> Approximation Space)
LineGaussSeidel2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>LineGaussSeidel2dCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
update
bool
bool update (size_t update)
bool update (size_t update)<br><br>Member function of class <b>LineGaussSeidel2dCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )<br><br>Member function of class <b>LineGaussSeidel2dCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t )
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t )<br><br>Member function of class <b>LineGaussSeidel2dCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t )
void set_num_steps (size_t set_num_steps, size_t )<br><br>Member function of class <b>LineGaussSeidel2dCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
LineGaussSeidel2dCPU2
VectorDebugWritingObjectCPU2 DebugWritingObjectCPU2 ILinearIteratorCPU2 IPreconditionerCPU2 
Classgroup <b>LineGaussSeidel</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU2;</b><br>Line Gauss-Seidel Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU2.html">VectorDebugWritingObjectCPU2</a> <a href="DebugWritingObjectCPU2.html">DebugWritingObjectCPU2</a> <a href="ILinearIteratorCPU2.html">ILinearIteratorCPU2</a> <a href="IPreconditionerCPU2.html">IPreconditionerCPU2</a> <a href="LineGaussSeidel2dCPU2.html">LineGaussSeidel2dCPU2</a> <br><table><tr><td colspan=2><h3>LineGaussSeidel Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LineGaussSeidel2dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LineGaussSeidel Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t , size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (size_t update)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
LineGaussSeidel2dCPU2

LineGaussSeidel2dCPU2 (SmartPtr<ApproximationSpace> Approximation Space)
LineGaussSeidel2dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>LineGaussSeidel2dCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
update
bool
bool update (size_t update)
bool update (size_t update)<br><br>Member function of class <b>LineGaussSeidel2dCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )<br><br>Member function of class <b>LineGaussSeidel2dCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t )
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t )<br><br>Member function of class <b>LineGaussSeidel2dCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t )
void set_num_steps (size_t set_num_steps, size_t )<br><br>Member function of class <b>LineGaussSeidel2dCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
LineGaussSeidel2dCPU3
VectorDebugWritingObjectCPU3 DebugWritingObjectCPU3 ILinearIteratorCPU3 IPreconditionerCPU3 
Classgroup <b>LineGaussSeidel</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU3;</b><br>Line Gauss-Seidel Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU3.html">VectorDebugWritingObjectCPU3</a> <a href="DebugWritingObjectCPU3.html">DebugWritingObjectCPU3</a> <a href="ILinearIteratorCPU3.html">ILinearIteratorCPU3</a> <a href="IPreconditionerCPU3.html">IPreconditionerCPU3</a> <a href="LineGaussSeidel2dCPU3.html">LineGaussSeidel2dCPU3</a> <br><table><tr><td colspan=2><h3>LineGaussSeidel Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LineGaussSeidel2dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LineGaussSeidel Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t , size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (size_t update)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
LineGaussSeidel2dCPU3

LineGaussSeidel2dCPU3 (SmartPtr<ApproximationSpace> Approximation Space)
LineGaussSeidel2dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>LineGaussSeidel2dCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
update
bool
bool update (size_t update)
bool update (size_t update)<br><br>Member function of class <b>LineGaussSeidel2dCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )<br><br>Member function of class <b>LineGaussSeidel2dCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t )
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t )<br><br>Member function of class <b>LineGaussSeidel2dCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t )
void set_num_steps (size_t set_num_steps, size_t )<br><br>Member function of class <b>LineGaussSeidel2dCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
LineGaussSeidel3dCPU1
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 ILinearIteratorCPU1 IPreconditionerCPU1 
Classgroup <b>LineGaussSeidel</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU1;</b><br>Line Gauss-Seidel Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="IPreconditionerCPU1.html">IPreconditionerCPU1</a> <a href="LineGaussSeidel3dCPU1.html">LineGaussSeidel3dCPU1</a> <br><table><tr><td colspan=2><h3>LineGaussSeidel Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LineGaussSeidel3dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LineGaussSeidel Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t , size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (size_t update)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
LineGaussSeidel3dCPU1

LineGaussSeidel3dCPU1 (SmartPtr<ApproximationSpace> Approximation Space)
LineGaussSeidel3dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>LineGaussSeidel3dCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
update
bool
bool update (size_t update)
bool update (size_t update)<br><br>Member function of class <b>LineGaussSeidel3dCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )<br><br>Member function of class <b>LineGaussSeidel3dCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t )
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t )<br><br>Member function of class <b>LineGaussSeidel3dCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t )
void set_num_steps (size_t set_num_steps, size_t )<br><br>Member function of class <b>LineGaussSeidel3dCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
LineGaussSeidel3dCPU2
VectorDebugWritingObjectCPU2 DebugWritingObjectCPU2 ILinearIteratorCPU2 IPreconditionerCPU2 
Classgroup <b>LineGaussSeidel</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU2;</b><br>Line Gauss-Seidel Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU2.html">VectorDebugWritingObjectCPU2</a> <a href="DebugWritingObjectCPU2.html">DebugWritingObjectCPU2</a> <a href="ILinearIteratorCPU2.html">ILinearIteratorCPU2</a> <a href="IPreconditionerCPU2.html">IPreconditionerCPU2</a> <a href="LineGaussSeidel3dCPU2.html">LineGaussSeidel3dCPU2</a> <br><table><tr><td colspan=2><h3>LineGaussSeidel Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LineGaussSeidel3dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LineGaussSeidel Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t , size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (size_t update)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
LineGaussSeidel3dCPU2

LineGaussSeidel3dCPU2 (SmartPtr<ApproximationSpace> Approximation Space)
LineGaussSeidel3dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>LineGaussSeidel3dCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
update
bool
bool update (size_t update)
bool update (size_t update)<br><br>Member function of class <b>LineGaussSeidel3dCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )<br><br>Member function of class <b>LineGaussSeidel3dCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t )
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t )<br><br>Member function of class <b>LineGaussSeidel3dCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t )
void set_num_steps (size_t set_num_steps, size_t )<br><br>Member function of class <b>LineGaussSeidel3dCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
LineGaussSeidel3dCPU3
VectorDebugWritingObjectCPU3 DebugWritingObjectCPU3 ILinearIteratorCPU3 IPreconditionerCPU3 
Classgroup <b>LineGaussSeidel</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU3;</b><br>Line Gauss-Seidel Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU3.html">VectorDebugWritingObjectCPU3</a> <a href="DebugWritingObjectCPU3.html">DebugWritingObjectCPU3</a> <a href="ILinearIteratorCPU3.html">ILinearIteratorCPU3</a> <a href="IPreconditionerCPU3.html">IPreconditionerCPU3</a> <a href="LineGaussSeidel3dCPU3.html">LineGaussSeidel3dCPU3</a> <br><table><tr><td colspan=2><h3>LineGaussSeidel Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LineGaussSeidel3dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LineGaussSeidel Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t , size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (size_t update)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
LineGaussSeidel3dCPU3

LineGaussSeidel3dCPU3 (SmartPtr<ApproximationSpace> Approximation Space)
LineGaussSeidel3dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>LineGaussSeidel3dCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
update
bool
bool update (size_t update)
bool update (size_t update)<br><br>Member function of class <b>LineGaussSeidel3dCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )<br><br>Member function of class <b>LineGaussSeidel3dCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t )
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t )<br><br>Member function of class <b>LineGaussSeidel3dCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t )
void set_num_steps (size_t set_num_steps, size_t )<br><br>Member function of class <b>LineGaussSeidel3dCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
LineVanka1dCPU1
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 ILinearIteratorCPU1 IPreconditionerCPU1 
Classgroup <b>LineVanka</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU1;</b><br>LineVanka Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="IPreconditionerCPU1.html">IPreconditionerCPU1</a> <a href="LineVanka1dCPU1.html">LineVanka1dCPU1</a> <br><table><tr><td colspan=2><h3>LineVanka Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LineVanka1dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LineVanka Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t , size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_relax (number relax)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (size_t update)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
LineVanka1dCPU1

LineVanka1dCPU1 (SmartPtr<ApproximationSpace> Approximation Space)
LineVanka1dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>LineVanka1dCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
update
bool
bool update (size_t update)
bool update (size_t update)<br><br>Member function of class <b>LineVanka1dCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )<br><br>Member function of class <b>LineVanka1dCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t )
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t )<br><br>Member function of class <b>LineVanka1dCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t )
void set_num_steps (size_t set_num_steps, size_t )<br><br>Member function of class <b>LineVanka1dCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_relax
void
void set_relax (number relax)
void set_relax (number relax)<br><br>Member function of class <b>LineVanka1dCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
LineVanka1dCPU2
VectorDebugWritingObjectCPU2 DebugWritingObjectCPU2 ILinearIteratorCPU2 IPreconditionerCPU2 
Classgroup <b>LineVanka</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU2;</b><br>LineVanka Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU2.html">VectorDebugWritingObjectCPU2</a> <a href="DebugWritingObjectCPU2.html">DebugWritingObjectCPU2</a> <a href="ILinearIteratorCPU2.html">ILinearIteratorCPU2</a> <a href="IPreconditionerCPU2.html">IPreconditionerCPU2</a> <a href="LineVanka1dCPU2.html">LineVanka1dCPU2</a> <br><table><tr><td colspan=2><h3>LineVanka Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LineVanka1dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LineVanka Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t , size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_relax (number relax)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (size_t update)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
LineVanka1dCPU2

LineVanka1dCPU2 (SmartPtr<ApproximationSpace> Approximation Space)
LineVanka1dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>LineVanka1dCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
update
bool
bool update (size_t update)
bool update (size_t update)<br><br>Member function of class <b>LineVanka1dCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )<br><br>Member function of class <b>LineVanka1dCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t )
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t )<br><br>Member function of class <b>LineVanka1dCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t )
void set_num_steps (size_t set_num_steps, size_t )<br><br>Member function of class <b>LineVanka1dCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_relax
void
void set_relax (number relax)
void set_relax (number relax)<br><br>Member function of class <b>LineVanka1dCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
LineVanka1dCPU3
VectorDebugWritingObjectCPU3 DebugWritingObjectCPU3 ILinearIteratorCPU3 IPreconditionerCPU3 
Classgroup <b>LineVanka</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU3;</b><br>LineVanka Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU3.html">VectorDebugWritingObjectCPU3</a> <a href="DebugWritingObjectCPU3.html">DebugWritingObjectCPU3</a> <a href="ILinearIteratorCPU3.html">ILinearIteratorCPU3</a> <a href="IPreconditionerCPU3.html">IPreconditionerCPU3</a> <a href="LineVanka1dCPU3.html">LineVanka1dCPU3</a> <br><table><tr><td colspan=2><h3>LineVanka Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LineVanka1dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LineVanka Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t , size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_relax (number relax)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (size_t update)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
LineVanka1dCPU3

LineVanka1dCPU3 (SmartPtr<ApproximationSpace> Approximation Space)
LineVanka1dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>LineVanka1dCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
update
bool
bool update (size_t update)
bool update (size_t update)<br><br>Member function of class <b>LineVanka1dCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )<br><br>Member function of class <b>LineVanka1dCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t )
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t )<br><br>Member function of class <b>LineVanka1dCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t )
void set_num_steps (size_t set_num_steps, size_t )<br><br>Member function of class <b>LineVanka1dCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_relax
void
void set_relax (number relax)
void set_relax (number relax)<br><br>Member function of class <b>LineVanka1dCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
LineVanka2dCPU1
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 ILinearIteratorCPU1 IPreconditionerCPU1 
Classgroup <b>LineVanka</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU1;</b><br>LineVanka Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="IPreconditionerCPU1.html">IPreconditionerCPU1</a> <a href="LineVanka2dCPU1.html">LineVanka2dCPU1</a> <br><table><tr><td colspan=2><h3>LineVanka Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LineVanka2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LineVanka Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t , size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_relax (number relax)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (size_t update)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
LineVanka2dCPU1

LineVanka2dCPU1 (SmartPtr<ApproximationSpace> Approximation Space)
LineVanka2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>LineVanka2dCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
update
bool
bool update (size_t update)
bool update (size_t update)<br><br>Member function of class <b>LineVanka2dCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )<br><br>Member function of class <b>LineVanka2dCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t )
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t )<br><br>Member function of class <b>LineVanka2dCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t )
void set_num_steps (size_t set_num_steps, size_t )<br><br>Member function of class <b>LineVanka2dCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_relax
void
void set_relax (number relax)
void set_relax (number relax)<br><br>Member function of class <b>LineVanka2dCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
LineVanka2dCPU2
VectorDebugWritingObjectCPU2 DebugWritingObjectCPU2 ILinearIteratorCPU2 IPreconditionerCPU2 
Classgroup <b>LineVanka</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU2;</b><br>LineVanka Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU2.html">VectorDebugWritingObjectCPU2</a> <a href="DebugWritingObjectCPU2.html">DebugWritingObjectCPU2</a> <a href="ILinearIteratorCPU2.html">ILinearIteratorCPU2</a> <a href="IPreconditionerCPU2.html">IPreconditionerCPU2</a> <a href="LineVanka2dCPU2.html">LineVanka2dCPU2</a> <br><table><tr><td colspan=2><h3>LineVanka Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LineVanka2dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LineVanka Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t , size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_relax (number relax)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (size_t update)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
LineVanka2dCPU2

LineVanka2dCPU2 (SmartPtr<ApproximationSpace> Approximation Space)
LineVanka2dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>LineVanka2dCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
update
bool
bool update (size_t update)
bool update (size_t update)<br><br>Member function of class <b>LineVanka2dCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )<br><br>Member function of class <b>LineVanka2dCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t )
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t )<br><br>Member function of class <b>LineVanka2dCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t )
void set_num_steps (size_t set_num_steps, size_t )<br><br>Member function of class <b>LineVanka2dCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_relax
void
void set_relax (number relax)
void set_relax (number relax)<br><br>Member function of class <b>LineVanka2dCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
LineVanka2dCPU3
VectorDebugWritingObjectCPU3 DebugWritingObjectCPU3 ILinearIteratorCPU3 IPreconditionerCPU3 
Classgroup <b>LineVanka</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU3;</b><br>LineVanka Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU3.html">VectorDebugWritingObjectCPU3</a> <a href="DebugWritingObjectCPU3.html">DebugWritingObjectCPU3</a> <a href="ILinearIteratorCPU3.html">ILinearIteratorCPU3</a> <a href="IPreconditionerCPU3.html">IPreconditionerCPU3</a> <a href="LineVanka2dCPU3.html">LineVanka2dCPU3</a> <br><table><tr><td colspan=2><h3>LineVanka Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LineVanka2dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LineVanka Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t , size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_relax (number relax)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (size_t update)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
LineVanka2dCPU3

LineVanka2dCPU3 (SmartPtr<ApproximationSpace> Approximation Space)
LineVanka2dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>LineVanka2dCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
update
bool
bool update (size_t update)
bool update (size_t update)<br><br>Member function of class <b>LineVanka2dCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )<br><br>Member function of class <b>LineVanka2dCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t )
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t )<br><br>Member function of class <b>LineVanka2dCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t )
void set_num_steps (size_t set_num_steps, size_t )<br><br>Member function of class <b>LineVanka2dCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_relax
void
void set_relax (number relax)
void set_relax (number relax)<br><br>Member function of class <b>LineVanka2dCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
LineVanka3dCPU1
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 ILinearIteratorCPU1 IPreconditionerCPU1 
Classgroup <b>LineVanka</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU1;</b><br>LineVanka Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="IPreconditionerCPU1.html">IPreconditionerCPU1</a> <a href="LineVanka3dCPU1.html">LineVanka3dCPU1</a> <br><table><tr><td colspan=2><h3>LineVanka Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LineVanka3dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LineVanka Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t , size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_relax (number relax)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (size_t update)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
LineVanka3dCPU1

LineVanka3dCPU1 (SmartPtr<ApproximationSpace> Approximation Space)
LineVanka3dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>LineVanka3dCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
update
bool
bool update (size_t update)
bool update (size_t update)<br><br>Member function of class <b>LineVanka3dCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )<br><br>Member function of class <b>LineVanka3dCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t )
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t )<br><br>Member function of class <b>LineVanka3dCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t )
void set_num_steps (size_t set_num_steps, size_t )<br><br>Member function of class <b>LineVanka3dCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_relax
void
void set_relax (number relax)
void set_relax (number relax)<br><br>Member function of class <b>LineVanka3dCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
LineVanka3dCPU2
VectorDebugWritingObjectCPU2 DebugWritingObjectCPU2 ILinearIteratorCPU2 IPreconditionerCPU2 
Classgroup <b>LineVanka</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU2;</b><br>LineVanka Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU2.html">VectorDebugWritingObjectCPU2</a> <a href="DebugWritingObjectCPU2.html">DebugWritingObjectCPU2</a> <a href="ILinearIteratorCPU2.html">ILinearIteratorCPU2</a> <a href="IPreconditionerCPU2.html">IPreconditionerCPU2</a> <a href="LineVanka3dCPU2.html">LineVanka3dCPU2</a> <br><table><tr><td colspan=2><h3>LineVanka Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LineVanka3dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LineVanka Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t , size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_relax (number relax)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (size_t update)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
LineVanka3dCPU2

LineVanka3dCPU2 (SmartPtr<ApproximationSpace> Approximation Space)
LineVanka3dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>LineVanka3dCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
update
bool
bool update (size_t update)
bool update (size_t update)<br><br>Member function of class <b>LineVanka3dCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )<br><br>Member function of class <b>LineVanka3dCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t )
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t )<br><br>Member function of class <b>LineVanka3dCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t )
void set_num_steps (size_t set_num_steps, size_t )<br><br>Member function of class <b>LineVanka3dCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_relax
void
void set_relax (number relax)
void set_relax (number relax)<br><br>Member function of class <b>LineVanka3dCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
LineVanka3dCPU3
VectorDebugWritingObjectCPU3 DebugWritingObjectCPU3 ILinearIteratorCPU3 IPreconditionerCPU3 
Classgroup <b>LineVanka</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU3;</b><br>LineVanka Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU3.html">VectorDebugWritingObjectCPU3</a> <a href="DebugWritingObjectCPU3.html">DebugWritingObjectCPU3</a> <a href="ILinearIteratorCPU3.html">ILinearIteratorCPU3</a> <a href="IPreconditionerCPU3.html">IPreconditionerCPU3</a> <a href="LineVanka3dCPU3.html">LineVanka3dCPU3</a> <br><table><tr><td colspan=2><h3>LineVanka Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LineVanka3dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LineVanka Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t , size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_relax (number relax)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (size_t update)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
LineVanka3dCPU3

LineVanka3dCPU3 (SmartPtr<ApproximationSpace> Approximation Space)
LineVanka3dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>LineVanka3dCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
update
bool
bool update (size_t update)
bool update (size_t update)<br><br>Member function of class <b>LineVanka3dCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )<br><br>Member function of class <b>LineVanka3dCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t )
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t )<br><br>Member function of class <b>LineVanka3dCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t )
void set_num_steps (size_t set_num_steps, size_t )<br><br>Member function of class <b>LineVanka3dCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_relax
void
void set_relax (number relax)
void set_relax (number relax)<br><br>Member function of class <b>LineVanka3dCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
LinearElastPlastOutput1dCPU1

Classgroup <b>LinearElastPlastOutput</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU1;</b><br><table><tr><td colspan=2><h3>LinearElastPlastOutput Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LinearElastPlastOutput1dCPU1 (SmartPtr&lt;<a href="LinearElastoPlasticity2d.html">LinearElastoPlasticity</a>&gt; domain disc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LinearElastPlastOutput Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>normal_stresses_strains (<a href="GridFunction2dCPU1.html">GridFunction</a> *sigma, <a href="GridFunction2dCPU1.html">GridFunction</a> *epsilon, const <a href="GridFunction2dCPU1.html">GridFunction</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: computes stress tensor sigma and linearized strain tensor epsilon<br/></td></tr><tr><td><br></td></tr></table>
constructor
LinearElastPlastOutput1dCPU1

LinearElastPlastOutput1dCPU1 (SmartPtr<LinearElastoPlasticity> domain disc)
LinearElastPlastOutput1dCPU1 (SmartPtr&lt;<a href="LinearElastoPlasticity2d.html">LinearElastoPlasticity</a>&gt; domain disc)<br>Constructor of class <b>LinearElastPlastOutput1dCPU1</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
normal_stresses_strains
void
void normal_stresses_strains (GridFunction *sigma, GridFunction *epsilon, const GridFunction *u)
void normal_stresses_strains (<a href="GridFunction2dCPU1.html">GridFunction</a> *sigma, <a href="GridFunction2dCPU1.html">GridFunction</a> *epsilon, const <a href="GridFunction2dCPU1.html">GridFunction</a> *u)<br><br>Member function of class <b>LinearElastPlastOutput1dCPU1</b><br>tooltip: computes stress tensor sigma and linearized strain tensor epsilon<br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
;
class
LinearElastPlastOutput1dCPU2

Classgroup <b>LinearElastPlastOutput</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU2;</b><br><table><tr><td colspan=2><h3>LinearElastPlastOutput Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LinearElastPlastOutput1dCPU2 (SmartPtr&lt;<a href="LinearElastoPlasticity2d.html">LinearElastoPlasticity</a>&gt; domain disc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LinearElastPlastOutput Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>normal_stresses_strains (<a href="GridFunction2dCPU1.html">GridFunction</a> *sigma, <a href="GridFunction2dCPU1.html">GridFunction</a> *epsilon, const <a href="GridFunction2dCPU1.html">GridFunction</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: computes stress tensor sigma and linearized strain tensor epsilon<br/></td></tr><tr><td><br></td></tr></table>
constructor
LinearElastPlastOutput1dCPU2

LinearElastPlastOutput1dCPU2 (SmartPtr<LinearElastoPlasticity> domain disc)
LinearElastPlastOutput1dCPU2 (SmartPtr&lt;<a href="LinearElastoPlasticity2d.html">LinearElastoPlasticity</a>&gt; domain disc)<br>Constructor of class <b>LinearElastPlastOutput1dCPU2</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
normal_stresses_strains
void
void normal_stresses_strains (GridFunction *sigma, GridFunction *epsilon, const GridFunction *u)
void normal_stresses_strains (<a href="GridFunction2dCPU1.html">GridFunction</a> *sigma, <a href="GridFunction2dCPU1.html">GridFunction</a> *epsilon, const <a href="GridFunction2dCPU1.html">GridFunction</a> *u)<br><br>Member function of class <b>LinearElastPlastOutput1dCPU2</b><br>tooltip: computes stress tensor sigma and linearized strain tensor epsilon<br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
;
class
LinearElastPlastOutput1dCPU3

Classgroup <b>LinearElastPlastOutput</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU3;</b><br><table><tr><td colspan=2><h3>LinearElastPlastOutput Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LinearElastPlastOutput1dCPU3 (SmartPtr&lt;<a href="LinearElastoPlasticity2d.html">LinearElastoPlasticity</a>&gt; domain disc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LinearElastPlastOutput Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>normal_stresses_strains (<a href="GridFunction2dCPU1.html">GridFunction</a> *sigma, <a href="GridFunction2dCPU1.html">GridFunction</a> *epsilon, const <a href="GridFunction2dCPU1.html">GridFunction</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: computes stress tensor sigma and linearized strain tensor epsilon<br/></td></tr><tr><td><br></td></tr></table>
constructor
LinearElastPlastOutput1dCPU3

LinearElastPlastOutput1dCPU3 (SmartPtr<LinearElastoPlasticity> domain disc)
LinearElastPlastOutput1dCPU3 (SmartPtr&lt;<a href="LinearElastoPlasticity2d.html">LinearElastoPlasticity</a>&gt; domain disc)<br>Constructor of class <b>LinearElastPlastOutput1dCPU3</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
normal_stresses_strains
void
void normal_stresses_strains (GridFunction *sigma, GridFunction *epsilon, const GridFunction *u)
void normal_stresses_strains (<a href="GridFunction2dCPU1.html">GridFunction</a> *sigma, <a href="GridFunction2dCPU1.html">GridFunction</a> *epsilon, const <a href="GridFunction2dCPU1.html">GridFunction</a> *u)<br><br>Member function of class <b>LinearElastPlastOutput1dCPU3</b><br>tooltip: computes stress tensor sigma and linearized strain tensor epsilon<br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
;
class
LinearElastPlastOutput2dCPU1

Classgroup <b>LinearElastPlastOutput</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU1;</b><br><table><tr><td colspan=2><h3>LinearElastPlastOutput Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LinearElastPlastOutput2dCPU1 (SmartPtr&lt;<a href="LinearElastoPlasticity2d.html">LinearElastoPlasticity</a>&gt; domain disc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LinearElastPlastOutput Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>normal_stresses_strains (<a href="GridFunction2dCPU1.html">GridFunction</a> *sigma, <a href="GridFunction2dCPU1.html">GridFunction</a> *epsilon, const <a href="GridFunction2dCPU1.html">GridFunction</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: computes stress tensor sigma and linearized strain tensor epsilon<br/></td></tr><tr><td><br></td></tr></table>
constructor
LinearElastPlastOutput2dCPU1

LinearElastPlastOutput2dCPU1 (SmartPtr<LinearElastoPlasticity> domain disc)
LinearElastPlastOutput2dCPU1 (SmartPtr&lt;<a href="LinearElastoPlasticity2d.html">LinearElastoPlasticity</a>&gt; domain disc)<br>Constructor of class <b>LinearElastPlastOutput2dCPU1</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
normal_stresses_strains
void
void normal_stresses_strains (GridFunction *sigma, GridFunction *epsilon, const GridFunction *u)
void normal_stresses_strains (<a href="GridFunction2dCPU1.html">GridFunction</a> *sigma, <a href="GridFunction2dCPU1.html">GridFunction</a> *epsilon, const <a href="GridFunction2dCPU1.html">GridFunction</a> *u)<br><br>Member function of class <b>LinearElastPlastOutput2dCPU1</b><br>tooltip: computes stress tensor sigma and linearized strain tensor epsilon<br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
;
class
LinearElastPlastOutput2dCPU2

Classgroup <b>LinearElastPlastOutput</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU2;</b><br><table><tr><td colspan=2><h3>LinearElastPlastOutput Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LinearElastPlastOutput2dCPU2 (SmartPtr&lt;<a href="LinearElastoPlasticity2d.html">LinearElastoPlasticity</a>&gt; domain disc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LinearElastPlastOutput Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>normal_stresses_strains (<a href="GridFunction2dCPU1.html">GridFunction</a> *sigma, <a href="GridFunction2dCPU1.html">GridFunction</a> *epsilon, const <a href="GridFunction2dCPU1.html">GridFunction</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: computes stress tensor sigma and linearized strain tensor epsilon<br/></td></tr><tr><td><br></td></tr></table>
constructor
LinearElastPlastOutput2dCPU2

LinearElastPlastOutput2dCPU2 (SmartPtr<LinearElastoPlasticity> domain disc)
LinearElastPlastOutput2dCPU2 (SmartPtr&lt;<a href="LinearElastoPlasticity2d.html">LinearElastoPlasticity</a>&gt; domain disc)<br>Constructor of class <b>LinearElastPlastOutput2dCPU2</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
normal_stresses_strains
void
void normal_stresses_strains (GridFunction *sigma, GridFunction *epsilon, const GridFunction *u)
void normal_stresses_strains (<a href="GridFunction2dCPU1.html">GridFunction</a> *sigma, <a href="GridFunction2dCPU1.html">GridFunction</a> *epsilon, const <a href="GridFunction2dCPU1.html">GridFunction</a> *u)<br><br>Member function of class <b>LinearElastPlastOutput2dCPU2</b><br>tooltip: computes stress tensor sigma and linearized strain tensor epsilon<br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
;
class
LinearElastPlastOutput2dCPU3

Classgroup <b>LinearElastPlastOutput</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU3;</b><br><table><tr><td colspan=2><h3>LinearElastPlastOutput Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LinearElastPlastOutput2dCPU3 (SmartPtr&lt;<a href="LinearElastoPlasticity2d.html">LinearElastoPlasticity</a>&gt; domain disc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LinearElastPlastOutput Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>normal_stresses_strains (<a href="GridFunction2dCPU1.html">GridFunction</a> *sigma, <a href="GridFunction2dCPU1.html">GridFunction</a> *epsilon, const <a href="GridFunction2dCPU1.html">GridFunction</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: computes stress tensor sigma and linearized strain tensor epsilon<br/></td></tr><tr><td><br></td></tr></table>
constructor
LinearElastPlastOutput2dCPU3

LinearElastPlastOutput2dCPU3 (SmartPtr<LinearElastoPlasticity> domain disc)
LinearElastPlastOutput2dCPU3 (SmartPtr&lt;<a href="LinearElastoPlasticity2d.html">LinearElastoPlasticity</a>&gt; domain disc)<br>Constructor of class <b>LinearElastPlastOutput2dCPU3</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
normal_stresses_strains
void
void normal_stresses_strains (GridFunction *sigma, GridFunction *epsilon, const GridFunction *u)
void normal_stresses_strains (<a href="GridFunction2dCPU1.html">GridFunction</a> *sigma, <a href="GridFunction2dCPU1.html">GridFunction</a> *epsilon, const <a href="GridFunction2dCPU1.html">GridFunction</a> *u)<br><br>Member function of class <b>LinearElastPlastOutput2dCPU3</b><br>tooltip: computes stress tensor sigma and linearized strain tensor epsilon<br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
;
class
LinearElastPlastOutput3dCPU1

Classgroup <b>LinearElastPlastOutput</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU1;</b><br><table><tr><td colspan=2><h3>LinearElastPlastOutput Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LinearElastPlastOutput3dCPU1 (SmartPtr&lt;<a href="LinearElastoPlasticity2d.html">LinearElastoPlasticity</a>&gt; domain disc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LinearElastPlastOutput Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>normal_stresses_strains (<a href="GridFunction2dCPU1.html">GridFunction</a> *sigma, <a href="GridFunction2dCPU1.html">GridFunction</a> *epsilon, const <a href="GridFunction2dCPU1.html">GridFunction</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: computes stress tensor sigma and linearized strain tensor epsilon<br/></td></tr><tr><td><br></td></tr></table>
constructor
LinearElastPlastOutput3dCPU1

LinearElastPlastOutput3dCPU1 (SmartPtr<LinearElastoPlasticity> domain disc)
LinearElastPlastOutput3dCPU1 (SmartPtr&lt;<a href="LinearElastoPlasticity2d.html">LinearElastoPlasticity</a>&gt; domain disc)<br>Constructor of class <b>LinearElastPlastOutput3dCPU1</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
normal_stresses_strains
void
void normal_stresses_strains (GridFunction *sigma, GridFunction *epsilon, const GridFunction *u)
void normal_stresses_strains (<a href="GridFunction2dCPU1.html">GridFunction</a> *sigma, <a href="GridFunction2dCPU1.html">GridFunction</a> *epsilon, const <a href="GridFunction2dCPU1.html">GridFunction</a> *u)<br><br>Member function of class <b>LinearElastPlastOutput3dCPU1</b><br>tooltip: computes stress tensor sigma and linearized strain tensor epsilon<br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
;
class
LinearElastPlastOutput3dCPU2

Classgroup <b>LinearElastPlastOutput</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU2;</b><br><table><tr><td colspan=2><h3>LinearElastPlastOutput Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LinearElastPlastOutput3dCPU2 (SmartPtr&lt;<a href="LinearElastoPlasticity2d.html">LinearElastoPlasticity</a>&gt; domain disc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LinearElastPlastOutput Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>normal_stresses_strains (<a href="GridFunction2dCPU1.html">GridFunction</a> *sigma, <a href="GridFunction2dCPU1.html">GridFunction</a> *epsilon, const <a href="GridFunction2dCPU1.html">GridFunction</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: computes stress tensor sigma and linearized strain tensor epsilon<br/></td></tr><tr><td><br></td></tr></table>
constructor
LinearElastPlastOutput3dCPU2

LinearElastPlastOutput3dCPU2 (SmartPtr<LinearElastoPlasticity> domain disc)
LinearElastPlastOutput3dCPU2 (SmartPtr&lt;<a href="LinearElastoPlasticity2d.html">LinearElastoPlasticity</a>&gt; domain disc)<br>Constructor of class <b>LinearElastPlastOutput3dCPU2</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
normal_stresses_strains
void
void normal_stresses_strains (GridFunction *sigma, GridFunction *epsilon, const GridFunction *u)
void normal_stresses_strains (<a href="GridFunction2dCPU1.html">GridFunction</a> *sigma, <a href="GridFunction2dCPU1.html">GridFunction</a> *epsilon, const <a href="GridFunction2dCPU1.html">GridFunction</a> *u)<br><br>Member function of class <b>LinearElastPlastOutput3dCPU2</b><br>tooltip: computes stress tensor sigma and linearized strain tensor epsilon<br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
;
class
LinearElastPlastOutput3dCPU3

Classgroup <b>LinearElastPlastOutput</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU3;</b><br><table><tr><td colspan=2><h3>LinearElastPlastOutput Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LinearElastPlastOutput3dCPU3 (SmartPtr&lt;<a href="LinearElastoPlasticity2d.html">LinearElastoPlasticity</a>&gt; domain disc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LinearElastPlastOutput Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>normal_stresses_strains (<a href="GridFunction2dCPU1.html">GridFunction</a> *sigma, <a href="GridFunction2dCPU1.html">GridFunction</a> *epsilon, const <a href="GridFunction2dCPU1.html">GridFunction</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: computes stress tensor sigma and linearized strain tensor epsilon<br/></td></tr><tr><td><br></td></tr></table>
constructor
LinearElastPlastOutput3dCPU3

LinearElastPlastOutput3dCPU3 (SmartPtr<LinearElastoPlasticity> domain disc)
LinearElastPlastOutput3dCPU3 (SmartPtr&lt;<a href="LinearElastoPlasticity2d.html">LinearElastoPlasticity</a>&gt; domain disc)<br>Constructor of class <b>LinearElastPlastOutput3dCPU3</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
normal_stresses_strains
void
void normal_stresses_strains (GridFunction *sigma, GridFunction *epsilon, const GridFunction *u)
void normal_stresses_strains (<a href="GridFunction2dCPU1.html">GridFunction</a> *sigma, <a href="GridFunction2dCPU1.html">GridFunction</a> *epsilon, const <a href="GridFunction2dCPU1.html">GridFunction</a> *u)<br><br>Member function of class <b>LinearElastPlastOutput3dCPU3</b><br>tooltip: computes stress tensor sigma and linearized strain tensor epsilon<br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
;
class
LinearElastoPlasticity1d
IElemDisc1d 
Classgroup <b>LinearElastoPlasticity</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="IElemDisc1d.html">IElemDisc1d</a> <a href="LinearElastoPlasticity1d.html">LinearElastoPlasticity1d</a> <br><table><tr><td colspan=2><h3>LinearElastoPlasticity Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LinearElastoPlasticity1d (c_string Function, c_string Subsets)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LinearElastoPlasticity Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>close_gnuplot_file ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init_state_variables (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_elasticity_tensor_orthotropic (number C11, number C12, number C13, number C22, number C23, number C33, number C44, number C55, number C66)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_hardening_behavior (integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_hooke_elasticity_tensor (number lambda, number mu)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_hooke_plane_strain_tensor (number lambda, number mu)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_hooke_plane_stress_tensor (number lambda, number mu)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_pressure (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Pressure)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_pressure (number Pressure)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_pressure (c_string Pressure)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_quad_order (size_t order)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_volume_forces (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Force field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_volume_forces (number F)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_volume_forces (number F_x, F_y, number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_volume_forces (number F_x, F_y, F_z, number , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_volume_forces (c_string Force field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>stress_eigenvalues_at (number , number , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>use_approx_tangent (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>use_elastoplast_mat_behavior (bool )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
LinearElastoPlasticity1d

LinearElastoPlasticity1d (c_string Function, c_string Subsets)
LinearElastoPlasticity1d (c_string Function, c_string Subsets)<br>Constructor of class <b>LinearElastoPlasticity1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_elasticity_tensor_orthotropic
void
void set_elasticity_tensor_orthotropic (number C11, number C12, number C13, number C22, number C23, number C33, number C44, number C55, number C66)
void set_elasticity_tensor_orthotropic (number C11, number C12, number C13, number C22, number C23, number C33, number C44, number C55, number C66)<br><br>Member function of class <b>LinearElastoPlasticity1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_hooke_elasticity_tensor
void
void set_hooke_elasticity_tensor (number lambda, number mu)
void set_hooke_elasticity_tensor (number lambda, number mu)<br><br>Member function of class <b>LinearElastoPlasticity1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_hooke_plane_strain_tensor
void
void set_hooke_plane_strain_tensor (number lambda, number mu)
void set_hooke_plane_strain_tensor (number lambda, number mu)<br><br>Member function of class <b>LinearElastoPlasticity1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_hooke_plane_stress_tensor
void
void set_hooke_plane_stress_tensor (number lambda, number mu)
void set_hooke_plane_stress_tensor (number lambda, number mu)<br><br>Member function of class <b>LinearElastoPlasticity1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_quad_order
void
void set_quad_order (size_t order)
void set_quad_order (size_t order)<br><br>Member function of class <b>LinearElastoPlasticity1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_volume_forces
void
void set_volume_forces (SmartPtr<UserVector> Force field)
void set_volume_forces (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Force field)<br><br>Member function of class <b>LinearElastoPlasticity1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_volume_forces
void
void set_volume_forces (number F)
void set_volume_forces (number F)<br><br>Member function of class <b>LinearElastoPlasticity1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_volume_forces
void
void set_volume_forces (number F_x, F_y, number )
void set_volume_forces (number F_x, F_y, number )<br><br>Member function of class <b>LinearElastoPlasticity1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_volume_forces
void
void set_volume_forces (number F_x, F_y, F_z, number , number )
void set_volume_forces (number F_x, F_y, F_z, number , number )<br><br>Member function of class <b>LinearElastoPlasticity1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_volume_forces
void
void set_volume_forces (c_string Force field)
void set_volume_forces (c_string Force field)<br><br>Member function of class <b>LinearElastoPlasticity1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_pressure
void
void set_pressure (SmartPtr<UserNumber> Pressure)
void set_pressure (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Pressure)<br><br>Member function of class <b>LinearElastoPlasticity1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_pressure
void
void set_pressure (number Pressure)
void set_pressure (number Pressure)<br><br>Member function of class <b>LinearElastoPlasticity1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_pressure
void
void set_pressure (c_string Pressure)
void set_pressure (c_string Pressure)<br><br>Member function of class <b>LinearElastoPlasticity1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
use_elastoplast_mat_behavior
void
void use_elastoplast_mat_behavior (bool )
void use_elastoplast_mat_behavior (bool )<br><br>Member function of class <b>LinearElastoPlasticity1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_hardening_behavior
void
void set_hardening_behavior (integer )
void set_hardening_behavior (integer )<br><br>Member function of class <b>LinearElastoPlasticity1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
use_approx_tangent
void
void use_approx_tangent (number )
void use_approx_tangent (number )<br><br>Member function of class <b>LinearElastoPlasticity1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
init_state_variables
void
void init_state_variables (size_t )
void init_state_variables (size_t )<br><br>Member function of class <b>LinearElastoPlasticity1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
stress_eigenvalues_at
void
void stress_eigenvalues_at (number , number , number )
void stress_eigenvalues_at (number , number , number )<br><br>Member function of class <b>LinearElastoPlasticity1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
close_gnuplot_file
void
void close_gnuplot_file ()
void close_gnuplot_file ()<br><br>Member function of class <b>LinearElastoPlasticity1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
;
class
LinearElastoPlasticity2d
IElemDisc2d 
Classgroup <b>LinearElastoPlasticity</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="LinearElastoPlasticity2d.html">LinearElastoPlasticity2d</a> <br><table><tr><td colspan=2><h3>LinearElastoPlasticity Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LinearElastoPlasticity2d (c_string Function, c_string Subsets)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LinearElastoPlasticity Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>close_gnuplot_file ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init_state_variables (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_elasticity_tensor_orthotropic (number C11, number C12, number C13, number C22, number C23, number C33, number C44, number C55, number C66)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_hardening_behavior (integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_hooke_elasticity_tensor (number lambda, number mu)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_hooke_plane_strain_tensor (number lambda, number mu)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_hooke_plane_stress_tensor (number lambda, number mu)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_pressure (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Pressure)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_pressure (number Pressure)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_pressure (c_string Pressure)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_quad_order (size_t order)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_volume_forces (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Force field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_volume_forces (number F)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_volume_forces (number F_x, F_y, number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_volume_forces (number F_x, F_y, F_z, number , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_volume_forces (c_string Force field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>stress_eigenvalues_at (number , number , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>use_approx_tangent (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>use_elastoplast_mat_behavior (bool )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
LinearElastoPlasticity2d

LinearElastoPlasticity2d (c_string Function, c_string Subsets)
LinearElastoPlasticity2d (c_string Function, c_string Subsets)<br>Constructor of class <b>LinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_elasticity_tensor_orthotropic
void
void set_elasticity_tensor_orthotropic (number C11, number C12, number C13, number C22, number C23, number C33, number C44, number C55, number C66)
void set_elasticity_tensor_orthotropic (number C11, number C12, number C13, number C22, number C23, number C33, number C44, number C55, number C66)<br><br>Member function of class <b>LinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_hooke_elasticity_tensor
void
void set_hooke_elasticity_tensor (number lambda, number mu)
void set_hooke_elasticity_tensor (number lambda, number mu)<br><br>Member function of class <b>LinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_hooke_plane_strain_tensor
void
void set_hooke_plane_strain_tensor (number lambda, number mu)
void set_hooke_plane_strain_tensor (number lambda, number mu)<br><br>Member function of class <b>LinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_hooke_plane_stress_tensor
void
void set_hooke_plane_stress_tensor (number lambda, number mu)
void set_hooke_plane_stress_tensor (number lambda, number mu)<br><br>Member function of class <b>LinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_quad_order
void
void set_quad_order (size_t order)
void set_quad_order (size_t order)<br><br>Member function of class <b>LinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_volume_forces
void
void set_volume_forces (SmartPtr<UserVector> Force field)
void set_volume_forces (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Force field)<br><br>Member function of class <b>LinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_volume_forces
void
void set_volume_forces (number F)
void set_volume_forces (number F)<br><br>Member function of class <b>LinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_volume_forces
void
void set_volume_forces (number F_x, F_y, number )
void set_volume_forces (number F_x, F_y, number )<br><br>Member function of class <b>LinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_volume_forces
void
void set_volume_forces (number F_x, F_y, F_z, number , number )
void set_volume_forces (number F_x, F_y, F_z, number , number )<br><br>Member function of class <b>LinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_volume_forces
void
void set_volume_forces (c_string Force field)
void set_volume_forces (c_string Force field)<br><br>Member function of class <b>LinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_pressure
void
void set_pressure (SmartPtr<UserNumber> Pressure)
void set_pressure (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Pressure)<br><br>Member function of class <b>LinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_pressure
void
void set_pressure (number Pressure)
void set_pressure (number Pressure)<br><br>Member function of class <b>LinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_pressure
void
void set_pressure (c_string Pressure)
void set_pressure (c_string Pressure)<br><br>Member function of class <b>LinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
use_elastoplast_mat_behavior
void
void use_elastoplast_mat_behavior (bool )
void use_elastoplast_mat_behavior (bool )<br><br>Member function of class <b>LinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_hardening_behavior
void
void set_hardening_behavior (integer )
void set_hardening_behavior (integer )<br><br>Member function of class <b>LinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
use_approx_tangent
void
void use_approx_tangent (number )
void use_approx_tangent (number )<br><br>Member function of class <b>LinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
init_state_variables
void
void init_state_variables (size_t )
void init_state_variables (size_t )<br><br>Member function of class <b>LinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
stress_eigenvalues_at
void
void stress_eigenvalues_at (number , number , number )
void stress_eigenvalues_at (number , number , number )<br><br>Member function of class <b>LinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
close_gnuplot_file
void
void close_gnuplot_file ()
void close_gnuplot_file ()<br><br>Member function of class <b>LinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
;
class
LinearElastoPlasticity3d
IElemDisc3d 
Classgroup <b>LinearElastoPlasticity</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IElemDisc3d.html">IElemDisc3d</a> <a href="LinearElastoPlasticity3d.html">LinearElastoPlasticity3d</a> <br><table><tr><td colspan=2><h3>LinearElastoPlasticity Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LinearElastoPlasticity3d (c_string Function, c_string Subsets)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LinearElastoPlasticity Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>close_gnuplot_file ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init_state_variables (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_elasticity_tensor_orthotropic (number C11, number C12, number C13, number C22, number C23, number C33, number C44, number C55, number C66)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_hardening_behavior (integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_hooke_elasticity_tensor (number lambda, number mu)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_hooke_plane_strain_tensor (number lambda, number mu)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_hooke_plane_stress_tensor (number lambda, number mu)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_pressure (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Pressure)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_pressure (number Pressure)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_pressure (c_string Pressure)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_quad_order (size_t order)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_volume_forces (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Force field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_volume_forces (number F)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_volume_forces (number F_x, F_y, number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_volume_forces (number F_x, F_y, F_z, number , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_volume_forces (c_string Force field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>stress_eigenvalues_at (number , number , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>use_approx_tangent (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>use_elastoplast_mat_behavior (bool )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
LinearElastoPlasticity3d

LinearElastoPlasticity3d (c_string Function, c_string Subsets)
LinearElastoPlasticity3d (c_string Function, c_string Subsets)<br>Constructor of class <b>LinearElastoPlasticity3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_elasticity_tensor_orthotropic
void
void set_elasticity_tensor_orthotropic (number C11, number C12, number C13, number C22, number C23, number C33, number C44, number C55, number C66)
void set_elasticity_tensor_orthotropic (number C11, number C12, number C13, number C22, number C23, number C33, number C44, number C55, number C66)<br><br>Member function of class <b>LinearElastoPlasticity3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_hooke_elasticity_tensor
void
void set_hooke_elasticity_tensor (number lambda, number mu)
void set_hooke_elasticity_tensor (number lambda, number mu)<br><br>Member function of class <b>LinearElastoPlasticity3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_hooke_plane_strain_tensor
void
void set_hooke_plane_strain_tensor (number lambda, number mu)
void set_hooke_plane_strain_tensor (number lambda, number mu)<br><br>Member function of class <b>LinearElastoPlasticity3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_hooke_plane_stress_tensor
void
void set_hooke_plane_stress_tensor (number lambda, number mu)
void set_hooke_plane_stress_tensor (number lambda, number mu)<br><br>Member function of class <b>LinearElastoPlasticity3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_quad_order
void
void set_quad_order (size_t order)
void set_quad_order (size_t order)<br><br>Member function of class <b>LinearElastoPlasticity3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_volume_forces
void
void set_volume_forces (SmartPtr<UserVector> Force field)
void set_volume_forces (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Force field)<br><br>Member function of class <b>LinearElastoPlasticity3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_volume_forces
void
void set_volume_forces (number F)
void set_volume_forces (number F)<br><br>Member function of class <b>LinearElastoPlasticity3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_volume_forces
void
void set_volume_forces (number F_x, F_y, number )
void set_volume_forces (number F_x, F_y, number )<br><br>Member function of class <b>LinearElastoPlasticity3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_volume_forces
void
void set_volume_forces (number F_x, F_y, F_z, number , number )
void set_volume_forces (number F_x, F_y, F_z, number , number )<br><br>Member function of class <b>LinearElastoPlasticity3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_volume_forces
void
void set_volume_forces (c_string Force field)
void set_volume_forces (c_string Force field)<br><br>Member function of class <b>LinearElastoPlasticity3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_pressure
void
void set_pressure (SmartPtr<UserNumber> Pressure)
void set_pressure (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Pressure)<br><br>Member function of class <b>LinearElastoPlasticity3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_pressure
void
void set_pressure (number Pressure)
void set_pressure (number Pressure)<br><br>Member function of class <b>LinearElastoPlasticity3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_pressure
void
void set_pressure (c_string Pressure)
void set_pressure (c_string Pressure)<br><br>Member function of class <b>LinearElastoPlasticity3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
use_elastoplast_mat_behavior
void
void use_elastoplast_mat_behavior (bool )
void use_elastoplast_mat_behavior (bool )<br><br>Member function of class <b>LinearElastoPlasticity3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_hardening_behavior
void
void set_hardening_behavior (integer )
void set_hardening_behavior (integer )<br><br>Member function of class <b>LinearElastoPlasticity3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
use_approx_tangent
void
void use_approx_tangent (number )
void use_approx_tangent (number )<br><br>Member function of class <b>LinearElastoPlasticity3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
init_state_variables
void
void init_state_variables (size_t )
void init_state_variables (size_t )<br><br>Member function of class <b>LinearElastoPlasticity3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
stress_eigenvalues_at
void
void stress_eigenvalues_at (number , number , number )
void stress_eigenvalues_at (number , number , number )<br><br>Member function of class <b>LinearElastoPlasticity3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
close_gnuplot_file
void
void close_gnuplot_file ()
void close_gnuplot_file ()<br><br>Member function of class <b>LinearElastoPlasticity3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
;
class
LinearIteratorProductCPU1
ILinearIteratorCPU1 
Classgroup <b>LinearIteratorProduct</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>alg=CPU1;</b><br>Linear Iterator consisting of several LinearIterations<br>Inheritance: <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="LinearIteratorProductCPU1.html">LinearIteratorProductCPU1</a> <br><table><tr><td colspan=2><h3>LinearIteratorProduct Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LinearIteratorProductCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LinearIteratorProduct Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_iteration (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Add an iterator<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
LinearIteratorProductCPU1

LinearIteratorProductCPU1 ()
LinearIteratorProductCPU1 ()<br>Constructor of class <b>LinearIteratorProductCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
add_iteration
void
void add_iteration (SmartPtr<ILinearIterator> )
void add_iteration (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; )<br><br>Member function of class <b>LinearIteratorProductCPU1</b><br>returns Add an iterator<br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
LinearIteratorProductCPU2
ILinearIteratorCPU2 
Classgroup <b>LinearIteratorProduct</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>alg=CPU2;</b><br>Linear Iterator consisting of several LinearIterations<br>Inheritance: <a href="ILinearIteratorCPU2.html">ILinearIteratorCPU2</a> <a href="LinearIteratorProductCPU2.html">LinearIteratorProductCPU2</a> <br><table><tr><td colspan=2><h3>LinearIteratorProduct Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LinearIteratorProductCPU2 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LinearIteratorProduct Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_iteration (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Add an iterator<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
LinearIteratorProductCPU2

LinearIteratorProductCPU2 ()
LinearIteratorProductCPU2 ()<br>Constructor of class <b>LinearIteratorProductCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
add_iteration
void
void add_iteration (SmartPtr<ILinearIterator> )
void add_iteration (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; )<br><br>Member function of class <b>LinearIteratorProductCPU2</b><br>returns Add an iterator<br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
LinearIteratorProductCPU3
ILinearIteratorCPU3 
Classgroup <b>LinearIteratorProduct</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>alg=CPU3;</b><br>Linear Iterator consisting of several LinearIterations<br>Inheritance: <a href="ILinearIteratorCPU3.html">ILinearIteratorCPU3</a> <a href="LinearIteratorProductCPU3.html">LinearIteratorProductCPU3</a> <br><table><tr><td colspan=2><h3>LinearIteratorProduct Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LinearIteratorProductCPU3 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LinearIteratorProduct Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_iteration (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Add an iterator<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
LinearIteratorProductCPU3

LinearIteratorProductCPU3 ()
LinearIteratorProductCPU3 ()<br>Constructor of class <b>LinearIteratorProductCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
add_iteration
void
void add_iteration (SmartPtr<ILinearIterator> )
void add_iteration (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; )<br><br>Member function of class <b>LinearIteratorProductCPU3</b><br>returns Add an iterator<br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
LinearSolverCPU1
VectorDebugWritingObjectCPU1 ILinearOperatorInverseCPU1 IPreconditionedLinearOperatorInverseCPU1 
Classgroup <b>LinearSolver</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has constructor.  Tag <b>alg=CPU1;</b><br>Linear Solver<br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverseCPU1</a> <a href="IPreconditionedLinearOperatorInverseCPU1.html">IPreconditionedLinearOperatorInverseCPU1</a> <a href="LinearSolverCPU1.html">LinearSolverCPU1</a> <br><table><tr><td colspan=2><h3>LinearSolver Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LinearSolverCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IPreconditionedLinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_compute_fresh_defect_when_finished (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_preconditioner (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Preconditioner)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u, const <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u), f remains constant<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply_return_defect (<a href="VectorCPU1.html">Vector</a> *u, <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u),  f := f - A*u becomes new defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; , const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited ILinearOperatorInverse Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; </td><td class="memItemRight" valign=bottom>convergence_check ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
LinearSolverCPU1

LinearSolverCPU1 ()
LinearSolverCPU1 ()<br>Constructor of class <b>LinearSolverCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
;
class
LinearSolverCPU2
VectorDebugWritingObjectCPU2 ILinearOperatorInverseCPU2 IPreconditionedLinearOperatorInverseCPU2 
Classgroup <b>LinearSolver</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has constructor.  Tag <b>alg=CPU2;</b><br>Linear Solver<br>Inheritance: <a href="VectorDebugWritingObjectCPU2.html">VectorDebugWritingObjectCPU2</a> <a href="ILinearOperatorInverseCPU2.html">ILinearOperatorInverseCPU2</a> <a href="IPreconditionedLinearOperatorInverseCPU2.html">IPreconditionedLinearOperatorInverseCPU2</a> <a href="LinearSolverCPU2.html">LinearSolverCPU2</a> <br><table><tr><td colspan=2><h3>LinearSolver Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LinearSolverCPU2 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IPreconditionedLinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_compute_fresh_defect_when_finished (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_preconditioner (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Preconditioner)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u, const <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u), f remains constant<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply_return_defect (<a href="VectorCPU1.html">Vector</a> *u, <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u),  f := f - A*u becomes new defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; , const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited ILinearOperatorInverse Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; </td><td class="memItemRight" valign=bottom>convergence_check ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
LinearSolverCPU2

LinearSolverCPU2 ()
LinearSolverCPU2 ()<br>Constructor of class <b>LinearSolverCPU2</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
;
class
LinearSolverCPU3
VectorDebugWritingObjectCPU3 ILinearOperatorInverseCPU3 IPreconditionedLinearOperatorInverseCPU3 
Classgroup <b>LinearSolver</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has constructor.  Tag <b>alg=CPU3;</b><br>Linear Solver<br>Inheritance: <a href="VectorDebugWritingObjectCPU3.html">VectorDebugWritingObjectCPU3</a> <a href="ILinearOperatorInverseCPU3.html">ILinearOperatorInverseCPU3</a> <a href="IPreconditionedLinearOperatorInverseCPU3.html">IPreconditionedLinearOperatorInverseCPU3</a> <a href="LinearSolverCPU3.html">LinearSolverCPU3</a> <br><table><tr><td colspan=2><h3>LinearSolver Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LinearSolverCPU3 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IPreconditionedLinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_compute_fresh_defect_when_finished (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_preconditioner (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Preconditioner)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u, const <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u), f remains constant<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply_return_defect (<a href="VectorCPU1.html">Vector</a> *u, <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u),  f := f - A*u becomes new defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; , const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited ILinearOperatorInverse Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; </td><td class="memItemRight" valign=bottom>convergence_check ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
LinearSolverCPU3

LinearSolverCPU3 ()
LinearSolverCPU3 ()<br>Constructor of class <b>LinearSolverCPU3</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
;
class
LoadBalancer1d

Classgroup <b>LoadBalancer</b><br>Registry Group: <b>/ug4/LoadBalancing</b><br>class has no constructor.  Tag <b>dim=1d;</b><br><table><tr><td colspan=2><h3>LoadBalancer Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_distribution_level (size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>rebalance ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_balance_threshold (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_element_threshold (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_partitioner (SmartPtr&lt;<a href="IPartitioner2d.html">IPartitioner</a>&gt; )</td></tr><tr><td><br></td></tr></table>
memberfunction
add_distribution_level
void
void add_distribution_level (size_t , size_t )
void add_distribution_level (size_t , size_t )<br><br>Member function of class <b>LoadBalancer1d</b><br>Registry Group: <b>/ug4/LoadBalancing</b>
memberfunction
rebalance
void
void rebalance ()
void rebalance ()<br><br>Member function of class <b>LoadBalancer1d</b><br>Registry Group: <b>/ug4/LoadBalancing</b>
memberfunction
set_balance_threshold
void
void set_balance_threshold (number )
void set_balance_threshold (number )<br><br>Member function of class <b>LoadBalancer1d</b><br>Registry Group: <b>/ug4/LoadBalancing</b>
memberfunction
set_element_threshold
void
void set_element_threshold (size_t )
void set_element_threshold (size_t )<br><br>Member function of class <b>LoadBalancer1d</b><br>Registry Group: <b>/ug4/LoadBalancing</b>
memberfunction
set_partitioner
void
void set_partitioner (SmartPtr<IPartitioner> )
void set_partitioner (SmartPtr&lt;<a href="IPartitioner2d.html">IPartitioner</a>&gt; )<br><br>Member function of class <b>LoadBalancer1d</b><br>Registry Group: <b>/ug4/LoadBalancing</b>
;
class
LoadBalancer2d

Classgroup <b>LoadBalancer</b><br>Registry Group: <b>/ug4/LoadBalancing</b><br>class has no constructor.  Tag <b>dim=2d;</b><br><table><tr><td colspan=2><h3>LoadBalancer Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_distribution_level (size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>rebalance ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_balance_threshold (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_element_threshold (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_partitioner (SmartPtr&lt;<a href="IPartitioner2d.html">IPartitioner</a>&gt; )</td></tr><tr><td><br></td></tr></table>
memberfunction
add_distribution_level
void
void add_distribution_level (size_t , size_t )
void add_distribution_level (size_t , size_t )<br><br>Member function of class <b>LoadBalancer2d</b><br>Registry Group: <b>/ug4/LoadBalancing</b>
memberfunction
rebalance
void
void rebalance ()
void rebalance ()<br><br>Member function of class <b>LoadBalancer2d</b><br>Registry Group: <b>/ug4/LoadBalancing</b>
memberfunction
set_balance_threshold
void
void set_balance_threshold (number )
void set_balance_threshold (number )<br><br>Member function of class <b>LoadBalancer2d</b><br>Registry Group: <b>/ug4/LoadBalancing</b>
memberfunction
set_element_threshold
void
void set_element_threshold (size_t )
void set_element_threshold (size_t )<br><br>Member function of class <b>LoadBalancer2d</b><br>Registry Group: <b>/ug4/LoadBalancing</b>
memberfunction
set_partitioner
void
void set_partitioner (SmartPtr<IPartitioner> )
void set_partitioner (SmartPtr&lt;<a href="IPartitioner2d.html">IPartitioner</a>&gt; )<br><br>Member function of class <b>LoadBalancer2d</b><br>Registry Group: <b>/ug4/LoadBalancing</b>
;
class
LoadBalancer3d

Classgroup <b>LoadBalancer</b><br>Registry Group: <b>/ug4/LoadBalancing</b><br>class has no constructor.  Tag <b>dim=3d;</b><br><table><tr><td colspan=2><h3>LoadBalancer Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_distribution_level (size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>rebalance ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_balance_threshold (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_element_threshold (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_partitioner (SmartPtr&lt;<a href="IPartitioner2d.html">IPartitioner</a>&gt; )</td></tr><tr><td><br></td></tr></table>
memberfunction
add_distribution_level
void
void add_distribution_level (size_t , size_t )
void add_distribution_level (size_t , size_t )<br><br>Member function of class <b>LoadBalancer3d</b><br>Registry Group: <b>/ug4/LoadBalancing</b>
memberfunction
rebalance
void
void rebalance ()
void rebalance ()<br><br>Member function of class <b>LoadBalancer3d</b><br>Registry Group: <b>/ug4/LoadBalancing</b>
memberfunction
set_balance_threshold
void
void set_balance_threshold (number )
void set_balance_threshold (number )<br><br>Member function of class <b>LoadBalancer3d</b><br>Registry Group: <b>/ug4/LoadBalancing</b>
memberfunction
set_element_threshold
void
void set_element_threshold (size_t )
void set_element_threshold (size_t )<br><br>Member function of class <b>LoadBalancer3d</b><br>Registry Group: <b>/ug4/LoadBalancing</b>
memberfunction
set_partitioner
void
void set_partitioner (SmartPtr<IPartitioner> )
void set_partitioner (SmartPtr&lt;<a href="IPartitioner2d.html">IPartitioner</a>&gt; )<br><br>Member function of class <b>LoadBalancer3d</b><br>Registry Group: <b>/ug4/LoadBalancing</b>
;
class
LocalSchurComplementCPU1
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 IOperatorCPU1 ILinearOperatorCPU1 
Classgroup <b>LocalSchurComplement</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has constructor.  Tag <b>alg=CPU1;</b><br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="IOperatorCPU1.html">IOperatorCPU1</a> <a href="ILinearOperatorCPU1.html">ILinearOperatorCPU1</a> <a href="LocalSchurComplementCPU1.html">LocalSchurComplementCPU1</a> <br><table><tr><td colspan=2><h3>LocalSchurComplement Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LocalSchurComplementCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LocalSchurComplement Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *local SC times Vector, const <a href="VectorCPU1.html">Vector</a> *Vector)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_dirichlet_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Dirichlet Solver)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_matrix (SmartPtr&lt;<a href="MatrixOperatorCPU1.html">MatrixOperator</a>&gt; Matrix)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearOperator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns f#u<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
LocalSchurComplementCPU1

LocalSchurComplementCPU1 ()
LocalSchurComplementCPU1 ()<br>Constructor of class <b>LocalSchurComplementCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_matrix
void
void set_matrix (SmartPtr<MatrixOperator> Matrix)
void set_matrix (SmartPtr&lt;<a href="MatrixOperatorCPU1.html">MatrixOperator</a>&gt; Matrix)<br><br>Member function of class <b>LocalSchurComplementCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_dirichlet_solver
void
void set_dirichlet_solver (SmartPtr<ILinearOperatorInverse> Dirichlet Solver)
void set_dirichlet_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Dirichlet Solver)<br><br>Member function of class <b>LocalSchurComplementCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
init
void
void init ()
void init ()<br><br>Member function of class <b>LocalSchurComplementCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
apply
void
void apply (Vector *local SC times Vector, const Vector *Vector)
void apply (<a href="VectorCPU1.html">Vector</a> *local SC times Vector, const <a href="VectorCPU1.html">Vector</a> *Vector)<br><br>Member function of class <b>LocalSchurComplementCPU1</b><br>returns Success<br>Registry Group: <b>/ug4/Algebra/Solver</b>
;
class
LocalSchurComplementCPU2
VectorDebugWritingObjectCPU2 DebugWritingObjectCPU2 IOperatorCPU2 ILinearOperatorCPU2 
Classgroup <b>LocalSchurComplement</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has constructor.  Tag <b>alg=CPU2;</b><br>Inheritance: <a href="VectorDebugWritingObjectCPU2.html">VectorDebugWritingObjectCPU2</a> <a href="DebugWritingObjectCPU2.html">DebugWritingObjectCPU2</a> <a href="IOperatorCPU2.html">IOperatorCPU2</a> <a href="ILinearOperatorCPU2.html">ILinearOperatorCPU2</a> <a href="LocalSchurComplementCPU2.html">LocalSchurComplementCPU2</a> <br><table><tr><td colspan=2><h3>LocalSchurComplement Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LocalSchurComplementCPU2 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LocalSchurComplement Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *local SC times Vector, const <a href="VectorCPU1.html">Vector</a> *Vector)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_dirichlet_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Dirichlet Solver)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_matrix (SmartPtr&lt;<a href="MatrixOperatorCPU1.html">MatrixOperator</a>&gt; Matrix)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearOperator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns f#u<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
LocalSchurComplementCPU2

LocalSchurComplementCPU2 ()
LocalSchurComplementCPU2 ()<br>Constructor of class <b>LocalSchurComplementCPU2</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_matrix
void
void set_matrix (SmartPtr<MatrixOperator> Matrix)
void set_matrix (SmartPtr&lt;<a href="MatrixOperatorCPU1.html">MatrixOperator</a>&gt; Matrix)<br><br>Member function of class <b>LocalSchurComplementCPU2</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_dirichlet_solver
void
void set_dirichlet_solver (SmartPtr<ILinearOperatorInverse> Dirichlet Solver)
void set_dirichlet_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Dirichlet Solver)<br><br>Member function of class <b>LocalSchurComplementCPU2</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
init
void
void init ()
void init ()<br><br>Member function of class <b>LocalSchurComplementCPU2</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
apply
void
void apply (Vector *local SC times Vector, const Vector *Vector)
void apply (<a href="VectorCPU1.html">Vector</a> *local SC times Vector, const <a href="VectorCPU1.html">Vector</a> *Vector)<br><br>Member function of class <b>LocalSchurComplementCPU2</b><br>returns Success<br>Registry Group: <b>/ug4/Algebra/Solver</b>
;
class
LocalSchurComplementCPU3
VectorDebugWritingObjectCPU3 DebugWritingObjectCPU3 IOperatorCPU3 ILinearOperatorCPU3 
Classgroup <b>LocalSchurComplement</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has constructor.  Tag <b>alg=CPU3;</b><br>Inheritance: <a href="VectorDebugWritingObjectCPU3.html">VectorDebugWritingObjectCPU3</a> <a href="DebugWritingObjectCPU3.html">DebugWritingObjectCPU3</a> <a href="IOperatorCPU3.html">IOperatorCPU3</a> <a href="ILinearOperatorCPU3.html">ILinearOperatorCPU3</a> <a href="LocalSchurComplementCPU3.html">LocalSchurComplementCPU3</a> <br><table><tr><td colspan=2><h3>LocalSchurComplement Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LocalSchurComplementCPU3 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LocalSchurComplement Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *local SC times Vector, const <a href="VectorCPU1.html">Vector</a> *Vector)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_dirichlet_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Dirichlet Solver)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_matrix (SmartPtr&lt;<a href="MatrixOperatorCPU1.html">MatrixOperator</a>&gt; Matrix)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearOperator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns f#u<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
LocalSchurComplementCPU3

LocalSchurComplementCPU3 ()
LocalSchurComplementCPU3 ()<br>Constructor of class <b>LocalSchurComplementCPU3</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_matrix
void
void set_matrix (SmartPtr<MatrixOperator> Matrix)
void set_matrix (SmartPtr&lt;<a href="MatrixOperatorCPU1.html">MatrixOperator</a>&gt; Matrix)<br><br>Member function of class <b>LocalSchurComplementCPU3</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_dirichlet_solver
void
void set_dirichlet_solver (SmartPtr<ILinearOperatorInverse> Dirichlet Solver)
void set_dirichlet_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Dirichlet Solver)<br><br>Member function of class <b>LocalSchurComplementCPU3</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
init
void
void init ()
void init ()<br><br>Member function of class <b>LocalSchurComplementCPU3</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
apply
void
void apply (Vector *local SC times Vector, const Vector *Vector)
void apply (<a href="VectorCPU1.html">Vector</a> *local SC times Vector, const <a href="VectorCPU1.html">Vector</a> *Vector)<br><br>Member function of class <b>LocalSchurComplementCPU3</b><br>returns Success<br>Registry Group: <b>/ug4/Algebra/Solver</b>
;
class
LogAssistant

Registry Group: <b>/ug4/Util/Log</b><br>class has no constructor. <br><table><tr><td colspan=2><h3>LogAssistant Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>enable_file_output (bool bEnable, c_string filename)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Please note that only the filename given at the first call is considered<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>enable_terminal_output (bool bEnable)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: enables or disables terminal output (enabled by default)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>flush ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: flush all buffers, especially the file buffer.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>get_debug_IDs ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns debug IDs<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_output_process ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Returns the process which outputs its data.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>is_output_process (integer procRank)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Returns whether the process outputs its data.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>rename_log_file (c_string filename)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Renames previously opened logfile to the name given<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>set_debug_level (c_string tag, integer lev)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets the debug level of Tag 'tag' to level 'lev'<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>set_debug_levels (integer lev)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets the debug level of all tags to 'lev'<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_output_process (integer procRank)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Sets the process which shall output its data.<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LogAssistant Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_debug_level (c_string tag)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: gets the debug level of Tag 'tag'<br/></td></tr><tr><td><br></td></tr></table>
memberfunction
enable_file_output
bool
bool enable_file_output (bool bEnable, c_string filename)
bool enable_file_output (bool bEnable, c_string filename)<br><br>Member function of class <b>LogAssistant</b><br>tooltip: Please note that only the filename given at the first call is considered<br>Registry Group: <b>/ug4/Util/Log</b>
memberfunction
rename_log_file
bool
bool rename_log_file (c_string filename)
bool rename_log_file (c_string filename)<br><br>Member function of class <b>LogAssistant</b><br>tooltip: Renames previously opened logfile to the name given<br>Registry Group: <b>/ug4/Util/Log</b>
memberfunction
enable_terminal_output
bool
bool enable_terminal_output (bool bEnable)
bool enable_terminal_output (bool bEnable)<br><br>Member function of class <b>LogAssistant</b><br>tooltip: enables or disables terminal output (enabled by default)<br>Registry Group: <b>/ug4/Util/Log</b>
memberfunction
set_debug_levels
bool
bool set_debug_levels (integer lev)
bool set_debug_levels (integer lev)<br><br>Member function of class <b>LogAssistant</b><br>tooltip: sets the debug level of all tags to 'lev'<br>Registry Group: <b>/ug4/Util/Log</b>
memberfunction
set_debug_level
bool
bool set_debug_level (c_string tag, integer lev)
bool set_debug_level (c_string tag, integer lev)<br><br>Member function of class <b>LogAssistant</b><br>tooltip: sets the debug level of Tag 'tag' to level 'lev'<br>Registry Group: <b>/ug4/Util/Log</b>
memberfunction
get_debug_IDs
string
std_string get_debug_IDs ()
std_string get_debug_IDs ()<br><br>Member function of class <b>LogAssistant</b><br>returns debug IDs<br>Registry Group: <b>/ug4/Util/Log</b>
memberfunction
set_output_process
void
void set_output_process (integer procRank)
void set_output_process (integer procRank)<br><br>Member function of class <b>LogAssistant</b><br>tooltip: Sets the process which shall output its data.<br>Registry Group: <b>/ug4/Util/Log</b>
memberfunction
get_output_process
integer
integer get_output_process ()
integer get_output_process ()<br><br>Member function of class <b>LogAssistant</b><br>tooltip: Returns the process which outputs its data.<br>Registry Group: <b>/ug4/Util/Log</b>
memberfunction
is_output_process
void
void is_output_process (integer procRank)
void is_output_process (integer procRank)<br><br>Member function of class <b>LogAssistant</b><br>tooltip: Returns whether the process outputs its data.<br>Registry Group: <b>/ug4/Util/Log</b>
memberfunction
flush
void
void flush ()
void flush ()<br><br>Member function of class <b>LogAssistant</b><br>tooltip: flush all buffers, especially the file buffer.<br>Registry Group: <b>/ug4/Util/Log</b>
memberfunction
get_debug_level
integer
integer get_debug_level (c_string tag) const
integer get_debug_level (c_string tag)<br><br>Member function of class <b>LogAssistant</b><br>tooltip: gets the debug level of Tag 'tag'<br>Registry Group: <b>/ug4/Util/Log</b>
;
class
LuaCondUserMatrix1d
ICplUserData1d CondUserMatrix1d 
Classgroup <b>LuaCondUserMatrix</b><br>Registry Group: <b>/ug4</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="CondUserMatrix1d.html">CondUserMatrix1d</a> <a href="LuaCondUserMatrix1d.html">LuaCondUserMatrix1d</a> <br><table><tr><td colspan=2><h3>LuaCondUserMatrix Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaCondUserMatrix1d (c_string Callback)</td></tr><tr><td><br></td></tr></table>
constructor
LuaCondUserMatrix1d

LuaCondUserMatrix1d (c_string Callback)
LuaCondUserMatrix1d (c_string Callback)<br>Constructor of class <b>LuaCondUserMatrix1d</b><br>Registry Group: <b>/ug4</b>
;
class
LuaCondUserMatrix2d
ICplUserData2d CondUserMatrix2d 
Classgroup <b>LuaCondUserMatrix</b><br>Registry Group: <b>/ug4</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="CondUserMatrix2d.html">CondUserMatrix2d</a> <a href="LuaCondUserMatrix2d.html">LuaCondUserMatrix2d</a> <br><table><tr><td colspan=2><h3>LuaCondUserMatrix Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaCondUserMatrix2d (c_string Callback)</td></tr><tr><td><br></td></tr></table>
constructor
LuaCondUserMatrix2d

LuaCondUserMatrix2d (c_string Callback)
LuaCondUserMatrix2d (c_string Callback)<br>Constructor of class <b>LuaCondUserMatrix2d</b><br>Registry Group: <b>/ug4</b>
;
class
LuaCondUserMatrix3d
ICplUserData3d CondUserMatrix3d 
Classgroup <b>LuaCondUserMatrix</b><br>Registry Group: <b>/ug4</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="CondUserMatrix3d.html">CondUserMatrix3d</a> <a href="LuaCondUserMatrix3d.html">LuaCondUserMatrix3d</a> <br><table><tr><td colspan=2><h3>LuaCondUserMatrix Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaCondUserMatrix3d (c_string Callback)</td></tr><tr><td><br></td></tr></table>
constructor
LuaCondUserMatrix3d

LuaCondUserMatrix3d (c_string Callback)
LuaCondUserMatrix3d (c_string Callback)<br>Constructor of class <b>LuaCondUserMatrix3d</b><br>Registry Group: <b>/ug4</b>
;
class
LuaCondUserNumber1d
ICplUserData1d CondUserNumber1d 
Classgroup <b>LuaCondUserNumber</b><br>Registry Group: <b>/ug4</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="CondUserNumber1d.html">CondUserNumber1d</a> <a href="LuaCondUserNumber1d.html">LuaCondUserNumber1d</a> <br><table><tr><td colspan=2><h3>LuaCondUserNumber Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaCondUserNumber1d (c_string Callback)</td></tr><tr><td><br></td></tr></table>
constructor
LuaCondUserNumber1d

LuaCondUserNumber1d (c_string Callback)
LuaCondUserNumber1d (c_string Callback)<br>Constructor of class <b>LuaCondUserNumber1d</b><br>Registry Group: <b>/ug4</b>
;
class
LuaCondUserNumber2d
ICplUserData2d CondUserNumber2d 
Classgroup <b>LuaCondUserNumber</b><br>Registry Group: <b>/ug4</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="CondUserNumber2d.html">CondUserNumber2d</a> <a href="LuaCondUserNumber2d.html">LuaCondUserNumber2d</a> <br><table><tr><td colspan=2><h3>LuaCondUserNumber Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaCondUserNumber2d (c_string Callback)</td></tr><tr><td><br></td></tr></table>
constructor
LuaCondUserNumber2d

LuaCondUserNumber2d (c_string Callback)
LuaCondUserNumber2d (c_string Callback)<br>Constructor of class <b>LuaCondUserNumber2d</b><br>Registry Group: <b>/ug4</b>
;
class
LuaCondUserNumber3d
ICplUserData3d CondUserNumber3d 
Classgroup <b>LuaCondUserNumber</b><br>Registry Group: <b>/ug4</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="CondUserNumber3d.html">CondUserNumber3d</a> <a href="LuaCondUserNumber3d.html">LuaCondUserNumber3d</a> <br><table><tr><td colspan=2><h3>LuaCondUserNumber Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaCondUserNumber3d (c_string Callback)</td></tr><tr><td><br></td></tr></table>
constructor
LuaCondUserNumber3d

LuaCondUserNumber3d (c_string Callback)
LuaCondUserNumber3d (c_string Callback)<br>Constructor of class <b>LuaCondUserNumber3d</b><br>Registry Group: <b>/ug4</b>
;
class
LuaCondUserVector1d
ICplUserData1d CondUserVector1d 
Classgroup <b>LuaCondUserVector</b><br>Registry Group: <b>/ug4</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="CondUserVector1d.html">CondUserVector1d</a> <a href="LuaCondUserVector1d.html">LuaCondUserVector1d</a> <br><table><tr><td colspan=2><h3>LuaCondUserVector Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaCondUserVector1d (c_string Callback)</td></tr><tr><td><br></td></tr></table>
constructor
LuaCondUserVector1d

LuaCondUserVector1d (c_string Callback)
LuaCondUserVector1d (c_string Callback)<br>Constructor of class <b>LuaCondUserVector1d</b><br>Registry Group: <b>/ug4</b>
;
class
LuaCondUserVector2d
ICplUserData2d CondUserVector2d 
Classgroup <b>LuaCondUserVector</b><br>Registry Group: <b>/ug4</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="CondUserVector2d.html">CondUserVector2d</a> <a href="LuaCondUserVector2d.html">LuaCondUserVector2d</a> <br><table><tr><td colspan=2><h3>LuaCondUserVector Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaCondUserVector2d (c_string Callback)</td></tr><tr><td><br></td></tr></table>
constructor
LuaCondUserVector2d

LuaCondUserVector2d (c_string Callback)
LuaCondUserVector2d (c_string Callback)<br>Constructor of class <b>LuaCondUserVector2d</b><br>Registry Group: <b>/ug4</b>
;
class
LuaCondUserVector3d
ICplUserData3d CondUserVector3d 
Classgroup <b>LuaCondUserVector</b><br>Registry Group: <b>/ug4</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="CondUserVector3d.html">CondUserVector3d</a> <a href="LuaCondUserVector3d.html">LuaCondUserVector3d</a> <br><table><tr><td colspan=2><h3>LuaCondUserVector Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaCondUserVector3d (c_string Callback)</td></tr><tr><td><br></td></tr></table>
constructor
LuaCondUserVector3d

LuaCondUserVector3d (c_string Callback)
LuaCondUserVector3d (c_string Callback)<br>Constructor of class <b>LuaCondUserVector3d</b><br>Registry Group: <b>/ug4</b>
;
class
LuaFunctionNumber
IFunctionNumber 
Registry Group: <b>/ug4</b><br>class has constructor. <br>Inheritance: <a href="IFunctionNumber.html">IFunctionNumber</a> <a href="LuaFunctionNumber.html">LuaFunctionNumber</a> <br><table><tr><td colspan=2><h3>LuaFunctionNumber Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaFunctionNumber ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LuaFunctionNumber Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_lua_callback (c_string , size_t )</td></tr><tr><td><br></td></tr></table>
constructor
LuaFunctionNumber

LuaFunctionNumber ()
LuaFunctionNumber ()<br>Constructor of class <b>LuaFunctionNumber</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_lua_callback
void
void set_lua_callback (c_string , size_t )
void set_lua_callback (c_string , size_t )<br><br>Member function of class <b>LuaFunctionNumber</b><br>Registry Group: <b>/ug4</b>
;
class
LuaUserFunctionMatrixNumber1d
ICplUserData1d UserMatrix1d DependentUserDataMatrix1d DataLinkerMatrix1d 
Classgroup <b>LuaUserFunctionMatrixNumber</b><br>Registry Group: <b>/ug4</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="UserMatrix1d.html">UserMatrix1d</a> <a href="DependentUserDataMatrix1d.html">DependentUserDataMatrix1d</a> <a href="DataLinkerMatrix1d.html">DataLinkerMatrix1d</a> <a href="LuaUserFunctionMatrixNumber1d.html">LuaUserFunctionMatrixNumber1d</a> <br><table><tr><td colspan=2><h3>LuaUserFunctionMatrixNumber Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaUserFunctionMatrixNumber1d (c_string LuaCallbackName, NumberOfArguments, integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaUserFunctionMatrixNumber1d (c_string LuaCallbackName, NumberOfArguments, PosTimeFlag, integer , bool )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LuaUserFunctionMatrixNumber Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_deriv (size_t , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_input (size_t , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_input (size_t , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserMatrix Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
LuaUserFunctionMatrixNumber1d

LuaUserFunctionMatrixNumber1d (c_string LuaCallbackName, NumberOfArguments, integer )
LuaUserFunctionMatrixNumber1d (c_string LuaCallbackName, NumberOfArguments, integer )<br>Constructor of class <b>LuaUserFunctionMatrixNumber1d</b><br>Registry Group: <b>/ug4</b>
constructor
LuaUserFunctionMatrixNumber1d

LuaUserFunctionMatrixNumber1d (c_string LuaCallbackName, NumberOfArguments, PosTimeFlag, integer , bool )
LuaUserFunctionMatrixNumber1d (c_string LuaCallbackName, NumberOfArguments, PosTimeFlag, integer , bool )<br>Constructor of class <b>LuaUserFunctionMatrixNumber1d</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_deriv
void
void set_deriv (size_t , c_string )
void set_deriv (size_t , c_string )<br><br>Member function of class <b>LuaUserFunctionMatrixNumber1d</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_input
void
void set_input (size_t , SmartPtr<UserNumber> )
void set_input (size_t , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>LuaUserFunctionMatrixNumber1d</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_input
void
void set_input (size_t , number )
void set_input (size_t , number )<br><br>Member function of class <b>LuaUserFunctionMatrixNumber1d</b><br>Registry Group: <b>/ug4</b>
;
class
LuaUserFunctionMatrixNumber2d
ICplUserData2d UserMatrix2d DependentUserDataMatrix2d DataLinkerMatrix2d 
Classgroup <b>LuaUserFunctionMatrixNumber</b><br>Registry Group: <b>/ug4</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserMatrix2d.html">UserMatrix2d</a> <a href="DependentUserDataMatrix2d.html">DependentUserDataMatrix2d</a> <a href="DataLinkerMatrix2d.html">DataLinkerMatrix2d</a> <a href="LuaUserFunctionMatrixNumber2d.html">LuaUserFunctionMatrixNumber2d</a> <br><table><tr><td colspan=2><h3>LuaUserFunctionMatrixNumber Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaUserFunctionMatrixNumber2d (c_string LuaCallbackName, NumberOfArguments, integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaUserFunctionMatrixNumber2d (c_string LuaCallbackName, NumberOfArguments, PosTimeFlag, integer , bool )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LuaUserFunctionMatrixNumber Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_deriv (size_t , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_input (size_t , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_input (size_t , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserMatrix Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
LuaUserFunctionMatrixNumber2d

LuaUserFunctionMatrixNumber2d (c_string LuaCallbackName, NumberOfArguments, integer )
LuaUserFunctionMatrixNumber2d (c_string LuaCallbackName, NumberOfArguments, integer )<br>Constructor of class <b>LuaUserFunctionMatrixNumber2d</b><br>Registry Group: <b>/ug4</b>
constructor
LuaUserFunctionMatrixNumber2d

LuaUserFunctionMatrixNumber2d (c_string LuaCallbackName, NumberOfArguments, PosTimeFlag, integer , bool )
LuaUserFunctionMatrixNumber2d (c_string LuaCallbackName, NumberOfArguments, PosTimeFlag, integer , bool )<br>Constructor of class <b>LuaUserFunctionMatrixNumber2d</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_deriv
void
void set_deriv (size_t , c_string )
void set_deriv (size_t , c_string )<br><br>Member function of class <b>LuaUserFunctionMatrixNumber2d</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_input
void
void set_input (size_t , SmartPtr<UserNumber> )
void set_input (size_t , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>LuaUserFunctionMatrixNumber2d</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_input
void
void set_input (size_t , number )
void set_input (size_t , number )<br><br>Member function of class <b>LuaUserFunctionMatrixNumber2d</b><br>Registry Group: <b>/ug4</b>
;
class
LuaUserFunctionMatrixNumber3d
ICplUserData3d UserMatrix3d DependentUserDataMatrix3d DataLinkerMatrix3d 
Classgroup <b>LuaUserFunctionMatrixNumber</b><br>Registry Group: <b>/ug4</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserMatrix3d.html">UserMatrix3d</a> <a href="DependentUserDataMatrix3d.html">DependentUserDataMatrix3d</a> <a href="DataLinkerMatrix3d.html">DataLinkerMatrix3d</a> <a href="LuaUserFunctionMatrixNumber3d.html">LuaUserFunctionMatrixNumber3d</a> <br><table><tr><td colspan=2><h3>LuaUserFunctionMatrixNumber Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaUserFunctionMatrixNumber3d (c_string LuaCallbackName, NumberOfArguments, integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaUserFunctionMatrixNumber3d (c_string LuaCallbackName, NumberOfArguments, PosTimeFlag, integer , bool )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LuaUserFunctionMatrixNumber Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_deriv (size_t , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_input (size_t , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_input (size_t , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserMatrix Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
LuaUserFunctionMatrixNumber3d

LuaUserFunctionMatrixNumber3d (c_string LuaCallbackName, NumberOfArguments, integer )
LuaUserFunctionMatrixNumber3d (c_string LuaCallbackName, NumberOfArguments, integer )<br>Constructor of class <b>LuaUserFunctionMatrixNumber3d</b><br>Registry Group: <b>/ug4</b>
constructor
LuaUserFunctionMatrixNumber3d

LuaUserFunctionMatrixNumber3d (c_string LuaCallbackName, NumberOfArguments, PosTimeFlag, integer , bool )
LuaUserFunctionMatrixNumber3d (c_string LuaCallbackName, NumberOfArguments, PosTimeFlag, integer , bool )<br>Constructor of class <b>LuaUserFunctionMatrixNumber3d</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_deriv
void
void set_deriv (size_t , c_string )
void set_deriv (size_t , c_string )<br><br>Member function of class <b>LuaUserFunctionMatrixNumber3d</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_input
void
void set_input (size_t , SmartPtr<UserNumber> )
void set_input (size_t , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>LuaUserFunctionMatrixNumber3d</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_input
void
void set_input (size_t , number )
void set_input (size_t , number )<br><br>Member function of class <b>LuaUserFunctionMatrixNumber3d</b><br>Registry Group: <b>/ug4</b>
;
class
LuaUserFunctionNumber1d
ICplUserData1d UserNumber1d DependentUserDataNumber1d DataLinkerNumber1d 
Classgroup <b>LuaUserFunctionNumber</b><br>Registry Group: <b>/ug4</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="UserNumber1d.html">UserNumber1d</a> <a href="DependentUserDataNumber1d.html">DependentUserDataNumber1d</a> <a href="DataLinkerNumber1d.html">DataLinkerNumber1d</a> <a href="LuaUserFunctionNumber1d.html">LuaUserFunctionNumber1d</a> <br><table><tr><td colspan=2><h3>LuaUserFunctionNumber Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaUserFunctionNumber1d (c_string LuaCallbackName, NumberOfArguments, integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaUserFunctionNumber1d (c_string LuaCallbackName, NumberOfArguments, PosTimeFlag, integer , bool )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LuaUserFunctionNumber Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_deriv (size_t , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_input (size_t , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_input (size_t , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
LuaUserFunctionNumber1d

LuaUserFunctionNumber1d (c_string LuaCallbackName, NumberOfArguments, integer )
LuaUserFunctionNumber1d (c_string LuaCallbackName, NumberOfArguments, integer )<br>Constructor of class <b>LuaUserFunctionNumber1d</b><br>Registry Group: <b>/ug4</b>
constructor
LuaUserFunctionNumber1d

LuaUserFunctionNumber1d (c_string LuaCallbackName, NumberOfArguments, PosTimeFlag, integer , bool )
LuaUserFunctionNumber1d (c_string LuaCallbackName, NumberOfArguments, PosTimeFlag, integer , bool )<br>Constructor of class <b>LuaUserFunctionNumber1d</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_deriv
void
void set_deriv (size_t , c_string )
void set_deriv (size_t , c_string )<br><br>Member function of class <b>LuaUserFunctionNumber1d</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_input
void
void set_input (size_t , SmartPtr<UserNumber> )
void set_input (size_t , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>LuaUserFunctionNumber1d</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_input
void
void set_input (size_t , number )
void set_input (size_t , number )<br><br>Member function of class <b>LuaUserFunctionNumber1d</b><br>Registry Group: <b>/ug4</b>
;
class
LuaUserFunctionNumber2d
ICplUserData2d UserNumber2d DependentUserDataNumber2d DataLinkerNumber2d 
Classgroup <b>LuaUserFunctionNumber</b><br>Registry Group: <b>/ug4</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserNumber2d.html">UserNumber2d</a> <a href="DependentUserDataNumber2d.html">DependentUserDataNumber2d</a> <a href="DataLinkerNumber2d.html">DataLinkerNumber2d</a> <a href="LuaUserFunctionNumber2d.html">LuaUserFunctionNumber2d</a> <br><table><tr><td colspan=2><h3>LuaUserFunctionNumber Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaUserFunctionNumber2d (c_string LuaCallbackName, NumberOfArguments, integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaUserFunctionNumber2d (c_string LuaCallbackName, NumberOfArguments, PosTimeFlag, integer , bool )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LuaUserFunctionNumber Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_deriv (size_t , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_input (size_t , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_input (size_t , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
LuaUserFunctionNumber2d

LuaUserFunctionNumber2d (c_string LuaCallbackName, NumberOfArguments, integer )
LuaUserFunctionNumber2d (c_string LuaCallbackName, NumberOfArguments, integer )<br>Constructor of class <b>LuaUserFunctionNumber2d</b><br>Registry Group: <b>/ug4</b>
constructor
LuaUserFunctionNumber2d

LuaUserFunctionNumber2d (c_string LuaCallbackName, NumberOfArguments, PosTimeFlag, integer , bool )
LuaUserFunctionNumber2d (c_string LuaCallbackName, NumberOfArguments, PosTimeFlag, integer , bool )<br>Constructor of class <b>LuaUserFunctionNumber2d</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_deriv
void
void set_deriv (size_t , c_string )
void set_deriv (size_t , c_string )<br><br>Member function of class <b>LuaUserFunctionNumber2d</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_input
void
void set_input (size_t , SmartPtr<UserNumber> )
void set_input (size_t , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>LuaUserFunctionNumber2d</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_input
void
void set_input (size_t , number )
void set_input (size_t , number )<br><br>Member function of class <b>LuaUserFunctionNumber2d</b><br>Registry Group: <b>/ug4</b>
;
class
LuaUserFunctionNumber3d
ICplUserData3d UserNumber3d DependentUserDataNumber3d DataLinkerNumber3d 
Classgroup <b>LuaUserFunctionNumber</b><br>Registry Group: <b>/ug4</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserNumber3d.html">UserNumber3d</a> <a href="DependentUserDataNumber3d.html">DependentUserDataNumber3d</a> <a href="DataLinkerNumber3d.html">DataLinkerNumber3d</a> <a href="LuaUserFunctionNumber3d.html">LuaUserFunctionNumber3d</a> <br><table><tr><td colspan=2><h3>LuaUserFunctionNumber Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaUserFunctionNumber3d (c_string LuaCallbackName, NumberOfArguments, integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaUserFunctionNumber3d (c_string LuaCallbackName, NumberOfArguments, PosTimeFlag, integer , bool )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LuaUserFunctionNumber Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_deriv (size_t , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_input (size_t , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_input (size_t , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
LuaUserFunctionNumber3d

LuaUserFunctionNumber3d (c_string LuaCallbackName, NumberOfArguments, integer )
LuaUserFunctionNumber3d (c_string LuaCallbackName, NumberOfArguments, integer )<br>Constructor of class <b>LuaUserFunctionNumber3d</b><br>Registry Group: <b>/ug4</b>
constructor
LuaUserFunctionNumber3d

LuaUserFunctionNumber3d (c_string LuaCallbackName, NumberOfArguments, PosTimeFlag, integer , bool )
LuaUserFunctionNumber3d (c_string LuaCallbackName, NumberOfArguments, PosTimeFlag, integer , bool )<br>Constructor of class <b>LuaUserFunctionNumber3d</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_deriv
void
void set_deriv (size_t , c_string )
void set_deriv (size_t , c_string )<br><br>Member function of class <b>LuaUserFunctionNumber3d</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_input
void
void set_input (size_t , SmartPtr<UserNumber> )
void set_input (size_t , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>LuaUserFunctionNumber3d</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_input
void
void set_input (size_t , number )
void set_input (size_t , number )<br><br>Member function of class <b>LuaUserFunctionNumber3d</b><br>Registry Group: <b>/ug4</b>
;
class
LuaUserFunctionVectorNumber1d
ICplUserData1d UserVector1d DependentUserDataVector1d DataLinkerVector1d 
Classgroup <b>LuaUserFunctionVectorNumber</b><br>Registry Group: <b>/ug4</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="UserVector1d.html">UserVector1d</a> <a href="DependentUserDataVector1d.html">DependentUserDataVector1d</a> <a href="DataLinkerVector1d.html">DataLinkerVector1d</a> <a href="LuaUserFunctionVectorNumber1d.html">LuaUserFunctionVectorNumber1d</a> <br><table><tr><td colspan=2><h3>LuaUserFunctionVectorNumber Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaUserFunctionVectorNumber1d (c_string LuaCallbackName, NumberOfArguments, integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaUserFunctionVectorNumber1d (c_string LuaCallbackName, NumberOfArguments, PosTimeFlag, integer , bool )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LuaUserFunctionVectorNumber Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_deriv (size_t , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_input (size_t , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_input (size_t , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
LuaUserFunctionVectorNumber1d

LuaUserFunctionVectorNumber1d (c_string LuaCallbackName, NumberOfArguments, integer )
LuaUserFunctionVectorNumber1d (c_string LuaCallbackName, NumberOfArguments, integer )<br>Constructor of class <b>LuaUserFunctionVectorNumber1d</b><br>Registry Group: <b>/ug4</b>
constructor
LuaUserFunctionVectorNumber1d

LuaUserFunctionVectorNumber1d (c_string LuaCallbackName, NumberOfArguments, PosTimeFlag, integer , bool )
LuaUserFunctionVectorNumber1d (c_string LuaCallbackName, NumberOfArguments, PosTimeFlag, integer , bool )<br>Constructor of class <b>LuaUserFunctionVectorNumber1d</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_deriv
void
void set_deriv (size_t , c_string )
void set_deriv (size_t , c_string )<br><br>Member function of class <b>LuaUserFunctionVectorNumber1d</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_input
void
void set_input (size_t , SmartPtr<UserNumber> )
void set_input (size_t , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>LuaUserFunctionVectorNumber1d</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_input
void
void set_input (size_t , number )
void set_input (size_t , number )<br><br>Member function of class <b>LuaUserFunctionVectorNumber1d</b><br>Registry Group: <b>/ug4</b>
;
class
LuaUserFunctionVectorNumber2d
ICplUserData2d UserVector2d DependentUserDataVector2d DataLinkerVector2d 
Classgroup <b>LuaUserFunctionVectorNumber</b><br>Registry Group: <b>/ug4</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserVector2d.html">UserVector2d</a> <a href="DependentUserDataVector2d.html">DependentUserDataVector2d</a> <a href="DataLinkerVector2d.html">DataLinkerVector2d</a> <a href="LuaUserFunctionVectorNumber2d.html">LuaUserFunctionVectorNumber2d</a> <br><table><tr><td colspan=2><h3>LuaUserFunctionVectorNumber Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaUserFunctionVectorNumber2d (c_string LuaCallbackName, NumberOfArguments, integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaUserFunctionVectorNumber2d (c_string LuaCallbackName, NumberOfArguments, PosTimeFlag, integer , bool )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LuaUserFunctionVectorNumber Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_deriv (size_t , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_input (size_t , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_input (size_t , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
LuaUserFunctionVectorNumber2d

LuaUserFunctionVectorNumber2d (c_string LuaCallbackName, NumberOfArguments, integer )
LuaUserFunctionVectorNumber2d (c_string LuaCallbackName, NumberOfArguments, integer )<br>Constructor of class <b>LuaUserFunctionVectorNumber2d</b><br>Registry Group: <b>/ug4</b>
constructor
LuaUserFunctionVectorNumber2d

LuaUserFunctionVectorNumber2d (c_string LuaCallbackName, NumberOfArguments, PosTimeFlag, integer , bool )
LuaUserFunctionVectorNumber2d (c_string LuaCallbackName, NumberOfArguments, PosTimeFlag, integer , bool )<br>Constructor of class <b>LuaUserFunctionVectorNumber2d</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_deriv
void
void set_deriv (size_t , c_string )
void set_deriv (size_t , c_string )<br><br>Member function of class <b>LuaUserFunctionVectorNumber2d</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_input
void
void set_input (size_t , SmartPtr<UserNumber> )
void set_input (size_t , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>LuaUserFunctionVectorNumber2d</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_input
void
void set_input (size_t , number )
void set_input (size_t , number )<br><br>Member function of class <b>LuaUserFunctionVectorNumber2d</b><br>Registry Group: <b>/ug4</b>
;
class
LuaUserFunctionVectorNumber3d
ICplUserData3d UserVector3d DependentUserDataVector3d DataLinkerVector3d 
Classgroup <b>LuaUserFunctionVectorNumber</b><br>Registry Group: <b>/ug4</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserVector3d.html">UserVector3d</a> <a href="DependentUserDataVector3d.html">DependentUserDataVector3d</a> <a href="DataLinkerVector3d.html">DataLinkerVector3d</a> <a href="LuaUserFunctionVectorNumber3d.html">LuaUserFunctionVectorNumber3d</a> <br><table><tr><td colspan=2><h3>LuaUserFunctionVectorNumber Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaUserFunctionVectorNumber3d (c_string LuaCallbackName, NumberOfArguments, integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaUserFunctionVectorNumber3d (c_string LuaCallbackName, NumberOfArguments, PosTimeFlag, integer , bool )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LuaUserFunctionVectorNumber Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_deriv (size_t , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_input (size_t , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_input (size_t , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
LuaUserFunctionVectorNumber3d

LuaUserFunctionVectorNumber3d (c_string LuaCallbackName, NumberOfArguments, integer )
LuaUserFunctionVectorNumber3d (c_string LuaCallbackName, NumberOfArguments, integer )<br>Constructor of class <b>LuaUserFunctionVectorNumber3d</b><br>Registry Group: <b>/ug4</b>
constructor
LuaUserFunctionVectorNumber3d

LuaUserFunctionVectorNumber3d (c_string LuaCallbackName, NumberOfArguments, PosTimeFlag, integer , bool )
LuaUserFunctionVectorNumber3d (c_string LuaCallbackName, NumberOfArguments, PosTimeFlag, integer , bool )<br>Constructor of class <b>LuaUserFunctionVectorNumber3d</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_deriv
void
void set_deriv (size_t , c_string )
void set_deriv (size_t , c_string )<br><br>Member function of class <b>LuaUserFunctionVectorNumber3d</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_input
void
void set_input (size_t , SmartPtr<UserNumber> )
void set_input (size_t , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>LuaUserFunctionVectorNumber3d</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_input
void
void set_input (size_t , number )
void set_input (size_t , number )<br><br>Member function of class <b>LuaUserFunctionVectorNumber3d</b><br>Registry Group: <b>/ug4</b>
;
class
LuaUserMatrix1d
ICplUserData1d UserMatrix1d 
Classgroup <b>LuaUserMatrix</b><br>Registry Group: <b>/ug4</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="UserMatrix1d.html">UserMatrix1d</a> <a href="LuaUserMatrix1d.html">LuaUserMatrix1d</a> <br><table><tr><td colspan=2><h3>LuaUserMatrix Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaUserMatrix1d (c_string Callback)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserMatrix Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
LuaUserMatrix1d

LuaUserMatrix1d (c_string Callback)
LuaUserMatrix1d (c_string Callback)<br>Constructor of class <b>LuaUserMatrix1d</b><br>Registry Group: <b>/ug4</b>
;
class
LuaUserMatrix2d
ICplUserData2d UserMatrix2d 
Classgroup <b>LuaUserMatrix</b><br>Registry Group: <b>/ug4</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserMatrix2d.html">UserMatrix2d</a> <a href="LuaUserMatrix2d.html">LuaUserMatrix2d</a> <br><table><tr><td colspan=2><h3>LuaUserMatrix Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaUserMatrix2d (c_string Callback)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserMatrix Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
LuaUserMatrix2d

LuaUserMatrix2d (c_string Callback)
LuaUserMatrix2d (c_string Callback)<br>Constructor of class <b>LuaUserMatrix2d</b><br>Registry Group: <b>/ug4</b>
;
class
LuaUserMatrix3d
ICplUserData3d UserMatrix3d 
Classgroup <b>LuaUserMatrix</b><br>Registry Group: <b>/ug4</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserMatrix3d.html">UserMatrix3d</a> <a href="LuaUserMatrix3d.html">LuaUserMatrix3d</a> <br><table><tr><td colspan=2><h3>LuaUserMatrix Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaUserMatrix3d (c_string Callback)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserMatrix Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
LuaUserMatrix3d

LuaUserMatrix3d (c_string Callback)
LuaUserMatrix3d (c_string Callback)<br>Constructor of class <b>LuaUserMatrix3d</b><br>Registry Group: <b>/ug4</b>
;
class
LuaUserNumber1d
ICplUserData1d UserNumber1d 
Classgroup <b>LuaUserNumber</b><br>Registry Group: <b>/ug4</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="UserNumber1d.html">UserNumber1d</a> <a href="LuaUserNumber1d.html">LuaUserNumber1d</a> <br><table><tr><td colspan=2><h3>LuaUserNumber Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaUserNumber1d (c_string Callback)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
LuaUserNumber1d

LuaUserNumber1d (c_string Callback)
LuaUserNumber1d (c_string Callback)<br>Constructor of class <b>LuaUserNumber1d</b><br>Registry Group: <b>/ug4</b>
;
class
LuaUserNumber2d
ICplUserData2d UserNumber2d 
Classgroup <b>LuaUserNumber</b><br>Registry Group: <b>/ug4</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserNumber2d.html">UserNumber2d</a> <a href="LuaUserNumber2d.html">LuaUserNumber2d</a> <br><table><tr><td colspan=2><h3>LuaUserNumber Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaUserNumber2d (c_string Callback)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
LuaUserNumber2d

LuaUserNumber2d (c_string Callback)
LuaUserNumber2d (c_string Callback)<br>Constructor of class <b>LuaUserNumber2d</b><br>Registry Group: <b>/ug4</b>
;
class
LuaUserNumber3d
ICplUserData3d UserNumber3d 
Classgroup <b>LuaUserNumber</b><br>Registry Group: <b>/ug4</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserNumber3d.html">UserNumber3d</a> <a href="LuaUserNumber3d.html">LuaUserNumber3d</a> <br><table><tr><td colspan=2><h3>LuaUserNumber Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaUserNumber3d (c_string Callback)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
LuaUserNumber3d

LuaUserNumber3d (c_string Callback)
LuaUserNumber3d (c_string Callback)<br>Constructor of class <b>LuaUserNumber3d</b><br>Registry Group: <b>/ug4</b>
;
class
LuaUserNumberNumberFunction

Registry Group: <b>/ug4</b><br>class has constructor. <br><table><tr><td colspan=2><h3>LuaUserNumberNumberFunction Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaUserNumberNumberFunction ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LuaUserNumberNumberFunction Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_lua_callback (c_string )</td></tr><tr><td><br></td></tr></table>
constructor
LuaUserNumberNumberFunction

LuaUserNumberNumberFunction ()
LuaUserNumberNumberFunction ()<br>Constructor of class <b>LuaUserNumberNumberFunction</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_lua_callback
void
void set_lua_callback (c_string )
void set_lua_callback (c_string )<br><br>Member function of class <b>LuaUserNumberNumberFunction</b><br>Registry Group: <b>/ug4</b>
;
class
LuaUserVector1d
ICplUserData1d UserVector1d 
Classgroup <b>LuaUserVector</b><br>Registry Group: <b>/ug4</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="UserVector1d.html">UserVector1d</a> <a href="LuaUserVector1d.html">LuaUserVector1d</a> <br><table><tr><td colspan=2><h3>LuaUserVector Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaUserVector1d (c_string Callback)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
LuaUserVector1d

LuaUserVector1d (c_string Callback)
LuaUserVector1d (c_string Callback)<br>Constructor of class <b>LuaUserVector1d</b><br>Registry Group: <b>/ug4</b>
;
class
LuaUserVector2d
ICplUserData2d UserVector2d 
Classgroup <b>LuaUserVector</b><br>Registry Group: <b>/ug4</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserVector2d.html">UserVector2d</a> <a href="LuaUserVector2d.html">LuaUserVector2d</a> <br><table><tr><td colspan=2><h3>LuaUserVector Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaUserVector2d (c_string Callback)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
LuaUserVector2d

LuaUserVector2d (c_string Callback)
LuaUserVector2d (c_string Callback)<br>Constructor of class <b>LuaUserVector2d</b><br>Registry Group: <b>/ug4</b>
;
class
LuaUserVector3d
ICplUserData3d UserVector3d 
Classgroup <b>LuaUserVector</b><br>Registry Group: <b>/ug4</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserVector3d.html">UserVector3d</a> <a href="LuaUserVector3d.html">LuaUserVector3d</a> <br><table><tr><td colspan=2><h3>LuaUserVector Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaUserVector3d (c_string Callback)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
LuaUserVector3d

LuaUserVector3d (c_string Callback)
LuaUserVector3d (c_string Callback)<br>Constructor of class <b>LuaUserVector3d</b><br>Registry Group: <b>/ug4</b>
;
class
MGSubsetHandler
ISubsetHandler 
Registry Group: <b>/ug4/Grid</b><br>class has constructor. <br>Inheritance: <a href="ISubsetHandler.html">ISubsetHandler</a> <a href="MGSubsetHandler.html">MGSubsetHandler</a> <br><table><tr><td colspan=2><h3>MGSubsetHandler Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>MGSubsetHandler ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>MGSubsetHandler Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assign_grid (<a href="MultiGrid.html">MultiGrid</a> *mg)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ISubsetHandler Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_subset_name (c_string name, integer subsetIndex)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited ISubsetHandler Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_subset_index (c_string subsetName)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns subset index<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>c_string </td><td class="memItemRight" valign=bottom>get_subset_name (integer subsetIndex)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns subset name<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>num_subsets ()</td></tr><tr><td><br></td></tr></table>
constructor
MGSubsetHandler

MGSubsetHandler ()
MGSubsetHandler ()<br>Constructor of class <b>MGSubsetHandler</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
assign_grid
void
void assign_grid (MultiGrid *mg)
void assign_grid (<a href="MultiGrid.html">MultiGrid</a> *mg)<br><br>Member function of class <b>MGSubsetHandler</b><br>Registry Group: <b>/ug4/Grid</b>
;
class
MatrixCPU1

Classgroup <b>Matrix</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has constructor.  Tag <b>alg=CPU1;</b><br><table><tr><td colspan=2><h3>Matrix Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>MatrixCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Matrix Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print ()</td></tr><tr><td><br></td></tr></table>
constructor
MatrixCPU1

MatrixCPU1 ()
MatrixCPU1 ()<br>Constructor of class <b>MatrixCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
print
void
void print () const
void print ()<br><br>Member function of class <b>MatrixCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
;
class
MatrixCPU2

Classgroup <b>Matrix</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has constructor.  Tag <b>alg=CPU2;</b><br><table><tr><td colspan=2><h3>Matrix Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>MatrixCPU2 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Matrix Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print ()</td></tr><tr><td><br></td></tr></table>
constructor
MatrixCPU2

MatrixCPU2 ()
MatrixCPU2 ()<br>Constructor of class <b>MatrixCPU2</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
print
void
void print () const
void print ()<br><br>Member function of class <b>MatrixCPU2</b><br>Registry Group: <b>/ug4/Algebra</b>
;
class
MatrixCPU3

Classgroup <b>Matrix</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has constructor.  Tag <b>alg=CPU3;</b><br><table><tr><td colspan=2><h3>Matrix Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>MatrixCPU3 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Matrix Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print ()</td></tr><tr><td><br></td></tr></table>
constructor
MatrixCPU3

MatrixCPU3 ()
MatrixCPU3 ()<br>Constructor of class <b>MatrixCPU3</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
print
void
void print () const
void print ()<br><br>Member function of class <b>MatrixCPU3</b><br>Registry Group: <b>/ug4/Algebra</b>
;
class
MatrixOperatorCPU1
MatrixCPU1 IOperatorCPU1 ILinearOperatorCPU1 
Classgroup <b>MatrixOperator</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has constructor.  Tag <b>alg=CPU1;</b><br>Inheritance: <a href="MatrixCPU1.html">MatrixCPU1</a> <a href="IOperatorCPU1.html">IOperatorCPU1</a> <a href="ILinearOperatorCPU1.html">ILinearOperatorCPU1</a> <a href="MatrixOperatorCPU1.html">MatrixOperatorCPU1</a> <br><table><tr><td colspan=2><h3>MatrixOperator Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>MatrixOperatorCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearOperator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns f#u<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Matrix Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>MatrixCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited Matrix Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print ()</td></tr><tr><td><br></td></tr></table>
constructor
MatrixOperatorCPU1

MatrixOperatorCPU1 ()
MatrixOperatorCPU1 ()<br>Constructor of class <b>MatrixOperatorCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
;
class
MatrixOperatorCPU2
MatrixCPU2 IOperatorCPU2 ILinearOperatorCPU2 
Classgroup <b>MatrixOperator</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has constructor.  Tag <b>alg=CPU2;</b><br>Inheritance: <a href="MatrixCPU2.html">MatrixCPU2</a> <a href="IOperatorCPU2.html">IOperatorCPU2</a> <a href="ILinearOperatorCPU2.html">ILinearOperatorCPU2</a> <a href="MatrixOperatorCPU2.html">MatrixOperatorCPU2</a> <br><table><tr><td colspan=2><h3>MatrixOperator Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>MatrixOperatorCPU2 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearOperator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns f#u<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Matrix Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>MatrixCPU2 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited Matrix Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print ()</td></tr><tr><td><br></td></tr></table>
constructor
MatrixOperatorCPU2

MatrixOperatorCPU2 ()
MatrixOperatorCPU2 ()<br>Constructor of class <b>MatrixOperatorCPU2</b><br>Registry Group: <b>/ug4/Algebra</b>
;
class
MatrixOperatorCPU3
MatrixCPU3 IOperatorCPU3 ILinearOperatorCPU3 
Classgroup <b>MatrixOperator</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has constructor.  Tag <b>alg=CPU3;</b><br>Inheritance: <a href="MatrixCPU3.html">MatrixCPU3</a> <a href="IOperatorCPU3.html">IOperatorCPU3</a> <a href="ILinearOperatorCPU3.html">ILinearOperatorCPU3</a> <a href="MatrixOperatorCPU3.html">MatrixOperatorCPU3</a> <br><table><tr><td colspan=2><h3>MatrixOperator Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>MatrixOperatorCPU3 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearOperator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns f#u<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Matrix Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>MatrixCPU3 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited Matrix Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print ()</td></tr><tr><td><br></td></tr></table>
constructor
MatrixOperatorCPU3

MatrixOperatorCPU3 ()
MatrixOperatorCPU3 ()<br>Constructor of class <b>MatrixOperatorCPU3</b><br>Registry Group: <b>/ug4/Algebra</b>
;
class
MembraneNeumannBoundaryElemDisc1d
IElemDisc1d 
Classgroup <b>MembraneNeumannBoundaryElemDisc</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="IElemDisc1d.html">IElemDisc1d</a> <a href="MembraneNeumannBoundaryElemDisc1d.html">MembraneNeumannBoundaryElemDisc1d</a> <br><table><tr><td colspan=2><h3>MembraneNeumannBoundaryElemDisc Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>MembraneNeumannBoundaryElemDisc1d (c_string Functions, c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>MembraneNeumannBoundaryElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_boundary (c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_capacity (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_injection (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
MembraneNeumannBoundaryElemDisc1d

MembraneNeumannBoundaryElemDisc1d (c_string Functions, c_string Subset(s))
MembraneNeumannBoundaryElemDisc1d (c_string Functions, c_string Subset(s))<br>Constructor of class <b>MembraneNeumannBoundaryElemDisc1d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_capacity
void
void set_capacity (number )
void set_capacity (number )<br><br>Member function of class <b>MembraneNeumannBoundaryElemDisc1d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_injection
void
void set_injection (SmartPtr<UserNumber> )
void set_injection (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>MembraneNeumannBoundaryElemDisc1d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_boundary
void
void set_boundary (c_string )
void set_boundary (c_string )<br><br>Member function of class <b>MembraneNeumannBoundaryElemDisc1d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_diffusion
void
void set_diffusion (number )
void set_diffusion (number )<br><br>Member function of class <b>MembraneNeumannBoundaryElemDisc1d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
;
class
MembraneNeumannBoundaryElemDisc2d
IElemDisc2d 
Classgroup <b>MembraneNeumannBoundaryElemDisc</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="MembraneNeumannBoundaryElemDisc2d.html">MembraneNeumannBoundaryElemDisc2d</a> <br><table><tr><td colspan=2><h3>MembraneNeumannBoundaryElemDisc Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>MembraneNeumannBoundaryElemDisc2d (c_string Functions, c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>MembraneNeumannBoundaryElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_boundary (c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_capacity (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_injection (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
MembraneNeumannBoundaryElemDisc2d

MembraneNeumannBoundaryElemDisc2d (c_string Functions, c_string Subset(s))
MembraneNeumannBoundaryElemDisc2d (c_string Functions, c_string Subset(s))<br>Constructor of class <b>MembraneNeumannBoundaryElemDisc2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_capacity
void
void set_capacity (number )
void set_capacity (number )<br><br>Member function of class <b>MembraneNeumannBoundaryElemDisc2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_injection
void
void set_injection (SmartPtr<UserNumber> )
void set_injection (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>MembraneNeumannBoundaryElemDisc2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_boundary
void
void set_boundary (c_string )
void set_boundary (c_string )<br><br>Member function of class <b>MembraneNeumannBoundaryElemDisc2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_diffusion
void
void set_diffusion (number )
void set_diffusion (number )<br><br>Member function of class <b>MembraneNeumannBoundaryElemDisc2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
;
class
MembraneNeumannBoundaryElemDisc3d
IElemDisc3d 
Classgroup <b>MembraneNeumannBoundaryElemDisc</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IElemDisc3d.html">IElemDisc3d</a> <a href="MembraneNeumannBoundaryElemDisc3d.html">MembraneNeumannBoundaryElemDisc3d</a> <br><table><tr><td colspan=2><h3>MembraneNeumannBoundaryElemDisc Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>MembraneNeumannBoundaryElemDisc3d (c_string Functions, c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>MembraneNeumannBoundaryElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_boundary (c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_capacity (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_injection (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
MembraneNeumannBoundaryElemDisc3d

MembraneNeumannBoundaryElemDisc3d (c_string Functions, c_string Subset(s))
MembraneNeumannBoundaryElemDisc3d (c_string Functions, c_string Subset(s))<br>Constructor of class <b>MembraneNeumannBoundaryElemDisc3d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_capacity
void
void set_capacity (number )
void set_capacity (number )<br><br>Member function of class <b>MembraneNeumannBoundaryElemDisc3d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_injection
void
void set_injection (SmartPtr<UserNumber> )
void set_injection (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>MembraneNeumannBoundaryElemDisc3d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_boundary
void
void set_boundary (c_string )
void set_boundary (c_string )<br><br>Member function of class <b>MembraneNeumannBoundaryElemDisc3d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_diffusion
void
void set_diffusion (number )
void set_diffusion (number )<br><br>Member function of class <b>MembraneNeumannBoundaryElemDisc3d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
;
class
MembranePotentialDiscretization1d
IElemDisc1d 
Classgroup <b>MembranePotentialDiscretization</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="IElemDisc1d.html">IElemDisc1d</a> <a href="MembranePotentialDiscretization1d.html">MembranePotentialDiscretization1d</a> <br><table><tr><td colspan=2><h3>MembranePotentialDiscretization Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>MembranePotentialDiscretization1d (c_string Functions, c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>MembranePotentialDiscretization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_capacity (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_hhDynamics (<a href="IFunctionNumber.html">IFunctionNumber</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_injection (<a href="IFunctionNumber.html">IFunctionNumber</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
MembranePotentialDiscretization1d

MembranePotentialDiscretization1d (c_string Functions, c_string Subset(s))
MembranePotentialDiscretization1d (c_string Functions, c_string Subset(s))<br>Constructor of class <b>MembranePotentialDiscretization1d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_capacity
void
void set_capacity (number )
void set_capacity (number )<br><br>Member function of class <b>MembranePotentialDiscretization1d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_hhDynamics
void
void set_hhDynamics (IFunctionNumber *)
void set_hhDynamics (<a href="IFunctionNumber.html">IFunctionNumber</a> *)<br><br>Member function of class <b>MembranePotentialDiscretization1d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_injection
void
void set_injection (IFunctionNumber *)
void set_injection (<a href="IFunctionNumber.html">IFunctionNumber</a> *)<br><br>Member function of class <b>MembranePotentialDiscretization1d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
;
class
MembranePotentialDiscretization2d
IElemDisc2d 
Classgroup <b>MembranePotentialDiscretization</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="MembranePotentialDiscretization2d.html">MembranePotentialDiscretization2d</a> <br><table><tr><td colspan=2><h3>MembranePotentialDiscretization Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>MembranePotentialDiscretization2d (c_string Functions, c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>MembranePotentialDiscretization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_capacity (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_hhDynamics (<a href="IFunctionNumber.html">IFunctionNumber</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_injection (<a href="IFunctionNumber.html">IFunctionNumber</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
MembranePotentialDiscretization2d

MembranePotentialDiscretization2d (c_string Functions, c_string Subset(s))
MembranePotentialDiscretization2d (c_string Functions, c_string Subset(s))<br>Constructor of class <b>MembranePotentialDiscretization2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_capacity
void
void set_capacity (number )
void set_capacity (number )<br><br>Member function of class <b>MembranePotentialDiscretization2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_hhDynamics
void
void set_hhDynamics (IFunctionNumber *)
void set_hhDynamics (<a href="IFunctionNumber.html">IFunctionNumber</a> *)<br><br>Member function of class <b>MembranePotentialDiscretization2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_injection
void
void set_injection (IFunctionNumber *)
void set_injection (<a href="IFunctionNumber.html">IFunctionNumber</a> *)<br><br>Member function of class <b>MembranePotentialDiscretization2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
;
class
MembranePotentialDiscretization3d
IElemDisc3d 
Classgroup <b>MembranePotentialDiscretization</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IElemDisc3d.html">IElemDisc3d</a> <a href="MembranePotentialDiscretization3d.html">MembranePotentialDiscretization3d</a> <br><table><tr><td colspan=2><h3>MembranePotentialDiscretization Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>MembranePotentialDiscretization3d (c_string Functions, c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>MembranePotentialDiscretization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_capacity (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_hhDynamics (<a href="IFunctionNumber.html">IFunctionNumber</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_injection (<a href="IFunctionNumber.html">IFunctionNumber</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
MembranePotentialDiscretization3d

MembranePotentialDiscretization3d (c_string Functions, c_string Subset(s))
MembranePotentialDiscretization3d (c_string Functions, c_string Subset(s))<br>Constructor of class <b>MembranePotentialDiscretization3d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_capacity
void
void set_capacity (number )
void set_capacity (number )<br><br>Member function of class <b>MembranePotentialDiscretization3d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_hhDynamics
void
void set_hhDynamics (IFunctionNumber *)
void set_hhDynamics (<a href="IFunctionNumber.html">IFunctionNumber</a> *)<br><br>Member function of class <b>MembranePotentialDiscretization3d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_injection
void
void set_injection (IFunctionNumber *)
void set_injection (<a href="IFunctionNumber.html">IFunctionNumber</a> *)<br><br>Member function of class <b>MembranePotentialDiscretization3d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
;
class
MinimalEnergyDampingCPU1
IDampingCPU1 
Classgroup <b>MinimalEnergyDamping</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has constructor.  Tag <b>alg=CPU1;</b><br>Minimal Energy Damping (damping computed based on the minimal energy)<br>Inheritance: <a href="IDampingCPU1.html">IDampingCPU1</a> <a href="MinimalEnergyDampingCPU1.html">MinimalEnergyDampingCPU1</a> <br><table><tr><td colspan=2><h3>MinimalEnergyDamping Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>MinimalEnergyDampingCPU1 ()</td></tr><tr><td><br></td></tr></table>
constructor
MinimalEnergyDampingCPU1

MinimalEnergyDampingCPU1 ()
MinimalEnergyDampingCPU1 ()<br>Constructor of class <b>MinimalEnergyDampingCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
;
class
MinimalEnergyDampingCPU2
IDampingCPU2 
Classgroup <b>MinimalEnergyDamping</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has constructor.  Tag <b>alg=CPU2;</b><br>Minimal Energy Damping (damping computed based on the minimal energy)<br>Inheritance: <a href="IDampingCPU2.html">IDampingCPU2</a> <a href="MinimalEnergyDampingCPU2.html">MinimalEnergyDampingCPU2</a> <br><table><tr><td colspan=2><h3>MinimalEnergyDamping Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>MinimalEnergyDampingCPU2 ()</td></tr><tr><td><br></td></tr></table>
constructor
MinimalEnergyDampingCPU2

MinimalEnergyDampingCPU2 ()
MinimalEnergyDampingCPU2 ()<br>Constructor of class <b>MinimalEnergyDampingCPU2</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
;
class
MinimalEnergyDampingCPU3
IDampingCPU3 
Classgroup <b>MinimalEnergyDamping</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has constructor.  Tag <b>alg=CPU3;</b><br>Minimal Energy Damping (damping computed based on the minimal energy)<br>Inheritance: <a href="IDampingCPU3.html">IDampingCPU3</a> <a href="MinimalEnergyDampingCPU3.html">MinimalEnergyDampingCPU3</a> <br><table><tr><td colspan=2><h3>MinimalEnergyDamping Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>MinimalEnergyDampingCPU3 ()</td></tr><tr><td><br></td></tr></table>
constructor
MinimalEnergyDampingCPU3

MinimalEnergyDampingCPU3 ()
MinimalEnergyDampingCPU3 ()<br>Constructor of class <b>MinimalEnergyDampingCPU3</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
;
class
MinimalResiduumDampingCPU1
IDampingCPU1 
Classgroup <b>MinimalResiduumDamping</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has constructor.  Tag <b>alg=CPU1;</b><br>Minimal Residdum Damping (damping computed based on the minimal residuum)<br>Inheritance: <a href="IDampingCPU1.html">IDampingCPU1</a> <a href="MinimalResiduumDampingCPU1.html">MinimalResiduumDampingCPU1</a> <br><table><tr><td colspan=2><h3>MinimalResiduumDamping Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>MinimalResiduumDampingCPU1 ()</td></tr><tr><td><br></td></tr></table>
constructor
MinimalResiduumDampingCPU1

MinimalResiduumDampingCPU1 ()
MinimalResiduumDampingCPU1 ()<br>Constructor of class <b>MinimalResiduumDampingCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
;
class
MinimalResiduumDampingCPU2
IDampingCPU2 
Classgroup <b>MinimalResiduumDamping</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has constructor.  Tag <b>alg=CPU2;</b><br>Minimal Residdum Damping (damping computed based on the minimal residuum)<br>Inheritance: <a href="IDampingCPU2.html">IDampingCPU2</a> <a href="MinimalResiduumDampingCPU2.html">MinimalResiduumDampingCPU2</a> <br><table><tr><td colspan=2><h3>MinimalResiduumDamping Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>MinimalResiduumDampingCPU2 ()</td></tr><tr><td><br></td></tr></table>
constructor
MinimalResiduumDampingCPU2

MinimalResiduumDampingCPU2 ()
MinimalResiduumDampingCPU2 ()<br>Constructor of class <b>MinimalResiduumDampingCPU2</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
;
class
MinimalResiduumDampingCPU3
IDampingCPU3 
Classgroup <b>MinimalResiduumDamping</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has constructor.  Tag <b>alg=CPU3;</b><br>Minimal Residdum Damping (damping computed based on the minimal residuum)<br>Inheritance: <a href="IDampingCPU3.html">IDampingCPU3</a> <a href="MinimalResiduumDampingCPU3.html">MinimalResiduumDampingCPU3</a> <br><table><tr><td colspan=2><h3>MinimalResiduumDamping Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>MinimalResiduumDampingCPU3 ()</td></tr><tr><td><br></td></tr></table>
constructor
MinimalResiduumDampingCPU3

MinimalResiduumDampingCPU3 ()
MinimalResiduumDampingCPU3 ()<br>Constructor of class <b>MinimalResiduumDampingCPU3</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
;
class
MultiGrid
Grid 
Registry Group: <b>/ug4/Grid</b><br>class has constructor. <br>Inheritance: <a href="Grid.html">Grid</a> <a href="MultiGrid.html">MultiGrid</a> <br><table><tr><td colspan=2><h3>MultiGrid Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>MultiGrid ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>MultiGrid Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_edges (integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_faces (integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_hexahedrons (integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_levels ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_prisms (integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_pyramids (integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_quadrilaterals (integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_tetrahedrons (integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_triangles (integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_vertices (integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_volumes (integer )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Grid Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>Grid ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited Grid Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear_geometry ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>reserve_edges (size_t num)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>reserve_faces (size_t num)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>reserve_vertices (size_t num)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>reserve_volumes (size_t num)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited Grid Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_edges ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_faces ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_hexahedrons ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_prisms ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_pyramids ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_quadrilaterals ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_tetrahedrons ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_triangles ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_vertices ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_volumes ()</td></tr><tr><td><br></td></tr></table>
constructor
MultiGrid

MultiGrid ()
MultiGrid ()<br>Constructor of class <b>MultiGrid</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
num_levels
unknown
size_t num_levels () const
size_t num_levels ()<br><br>Member function of class <b>MultiGrid</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
num_vertices
unknown
size_t num_vertices (integer ) const
size_t num_vertices (integer )<br><br>Member function of class <b>MultiGrid</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
num_edges
unknown
size_t num_edges (integer ) const
size_t num_edges (integer )<br><br>Member function of class <b>MultiGrid</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
num_faces
unknown
size_t num_faces (integer ) const
size_t num_faces (integer )<br><br>Member function of class <b>MultiGrid</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
num_triangles
unknown
size_t num_triangles (integer ) const
size_t num_triangles (integer )<br><br>Member function of class <b>MultiGrid</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
num_quadrilaterals
unknown
size_t num_quadrilaterals (integer ) const
size_t num_quadrilaterals (integer )<br><br>Member function of class <b>MultiGrid</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
num_volumes
unknown
size_t num_volumes (integer ) const
size_t num_volumes (integer )<br><br>Member function of class <b>MultiGrid</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
num_tetrahedrons
unknown
size_t num_tetrahedrons (integer ) const
size_t num_tetrahedrons (integer )<br><br>Member function of class <b>MultiGrid</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
num_pyramids
unknown
size_t num_pyramids (integer ) const
size_t num_pyramids (integer )<br><br>Member function of class <b>MultiGrid</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
num_prisms
unknown
size_t num_prisms (integer ) const
size_t num_prisms (integer )<br><br>Member function of class <b>MultiGrid</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
num_hexahedrons
unknown
size_t num_hexahedrons (integer ) const
size_t num_hexahedrons (integer )<br><br>Member function of class <b>MultiGrid</b><br>Registry Group: <b>/ug4/Grid</b>
;
class
MultiIndex2

Registry Group: <b>/ug4/Discretization</b><br>class has no constructor. <br><table></table>
;
class
NLGaussSeidelSolver1dCPU1
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 IOperatorInverseCPU1 
Classgroup <b>NLGaussSeidelSolver</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU1;</b><br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="IOperatorInverseCPU1.html">IOperatorInverseCPU1</a> <a href="NLGaussSeidelSolver1dCPU1.html">NLGaussSeidelSolver1dCPU1</a> <br><table><tr><td colspan=2><h3>NLGaussSeidelSolver Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NLGaussSeidelSolver1dCPU1 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NLGaussSeidelSolver1dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproxSpaceConvCheck, SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NLGaussSeidelSolver Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="IOperatorCPU1.html">IOperator</a>&gt; op)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>prepare (<a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; approxSpace)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_constraint (const <a href="VectorCPU1.html">Vector</a> *setConstraint)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; convCheck)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number setDampingFactor)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
NLGaussSeidelSolver1dCPU1

NLGaussSeidelSolver1dCPU1 ()
NLGaussSeidelSolver1dCPU1 ()<br>Constructor of class <b>NLGaussSeidelSolver1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
constructor
NLGaussSeidelSolver1dCPU1

NLGaussSeidelSolver1dCPU1 (SmartPtr<ApproximationSpace> ApproxSpaceConvCheck, SmartPtr<IConvergenceCheck> )
NLGaussSeidelSolver1dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproxSpaceConvCheck, SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )<br>Constructor of class <b>NLGaussSeidelSolver1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_approximation_space
void
void set_approximation_space (SmartPtr<ApproximationSpace> approxSpace)
void set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; approxSpace)<br><br>Member function of class <b>NLGaussSeidelSolver1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_convergence_check
void
void set_convergence_check (SmartPtr<IConvergenceCheck> convCheck)
void set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; convCheck)<br><br>Member function of class <b>NLGaussSeidelSolver1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_damp
void
void set_damp (number setDampingFactor)
void set_damp (number setDampingFactor)<br><br>Member function of class <b>NLGaussSeidelSolver1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_constraint
void
void set_constraint (const Vector *setConstraint)
void set_constraint (const <a href="VectorCPU1.html">Vector</a> *setConstraint)<br><br>Member function of class <b>NLGaussSeidelSolver1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
init
bool
bool init (SmartPtr<IOperator> op)
bool init (SmartPtr&lt;<a href="IOperatorCPU1.html">IOperator</a>&gt; op)<br><br>Member function of class <b>NLGaussSeidelSolver1dCPU1</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
prepare
bool
bool prepare (Vector *u)
bool prepare (<a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>NLGaussSeidelSolver1dCPU1</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
apply
bool
bool apply (Vector *u)
bool apply (<a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>NLGaussSeidelSolver1dCPU1</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
;
class
NLGaussSeidelSolver1dCPU2
VectorDebugWritingObjectCPU2 DebugWritingObjectCPU2 IOperatorInverseCPU2 
Classgroup <b>NLGaussSeidelSolver</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU2;</b><br>Inheritance: <a href="VectorDebugWritingObjectCPU2.html">VectorDebugWritingObjectCPU2</a> <a href="DebugWritingObjectCPU2.html">DebugWritingObjectCPU2</a> <a href="IOperatorInverseCPU2.html">IOperatorInverseCPU2</a> <a href="NLGaussSeidelSolver1dCPU2.html">NLGaussSeidelSolver1dCPU2</a> <br><table><tr><td colspan=2><h3>NLGaussSeidelSolver Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NLGaussSeidelSolver1dCPU2 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NLGaussSeidelSolver1dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproxSpaceConvCheck, SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NLGaussSeidelSolver Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="IOperatorCPU1.html">IOperator</a>&gt; op)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>prepare (<a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; approxSpace)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_constraint (const <a href="VectorCPU1.html">Vector</a> *setConstraint)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; convCheck)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number setDampingFactor)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
NLGaussSeidelSolver1dCPU2

NLGaussSeidelSolver1dCPU2 ()
NLGaussSeidelSolver1dCPU2 ()<br>Constructor of class <b>NLGaussSeidelSolver1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
constructor
NLGaussSeidelSolver1dCPU2

NLGaussSeidelSolver1dCPU2 (SmartPtr<ApproximationSpace> ApproxSpaceConvCheck, SmartPtr<IConvergenceCheck> )
NLGaussSeidelSolver1dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproxSpaceConvCheck, SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )<br>Constructor of class <b>NLGaussSeidelSolver1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_approximation_space
void
void set_approximation_space (SmartPtr<ApproximationSpace> approxSpace)
void set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; approxSpace)<br><br>Member function of class <b>NLGaussSeidelSolver1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_convergence_check
void
void set_convergence_check (SmartPtr<IConvergenceCheck> convCheck)
void set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; convCheck)<br><br>Member function of class <b>NLGaussSeidelSolver1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_damp
void
void set_damp (number setDampingFactor)
void set_damp (number setDampingFactor)<br><br>Member function of class <b>NLGaussSeidelSolver1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_constraint
void
void set_constraint (const Vector *setConstraint)
void set_constraint (const <a href="VectorCPU1.html">Vector</a> *setConstraint)<br><br>Member function of class <b>NLGaussSeidelSolver1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
init
bool
bool init (SmartPtr<IOperator> op)
bool init (SmartPtr&lt;<a href="IOperatorCPU1.html">IOperator</a>&gt; op)<br><br>Member function of class <b>NLGaussSeidelSolver1dCPU2</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
prepare
bool
bool prepare (Vector *u)
bool prepare (<a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>NLGaussSeidelSolver1dCPU2</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
apply
bool
bool apply (Vector *u)
bool apply (<a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>NLGaussSeidelSolver1dCPU2</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
;
class
NLGaussSeidelSolver1dCPU3
VectorDebugWritingObjectCPU3 DebugWritingObjectCPU3 IOperatorInverseCPU3 
Classgroup <b>NLGaussSeidelSolver</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU3;</b><br>Inheritance: <a href="VectorDebugWritingObjectCPU3.html">VectorDebugWritingObjectCPU3</a> <a href="DebugWritingObjectCPU3.html">DebugWritingObjectCPU3</a> <a href="IOperatorInverseCPU3.html">IOperatorInverseCPU3</a> <a href="NLGaussSeidelSolver1dCPU3.html">NLGaussSeidelSolver1dCPU3</a> <br><table><tr><td colspan=2><h3>NLGaussSeidelSolver Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NLGaussSeidelSolver1dCPU3 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NLGaussSeidelSolver1dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproxSpaceConvCheck, SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NLGaussSeidelSolver Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="IOperatorCPU1.html">IOperator</a>&gt; op)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>prepare (<a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; approxSpace)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_constraint (const <a href="VectorCPU1.html">Vector</a> *setConstraint)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; convCheck)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number setDampingFactor)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
NLGaussSeidelSolver1dCPU3

NLGaussSeidelSolver1dCPU3 ()
NLGaussSeidelSolver1dCPU3 ()<br>Constructor of class <b>NLGaussSeidelSolver1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
constructor
NLGaussSeidelSolver1dCPU3

NLGaussSeidelSolver1dCPU3 (SmartPtr<ApproximationSpace> ApproxSpaceConvCheck, SmartPtr<IConvergenceCheck> )
NLGaussSeidelSolver1dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproxSpaceConvCheck, SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )<br>Constructor of class <b>NLGaussSeidelSolver1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_approximation_space
void
void set_approximation_space (SmartPtr<ApproximationSpace> approxSpace)
void set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; approxSpace)<br><br>Member function of class <b>NLGaussSeidelSolver1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_convergence_check
void
void set_convergence_check (SmartPtr<IConvergenceCheck> convCheck)
void set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; convCheck)<br><br>Member function of class <b>NLGaussSeidelSolver1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_damp
void
void set_damp (number setDampingFactor)
void set_damp (number setDampingFactor)<br><br>Member function of class <b>NLGaussSeidelSolver1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_constraint
void
void set_constraint (const Vector *setConstraint)
void set_constraint (const <a href="VectorCPU1.html">Vector</a> *setConstraint)<br><br>Member function of class <b>NLGaussSeidelSolver1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
init
bool
bool init (SmartPtr<IOperator> op)
bool init (SmartPtr&lt;<a href="IOperatorCPU1.html">IOperator</a>&gt; op)<br><br>Member function of class <b>NLGaussSeidelSolver1dCPU3</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
prepare
bool
bool prepare (Vector *u)
bool prepare (<a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>NLGaussSeidelSolver1dCPU3</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
apply
bool
bool apply (Vector *u)
bool apply (<a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>NLGaussSeidelSolver1dCPU3</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
;
class
NLGaussSeidelSolver2dCPU1
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 IOperatorInverseCPU1 
Classgroup <b>NLGaussSeidelSolver</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU1;</b><br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="IOperatorInverseCPU1.html">IOperatorInverseCPU1</a> <a href="NLGaussSeidelSolver2dCPU1.html">NLGaussSeidelSolver2dCPU1</a> <br><table><tr><td colspan=2><h3>NLGaussSeidelSolver Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NLGaussSeidelSolver2dCPU1 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NLGaussSeidelSolver2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproxSpaceConvCheck, SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NLGaussSeidelSolver Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="IOperatorCPU1.html">IOperator</a>&gt; op)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>prepare (<a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; approxSpace)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_constraint (const <a href="VectorCPU1.html">Vector</a> *setConstraint)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; convCheck)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number setDampingFactor)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
NLGaussSeidelSolver2dCPU1

NLGaussSeidelSolver2dCPU1 ()
NLGaussSeidelSolver2dCPU1 ()<br>Constructor of class <b>NLGaussSeidelSolver2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
constructor
NLGaussSeidelSolver2dCPU1

NLGaussSeidelSolver2dCPU1 (SmartPtr<ApproximationSpace> ApproxSpaceConvCheck, SmartPtr<IConvergenceCheck> )
NLGaussSeidelSolver2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproxSpaceConvCheck, SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )<br>Constructor of class <b>NLGaussSeidelSolver2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_approximation_space
void
void set_approximation_space (SmartPtr<ApproximationSpace> approxSpace)
void set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; approxSpace)<br><br>Member function of class <b>NLGaussSeidelSolver2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_convergence_check
void
void set_convergence_check (SmartPtr<IConvergenceCheck> convCheck)
void set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; convCheck)<br><br>Member function of class <b>NLGaussSeidelSolver2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_damp
void
void set_damp (number setDampingFactor)
void set_damp (number setDampingFactor)<br><br>Member function of class <b>NLGaussSeidelSolver2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_constraint
void
void set_constraint (const Vector *setConstraint)
void set_constraint (const <a href="VectorCPU1.html">Vector</a> *setConstraint)<br><br>Member function of class <b>NLGaussSeidelSolver2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
init
bool
bool init (SmartPtr<IOperator> op)
bool init (SmartPtr&lt;<a href="IOperatorCPU1.html">IOperator</a>&gt; op)<br><br>Member function of class <b>NLGaussSeidelSolver2dCPU1</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
prepare
bool
bool prepare (Vector *u)
bool prepare (<a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>NLGaussSeidelSolver2dCPU1</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
apply
bool
bool apply (Vector *u)
bool apply (<a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>NLGaussSeidelSolver2dCPU1</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
;
class
NLGaussSeidelSolver2dCPU2
VectorDebugWritingObjectCPU2 DebugWritingObjectCPU2 IOperatorInverseCPU2 
Classgroup <b>NLGaussSeidelSolver</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU2;</b><br>Inheritance: <a href="VectorDebugWritingObjectCPU2.html">VectorDebugWritingObjectCPU2</a> <a href="DebugWritingObjectCPU2.html">DebugWritingObjectCPU2</a> <a href="IOperatorInverseCPU2.html">IOperatorInverseCPU2</a> <a href="NLGaussSeidelSolver2dCPU2.html">NLGaussSeidelSolver2dCPU2</a> <br><table><tr><td colspan=2><h3>NLGaussSeidelSolver Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NLGaussSeidelSolver2dCPU2 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NLGaussSeidelSolver2dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproxSpaceConvCheck, SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NLGaussSeidelSolver Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="IOperatorCPU1.html">IOperator</a>&gt; op)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>prepare (<a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; approxSpace)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_constraint (const <a href="VectorCPU1.html">Vector</a> *setConstraint)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; convCheck)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number setDampingFactor)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
NLGaussSeidelSolver2dCPU2

NLGaussSeidelSolver2dCPU2 ()
NLGaussSeidelSolver2dCPU2 ()<br>Constructor of class <b>NLGaussSeidelSolver2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
constructor
NLGaussSeidelSolver2dCPU2

NLGaussSeidelSolver2dCPU2 (SmartPtr<ApproximationSpace> ApproxSpaceConvCheck, SmartPtr<IConvergenceCheck> )
NLGaussSeidelSolver2dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproxSpaceConvCheck, SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )<br>Constructor of class <b>NLGaussSeidelSolver2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_approximation_space
void
void set_approximation_space (SmartPtr<ApproximationSpace> approxSpace)
void set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; approxSpace)<br><br>Member function of class <b>NLGaussSeidelSolver2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_convergence_check
void
void set_convergence_check (SmartPtr<IConvergenceCheck> convCheck)
void set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; convCheck)<br><br>Member function of class <b>NLGaussSeidelSolver2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_damp
void
void set_damp (number setDampingFactor)
void set_damp (number setDampingFactor)<br><br>Member function of class <b>NLGaussSeidelSolver2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_constraint
void
void set_constraint (const Vector *setConstraint)
void set_constraint (const <a href="VectorCPU1.html">Vector</a> *setConstraint)<br><br>Member function of class <b>NLGaussSeidelSolver2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
init
bool
bool init (SmartPtr<IOperator> op)
bool init (SmartPtr&lt;<a href="IOperatorCPU1.html">IOperator</a>&gt; op)<br><br>Member function of class <b>NLGaussSeidelSolver2dCPU2</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
prepare
bool
bool prepare (Vector *u)
bool prepare (<a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>NLGaussSeidelSolver2dCPU2</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
apply
bool
bool apply (Vector *u)
bool apply (<a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>NLGaussSeidelSolver2dCPU2</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
;
class
NLGaussSeidelSolver2dCPU3
VectorDebugWritingObjectCPU3 DebugWritingObjectCPU3 IOperatorInverseCPU3 
Classgroup <b>NLGaussSeidelSolver</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU3;</b><br>Inheritance: <a href="VectorDebugWritingObjectCPU3.html">VectorDebugWritingObjectCPU3</a> <a href="DebugWritingObjectCPU3.html">DebugWritingObjectCPU3</a> <a href="IOperatorInverseCPU3.html">IOperatorInverseCPU3</a> <a href="NLGaussSeidelSolver2dCPU3.html">NLGaussSeidelSolver2dCPU3</a> <br><table><tr><td colspan=2><h3>NLGaussSeidelSolver Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NLGaussSeidelSolver2dCPU3 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NLGaussSeidelSolver2dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproxSpaceConvCheck, SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NLGaussSeidelSolver Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="IOperatorCPU1.html">IOperator</a>&gt; op)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>prepare (<a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; approxSpace)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_constraint (const <a href="VectorCPU1.html">Vector</a> *setConstraint)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; convCheck)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number setDampingFactor)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
NLGaussSeidelSolver2dCPU3

NLGaussSeidelSolver2dCPU3 ()
NLGaussSeidelSolver2dCPU3 ()<br>Constructor of class <b>NLGaussSeidelSolver2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
constructor
NLGaussSeidelSolver2dCPU3

NLGaussSeidelSolver2dCPU3 (SmartPtr<ApproximationSpace> ApproxSpaceConvCheck, SmartPtr<IConvergenceCheck> )
NLGaussSeidelSolver2dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproxSpaceConvCheck, SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )<br>Constructor of class <b>NLGaussSeidelSolver2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_approximation_space
void
void set_approximation_space (SmartPtr<ApproximationSpace> approxSpace)
void set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; approxSpace)<br><br>Member function of class <b>NLGaussSeidelSolver2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_convergence_check
void
void set_convergence_check (SmartPtr<IConvergenceCheck> convCheck)
void set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; convCheck)<br><br>Member function of class <b>NLGaussSeidelSolver2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_damp
void
void set_damp (number setDampingFactor)
void set_damp (number setDampingFactor)<br><br>Member function of class <b>NLGaussSeidelSolver2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_constraint
void
void set_constraint (const Vector *setConstraint)
void set_constraint (const <a href="VectorCPU1.html">Vector</a> *setConstraint)<br><br>Member function of class <b>NLGaussSeidelSolver2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
init
bool
bool init (SmartPtr<IOperator> op)
bool init (SmartPtr&lt;<a href="IOperatorCPU1.html">IOperator</a>&gt; op)<br><br>Member function of class <b>NLGaussSeidelSolver2dCPU3</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
prepare
bool
bool prepare (Vector *u)
bool prepare (<a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>NLGaussSeidelSolver2dCPU3</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
apply
bool
bool apply (Vector *u)
bool apply (<a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>NLGaussSeidelSolver2dCPU3</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
;
class
NLGaussSeidelSolver3dCPU1
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 IOperatorInverseCPU1 
Classgroup <b>NLGaussSeidelSolver</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU1;</b><br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="IOperatorInverseCPU1.html">IOperatorInverseCPU1</a> <a href="NLGaussSeidelSolver3dCPU1.html">NLGaussSeidelSolver3dCPU1</a> <br><table><tr><td colspan=2><h3>NLGaussSeidelSolver Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NLGaussSeidelSolver3dCPU1 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NLGaussSeidelSolver3dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproxSpaceConvCheck, SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NLGaussSeidelSolver Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="IOperatorCPU1.html">IOperator</a>&gt; op)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>prepare (<a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; approxSpace)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_constraint (const <a href="VectorCPU1.html">Vector</a> *setConstraint)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; convCheck)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number setDampingFactor)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
NLGaussSeidelSolver3dCPU1

NLGaussSeidelSolver3dCPU1 ()
NLGaussSeidelSolver3dCPU1 ()<br>Constructor of class <b>NLGaussSeidelSolver3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
constructor
NLGaussSeidelSolver3dCPU1

NLGaussSeidelSolver3dCPU1 (SmartPtr<ApproximationSpace> ApproxSpaceConvCheck, SmartPtr<IConvergenceCheck> )
NLGaussSeidelSolver3dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproxSpaceConvCheck, SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )<br>Constructor of class <b>NLGaussSeidelSolver3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_approximation_space
void
void set_approximation_space (SmartPtr<ApproximationSpace> approxSpace)
void set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; approxSpace)<br><br>Member function of class <b>NLGaussSeidelSolver3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_convergence_check
void
void set_convergence_check (SmartPtr<IConvergenceCheck> convCheck)
void set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; convCheck)<br><br>Member function of class <b>NLGaussSeidelSolver3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_damp
void
void set_damp (number setDampingFactor)
void set_damp (number setDampingFactor)<br><br>Member function of class <b>NLGaussSeidelSolver3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_constraint
void
void set_constraint (const Vector *setConstraint)
void set_constraint (const <a href="VectorCPU1.html">Vector</a> *setConstraint)<br><br>Member function of class <b>NLGaussSeidelSolver3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
init
bool
bool init (SmartPtr<IOperator> op)
bool init (SmartPtr&lt;<a href="IOperatorCPU1.html">IOperator</a>&gt; op)<br><br>Member function of class <b>NLGaussSeidelSolver3dCPU1</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
prepare
bool
bool prepare (Vector *u)
bool prepare (<a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>NLGaussSeidelSolver3dCPU1</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
apply
bool
bool apply (Vector *u)
bool apply (<a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>NLGaussSeidelSolver3dCPU1</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
;
class
NLGaussSeidelSolver3dCPU2
VectorDebugWritingObjectCPU2 DebugWritingObjectCPU2 IOperatorInverseCPU2 
Classgroup <b>NLGaussSeidelSolver</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU2;</b><br>Inheritance: <a href="VectorDebugWritingObjectCPU2.html">VectorDebugWritingObjectCPU2</a> <a href="DebugWritingObjectCPU2.html">DebugWritingObjectCPU2</a> <a href="IOperatorInverseCPU2.html">IOperatorInverseCPU2</a> <a href="NLGaussSeidelSolver3dCPU2.html">NLGaussSeidelSolver3dCPU2</a> <br><table><tr><td colspan=2><h3>NLGaussSeidelSolver Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NLGaussSeidelSolver3dCPU2 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NLGaussSeidelSolver3dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproxSpaceConvCheck, SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NLGaussSeidelSolver Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="IOperatorCPU1.html">IOperator</a>&gt; op)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>prepare (<a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; approxSpace)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_constraint (const <a href="VectorCPU1.html">Vector</a> *setConstraint)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; convCheck)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number setDampingFactor)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
NLGaussSeidelSolver3dCPU2

NLGaussSeidelSolver3dCPU2 ()
NLGaussSeidelSolver3dCPU2 ()<br>Constructor of class <b>NLGaussSeidelSolver3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
constructor
NLGaussSeidelSolver3dCPU2

NLGaussSeidelSolver3dCPU2 (SmartPtr<ApproximationSpace> ApproxSpaceConvCheck, SmartPtr<IConvergenceCheck> )
NLGaussSeidelSolver3dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproxSpaceConvCheck, SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )<br>Constructor of class <b>NLGaussSeidelSolver3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_approximation_space
void
void set_approximation_space (SmartPtr<ApproximationSpace> approxSpace)
void set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; approxSpace)<br><br>Member function of class <b>NLGaussSeidelSolver3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_convergence_check
void
void set_convergence_check (SmartPtr<IConvergenceCheck> convCheck)
void set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; convCheck)<br><br>Member function of class <b>NLGaussSeidelSolver3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_damp
void
void set_damp (number setDampingFactor)
void set_damp (number setDampingFactor)<br><br>Member function of class <b>NLGaussSeidelSolver3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_constraint
void
void set_constraint (const Vector *setConstraint)
void set_constraint (const <a href="VectorCPU1.html">Vector</a> *setConstraint)<br><br>Member function of class <b>NLGaussSeidelSolver3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
init
bool
bool init (SmartPtr<IOperator> op)
bool init (SmartPtr&lt;<a href="IOperatorCPU1.html">IOperator</a>&gt; op)<br><br>Member function of class <b>NLGaussSeidelSolver3dCPU2</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
prepare
bool
bool prepare (Vector *u)
bool prepare (<a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>NLGaussSeidelSolver3dCPU2</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
apply
bool
bool apply (Vector *u)
bool apply (<a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>NLGaussSeidelSolver3dCPU2</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
;
class
NLGaussSeidelSolver3dCPU3
VectorDebugWritingObjectCPU3 DebugWritingObjectCPU3 IOperatorInverseCPU3 
Classgroup <b>NLGaussSeidelSolver</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU3;</b><br>Inheritance: <a href="VectorDebugWritingObjectCPU3.html">VectorDebugWritingObjectCPU3</a> <a href="DebugWritingObjectCPU3.html">DebugWritingObjectCPU3</a> <a href="IOperatorInverseCPU3.html">IOperatorInverseCPU3</a> <a href="NLGaussSeidelSolver3dCPU3.html">NLGaussSeidelSolver3dCPU3</a> <br><table><tr><td colspan=2><h3>NLGaussSeidelSolver Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NLGaussSeidelSolver3dCPU3 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NLGaussSeidelSolver3dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproxSpaceConvCheck, SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NLGaussSeidelSolver Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="IOperatorCPU1.html">IOperator</a>&gt; op)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>prepare (<a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; approxSpace)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_constraint (const <a href="VectorCPU1.html">Vector</a> *setConstraint)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; convCheck)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number setDampingFactor)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
NLGaussSeidelSolver3dCPU3

NLGaussSeidelSolver3dCPU3 ()
NLGaussSeidelSolver3dCPU3 ()<br>Constructor of class <b>NLGaussSeidelSolver3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
constructor
NLGaussSeidelSolver3dCPU3

NLGaussSeidelSolver3dCPU3 (SmartPtr<ApproximationSpace> ApproxSpaceConvCheck, SmartPtr<IConvergenceCheck> )
NLGaussSeidelSolver3dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproxSpaceConvCheck, SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )<br>Constructor of class <b>NLGaussSeidelSolver3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_approximation_space
void
void set_approximation_space (SmartPtr<ApproximationSpace> approxSpace)
void set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; approxSpace)<br><br>Member function of class <b>NLGaussSeidelSolver3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_convergence_check
void
void set_convergence_check (SmartPtr<IConvergenceCheck> convCheck)
void set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; convCheck)<br><br>Member function of class <b>NLGaussSeidelSolver3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_damp
void
void set_damp (number setDampingFactor)
void set_damp (number setDampingFactor)<br><br>Member function of class <b>NLGaussSeidelSolver3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_constraint
void
void set_constraint (const Vector *setConstraint)
void set_constraint (const <a href="VectorCPU1.html">Vector</a> *setConstraint)<br><br>Member function of class <b>NLGaussSeidelSolver3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
init
bool
bool init (SmartPtr<IOperator> op)
bool init (SmartPtr&lt;<a href="IOperatorCPU1.html">IOperator</a>&gt; op)<br><br>Member function of class <b>NLGaussSeidelSolver3dCPU3</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
prepare
bool
bool prepare (Vector *u)
bool prepare (<a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>NLGaussSeidelSolver3dCPU3</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
apply
bool
bool apply (Vector *u)
bool apply (<a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>NLGaussSeidelSolver3dCPU3</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
;
class
NLJacobiSolverCPU1
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 IOperatorInverseCPU1 
Classgroup <b>NLJacobiSolver</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b><br>class has constructor.  Tag <b>alg=CPU1;</b><br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="IOperatorInverseCPU1.html">IOperatorInverseCPU1</a> <a href="NLJacobiSolverCPU1.html">NLJacobiSolverCPU1</a> <br><table><tr><td colspan=2><h3>NLJacobiSolver Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NLJacobiSolverCPU1 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NLJacobiSolverCPU1 (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; ConvCheck)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NLJacobiSolver Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="IOperatorCPU1.html">IOperator</a>&gt; op)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>prepare (<a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; convCheck)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number setDampingFactor)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
NLJacobiSolverCPU1

NLJacobiSolverCPU1 ()
NLJacobiSolverCPU1 ()<br>Constructor of class <b>NLJacobiSolverCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
constructor
NLJacobiSolverCPU1

NLJacobiSolverCPU1 (SmartPtr<IConvergenceCheck> ConvCheck)
NLJacobiSolverCPU1 (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; ConvCheck)<br>Constructor of class <b>NLJacobiSolverCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_convergence_check
void
void set_convergence_check (SmartPtr<IConvergenceCheck> convCheck)
void set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; convCheck)<br><br>Member function of class <b>NLJacobiSolverCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_damp
void
void set_damp (number setDampingFactor)
void set_damp (number setDampingFactor)<br><br>Member function of class <b>NLJacobiSolverCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
init
bool
bool init (SmartPtr<IOperator> op)
bool init (SmartPtr&lt;<a href="IOperatorCPU1.html">IOperator</a>&gt; op)<br><br>Member function of class <b>NLJacobiSolverCPU1</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
prepare
bool
bool prepare (Vector *u)
bool prepare (<a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>NLJacobiSolverCPU1</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
apply
bool
bool apply (Vector *u)
bool apply (<a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>NLJacobiSolverCPU1</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
;
class
NLJacobiSolverCPU2
VectorDebugWritingObjectCPU2 DebugWritingObjectCPU2 IOperatorInverseCPU2 
Classgroup <b>NLJacobiSolver</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b><br>class has constructor.  Tag <b>alg=CPU2;</b><br>Inheritance: <a href="VectorDebugWritingObjectCPU2.html">VectorDebugWritingObjectCPU2</a> <a href="DebugWritingObjectCPU2.html">DebugWritingObjectCPU2</a> <a href="IOperatorInverseCPU2.html">IOperatorInverseCPU2</a> <a href="NLJacobiSolverCPU2.html">NLJacobiSolverCPU2</a> <br><table><tr><td colspan=2><h3>NLJacobiSolver Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NLJacobiSolverCPU2 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NLJacobiSolverCPU2 (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; ConvCheck)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NLJacobiSolver Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="IOperatorCPU1.html">IOperator</a>&gt; op)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>prepare (<a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; convCheck)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number setDampingFactor)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
NLJacobiSolverCPU2

NLJacobiSolverCPU2 ()
NLJacobiSolverCPU2 ()<br>Constructor of class <b>NLJacobiSolverCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
constructor
NLJacobiSolverCPU2

NLJacobiSolverCPU2 (SmartPtr<IConvergenceCheck> ConvCheck)
NLJacobiSolverCPU2 (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; ConvCheck)<br>Constructor of class <b>NLJacobiSolverCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_convergence_check
void
void set_convergence_check (SmartPtr<IConvergenceCheck> convCheck)
void set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; convCheck)<br><br>Member function of class <b>NLJacobiSolverCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_damp
void
void set_damp (number setDampingFactor)
void set_damp (number setDampingFactor)<br><br>Member function of class <b>NLJacobiSolverCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
init
bool
bool init (SmartPtr<IOperator> op)
bool init (SmartPtr&lt;<a href="IOperatorCPU1.html">IOperator</a>&gt; op)<br><br>Member function of class <b>NLJacobiSolverCPU2</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
prepare
bool
bool prepare (Vector *u)
bool prepare (<a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>NLJacobiSolverCPU2</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
apply
bool
bool apply (Vector *u)
bool apply (<a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>NLJacobiSolverCPU2</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
;
class
NLJacobiSolverCPU3
VectorDebugWritingObjectCPU3 DebugWritingObjectCPU3 IOperatorInverseCPU3 
Classgroup <b>NLJacobiSolver</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b><br>class has constructor.  Tag <b>alg=CPU3;</b><br>Inheritance: <a href="VectorDebugWritingObjectCPU3.html">VectorDebugWritingObjectCPU3</a> <a href="DebugWritingObjectCPU3.html">DebugWritingObjectCPU3</a> <a href="IOperatorInverseCPU3.html">IOperatorInverseCPU3</a> <a href="NLJacobiSolverCPU3.html">NLJacobiSolverCPU3</a> <br><table><tr><td colspan=2><h3>NLJacobiSolver Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NLJacobiSolverCPU3 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NLJacobiSolverCPU3 (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; ConvCheck)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NLJacobiSolver Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="IOperatorCPU1.html">IOperator</a>&gt; op)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>prepare (<a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; convCheck)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number setDampingFactor)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
NLJacobiSolverCPU3

NLJacobiSolverCPU3 ()
NLJacobiSolverCPU3 ()<br>Constructor of class <b>NLJacobiSolverCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
constructor
NLJacobiSolverCPU3

NLJacobiSolverCPU3 (SmartPtr<IConvergenceCheck> ConvCheck)
NLJacobiSolverCPU3 (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; ConvCheck)<br>Constructor of class <b>NLJacobiSolverCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_convergence_check
void
void set_convergence_check (SmartPtr<IConvergenceCheck> convCheck)
void set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; convCheck)<br><br>Member function of class <b>NLJacobiSolverCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_damp
void
void set_damp (number setDampingFactor)
void set_damp (number setDampingFactor)<br><br>Member function of class <b>NLJacobiSolverCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
init
bool
bool init (SmartPtr<IOperator> op)
bool init (SmartPtr&lt;<a href="IOperatorCPU1.html">IOperator</a>&gt; op)<br><br>Member function of class <b>NLJacobiSolverCPU3</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
prepare
bool
bool prepare (Vector *u)
bool prepare (<a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>NLJacobiSolverCPU3</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
apply
bool
bool apply (Vector *u)
bool apply (<a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>NLJacobiSolverCPU3</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
;
class
NavierStokesBase2d
IElemDisc2d 
Classgroup <b>NavierStokesBase</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b><br>class has no constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="NavierStokesBase2d.html">NavierStokesBase2d</a> <br><table><tr><td colspan=2><h3>NavierStokesBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (number Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (c_string Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_exact_jacobian (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (number KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (c_string KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_laplace (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_peclet_blend (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (std::vector&ltnumber &gtSource)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stokes (bool )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NavierStokesBase Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>disc_type ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (SmartPtr<UserNumber> KinematicViscosity)
void set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)<br><br>Member function of class <b>NavierStokesBase2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (number KinematicViscosity)
void set_kinematic_viscosity (number KinematicViscosity)<br><br>Member function of class <b>NavierStokesBase2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (c_string KinematicViscosity)
void set_kinematic_viscosity (c_string KinematicViscosity)<br><br>Member function of class <b>NavierStokesBase2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
set_density
void
void set_density (SmartPtr<UserNumber> Density)
void set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Density)<br><br>Member function of class <b>NavierStokesBase2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
set_density
void
void set_density (number Density)
void set_density (number Density)<br><br>Member function of class <b>NavierStokesBase2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
set_density
void
void set_density (c_string Density)
void set_density (c_string Density)<br><br>Member function of class <b>NavierStokesBase2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
set_source
void
void set_source (SmartPtr<UserVector> Source)
void set_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Source)<br><br>Member function of class <b>NavierStokesBase2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
set_source
void
void set_source (std::vector<number >Source)
void set_source (std::vector&ltnumber &gtSource)<br><br>Member function of class <b>NavierStokesBase2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
set_source
void
void set_source (c_string Source)
void set_source (c_string Source)<br><br>Member function of class <b>NavierStokesBase2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
set_peclet_blend
void
void set_peclet_blend (bool )
void set_peclet_blend (bool )<br><br>Member function of class <b>NavierStokesBase2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
set_exact_jacobian
void
void set_exact_jacobian (bool )
void set_exact_jacobian (bool )<br><br>Member function of class <b>NavierStokesBase2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
set_laplace
void
void set_laplace (bool )
void set_laplace (bool )<br><br>Member function of class <b>NavierStokesBase2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
set_stokes
void
void set_stokes (bool )
void set_stokes (bool )<br><br>Member function of class <b>NavierStokesBase2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
disc_type
string
std_string disc_type () const
std_string disc_type ()<br><br>Member function of class <b>NavierStokesBase2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesBase3d
IElemDisc3d 
Classgroup <b>NavierStokesBase</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b><br>class has no constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IElemDisc3d.html">IElemDisc3d</a> <a href="NavierStokesBase3d.html">NavierStokesBase3d</a> <br><table><tr><td colspan=2><h3>NavierStokesBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (number Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (c_string Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_exact_jacobian (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (number KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (c_string KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_laplace (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_peclet_blend (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (std::vector&ltnumber &gtSource)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stokes (bool )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NavierStokesBase Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>disc_type ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (SmartPtr<UserNumber> KinematicViscosity)
void set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)<br><br>Member function of class <b>NavierStokesBase3d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (number KinematicViscosity)
void set_kinematic_viscosity (number KinematicViscosity)<br><br>Member function of class <b>NavierStokesBase3d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (c_string KinematicViscosity)
void set_kinematic_viscosity (c_string KinematicViscosity)<br><br>Member function of class <b>NavierStokesBase3d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
set_density
void
void set_density (SmartPtr<UserNumber> Density)
void set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Density)<br><br>Member function of class <b>NavierStokesBase3d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
set_density
void
void set_density (number Density)
void set_density (number Density)<br><br>Member function of class <b>NavierStokesBase3d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
set_density
void
void set_density (c_string Density)
void set_density (c_string Density)<br><br>Member function of class <b>NavierStokesBase3d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
set_source
void
void set_source (SmartPtr<UserVector> Source)
void set_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Source)<br><br>Member function of class <b>NavierStokesBase3d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
set_source
void
void set_source (std::vector<number >Source)
void set_source (std::vector&ltnumber &gtSource)<br><br>Member function of class <b>NavierStokesBase3d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
set_source
void
void set_source (c_string Source)
void set_source (c_string Source)<br><br>Member function of class <b>NavierStokesBase3d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
set_peclet_blend
void
void set_peclet_blend (bool )
void set_peclet_blend (bool )<br><br>Member function of class <b>NavierStokesBase3d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
set_exact_jacobian
void
void set_exact_jacobian (bool )
void set_exact_jacobian (bool )<br><br>Member function of class <b>NavierStokesBase3d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
set_laplace
void
void set_laplace (bool )
void set_laplace (bool )<br><br>Member function of class <b>NavierStokesBase3d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
set_stokes
void
void set_stokes (bool )
void set_stokes (bool )<br><br>Member function of class <b>NavierStokesBase3d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
disc_type
string
std_string disc_type () const
std_string disc_type ()<br><br>Member function of class <b>NavierStokesBase3d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesFE2d
IElemDisc2d NavierStokesBase2d 
Classgroup <b>NavierStokesFE</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="NavierStokesBase2d.html">NavierStokesBase2d</a> <a href="NavierStokesFE2d.html">NavierStokesFE2d</a> <br><table><tr><td colspan=2><h3>NavierStokesFE Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesFE2d (c_string Functions, c_string Subset(s))</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesFE2d (std::vector&ltstd_string &gtFunctions, std::vector&ltstd_string &gtSubset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NavierStokesFE Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stabilization (number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (number Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (c_string Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_exact_jacobian (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (number KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (c_string KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_laplace (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_peclet_blend (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (std::vector&ltnumber &gtSource)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stokes (bool )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited NavierStokesBase Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>disc_type ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesFE2d

NavierStokesFE2d (c_string Functions, c_string Subset(s))
NavierStokesFE2d (c_string Functions, c_string Subset(s))<br>Constructor of class <b>NavierStokesFE2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
constructor
NavierStokesFE2d

NavierStokesFE2d (std::vector<std_string >Functions, std::vector<std_string >Subset(s))
NavierStokesFE2d (std::vector&ltstd_string &gtFunctions, std::vector&ltstd_string &gtSubset(s))<br>Constructor of class <b>NavierStokesFE2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_stabilization
void
void set_stabilization (number )
void set_stabilization (number )<br><br>Member function of class <b>NavierStokesFE2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesFE3d
IElemDisc3d NavierStokesBase3d 
Classgroup <b>NavierStokesFE</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IElemDisc3d.html">IElemDisc3d</a> <a href="NavierStokesBase3d.html">NavierStokesBase3d</a> <a href="NavierStokesFE3d.html">NavierStokesFE3d</a> <br><table><tr><td colspan=2><h3>NavierStokesFE Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesFE3d (c_string Functions, c_string Subset(s))</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesFE3d (std::vector&ltstd_string &gtFunctions, std::vector&ltstd_string &gtSubset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NavierStokesFE Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stabilization (number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (number Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (c_string Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_exact_jacobian (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (number KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (c_string KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_laplace (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_peclet_blend (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (std::vector&ltnumber &gtSource)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stokes (bool )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited NavierStokesBase Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>disc_type ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesFE3d

NavierStokesFE3d (c_string Functions, c_string Subset(s))
NavierStokesFE3d (c_string Functions, c_string Subset(s))<br>Constructor of class <b>NavierStokesFE3d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
constructor
NavierStokesFE3d

NavierStokesFE3d (std::vector<std_string >Functions, std::vector<std_string >Subset(s))
NavierStokesFE3d (std::vector&ltstd_string &gtFunctions, std::vector&ltstd_string &gtSubset(s))<br>Constructor of class <b>NavierStokesFE3d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_stabilization
void
void set_stabilization (number )
void set_stabilization (number )<br><br>Member function of class <b>NavierStokesFE3d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesFIELDSStabilization2d
INavierStokesFV1Stabilization2d 
Classgroup <b>NavierStokesFIELDSStabilization</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="INavierStokesFV1Stabilization2d.html">INavierStokesFV1Stabilization2d</a> <a href="NavierStokesFIELDSStabilization2d.html">NavierStokesFIELDSStabilization2d</a> <br><table><tr><td colspan=2><h3>NavierStokesFIELDSStabilization Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesFIELDSStabilization2d ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited INavierStokesFV1Stabilization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion_length (std_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_upwind (SmartPtr&lt;<a href="INavierStokesUpwind2d.html">INavierStokesUpwind</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesFIELDSStabilization2d

NavierStokesFIELDSStabilization2d ()
NavierStokesFIELDSStabilization2d ()<br>Constructor of class <b>NavierStokesFIELDSStabilization2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesFIELDSStabilization3d
INavierStokesFV1Stabilization3d 
Classgroup <b>NavierStokesFIELDSStabilization</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="INavierStokesFV1Stabilization3d.html">INavierStokesFV1Stabilization3d</a> <a href="NavierStokesFIELDSStabilization3d.html">NavierStokesFIELDSStabilization3d</a> <br><table><tr><td colspan=2><h3>NavierStokesFIELDSStabilization Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesFIELDSStabilization3d ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited INavierStokesFV1Stabilization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion_length (std_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_upwind (SmartPtr&lt;<a href="INavierStokesUpwind2d.html">INavierStokesUpwind</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesFIELDSStabilization3d

NavierStokesFIELDSStabilization3d ()
NavierStokesFIELDSStabilization3d ()<br>Constructor of class <b>NavierStokesFIELDSStabilization3d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesFLOWStabilization2d
INavierStokesFV1Stabilization2d 
Classgroup <b>NavierStokesFLOWStabilization</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="INavierStokesFV1Stabilization2d.html">INavierStokesFV1Stabilization2d</a> <a href="NavierStokesFLOWStabilization2d.html">NavierStokesFLOWStabilization2d</a> <br><table><tr><td colspan=2><h3>NavierStokesFLOWStabilization Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesFLOWStabilization2d ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited INavierStokesFV1Stabilization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion_length (std_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_upwind (SmartPtr&lt;<a href="INavierStokesUpwind2d.html">INavierStokesUpwind</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesFLOWStabilization2d

NavierStokesFLOWStabilization2d ()
NavierStokesFLOWStabilization2d ()<br>Constructor of class <b>NavierStokesFLOWStabilization2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesFLOWStabilization3d
INavierStokesFV1Stabilization3d 
Classgroup <b>NavierStokesFLOWStabilization</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="INavierStokesFV1Stabilization3d.html">INavierStokesFV1Stabilization3d</a> <a href="NavierStokesFLOWStabilization3d.html">NavierStokesFLOWStabilization3d</a> <br><table><tr><td colspan=2><h3>NavierStokesFLOWStabilization Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesFLOWStabilization3d ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited INavierStokesFV1Stabilization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion_length (std_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_upwind (SmartPtr&lt;<a href="INavierStokesUpwind2d.html">INavierStokesUpwind</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesFLOWStabilization3d

NavierStokesFLOWStabilization3d ()
NavierStokesFLOWStabilization3d ()<br>Constructor of class <b>NavierStokesFLOWStabilization3d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesFV12d
IElemDisc2d NavierStokesBase2d 
Classgroup <b>NavierStokesFV1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="NavierStokesBase2d.html">NavierStokesBase2d</a> <a href="NavierStokesFV12d.html">NavierStokesFV12d</a> <br><table><tr><td colspan=2><h3>NavierStokesFV1 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesFV12d (c_string Functions, c_string Subset(s))</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesFV12d (std::vector&ltstd_string &gtFunctions, std::vector&ltstd_string &gtSubset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NavierStokesFV1 Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_pac_upwind (bool Set pac upwind)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stabilization (SmartPtr&lt;<a href="INavierStokesFV1Stabilization2d.html">INavierStokesFV1Stabilization</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stabilization (std_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stabilization (std_string , std_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_upwind (SmartPtr&lt;<a href="INavierStokesFV1Stabilization2d.html">INavierStokesFV1Stabilization</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_upwind (SmartPtr&lt;<a href="INavierStokesUpwind2d.html">INavierStokesUpwind</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_upwind (std_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (number Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (c_string Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_exact_jacobian (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (number KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (c_string KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_laplace (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_peclet_blend (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (std::vector&ltnumber &gtSource)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stokes (bool )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited NavierStokesBase Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>disc_type ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesFV12d

NavierStokesFV12d (c_string Functions, c_string Subset(s))
NavierStokesFV12d (c_string Functions, c_string Subset(s))<br>Constructor of class <b>NavierStokesFV12d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
constructor
NavierStokesFV12d

NavierStokesFV12d (std::vector<std_string >Functions, std::vector<std_string >Subset(s))
NavierStokesFV12d (std::vector&ltstd_string &gtFunctions, std::vector&ltstd_string &gtSubset(s))<br>Constructor of class <b>NavierStokesFV12d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_stabilization
void
void set_stabilization (SmartPtr<INavierStokesFV1Stabilization> )
void set_stabilization (SmartPtr&lt;<a href="INavierStokesFV1Stabilization2d.html">INavierStokesFV1Stabilization</a>&gt; )<br><br>Member function of class <b>NavierStokesFV12d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_stabilization
void
void set_stabilization (std_string )
void set_stabilization (std_string )<br><br>Member function of class <b>NavierStokesFV12d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_stabilization
void
void set_stabilization (std_string , std_string )
void set_stabilization (std_string , std_string )<br><br>Member function of class <b>NavierStokesFV12d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_upwind
void
void set_upwind (SmartPtr<INavierStokesFV1Stabilization> )
void set_upwind (SmartPtr&lt;<a href="INavierStokesFV1Stabilization2d.html">INavierStokesFV1Stabilization</a>&gt; )<br><br>Member function of class <b>NavierStokesFV12d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_upwind
void
void set_upwind (SmartPtr<INavierStokesUpwind> )
void set_upwind (SmartPtr&lt;<a href="INavierStokesUpwind2d.html">INavierStokesUpwind</a>&gt; )<br><br>Member function of class <b>NavierStokesFV12d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_upwind
void
void set_upwind (std_string )
void set_upwind (std_string )<br><br>Member function of class <b>NavierStokesFV12d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_pac_upwind
void
void set_pac_upwind (bool Set pac upwind)
void set_pac_upwind (bool Set pac upwind)<br><br>Member function of class <b>NavierStokesFV12d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesFV13d
IElemDisc3d NavierStokesBase3d 
Classgroup <b>NavierStokesFV1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IElemDisc3d.html">IElemDisc3d</a> <a href="NavierStokesBase3d.html">NavierStokesBase3d</a> <a href="NavierStokesFV13d.html">NavierStokesFV13d</a> <br><table><tr><td colspan=2><h3>NavierStokesFV1 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesFV13d (c_string Functions, c_string Subset(s))</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesFV13d (std::vector&ltstd_string &gtFunctions, std::vector&ltstd_string &gtSubset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NavierStokesFV1 Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_pac_upwind (bool Set pac upwind)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stabilization (SmartPtr&lt;<a href="INavierStokesFV1Stabilization2d.html">INavierStokesFV1Stabilization</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stabilization (std_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stabilization (std_string , std_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_upwind (SmartPtr&lt;<a href="INavierStokesFV1Stabilization2d.html">INavierStokesFV1Stabilization</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_upwind (SmartPtr&lt;<a href="INavierStokesUpwind2d.html">INavierStokesUpwind</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_upwind (std_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (number Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (c_string Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_exact_jacobian (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (number KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (c_string KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_laplace (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_peclet_blend (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (std::vector&ltnumber &gtSource)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stokes (bool )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited NavierStokesBase Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>disc_type ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesFV13d

NavierStokesFV13d (c_string Functions, c_string Subset(s))
NavierStokesFV13d (c_string Functions, c_string Subset(s))<br>Constructor of class <b>NavierStokesFV13d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
constructor
NavierStokesFV13d

NavierStokesFV13d (std::vector<std_string >Functions, std::vector<std_string >Subset(s))
NavierStokesFV13d (std::vector&ltstd_string &gtFunctions, std::vector&ltstd_string &gtSubset(s))<br>Constructor of class <b>NavierStokesFV13d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_stabilization
void
void set_stabilization (SmartPtr<INavierStokesFV1Stabilization> )
void set_stabilization (SmartPtr&lt;<a href="INavierStokesFV1Stabilization2d.html">INavierStokesFV1Stabilization</a>&gt; )<br><br>Member function of class <b>NavierStokesFV13d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_stabilization
void
void set_stabilization (std_string )
void set_stabilization (std_string )<br><br>Member function of class <b>NavierStokesFV13d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_stabilization
void
void set_stabilization (std_string , std_string )
void set_stabilization (std_string , std_string )<br><br>Member function of class <b>NavierStokesFV13d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_upwind
void
void set_upwind (SmartPtr<INavierStokesFV1Stabilization> )
void set_upwind (SmartPtr&lt;<a href="INavierStokesFV1Stabilization2d.html">INavierStokesFV1Stabilization</a>&gt; )<br><br>Member function of class <b>NavierStokesFV13d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_upwind
void
void set_upwind (SmartPtr<INavierStokesUpwind> )
void set_upwind (SmartPtr&lt;<a href="INavierStokesUpwind2d.html">INavierStokesUpwind</a>&gt; )<br><br>Member function of class <b>NavierStokesFV13d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_upwind
void
void set_upwind (std_string )
void set_upwind (std_string )<br><br>Member function of class <b>NavierStokesFV13d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_pac_upwind
void
void set_pac_upwind (bool Set pac upwind)
void set_pac_upwind (bool Set pac upwind)<br><br>Member function of class <b>NavierStokesFV13d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesFV2d
IElemDisc2d NavierStokesBase2d 
Classgroup <b>NavierStokesFV</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="NavierStokesBase2d.html">NavierStokesBase2d</a> <a href="NavierStokesFV2d.html">NavierStokesFV2d</a> <br><table><tr><td colspan=2><h3>NavierStokesFV Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesFV2d (c_string Functions, c_string Subset(s))</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesFV2d (std::vector&ltstd_string &gtFunctions, std::vector&ltstd_string &gtSubset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (number Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (c_string Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_exact_jacobian (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (number KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (c_string KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_laplace (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_peclet_blend (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (std::vector&ltnumber &gtSource)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stokes (bool )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited NavierStokesBase Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>disc_type ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesFV2d

NavierStokesFV2d (c_string Functions, c_string Subset(s))
NavierStokesFV2d (c_string Functions, c_string Subset(s))<br>Constructor of class <b>NavierStokesFV2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
constructor
NavierStokesFV2d

NavierStokesFV2d (std::vector<std_string >Functions, std::vector<std_string >Subset(s))
NavierStokesFV2d (std::vector&ltstd_string &gtFunctions, std::vector&ltstd_string &gtSubset(s))<br>Constructor of class <b>NavierStokesFV2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesFV3d
IElemDisc3d NavierStokesBase3d 
Classgroup <b>NavierStokesFV</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IElemDisc3d.html">IElemDisc3d</a> <a href="NavierStokesBase3d.html">NavierStokesBase3d</a> <a href="NavierStokesFV3d.html">NavierStokesFV3d</a> <br><table><tr><td colspan=2><h3>NavierStokesFV Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesFV3d (c_string Functions, c_string Subset(s))</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesFV3d (std::vector&ltstd_string &gtFunctions, std::vector&ltstd_string &gtSubset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (number Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (c_string Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_exact_jacobian (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (number KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (c_string KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_laplace (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_peclet_blend (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (std::vector&ltnumber &gtSource)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stokes (bool )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited NavierStokesBase Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>disc_type ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesFV3d

NavierStokesFV3d (c_string Functions, c_string Subset(s))
NavierStokesFV3d (c_string Functions, c_string Subset(s))<br>Constructor of class <b>NavierStokesFV3d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
constructor
NavierStokesFV3d

NavierStokesFV3d (std::vector<std_string >Functions, std::vector<std_string >Subset(s))
NavierStokesFV3d (std::vector&ltstd_string &gtFunctions, std::vector&ltstd_string &gtSubset(s))<br>Constructor of class <b>NavierStokesFV3d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesFVCR2d
IElemDisc2d NavierStokesBase2d 
Classgroup <b>NavierStokesFVCR</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="NavierStokesBase2d.html">NavierStokesBase2d</a> <a href="NavierStokesFVCR2d.html">NavierStokesFVCR2d</a> <br><table><tr><td colspan=2><h3>NavierStokesFVCR Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesFVCR2d (c_string Functions, c_string Subset(s))</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesFVCR2d (std::vector&ltstd_string &gtFunctions, std::vector&ltstd_string &gtSubset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NavierStokesFVCR Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_defect_upwind (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_upwind (SmartPtr&lt;<a href="INavierStokesUpwind2d.html">INavierStokesUpwind</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_upwind (std_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (number Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (c_string Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_exact_jacobian (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (number KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (c_string KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_laplace (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_peclet_blend (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (std::vector&ltnumber &gtSource)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stokes (bool )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited NavierStokesBase Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>disc_type ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesFVCR2d

NavierStokesFVCR2d (c_string Functions, c_string Subset(s))
NavierStokesFVCR2d (c_string Functions, c_string Subset(s))<br>Constructor of class <b>NavierStokesFVCR2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
constructor
NavierStokesFVCR2d

NavierStokesFVCR2d (std::vector<std_string >Functions, std::vector<std_string >Subset(s))
NavierStokesFVCR2d (std::vector&ltstd_string &gtFunctions, std::vector&ltstd_string &gtSubset(s))<br>Constructor of class <b>NavierStokesFVCR2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_upwind
void
void set_upwind (SmartPtr<INavierStokesUpwind> )
void set_upwind (SmartPtr&lt;<a href="INavierStokesUpwind2d.html">INavierStokesUpwind</a>&gt; )<br><br>Member function of class <b>NavierStokesFVCR2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_upwind
void
void set_upwind (std_string )
void set_upwind (std_string )<br><br>Member function of class <b>NavierStokesFVCR2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_defect_upwind
void
void set_defect_upwind (bool )
void set_defect_upwind (bool )<br><br>Member function of class <b>NavierStokesFVCR2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesFVCR3d
IElemDisc3d NavierStokesBase3d 
Classgroup <b>NavierStokesFVCR</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IElemDisc3d.html">IElemDisc3d</a> <a href="NavierStokesBase3d.html">NavierStokesBase3d</a> <a href="NavierStokesFVCR3d.html">NavierStokesFVCR3d</a> <br><table><tr><td colspan=2><h3>NavierStokesFVCR Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesFVCR3d (c_string Functions, c_string Subset(s))</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesFVCR3d (std::vector&ltstd_string &gtFunctions, std::vector&ltstd_string &gtSubset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NavierStokesFVCR Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_defect_upwind (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_upwind (SmartPtr&lt;<a href="INavierStokesUpwind2d.html">INavierStokesUpwind</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_upwind (std_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (number Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (c_string Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_exact_jacobian (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (number KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (c_string KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_laplace (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_peclet_blend (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (std::vector&ltnumber &gtSource)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stokes (bool )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited NavierStokesBase Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>disc_type ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesFVCR3d

NavierStokesFVCR3d (c_string Functions, c_string Subset(s))
NavierStokesFVCR3d (c_string Functions, c_string Subset(s))<br>Constructor of class <b>NavierStokesFVCR3d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
constructor
NavierStokesFVCR3d

NavierStokesFVCR3d (std::vector<std_string >Functions, std::vector<std_string >Subset(s))
NavierStokesFVCR3d (std::vector&ltstd_string &gtFunctions, std::vector&ltstd_string &gtSubset(s))<br>Constructor of class <b>NavierStokesFVCR3d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_upwind
void
void set_upwind (SmartPtr<INavierStokesUpwind> )
void set_upwind (SmartPtr&lt;<a href="INavierStokesUpwind2d.html">INavierStokesUpwind</a>&gt; )<br><br>Member function of class <b>NavierStokesFVCR3d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_upwind
void
void set_upwind (std_string )
void set_upwind (std_string )<br><br>Member function of class <b>NavierStokesFVCR3d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_defect_upwind
void
void set_defect_upwind (bool )
void set_defect_upwind (bool )<br><br>Member function of class <b>NavierStokesFVCR3d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesFullUpwind2d
INavierStokesUpwind2d 
Classgroup <b>NavierStokesFullUpwind</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="INavierStokesUpwind2d.html">INavierStokesUpwind2d</a> <a href="NavierStokesFullUpwind2d.html">NavierStokesFullUpwind2d</a> <br><table><tr><td colspan=2><h3>NavierStokesFullUpwind Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesFullUpwind2d ()</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesFullUpwind2d

NavierStokesFullUpwind2d ()
NavierStokesFullUpwind2d ()<br>Constructor of class <b>NavierStokesFullUpwind2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesFullUpwind3d
INavierStokesUpwind3d 
Classgroup <b>NavierStokesFullUpwind</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="INavierStokesUpwind3d.html">INavierStokesUpwind3d</a> <a href="NavierStokesFullUpwind3d.html">NavierStokesFullUpwind3d</a> <br><table><tr><td colspan=2><h3>NavierStokesFullUpwind Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesFullUpwind3d ()</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesFullUpwind3d

NavierStokesFullUpwind3d ()
NavierStokesFullUpwind3d ()<br>Constructor of class <b>NavierStokesFullUpwind3d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesInflowBase2dCPU1
IDiscretizationItem2dCPU1 
Classgroup <b>NavierStokesInflowBase</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b><br>class has no constructor.  Tag <b>dim=2d;alg=CPU1;</b><br>Inheritance: <a href="IDiscretizationItem2dCPU1.html">IDiscretizationItem2dCPU1</a> <a href="NavierStokesInflowBase2dCPU1.html">NavierStokesInflowBase2dCPU1</a> <br><table><tr><td colspan=2><h3>NavierStokesInflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Velocity, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity, Subset, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gtVelocity, Subset, c_string )</td></tr><tr><td><br></td></tr></table>
memberfunction
add
void
void add (c_string Velocity, c_string )
void add (c_string Velocity, c_string )<br><br>Member function of class <b>NavierStokesInflowBase2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
add
void
void add (SmartPtr<UserVector> Velocity, Subset, c_string )
void add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity, Subset, c_string )<br><br>Member function of class <b>NavierStokesInflowBase2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
add
void
void add (std::vector<number >Velocity, Subset, c_string )
void add (std::vector&ltnumber &gtVelocity, Subset, c_string )<br><br>Member function of class <b>NavierStokesInflowBase2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesInflowBase2dCPU2
IDiscretizationItem2dCPU2 
Classgroup <b>NavierStokesInflowBase</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b><br>class has no constructor.  Tag <b>dim=2d;alg=CPU2;</b><br>Inheritance: <a href="IDiscretizationItem2dCPU2.html">IDiscretizationItem2dCPU2</a> <a href="NavierStokesInflowBase2dCPU2.html">NavierStokesInflowBase2dCPU2</a> <br><table><tr><td colspan=2><h3>NavierStokesInflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Velocity, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity, Subset, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gtVelocity, Subset, c_string )</td></tr><tr><td><br></td></tr></table>
memberfunction
add
void
void add (c_string Velocity, c_string )
void add (c_string Velocity, c_string )<br><br>Member function of class <b>NavierStokesInflowBase2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
add
void
void add (SmartPtr<UserVector> Velocity, Subset, c_string )
void add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity, Subset, c_string )<br><br>Member function of class <b>NavierStokesInflowBase2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
add
void
void add (std::vector<number >Velocity, Subset, c_string )
void add (std::vector&ltnumber &gtVelocity, Subset, c_string )<br><br>Member function of class <b>NavierStokesInflowBase2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesInflowBase2dCPU3
IDiscretizationItem2dCPU3 
Classgroup <b>NavierStokesInflowBase</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b><br>class has no constructor.  Tag <b>dim=2d;alg=CPU3;</b><br>Inheritance: <a href="IDiscretizationItem2dCPU3.html">IDiscretizationItem2dCPU3</a> <a href="NavierStokesInflowBase2dCPU3.html">NavierStokesInflowBase2dCPU3</a> <br><table><tr><td colspan=2><h3>NavierStokesInflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Velocity, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity, Subset, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gtVelocity, Subset, c_string )</td></tr><tr><td><br></td></tr></table>
memberfunction
add
void
void add (c_string Velocity, c_string )
void add (c_string Velocity, c_string )<br><br>Member function of class <b>NavierStokesInflowBase2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
add
void
void add (SmartPtr<UserVector> Velocity, Subset, c_string )
void add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity, Subset, c_string )<br><br>Member function of class <b>NavierStokesInflowBase2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
add
void
void add (std::vector<number >Velocity, Subset, c_string )
void add (std::vector&ltnumber &gtVelocity, Subset, c_string )<br><br>Member function of class <b>NavierStokesInflowBase2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesInflowBase3dCPU1
IDiscretizationItem3dCPU1 
Classgroup <b>NavierStokesInflowBase</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b><br>class has no constructor.  Tag <b>dim=3d;alg=CPU1;</b><br>Inheritance: <a href="IDiscretizationItem3dCPU1.html">IDiscretizationItem3dCPU1</a> <a href="NavierStokesInflowBase3dCPU1.html">NavierStokesInflowBase3dCPU1</a> <br><table><tr><td colspan=2><h3>NavierStokesInflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Velocity, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity, Subset, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gtVelocity, Subset, c_string )</td></tr><tr><td><br></td></tr></table>
memberfunction
add
void
void add (c_string Velocity, c_string )
void add (c_string Velocity, c_string )<br><br>Member function of class <b>NavierStokesInflowBase3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
add
void
void add (SmartPtr<UserVector> Velocity, Subset, c_string )
void add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity, Subset, c_string )<br><br>Member function of class <b>NavierStokesInflowBase3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
add
void
void add (std::vector<number >Velocity, Subset, c_string )
void add (std::vector&ltnumber &gtVelocity, Subset, c_string )<br><br>Member function of class <b>NavierStokesInflowBase3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesInflowBase3dCPU2
IDiscretizationItem3dCPU2 
Classgroup <b>NavierStokesInflowBase</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b><br>class has no constructor.  Tag <b>dim=3d;alg=CPU2;</b><br>Inheritance: <a href="IDiscretizationItem3dCPU2.html">IDiscretizationItem3dCPU2</a> <a href="NavierStokesInflowBase3dCPU2.html">NavierStokesInflowBase3dCPU2</a> <br><table><tr><td colspan=2><h3>NavierStokesInflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Velocity, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity, Subset, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gtVelocity, Subset, c_string )</td></tr><tr><td><br></td></tr></table>
memberfunction
add
void
void add (c_string Velocity, c_string )
void add (c_string Velocity, c_string )<br><br>Member function of class <b>NavierStokesInflowBase3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
add
void
void add (SmartPtr<UserVector> Velocity, Subset, c_string )
void add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity, Subset, c_string )<br><br>Member function of class <b>NavierStokesInflowBase3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
add
void
void add (std::vector<number >Velocity, Subset, c_string )
void add (std::vector&ltnumber &gtVelocity, Subset, c_string )<br><br>Member function of class <b>NavierStokesInflowBase3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesInflowBase3dCPU3
IDiscretizationItem3dCPU3 
Classgroup <b>NavierStokesInflowBase</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b><br>class has no constructor.  Tag <b>dim=3d;alg=CPU3;</b><br>Inheritance: <a href="IDiscretizationItem3dCPU3.html">IDiscretizationItem3dCPU3</a> <a href="NavierStokesInflowBase3dCPU3.html">NavierStokesInflowBase3dCPU3</a> <br><table><tr><td colspan=2><h3>NavierStokesInflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Velocity, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity, Subset, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gtVelocity, Subset, c_string )</td></tr><tr><td><br></td></tr></table>
memberfunction
add
void
void add (c_string Velocity, c_string )
void add (c_string Velocity, c_string )<br><br>Member function of class <b>NavierStokesInflowBase3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
add
void
void add (SmartPtr<UserVector> Velocity, Subset, c_string )
void add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity, Subset, c_string )<br><br>Member function of class <b>NavierStokesInflowBase3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
add
void
void add (std::vector<number >Velocity, Subset, c_string )
void add (std::vector&ltnumber &gtVelocity, Subset, c_string )<br><br>Member function of class <b>NavierStokesInflowBase3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesInflowFE2dCPU1
IDiscretizationItem2dCPU1 NavierStokesInflowBase2dCPU1 
Classgroup <b>NavierStokesInflowFE</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU1;</b><br>Inheritance: <a href="IDiscretizationItem2dCPU1.html">IDiscretizationItem2dCPU1</a> <a href="NavierStokesInflowBase2dCPU1.html">NavierStokesInflowBase2dCPU1</a> <a href="NavierStokesInflowFE2dCPU1.html">NavierStokesInflowFE2dCPU1</a> <br><table><tr><td colspan=2><h3>NavierStokesInflowFE Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesInflowFE2dCPU1 (SmartPtr&lt;<a href="NavierStokesFE2d.html">NavierStokesFE</a>&gt; MasterElemDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesInflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Velocity, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity, Subset, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gtVelocity, Subset, c_string )</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesInflowFE2dCPU1

NavierStokesInflowFE2dCPU1 (SmartPtr<NavierStokesFE> MasterElemDisc)
NavierStokesInflowFE2dCPU1 (SmartPtr&lt;<a href="NavierStokesFE2d.html">NavierStokesFE</a>&gt; MasterElemDisc)<br>Constructor of class <b>NavierStokesInflowFE2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesInflowFE2dCPU2
IDiscretizationItem2dCPU2 NavierStokesInflowBase2dCPU2 
Classgroup <b>NavierStokesInflowFE</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU2;</b><br>Inheritance: <a href="IDiscretizationItem2dCPU2.html">IDiscretizationItem2dCPU2</a> <a href="NavierStokesInflowBase2dCPU2.html">NavierStokesInflowBase2dCPU2</a> <a href="NavierStokesInflowFE2dCPU2.html">NavierStokesInflowFE2dCPU2</a> <br><table><tr><td colspan=2><h3>NavierStokesInflowFE Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesInflowFE2dCPU2 (SmartPtr&lt;<a href="NavierStokesFE2d.html">NavierStokesFE</a>&gt; MasterElemDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesInflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Velocity, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity, Subset, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gtVelocity, Subset, c_string )</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesInflowFE2dCPU2

NavierStokesInflowFE2dCPU2 (SmartPtr<NavierStokesFE> MasterElemDisc)
NavierStokesInflowFE2dCPU2 (SmartPtr&lt;<a href="NavierStokesFE2d.html">NavierStokesFE</a>&gt; MasterElemDisc)<br>Constructor of class <b>NavierStokesInflowFE2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesInflowFE2dCPU3
IDiscretizationItem2dCPU3 NavierStokesInflowBase2dCPU3 
Classgroup <b>NavierStokesInflowFE</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU3;</b><br>Inheritance: <a href="IDiscretizationItem2dCPU3.html">IDiscretizationItem2dCPU3</a> <a href="NavierStokesInflowBase2dCPU3.html">NavierStokesInflowBase2dCPU3</a> <a href="NavierStokesInflowFE2dCPU3.html">NavierStokesInflowFE2dCPU3</a> <br><table><tr><td colspan=2><h3>NavierStokesInflowFE Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesInflowFE2dCPU3 (SmartPtr&lt;<a href="NavierStokesFE2d.html">NavierStokesFE</a>&gt; MasterElemDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesInflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Velocity, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity, Subset, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gtVelocity, Subset, c_string )</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesInflowFE2dCPU3

NavierStokesInflowFE2dCPU3 (SmartPtr<NavierStokesFE> MasterElemDisc)
NavierStokesInflowFE2dCPU3 (SmartPtr&lt;<a href="NavierStokesFE2d.html">NavierStokesFE</a>&gt; MasterElemDisc)<br>Constructor of class <b>NavierStokesInflowFE2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesInflowFE3dCPU1
IDiscretizationItem3dCPU1 NavierStokesInflowBase3dCPU1 
Classgroup <b>NavierStokesInflowFE</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU1;</b><br>Inheritance: <a href="IDiscretizationItem3dCPU1.html">IDiscretizationItem3dCPU1</a> <a href="NavierStokesInflowBase3dCPU1.html">NavierStokesInflowBase3dCPU1</a> <a href="NavierStokesInflowFE3dCPU1.html">NavierStokesInflowFE3dCPU1</a> <br><table><tr><td colspan=2><h3>NavierStokesInflowFE Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesInflowFE3dCPU1 (SmartPtr&lt;<a href="NavierStokesFE2d.html">NavierStokesFE</a>&gt; MasterElemDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesInflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Velocity, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity, Subset, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gtVelocity, Subset, c_string )</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesInflowFE3dCPU1

NavierStokesInflowFE3dCPU1 (SmartPtr<NavierStokesFE> MasterElemDisc)
NavierStokesInflowFE3dCPU1 (SmartPtr&lt;<a href="NavierStokesFE2d.html">NavierStokesFE</a>&gt; MasterElemDisc)<br>Constructor of class <b>NavierStokesInflowFE3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesInflowFE3dCPU2
IDiscretizationItem3dCPU2 NavierStokesInflowBase3dCPU2 
Classgroup <b>NavierStokesInflowFE</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU2;</b><br>Inheritance: <a href="IDiscretizationItem3dCPU2.html">IDiscretizationItem3dCPU2</a> <a href="NavierStokesInflowBase3dCPU2.html">NavierStokesInflowBase3dCPU2</a> <a href="NavierStokesInflowFE3dCPU2.html">NavierStokesInflowFE3dCPU2</a> <br><table><tr><td colspan=2><h3>NavierStokesInflowFE Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesInflowFE3dCPU2 (SmartPtr&lt;<a href="NavierStokesFE2d.html">NavierStokesFE</a>&gt; MasterElemDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesInflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Velocity, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity, Subset, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gtVelocity, Subset, c_string )</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesInflowFE3dCPU2

NavierStokesInflowFE3dCPU2 (SmartPtr<NavierStokesFE> MasterElemDisc)
NavierStokesInflowFE3dCPU2 (SmartPtr&lt;<a href="NavierStokesFE2d.html">NavierStokesFE</a>&gt; MasterElemDisc)<br>Constructor of class <b>NavierStokesInflowFE3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesInflowFE3dCPU3
IDiscretizationItem3dCPU3 NavierStokesInflowBase3dCPU3 
Classgroup <b>NavierStokesInflowFE</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU3;</b><br>Inheritance: <a href="IDiscretizationItem3dCPU3.html">IDiscretizationItem3dCPU3</a> <a href="NavierStokesInflowBase3dCPU3.html">NavierStokesInflowBase3dCPU3</a> <a href="NavierStokesInflowFE3dCPU3.html">NavierStokesInflowFE3dCPU3</a> <br><table><tr><td colspan=2><h3>NavierStokesInflowFE Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesInflowFE3dCPU3 (SmartPtr&lt;<a href="NavierStokesFE2d.html">NavierStokesFE</a>&gt; MasterElemDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesInflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Velocity, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity, Subset, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gtVelocity, Subset, c_string )</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesInflowFE3dCPU3

NavierStokesInflowFE3dCPU3 (SmartPtr<NavierStokesFE> MasterElemDisc)
NavierStokesInflowFE3dCPU3 (SmartPtr&lt;<a href="NavierStokesFE2d.html">NavierStokesFE</a>&gt; MasterElemDisc)<br>Constructor of class <b>NavierStokesInflowFE3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesInflowFV12dCPU1
IDiscretizationItem2dCPU1 NavierStokesInflowBase2dCPU1 
Classgroup <b>NavierStokesInflowFV1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU1;</b><br>Inheritance: <a href="IDiscretizationItem2dCPU1.html">IDiscretizationItem2dCPU1</a> <a href="NavierStokesInflowBase2dCPU1.html">NavierStokesInflowBase2dCPU1</a> <a href="NavierStokesInflowFV12dCPU1.html">NavierStokesInflowFV12dCPU1</a> <br><table><tr><td colspan=2><h3>NavierStokesInflowFV1 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesInflowFV12dCPU1 (SmartPtr&lt;<a href="NavierStokesFV12d.html">NavierStokesFV1</a>&gt; MasterElemDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesInflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Velocity, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity, Subset, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gtVelocity, Subset, c_string )</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesInflowFV12dCPU1

NavierStokesInflowFV12dCPU1 (SmartPtr<NavierStokesFV1> MasterElemDisc)
NavierStokesInflowFV12dCPU1 (SmartPtr&lt;<a href="NavierStokesFV12d.html">NavierStokesFV1</a>&gt; MasterElemDisc)<br>Constructor of class <b>NavierStokesInflowFV12dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesInflowFV12dCPU2
IDiscretizationItem2dCPU2 NavierStokesInflowBase2dCPU2 
Classgroup <b>NavierStokesInflowFV1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU2;</b><br>Inheritance: <a href="IDiscretizationItem2dCPU2.html">IDiscretizationItem2dCPU2</a> <a href="NavierStokesInflowBase2dCPU2.html">NavierStokesInflowBase2dCPU2</a> <a href="NavierStokesInflowFV12dCPU2.html">NavierStokesInflowFV12dCPU2</a> <br><table><tr><td colspan=2><h3>NavierStokesInflowFV1 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesInflowFV12dCPU2 (SmartPtr&lt;<a href="NavierStokesFV12d.html">NavierStokesFV1</a>&gt; MasterElemDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesInflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Velocity, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity, Subset, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gtVelocity, Subset, c_string )</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesInflowFV12dCPU2

NavierStokesInflowFV12dCPU2 (SmartPtr<NavierStokesFV1> MasterElemDisc)
NavierStokesInflowFV12dCPU2 (SmartPtr&lt;<a href="NavierStokesFV12d.html">NavierStokesFV1</a>&gt; MasterElemDisc)<br>Constructor of class <b>NavierStokesInflowFV12dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesInflowFV12dCPU3
IDiscretizationItem2dCPU3 NavierStokesInflowBase2dCPU3 
Classgroup <b>NavierStokesInflowFV1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU3;</b><br>Inheritance: <a href="IDiscretizationItem2dCPU3.html">IDiscretizationItem2dCPU3</a> <a href="NavierStokesInflowBase2dCPU3.html">NavierStokesInflowBase2dCPU3</a> <a href="NavierStokesInflowFV12dCPU3.html">NavierStokesInflowFV12dCPU3</a> <br><table><tr><td colspan=2><h3>NavierStokesInflowFV1 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesInflowFV12dCPU3 (SmartPtr&lt;<a href="NavierStokesFV12d.html">NavierStokesFV1</a>&gt; MasterElemDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesInflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Velocity, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity, Subset, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gtVelocity, Subset, c_string )</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesInflowFV12dCPU3

NavierStokesInflowFV12dCPU3 (SmartPtr<NavierStokesFV1> MasterElemDisc)
NavierStokesInflowFV12dCPU3 (SmartPtr&lt;<a href="NavierStokesFV12d.html">NavierStokesFV1</a>&gt; MasterElemDisc)<br>Constructor of class <b>NavierStokesInflowFV12dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesInflowFV13dCPU1
IDiscretizationItem3dCPU1 NavierStokesInflowBase3dCPU1 
Classgroup <b>NavierStokesInflowFV1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU1;</b><br>Inheritance: <a href="IDiscretizationItem3dCPU1.html">IDiscretizationItem3dCPU1</a> <a href="NavierStokesInflowBase3dCPU1.html">NavierStokesInflowBase3dCPU1</a> <a href="NavierStokesInflowFV13dCPU1.html">NavierStokesInflowFV13dCPU1</a> <br><table><tr><td colspan=2><h3>NavierStokesInflowFV1 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesInflowFV13dCPU1 (SmartPtr&lt;<a href="NavierStokesFV12d.html">NavierStokesFV1</a>&gt; MasterElemDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesInflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Velocity, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity, Subset, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gtVelocity, Subset, c_string )</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesInflowFV13dCPU1

NavierStokesInflowFV13dCPU1 (SmartPtr<NavierStokesFV1> MasterElemDisc)
NavierStokesInflowFV13dCPU1 (SmartPtr&lt;<a href="NavierStokesFV12d.html">NavierStokesFV1</a>&gt; MasterElemDisc)<br>Constructor of class <b>NavierStokesInflowFV13dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesInflowFV13dCPU2
IDiscretizationItem3dCPU2 NavierStokesInflowBase3dCPU2 
Classgroup <b>NavierStokesInflowFV1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU2;</b><br>Inheritance: <a href="IDiscretizationItem3dCPU2.html">IDiscretizationItem3dCPU2</a> <a href="NavierStokesInflowBase3dCPU2.html">NavierStokesInflowBase3dCPU2</a> <a href="NavierStokesInflowFV13dCPU2.html">NavierStokesInflowFV13dCPU2</a> <br><table><tr><td colspan=2><h3>NavierStokesInflowFV1 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesInflowFV13dCPU2 (SmartPtr&lt;<a href="NavierStokesFV12d.html">NavierStokesFV1</a>&gt; MasterElemDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesInflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Velocity, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity, Subset, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gtVelocity, Subset, c_string )</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesInflowFV13dCPU2

NavierStokesInflowFV13dCPU2 (SmartPtr<NavierStokesFV1> MasterElemDisc)
NavierStokesInflowFV13dCPU2 (SmartPtr&lt;<a href="NavierStokesFV12d.html">NavierStokesFV1</a>&gt; MasterElemDisc)<br>Constructor of class <b>NavierStokesInflowFV13dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesInflowFV13dCPU3
IDiscretizationItem3dCPU3 NavierStokesInflowBase3dCPU3 
Classgroup <b>NavierStokesInflowFV1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU3;</b><br>Inheritance: <a href="IDiscretizationItem3dCPU3.html">IDiscretizationItem3dCPU3</a> <a href="NavierStokesInflowBase3dCPU3.html">NavierStokesInflowBase3dCPU3</a> <a href="NavierStokesInflowFV13dCPU3.html">NavierStokesInflowFV13dCPU3</a> <br><table><tr><td colspan=2><h3>NavierStokesInflowFV1 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesInflowFV13dCPU3 (SmartPtr&lt;<a href="NavierStokesFV12d.html">NavierStokesFV1</a>&gt; MasterElemDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesInflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Velocity, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity, Subset, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gtVelocity, Subset, c_string )</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesInflowFV13dCPU3

NavierStokesInflowFV13dCPU3 (SmartPtr<NavierStokesFV1> MasterElemDisc)
NavierStokesInflowFV13dCPU3 (SmartPtr&lt;<a href="NavierStokesFV12d.html">NavierStokesFV1</a>&gt; MasterElemDisc)<br>Constructor of class <b>NavierStokesInflowFV13dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesInflowFV2dCPU1
IDiscretizationItem2dCPU1 NavierStokesInflowBase2dCPU1 
Classgroup <b>NavierStokesInflowFV</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU1;</b><br>Inheritance: <a href="IDiscretizationItem2dCPU1.html">IDiscretizationItem2dCPU1</a> <a href="NavierStokesInflowBase2dCPU1.html">NavierStokesInflowBase2dCPU1</a> <a href="NavierStokesInflowFV2dCPU1.html">NavierStokesInflowFV2dCPU1</a> <br><table><tr><td colspan=2><h3>NavierStokesInflowFV Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesInflowFV2dCPU1 (SmartPtr&lt;<a href="NavierStokesFV2d.html">NavierStokesFV</a>&gt; MasterElemDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesInflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Velocity, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity, Subset, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gtVelocity, Subset, c_string )</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesInflowFV2dCPU1

NavierStokesInflowFV2dCPU1 (SmartPtr<NavierStokesFV> MasterElemDisc)
NavierStokesInflowFV2dCPU1 (SmartPtr&lt;<a href="NavierStokesFV2d.html">NavierStokesFV</a>&gt; MasterElemDisc)<br>Constructor of class <b>NavierStokesInflowFV2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesInflowFV2dCPU2
IDiscretizationItem2dCPU2 NavierStokesInflowBase2dCPU2 
Classgroup <b>NavierStokesInflowFV</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU2;</b><br>Inheritance: <a href="IDiscretizationItem2dCPU2.html">IDiscretizationItem2dCPU2</a> <a href="NavierStokesInflowBase2dCPU2.html">NavierStokesInflowBase2dCPU2</a> <a href="NavierStokesInflowFV2dCPU2.html">NavierStokesInflowFV2dCPU2</a> <br><table><tr><td colspan=2><h3>NavierStokesInflowFV Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesInflowFV2dCPU2 (SmartPtr&lt;<a href="NavierStokesFV2d.html">NavierStokesFV</a>&gt; MasterElemDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesInflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Velocity, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity, Subset, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gtVelocity, Subset, c_string )</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesInflowFV2dCPU2

NavierStokesInflowFV2dCPU2 (SmartPtr<NavierStokesFV> MasterElemDisc)
NavierStokesInflowFV2dCPU2 (SmartPtr&lt;<a href="NavierStokesFV2d.html">NavierStokesFV</a>&gt; MasterElemDisc)<br>Constructor of class <b>NavierStokesInflowFV2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesInflowFV2dCPU3
IDiscretizationItem2dCPU3 NavierStokesInflowBase2dCPU3 
Classgroup <b>NavierStokesInflowFV</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU3;</b><br>Inheritance: <a href="IDiscretizationItem2dCPU3.html">IDiscretizationItem2dCPU3</a> <a href="NavierStokesInflowBase2dCPU3.html">NavierStokesInflowBase2dCPU3</a> <a href="NavierStokesInflowFV2dCPU3.html">NavierStokesInflowFV2dCPU3</a> <br><table><tr><td colspan=2><h3>NavierStokesInflowFV Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesInflowFV2dCPU3 (SmartPtr&lt;<a href="NavierStokesFV2d.html">NavierStokesFV</a>&gt; MasterElemDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesInflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Velocity, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity, Subset, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gtVelocity, Subset, c_string )</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesInflowFV2dCPU3

NavierStokesInflowFV2dCPU3 (SmartPtr<NavierStokesFV> MasterElemDisc)
NavierStokesInflowFV2dCPU3 (SmartPtr&lt;<a href="NavierStokesFV2d.html">NavierStokesFV</a>&gt; MasterElemDisc)<br>Constructor of class <b>NavierStokesInflowFV2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesInflowFV3dCPU1
IDiscretizationItem3dCPU1 NavierStokesInflowBase3dCPU1 
Classgroup <b>NavierStokesInflowFV</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU1;</b><br>Inheritance: <a href="IDiscretizationItem3dCPU1.html">IDiscretizationItem3dCPU1</a> <a href="NavierStokesInflowBase3dCPU1.html">NavierStokesInflowBase3dCPU1</a> <a href="NavierStokesInflowFV3dCPU1.html">NavierStokesInflowFV3dCPU1</a> <br><table><tr><td colspan=2><h3>NavierStokesInflowFV Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesInflowFV3dCPU1 (SmartPtr&lt;<a href="NavierStokesFV2d.html">NavierStokesFV</a>&gt; MasterElemDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesInflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Velocity, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity, Subset, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gtVelocity, Subset, c_string )</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesInflowFV3dCPU1

NavierStokesInflowFV3dCPU1 (SmartPtr<NavierStokesFV> MasterElemDisc)
NavierStokesInflowFV3dCPU1 (SmartPtr&lt;<a href="NavierStokesFV2d.html">NavierStokesFV</a>&gt; MasterElemDisc)<br>Constructor of class <b>NavierStokesInflowFV3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesInflowFV3dCPU2
IDiscretizationItem3dCPU2 NavierStokesInflowBase3dCPU2 
Classgroup <b>NavierStokesInflowFV</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU2;</b><br>Inheritance: <a href="IDiscretizationItem3dCPU2.html">IDiscretizationItem3dCPU2</a> <a href="NavierStokesInflowBase3dCPU2.html">NavierStokesInflowBase3dCPU2</a> <a href="NavierStokesInflowFV3dCPU2.html">NavierStokesInflowFV3dCPU2</a> <br><table><tr><td colspan=2><h3>NavierStokesInflowFV Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesInflowFV3dCPU2 (SmartPtr&lt;<a href="NavierStokesFV2d.html">NavierStokesFV</a>&gt; MasterElemDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesInflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Velocity, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity, Subset, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gtVelocity, Subset, c_string )</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesInflowFV3dCPU2

NavierStokesInflowFV3dCPU2 (SmartPtr<NavierStokesFV> MasterElemDisc)
NavierStokesInflowFV3dCPU2 (SmartPtr&lt;<a href="NavierStokesFV2d.html">NavierStokesFV</a>&gt; MasterElemDisc)<br>Constructor of class <b>NavierStokesInflowFV3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesInflowFV3dCPU3
IDiscretizationItem3dCPU3 NavierStokesInflowBase3dCPU3 
Classgroup <b>NavierStokesInflowFV</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU3;</b><br>Inheritance: <a href="IDiscretizationItem3dCPU3.html">IDiscretizationItem3dCPU3</a> <a href="NavierStokesInflowBase3dCPU3.html">NavierStokesInflowBase3dCPU3</a> <a href="NavierStokesInflowFV3dCPU3.html">NavierStokesInflowFV3dCPU3</a> <br><table><tr><td colspan=2><h3>NavierStokesInflowFV Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesInflowFV3dCPU3 (SmartPtr&lt;<a href="NavierStokesFV2d.html">NavierStokesFV</a>&gt; MasterElemDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesInflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Velocity, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity, Subset, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gtVelocity, Subset, c_string )</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesInflowFV3dCPU3

NavierStokesInflowFV3dCPU3 (SmartPtr<NavierStokesFV> MasterElemDisc)
NavierStokesInflowFV3dCPU3 (SmartPtr&lt;<a href="NavierStokesFV2d.html">NavierStokesFV</a>&gt; MasterElemDisc)<br>Constructor of class <b>NavierStokesInflowFV3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesInflowFVCR2dCPU1
IDiscretizationItem2dCPU1 NavierStokesInflowBase2dCPU1 
Classgroup <b>NavierStokesInflowFVCR</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU1;</b><br>Inheritance: <a href="IDiscretizationItem2dCPU1.html">IDiscretizationItem2dCPU1</a> <a href="NavierStokesInflowBase2dCPU1.html">NavierStokesInflowBase2dCPU1</a> <a href="NavierStokesInflowFVCR2dCPU1.html">NavierStokesInflowFVCR2dCPU1</a> <br><table><tr><td colspan=2><h3>NavierStokesInflowFVCR Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesInflowFVCR2dCPU1 (SmartPtr&lt;<a href="NavierStokesFVCR2d.html">NavierStokesFVCR</a>&gt; MasterElemDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesInflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Velocity, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity, Subset, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gtVelocity, Subset, c_string )</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesInflowFVCR2dCPU1

NavierStokesInflowFVCR2dCPU1 (SmartPtr<NavierStokesFVCR> MasterElemDisc)
NavierStokesInflowFVCR2dCPU1 (SmartPtr&lt;<a href="NavierStokesFVCR2d.html">NavierStokesFVCR</a>&gt; MasterElemDisc)<br>Constructor of class <b>NavierStokesInflowFVCR2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesInflowFVCR2dCPU2
IDiscretizationItem2dCPU2 NavierStokesInflowBase2dCPU2 
Classgroup <b>NavierStokesInflowFVCR</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU2;</b><br>Inheritance: <a href="IDiscretizationItem2dCPU2.html">IDiscretizationItem2dCPU2</a> <a href="NavierStokesInflowBase2dCPU2.html">NavierStokesInflowBase2dCPU2</a> <a href="NavierStokesInflowFVCR2dCPU2.html">NavierStokesInflowFVCR2dCPU2</a> <br><table><tr><td colspan=2><h3>NavierStokesInflowFVCR Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesInflowFVCR2dCPU2 (SmartPtr&lt;<a href="NavierStokesFVCR2d.html">NavierStokesFVCR</a>&gt; MasterElemDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesInflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Velocity, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity, Subset, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gtVelocity, Subset, c_string )</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesInflowFVCR2dCPU2

NavierStokesInflowFVCR2dCPU2 (SmartPtr<NavierStokesFVCR> MasterElemDisc)
NavierStokesInflowFVCR2dCPU2 (SmartPtr&lt;<a href="NavierStokesFVCR2d.html">NavierStokesFVCR</a>&gt; MasterElemDisc)<br>Constructor of class <b>NavierStokesInflowFVCR2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesInflowFVCR2dCPU3
IDiscretizationItem2dCPU3 NavierStokesInflowBase2dCPU3 
Classgroup <b>NavierStokesInflowFVCR</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU3;</b><br>Inheritance: <a href="IDiscretizationItem2dCPU3.html">IDiscretizationItem2dCPU3</a> <a href="NavierStokesInflowBase2dCPU3.html">NavierStokesInflowBase2dCPU3</a> <a href="NavierStokesInflowFVCR2dCPU3.html">NavierStokesInflowFVCR2dCPU3</a> <br><table><tr><td colspan=2><h3>NavierStokesInflowFVCR Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesInflowFVCR2dCPU3 (SmartPtr&lt;<a href="NavierStokesFVCR2d.html">NavierStokesFVCR</a>&gt; MasterElemDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesInflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Velocity, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity, Subset, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gtVelocity, Subset, c_string )</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesInflowFVCR2dCPU3

NavierStokesInflowFVCR2dCPU3 (SmartPtr<NavierStokesFVCR> MasterElemDisc)
NavierStokesInflowFVCR2dCPU3 (SmartPtr&lt;<a href="NavierStokesFVCR2d.html">NavierStokesFVCR</a>&gt; MasterElemDisc)<br>Constructor of class <b>NavierStokesInflowFVCR2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesInflowFVCR3dCPU1
IDiscretizationItem3dCPU1 NavierStokesInflowBase3dCPU1 
Classgroup <b>NavierStokesInflowFVCR</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU1;</b><br>Inheritance: <a href="IDiscretizationItem3dCPU1.html">IDiscretizationItem3dCPU1</a> <a href="NavierStokesInflowBase3dCPU1.html">NavierStokesInflowBase3dCPU1</a> <a href="NavierStokesInflowFVCR3dCPU1.html">NavierStokesInflowFVCR3dCPU1</a> <br><table><tr><td colspan=2><h3>NavierStokesInflowFVCR Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesInflowFVCR3dCPU1 (SmartPtr&lt;<a href="NavierStokesFVCR2d.html">NavierStokesFVCR</a>&gt; MasterElemDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesInflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Velocity, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity, Subset, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gtVelocity, Subset, c_string )</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesInflowFVCR3dCPU1

NavierStokesInflowFVCR3dCPU1 (SmartPtr<NavierStokesFVCR> MasterElemDisc)
NavierStokesInflowFVCR3dCPU1 (SmartPtr&lt;<a href="NavierStokesFVCR2d.html">NavierStokesFVCR</a>&gt; MasterElemDisc)<br>Constructor of class <b>NavierStokesInflowFVCR3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesInflowFVCR3dCPU2
IDiscretizationItem3dCPU2 NavierStokesInflowBase3dCPU2 
Classgroup <b>NavierStokesInflowFVCR</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU2;</b><br>Inheritance: <a href="IDiscretizationItem3dCPU2.html">IDiscretizationItem3dCPU2</a> <a href="NavierStokesInflowBase3dCPU2.html">NavierStokesInflowBase3dCPU2</a> <a href="NavierStokesInflowFVCR3dCPU2.html">NavierStokesInflowFVCR3dCPU2</a> <br><table><tr><td colspan=2><h3>NavierStokesInflowFVCR Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesInflowFVCR3dCPU2 (SmartPtr&lt;<a href="NavierStokesFVCR2d.html">NavierStokesFVCR</a>&gt; MasterElemDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesInflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Velocity, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity, Subset, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gtVelocity, Subset, c_string )</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesInflowFVCR3dCPU2

NavierStokesInflowFVCR3dCPU2 (SmartPtr<NavierStokesFVCR> MasterElemDisc)
NavierStokesInflowFVCR3dCPU2 (SmartPtr&lt;<a href="NavierStokesFVCR2d.html">NavierStokesFVCR</a>&gt; MasterElemDisc)<br>Constructor of class <b>NavierStokesInflowFVCR3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesInflowFVCR3dCPU3
IDiscretizationItem3dCPU3 NavierStokesInflowBase3dCPU3 
Classgroup <b>NavierStokesInflowFVCR</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU3;</b><br>Inheritance: <a href="IDiscretizationItem3dCPU3.html">IDiscretizationItem3dCPU3</a> <a href="NavierStokesInflowBase3dCPU3.html">NavierStokesInflowBase3dCPU3</a> <a href="NavierStokesInflowFVCR3dCPU3.html">NavierStokesInflowFVCR3dCPU3</a> <br><table><tr><td colspan=2><h3>NavierStokesInflowFVCR Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesInflowFVCR3dCPU3 (SmartPtr&lt;<a href="NavierStokesFVCR2d.html">NavierStokesFVCR</a>&gt; MasterElemDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesInflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Velocity, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity, Subset, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gtVelocity, Subset, c_string )</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesInflowFVCR3dCPU3

NavierStokesInflowFVCR3dCPU3 (SmartPtr<NavierStokesFVCR> MasterElemDisc)
NavierStokesInflowFVCR3dCPU3 (SmartPtr&lt;<a href="NavierStokesFVCR2d.html">NavierStokesFVCR</a>&gt; MasterElemDisc)<br>Constructor of class <b>NavierStokesInflowFVCR3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesLinearProfileSkewedUpwind2d
INavierStokesUpwind2d 
Classgroup <b>NavierStokesLinearProfileSkewedUpwind</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="INavierStokesUpwind2d.html">INavierStokesUpwind2d</a> <a href="NavierStokesLinearProfileSkewedUpwind2d.html">NavierStokesLinearProfileSkewedUpwind2d</a> <br><table><tr><td colspan=2><h3>NavierStokesLinearProfileSkewedUpwind Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesLinearProfileSkewedUpwind2d ()</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesLinearProfileSkewedUpwind2d

NavierStokesLinearProfileSkewedUpwind2d ()
NavierStokesLinearProfileSkewedUpwind2d ()<br>Constructor of class <b>NavierStokesLinearProfileSkewedUpwind2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesLinearProfileSkewedUpwind3d
INavierStokesUpwind3d 
Classgroup <b>NavierStokesLinearProfileSkewedUpwind</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="INavierStokesUpwind3d.html">INavierStokesUpwind3d</a> <a href="NavierStokesLinearProfileSkewedUpwind3d.html">NavierStokesLinearProfileSkewedUpwind3d</a> <br><table><tr><td colspan=2><h3>NavierStokesLinearProfileSkewedUpwind Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesLinearProfileSkewedUpwind3d ()</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesLinearProfileSkewedUpwind3d

NavierStokesLinearProfileSkewedUpwind3d ()
NavierStokesLinearProfileSkewedUpwind3d ()<br>Constructor of class <b>NavierStokesLinearProfileSkewedUpwind3d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesNoNormalStressOutflowBase2d
IElemDisc2d 
Classgroup <b>NavierStokesNoNormalStressOutflowBase</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b><br>class has no constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="NavierStokesNoNormalStressOutflowBase2d.html">NavierStokesNoNormalStressOutflowBase2d</a> <br><table><tr><td colspan=2><h3>NavierStokesNoNormalStressOutflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
memberfunction
add
void
void add (c_string Subset(s))
void add (c_string Subset(s))<br><br>Member function of class <b>NavierStokesNoNormalStressOutflowBase2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesNoNormalStressOutflowBase3d
IElemDisc3d 
Classgroup <b>NavierStokesNoNormalStressOutflowBase</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b><br>class has no constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IElemDisc3d.html">IElemDisc3d</a> <a href="NavierStokesNoNormalStressOutflowBase3d.html">NavierStokesNoNormalStressOutflowBase3d</a> <br><table><tr><td colspan=2><h3>NavierStokesNoNormalStressOutflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
memberfunction
add
void
void add (c_string Subset(s))
void add (c_string Subset(s))<br><br>Member function of class <b>NavierStokesNoNormalStressOutflowBase3d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesNoNormalStressOutflowFV12d
IElemDisc2d NavierStokesNoNormalStressOutflowBase2d 
Classgroup <b>NavierStokesNoNormalStressOutflowFV1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="NavierStokesNoNormalStressOutflowBase2d.html">NavierStokesNoNormalStressOutflowBase2d</a> <a href="NavierStokesNoNormalStressOutflowFV12d.html">NavierStokesNoNormalStressOutflowFV12d</a> <br><table><tr><td colspan=2><h3>NavierStokesNoNormalStressOutflowFV1 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesNoNormalStressOutflowFV12d (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; MasterDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesNoNormalStressOutflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesNoNormalStressOutflowFV12d

NavierStokesNoNormalStressOutflowFV12d (SmartPtr<NavierStokesBase> MasterDisc)
NavierStokesNoNormalStressOutflowFV12d (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; MasterDisc)<br>Constructor of class <b>NavierStokesNoNormalStressOutflowFV12d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesNoNormalStressOutflowFV13d
IElemDisc3d NavierStokesNoNormalStressOutflowBase3d 
Classgroup <b>NavierStokesNoNormalStressOutflowFV1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IElemDisc3d.html">IElemDisc3d</a> <a href="NavierStokesNoNormalStressOutflowBase3d.html">NavierStokesNoNormalStressOutflowBase3d</a> <a href="NavierStokesNoNormalStressOutflowFV13d.html">NavierStokesNoNormalStressOutflowFV13d</a> <br><table><tr><td colspan=2><h3>NavierStokesNoNormalStressOutflowFV1 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesNoNormalStressOutflowFV13d (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; MasterDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesNoNormalStressOutflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesNoNormalStressOutflowFV13d

NavierStokesNoNormalStressOutflowFV13d (SmartPtr<NavierStokesBase> MasterDisc)
NavierStokesNoNormalStressOutflowFV13d (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; MasterDisc)<br>Constructor of class <b>NavierStokesNoNormalStressOutflowFV13d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesNoNormalStressOutflowFV2d
IElemDisc2d NavierStokesNoNormalStressOutflowBase2d 
Classgroup <b>NavierStokesNoNormalStressOutflowFV</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="NavierStokesNoNormalStressOutflowBase2d.html">NavierStokesNoNormalStressOutflowBase2d</a> <a href="NavierStokesNoNormalStressOutflowFV2d.html">NavierStokesNoNormalStressOutflowFV2d</a> <br><table><tr><td colspan=2><h3>NavierStokesNoNormalStressOutflowFV Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesNoNormalStressOutflowFV2d (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; MasterDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesNoNormalStressOutflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesNoNormalStressOutflowFV2d

NavierStokesNoNormalStressOutflowFV2d (SmartPtr<NavierStokesBase> MasterDisc)
NavierStokesNoNormalStressOutflowFV2d (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; MasterDisc)<br>Constructor of class <b>NavierStokesNoNormalStressOutflowFV2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesNoNormalStressOutflowFV3d
IElemDisc3d NavierStokesNoNormalStressOutflowBase3d 
Classgroup <b>NavierStokesNoNormalStressOutflowFV</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IElemDisc3d.html">IElemDisc3d</a> <a href="NavierStokesNoNormalStressOutflowBase3d.html">NavierStokesNoNormalStressOutflowBase3d</a> <a href="NavierStokesNoNormalStressOutflowFV3d.html">NavierStokesNoNormalStressOutflowFV3d</a> <br><table><tr><td colspan=2><h3>NavierStokesNoNormalStressOutflowFV Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesNoNormalStressOutflowFV3d (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; MasterDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesNoNormalStressOutflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesNoNormalStressOutflowFV3d

NavierStokesNoNormalStressOutflowFV3d (SmartPtr<NavierStokesBase> MasterDisc)
NavierStokesNoNormalStressOutflowFV3d (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; MasterDisc)<br>Constructor of class <b>NavierStokesNoNormalStressOutflowFV3d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesNoNormalStressOutflowFVCR2d
IElemDisc2d NavierStokesNoNormalStressOutflowBase2d 
Classgroup <b>NavierStokesNoNormalStressOutflowFVCR</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="NavierStokesNoNormalStressOutflowBase2d.html">NavierStokesNoNormalStressOutflowBase2d</a> <a href="NavierStokesNoNormalStressOutflowFVCR2d.html">NavierStokesNoNormalStressOutflowFVCR2d</a> <br><table><tr><td colspan=2><h3>NavierStokesNoNormalStressOutflowFVCR Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesNoNormalStressOutflowFVCR2d (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; MasterDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesNoNormalStressOutflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesNoNormalStressOutflowFVCR2d

NavierStokesNoNormalStressOutflowFVCR2d (SmartPtr<NavierStokesBase> MasterDisc)
NavierStokesNoNormalStressOutflowFVCR2d (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; MasterDisc)<br>Constructor of class <b>NavierStokesNoNormalStressOutflowFVCR2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesNoNormalStressOutflowFVCR3d
IElemDisc3d NavierStokesNoNormalStressOutflowBase3d 
Classgroup <b>NavierStokesNoNormalStressOutflowFVCR</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IElemDisc3d.html">IElemDisc3d</a> <a href="NavierStokesNoNormalStressOutflowBase3d.html">NavierStokesNoNormalStressOutflowBase3d</a> <a href="NavierStokesNoNormalStressOutflowFVCR3d.html">NavierStokesNoNormalStressOutflowFVCR3d</a> <br><table><tr><td colspan=2><h3>NavierStokesNoNormalStressOutflowFVCR Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesNoNormalStressOutflowFVCR3d (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; MasterDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesNoNormalStressOutflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesNoNormalStressOutflowFVCR3d

NavierStokesNoNormalStressOutflowFVCR3d (SmartPtr<NavierStokesBase> MasterDisc)
NavierStokesNoNormalStressOutflowFVCR3d (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; MasterDisc)<br>Constructor of class <b>NavierStokesNoNormalStressOutflowFVCR3d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesNoUpwind2d
INavierStokesUpwind2d 
Classgroup <b>NavierStokesNoUpwind</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="INavierStokesUpwind2d.html">INavierStokesUpwind2d</a> <a href="NavierStokesNoUpwind2d.html">NavierStokesNoUpwind2d</a> <br><table><tr><td colspan=2><h3>NavierStokesNoUpwind Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesNoUpwind2d ()</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesNoUpwind2d

NavierStokesNoUpwind2d ()
NavierStokesNoUpwind2d ()<br>Constructor of class <b>NavierStokesNoUpwind2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesNoUpwind3d
INavierStokesUpwind3d 
Classgroup <b>NavierStokesNoUpwind</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="INavierStokesUpwind3d.html">INavierStokesUpwind3d</a> <a href="NavierStokesNoUpwind3d.html">NavierStokesNoUpwind3d</a> <br><table><tr><td colspan=2><h3>NavierStokesNoUpwind Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesNoUpwind3d ()</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesNoUpwind3d

NavierStokesNoUpwind3d ()
NavierStokesNoUpwind3d ()<br>Constructor of class <b>NavierStokesNoUpwind3d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesPositiveUpwind2d
INavierStokesUpwind2d 
Classgroup <b>NavierStokesPositiveUpwind</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="INavierStokesUpwind2d.html">INavierStokesUpwind2d</a> <a href="NavierStokesPositiveUpwind2d.html">NavierStokesPositiveUpwind2d</a> <br><table><tr><td colspan=2><h3>NavierStokesPositiveUpwind Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesPositiveUpwind2d ()</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesPositiveUpwind2d

NavierStokesPositiveUpwind2d ()
NavierStokesPositiveUpwind2d ()<br>Constructor of class <b>NavierStokesPositiveUpwind2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesPositiveUpwind3d
INavierStokesUpwind3d 
Classgroup <b>NavierStokesPositiveUpwind</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="INavierStokesUpwind3d.html">INavierStokesUpwind3d</a> <a href="NavierStokesPositiveUpwind3d.html">NavierStokesPositiveUpwind3d</a> <br><table><tr><td colspan=2><h3>NavierStokesPositiveUpwind Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesPositiveUpwind3d ()</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesPositiveUpwind3d

NavierStokesPositiveUpwind3d ()
NavierStokesPositiveUpwind3d ()<br>Constructor of class <b>NavierStokesPositiveUpwind3d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesRegularUpwind2d
INavierStokesUpwind2d 
Classgroup <b>NavierStokesRegularUpwind</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="INavierStokesUpwind2d.html">INavierStokesUpwind2d</a> <a href="NavierStokesRegularUpwind2d.html">NavierStokesRegularUpwind2d</a> <br><table><tr><td colspan=2><h3>NavierStokesRegularUpwind Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesRegularUpwind2d ()</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesRegularUpwind2d

NavierStokesRegularUpwind2d ()
NavierStokesRegularUpwind2d ()<br>Constructor of class <b>NavierStokesRegularUpwind2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesRegularUpwind3d
INavierStokesUpwind3d 
Classgroup <b>NavierStokesRegularUpwind</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="INavierStokesUpwind3d.html">INavierStokesUpwind3d</a> <a href="NavierStokesRegularUpwind3d.html">NavierStokesRegularUpwind3d</a> <br><table><tr><td colspan=2><h3>NavierStokesRegularUpwind Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesRegularUpwind3d ()</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesRegularUpwind3d

NavierStokesRegularUpwind3d ()
NavierStokesRegularUpwind3d ()<br>Constructor of class <b>NavierStokesRegularUpwind3d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesSkewedUpwind2d
INavierStokesUpwind2d 
Classgroup <b>NavierStokesSkewedUpwind</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="INavierStokesUpwind2d.html">INavierStokesUpwind2d</a> <a href="NavierStokesSkewedUpwind2d.html">NavierStokesSkewedUpwind2d</a> <br><table><tr><td colspan=2><h3>NavierStokesSkewedUpwind Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesSkewedUpwind2d ()</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesSkewedUpwind2d

NavierStokesSkewedUpwind2d ()
NavierStokesSkewedUpwind2d ()<br>Constructor of class <b>NavierStokesSkewedUpwind2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesSkewedUpwind3d
INavierStokesUpwind3d 
Classgroup <b>NavierStokesSkewedUpwind</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="INavierStokesUpwind3d.html">INavierStokesUpwind3d</a> <a href="NavierStokesSkewedUpwind3d.html">NavierStokesSkewedUpwind3d</a> <br><table><tr><td colspan=2><h3>NavierStokesSkewedUpwind Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesSkewedUpwind3d ()</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesSkewedUpwind3d

NavierStokesSkewedUpwind3d ()
NavierStokesSkewedUpwind3d ()<br>Constructor of class <b>NavierStokesSkewedUpwind3d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesSymBCFV12d
IElemDisc2d 
Classgroup <b>NavierStokesSymBCFV1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="NavierStokesSymBCFV12d.html">NavierStokesSymBCFV12d</a> <br><table><tr><td colspan=2><h3>NavierStokesSymBCFV1 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesSymBCFV12d (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; MasterDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NavierStokesSymBCFV1 Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesSymBCFV12d

NavierStokesSymBCFV12d (SmartPtr<NavierStokesBase> MasterDisc)
NavierStokesSymBCFV12d (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; MasterDisc)<br>Constructor of class <b>NavierStokesSymBCFV12d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
add
void
void add (c_string Subset(s))
void add (c_string Subset(s))<br><br>Member function of class <b>NavierStokesSymBCFV12d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesSymBCFV13d
IElemDisc3d 
Classgroup <b>NavierStokesSymBCFV1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IElemDisc3d.html">IElemDisc3d</a> <a href="NavierStokesSymBCFV13d.html">NavierStokesSymBCFV13d</a> <br><table><tr><td colspan=2><h3>NavierStokesSymBCFV1 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesSymBCFV13d (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; MasterDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NavierStokesSymBCFV1 Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesSymBCFV13d

NavierStokesSymBCFV13d (SmartPtr<NavierStokesBase> MasterDisc)
NavierStokesSymBCFV13d (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; MasterDisc)<br>Constructor of class <b>NavierStokesSymBCFV13d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
add
void
void add (c_string Subset(s))
void add (c_string Subset(s))<br><br>Member function of class <b>NavierStokesSymBCFV13d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesWall2dCPU1
IDiscretizationItem2dCPU1 
Classgroup <b>NavierStokesWall</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU1;</b><br>Inheritance: <a href="IDiscretizationItem2dCPU1.html">IDiscretizationItem2dCPU1</a> <a href="NavierStokesWall2dCPU1.html">NavierStokesWall2dCPU1</a> <br><table><tr><td colspan=2><h3>NavierStokesWall Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesWall2dCPU1 (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; MasterElemDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NavierStokesWall Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string )</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesWall2dCPU1

NavierStokesWall2dCPU1 (SmartPtr<NavierStokesBase> MasterElemDisc)
NavierStokesWall2dCPU1 (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; MasterElemDisc)<br>Constructor of class <b>NavierStokesWall2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
add
void
void add (c_string )
void add (c_string )<br><br>Member function of class <b>NavierStokesWall2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesWall2dCPU2
IDiscretizationItem2dCPU2 
Classgroup <b>NavierStokesWall</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU2;</b><br>Inheritance: <a href="IDiscretizationItem2dCPU2.html">IDiscretizationItem2dCPU2</a> <a href="NavierStokesWall2dCPU2.html">NavierStokesWall2dCPU2</a> <br><table><tr><td colspan=2><h3>NavierStokesWall Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesWall2dCPU2 (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; MasterElemDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NavierStokesWall Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string )</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesWall2dCPU2

NavierStokesWall2dCPU2 (SmartPtr<NavierStokesBase> MasterElemDisc)
NavierStokesWall2dCPU2 (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; MasterElemDisc)<br>Constructor of class <b>NavierStokesWall2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
add
void
void add (c_string )
void add (c_string )<br><br>Member function of class <b>NavierStokesWall2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesWall2dCPU3
IDiscretizationItem2dCPU3 
Classgroup <b>NavierStokesWall</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU3;</b><br>Inheritance: <a href="IDiscretizationItem2dCPU3.html">IDiscretizationItem2dCPU3</a> <a href="NavierStokesWall2dCPU3.html">NavierStokesWall2dCPU3</a> <br><table><tr><td colspan=2><h3>NavierStokesWall Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesWall2dCPU3 (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; MasterElemDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NavierStokesWall Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string )</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesWall2dCPU3

NavierStokesWall2dCPU3 (SmartPtr<NavierStokesBase> MasterElemDisc)
NavierStokesWall2dCPU3 (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; MasterElemDisc)<br>Constructor of class <b>NavierStokesWall2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
add
void
void add (c_string )
void add (c_string )<br><br>Member function of class <b>NavierStokesWall2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesWall3dCPU1
IDiscretizationItem3dCPU1 
Classgroup <b>NavierStokesWall</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU1;</b><br>Inheritance: <a href="IDiscretizationItem3dCPU1.html">IDiscretizationItem3dCPU1</a> <a href="NavierStokesWall3dCPU1.html">NavierStokesWall3dCPU1</a> <br><table><tr><td colspan=2><h3>NavierStokesWall Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesWall3dCPU1 (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; MasterElemDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NavierStokesWall Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string )</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesWall3dCPU1

NavierStokesWall3dCPU1 (SmartPtr<NavierStokesBase> MasterElemDisc)
NavierStokesWall3dCPU1 (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; MasterElemDisc)<br>Constructor of class <b>NavierStokesWall3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
add
void
void add (c_string )
void add (c_string )<br><br>Member function of class <b>NavierStokesWall3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesWall3dCPU2
IDiscretizationItem3dCPU2 
Classgroup <b>NavierStokesWall</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU2;</b><br>Inheritance: <a href="IDiscretizationItem3dCPU2.html">IDiscretizationItem3dCPU2</a> <a href="NavierStokesWall3dCPU2.html">NavierStokesWall3dCPU2</a> <br><table><tr><td colspan=2><h3>NavierStokesWall Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesWall3dCPU2 (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; MasterElemDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NavierStokesWall Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string )</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesWall3dCPU2

NavierStokesWall3dCPU2 (SmartPtr<NavierStokesBase> MasterElemDisc)
NavierStokesWall3dCPU2 (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; MasterElemDisc)<br>Constructor of class <b>NavierStokesWall3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
add
void
void add (c_string )
void add (c_string )<br><br>Member function of class <b>NavierStokesWall3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesWall3dCPU3
IDiscretizationItem3dCPU3 
Classgroup <b>NavierStokesWall</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU3;</b><br>Inheritance: <a href="IDiscretizationItem3dCPU3.html">IDiscretizationItem3dCPU3</a> <a href="NavierStokesWall3dCPU3.html">NavierStokesWall3dCPU3</a> <br><table><tr><td colspan=2><h3>NavierStokesWall Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesWall3dCPU3 (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; MasterElemDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NavierStokesWall Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string )</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesWall3dCPU3

NavierStokesWall3dCPU3 (SmartPtr<NavierStokesBase> MasterElemDisc)
NavierStokesWall3dCPU3 (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; MasterElemDisc)<br>Constructor of class <b>NavierStokesWall3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
add
void
void add (c_string )
void add (c_string )<br><br>Member function of class <b>NavierStokesWall3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesWeightedUpwind2d
INavierStokesUpwind2d 
Classgroup <b>NavierStokesWeightedUpwind</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="INavierStokesUpwind2d.html">INavierStokesUpwind2d</a> <a href="NavierStokesWeightedUpwind2d.html">NavierStokesWeightedUpwind2d</a> <br><table><tr><td colspan=2><h3>NavierStokesWeightedUpwind Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesWeightedUpwind2d (number Weight factor)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NavierStokesWeightedUpwind Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_weight (number )</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesWeightedUpwind2d

NavierStokesWeightedUpwind2d (number Weight factor)
NavierStokesWeightedUpwind2d (number Weight factor)<br>Constructor of class <b>NavierStokesWeightedUpwind2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
set_weight
void
void set_weight (number )
void set_weight (number )<br><br>Member function of class <b>NavierStokesWeightedUpwind2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesWeightedUpwind3d
INavierStokesUpwind3d 
Classgroup <b>NavierStokesWeightedUpwind</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="INavierStokesUpwind3d.html">INavierStokesUpwind3d</a> <a href="NavierStokesWeightedUpwind3d.html">NavierStokesWeightedUpwind3d</a> <br><table><tr><td colspan=2><h3>NavierStokesWeightedUpwind Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesWeightedUpwind3d (number Weight factor)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NavierStokesWeightedUpwind Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_weight (number )</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesWeightedUpwind3d

NavierStokesWeightedUpwind3d (number Weight factor)
NavierStokesWeightedUpwind3d (number Weight factor)<br>Constructor of class <b>NavierStokesWeightedUpwind3d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
set_weight
void
void set_weight (number )
void set_weight (number )<br><br>Member function of class <b>NavierStokesWeightedUpwind3d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
;
class
NeoHookeMaterialResponse1d
IStressMaterialResponse1d 
Classgroup <b>NeoHookeMaterialResponse</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="IStressMaterialResponse1d.html">IStressMaterialResponse1d</a> <a href="NeoHookeMaterialResponse1d.html">NeoHookeMaterialResponse1d</a> <br><table><tr><td colspan=2><h3>NeoHookeMaterialResponse Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NeoHookeMaterialResponse1d ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NeoHookeMaterialResponse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_hardening_behavior (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>write_data_to_console (number )</td></tr><tr><td><br></td></tr></table>
constructor
NeoHookeMaterialResponse1d

NeoHookeMaterialResponse1d ()
NeoHookeMaterialResponse1d ()<br>Constructor of class <b>NeoHookeMaterialResponse1d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_hardening_behavior
void
void set_hardening_behavior (size_t )
void set_hardening_behavior (size_t )<br><br>Member function of class <b>NeoHookeMaterialResponse1d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
write_data_to_console
void
void write_data_to_console (number )
void write_data_to_console (number )<br><br>Member function of class <b>NeoHookeMaterialResponse1d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
;
class
NeoHookeMaterialResponse2d
IStressMaterialResponse2d 
Classgroup <b>NeoHookeMaterialResponse</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IStressMaterialResponse2d.html">IStressMaterialResponse2d</a> <a href="NeoHookeMaterialResponse2d.html">NeoHookeMaterialResponse2d</a> <br><table><tr><td colspan=2><h3>NeoHookeMaterialResponse Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NeoHookeMaterialResponse2d ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NeoHookeMaterialResponse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_hardening_behavior (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>write_data_to_console (number )</td></tr><tr><td><br></td></tr></table>
constructor
NeoHookeMaterialResponse2d

NeoHookeMaterialResponse2d ()
NeoHookeMaterialResponse2d ()<br>Constructor of class <b>NeoHookeMaterialResponse2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_hardening_behavior
void
void set_hardening_behavior (size_t )
void set_hardening_behavior (size_t )<br><br>Member function of class <b>NeoHookeMaterialResponse2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
write_data_to_console
void
void write_data_to_console (number )
void write_data_to_console (number )<br><br>Member function of class <b>NeoHookeMaterialResponse2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
;
class
NeoHookeMaterialResponse3d
IStressMaterialResponse3d 
Classgroup <b>NeoHookeMaterialResponse</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IStressMaterialResponse3d.html">IStressMaterialResponse3d</a> <a href="NeoHookeMaterialResponse3d.html">NeoHookeMaterialResponse3d</a> <br><table><tr><td colspan=2><h3>NeoHookeMaterialResponse Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NeoHookeMaterialResponse3d ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NeoHookeMaterialResponse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_hardening_behavior (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>write_data_to_console (number )</td></tr><tr><td><br></td></tr></table>
constructor
NeoHookeMaterialResponse3d

NeoHookeMaterialResponse3d ()
NeoHookeMaterialResponse3d ()<br>Constructor of class <b>NeoHookeMaterialResponse3d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_hardening_behavior
void
void set_hardening_behavior (size_t )
void set_hardening_behavior (size_t )<br><br>Member function of class <b>NeoHookeMaterialResponse3d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
write_data_to_console
void
void write_data_to_console (number )
void write_data_to_console (number )<br><br>Member function of class <b>NeoHookeMaterialResponse3d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
;
class
NeumannBoundaryBase1d
IElemDisc1d 
Classgroup <b>NeumannBoundaryBase</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b><br>class has no constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="IElemDisc1d.html">IElemDisc1d</a> <a href="NeumannBoundaryBase1d.html">NeumannBoundaryBase1d</a> <br><table><tr><td colspan=2><h3>NeumannBoundaryBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="CondUserNumber2d.html">CondUserNumber</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gt, c_string , c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
memberfunction
add
void
void add (SmartPtr<UserNumber> , c_string , c_string )
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , c_string , c_string )<br><br>Member function of class <b>NeumannBoundaryBase1d</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b>
memberfunction
add
void
void add (SmartPtr<CondUserNumber> , c_string , c_string )
void add (SmartPtr&lt;<a href="CondUserNumber2d.html">CondUserNumber</a>&gt; , c_string , c_string )<br><br>Member function of class <b>NeumannBoundaryBase1d</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b>
memberfunction
add
void
void add (SmartPtr<UserVector> , c_string , c_string )
void add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , c_string , c_string )<br><br>Member function of class <b>NeumannBoundaryBase1d</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b>
memberfunction
add
void
void add (number , c_string , c_string )
void add (number , c_string , c_string )<br><br>Member function of class <b>NeumannBoundaryBase1d</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b>
memberfunction
add
void
void add (c_string , c_string , c_string )
void add (c_string , c_string , c_string )<br><br>Member function of class <b>NeumannBoundaryBase1d</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b>
memberfunction
add
void
void add (std::vector<number >, c_string , c_string )
void add (std::vector&ltnumber &gt, c_string , c_string )<br><br>Member function of class <b>NeumannBoundaryBase1d</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b>
;
class
NeumannBoundaryBase2d
IElemDisc2d 
Classgroup <b>NeumannBoundaryBase</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b><br>class has no constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="NeumannBoundaryBase2d.html">NeumannBoundaryBase2d</a> <br><table><tr><td colspan=2><h3>NeumannBoundaryBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="CondUserNumber2d.html">CondUserNumber</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gt, c_string , c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
memberfunction
add
void
void add (SmartPtr<UserNumber> , c_string , c_string )
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , c_string , c_string )<br><br>Member function of class <b>NeumannBoundaryBase2d</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b>
memberfunction
add
void
void add (SmartPtr<CondUserNumber> , c_string , c_string )
void add (SmartPtr&lt;<a href="CondUserNumber2d.html">CondUserNumber</a>&gt; , c_string , c_string )<br><br>Member function of class <b>NeumannBoundaryBase2d</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b>
memberfunction
add
void
void add (SmartPtr<UserVector> , c_string , c_string )
void add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , c_string , c_string )<br><br>Member function of class <b>NeumannBoundaryBase2d</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b>
memberfunction
add
void
void add (number , c_string , c_string )
void add (number , c_string , c_string )<br><br>Member function of class <b>NeumannBoundaryBase2d</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b>
memberfunction
add
void
void add (c_string , c_string , c_string )
void add (c_string , c_string , c_string )<br><br>Member function of class <b>NeumannBoundaryBase2d</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b>
memberfunction
add
void
void add (std::vector<number >, c_string , c_string )
void add (std::vector&ltnumber &gt, c_string , c_string )<br><br>Member function of class <b>NeumannBoundaryBase2d</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b>
;
class
NeumannBoundaryBase3d
IElemDisc3d 
Classgroup <b>NeumannBoundaryBase</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b><br>class has no constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IElemDisc3d.html">IElemDisc3d</a> <a href="NeumannBoundaryBase3d.html">NeumannBoundaryBase3d</a> <br><table><tr><td colspan=2><h3>NeumannBoundaryBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="CondUserNumber2d.html">CondUserNumber</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gt, c_string , c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
memberfunction
add
void
void add (SmartPtr<UserNumber> , c_string , c_string )
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , c_string , c_string )<br><br>Member function of class <b>NeumannBoundaryBase3d</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b>
memberfunction
add
void
void add (SmartPtr<CondUserNumber> , c_string , c_string )
void add (SmartPtr&lt;<a href="CondUserNumber2d.html">CondUserNumber</a>&gt; , c_string , c_string )<br><br>Member function of class <b>NeumannBoundaryBase3d</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b>
memberfunction
add
void
void add (SmartPtr<UserVector> , c_string , c_string )
void add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , c_string , c_string )<br><br>Member function of class <b>NeumannBoundaryBase3d</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b>
memberfunction
add
void
void add (number , c_string , c_string )
void add (number , c_string , c_string )<br><br>Member function of class <b>NeumannBoundaryBase3d</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b>
memberfunction
add
void
void add (c_string , c_string , c_string )
void add (c_string , c_string , c_string )<br><br>Member function of class <b>NeumannBoundaryBase3d</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b>
memberfunction
add
void
void add (std::vector<number >, c_string , c_string )
void add (std::vector&ltnumber &gt, c_string , c_string )<br><br>Member function of class <b>NeumannBoundaryBase3d</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b>
;
class
NeumannBoundaryFE1d
IElemDisc1d NeumannBoundaryBase1d 
Classgroup <b>NeumannBoundaryFE</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="IElemDisc1d.html">IElemDisc1d</a> <a href="NeumannBoundaryBase1d.html">NeumannBoundaryBase1d</a> <a href="NeumannBoundaryFE1d.html">NeumannBoundaryFE1d</a> <br><table><tr><td colspan=2><h3>NeumannBoundaryFE Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NeumannBoundaryFE1d (c_string Function)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NeumannBoundaryBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="CondUserNumber2d.html">CondUserNumber</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gt, c_string , c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
NeumannBoundaryFE1d

NeumannBoundaryFE1d (c_string Function)
NeumannBoundaryFE1d (c_string Function)<br>Constructor of class <b>NeumannBoundaryFE1d</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b>
;
class
NeumannBoundaryFE2d
IElemDisc2d NeumannBoundaryBase2d 
Classgroup <b>NeumannBoundaryFE</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="NeumannBoundaryBase2d.html">NeumannBoundaryBase2d</a> <a href="NeumannBoundaryFE2d.html">NeumannBoundaryFE2d</a> <br><table><tr><td colspan=2><h3>NeumannBoundaryFE Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NeumannBoundaryFE2d (c_string Function)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NeumannBoundaryBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="CondUserNumber2d.html">CondUserNumber</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gt, c_string , c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
NeumannBoundaryFE2d

NeumannBoundaryFE2d (c_string Function)
NeumannBoundaryFE2d (c_string Function)<br>Constructor of class <b>NeumannBoundaryFE2d</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b>
;
class
NeumannBoundaryFE3d
IElemDisc3d NeumannBoundaryBase3d 
Classgroup <b>NeumannBoundaryFE</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IElemDisc3d.html">IElemDisc3d</a> <a href="NeumannBoundaryBase3d.html">NeumannBoundaryBase3d</a> <a href="NeumannBoundaryFE3d.html">NeumannBoundaryFE3d</a> <br><table><tr><td colspan=2><h3>NeumannBoundaryFE Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NeumannBoundaryFE3d (c_string Function)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NeumannBoundaryBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="CondUserNumber2d.html">CondUserNumber</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gt, c_string , c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
NeumannBoundaryFE3d

NeumannBoundaryFE3d (c_string Function)
NeumannBoundaryFE3d (c_string Function)<br>Constructor of class <b>NeumannBoundaryFE3d</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b>
;
class
NeumannBoundaryFV11d
IElemDisc1d NeumannBoundaryBase1d 
Classgroup <b>NeumannBoundaryFV1</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="IElemDisc1d.html">IElemDisc1d</a> <a href="NeumannBoundaryBase1d.html">NeumannBoundaryBase1d</a> <a href="NeumannBoundaryFV11d.html">NeumannBoundaryFV11d</a> <br><table><tr><td colspan=2><h3>NeumannBoundaryFV1 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NeumannBoundaryFV11d (c_string Function)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NeumannBoundaryBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="CondUserNumber2d.html">CondUserNumber</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gt, c_string , c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
NeumannBoundaryFV11d

NeumannBoundaryFV11d (c_string Function)
NeumannBoundaryFV11d (c_string Function)<br>Constructor of class <b>NeumannBoundaryFV11d</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b>
;
class
NeumannBoundaryFV12d
IElemDisc2d NeumannBoundaryBase2d 
Classgroup <b>NeumannBoundaryFV1</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="NeumannBoundaryBase2d.html">NeumannBoundaryBase2d</a> <a href="NeumannBoundaryFV12d.html">NeumannBoundaryFV12d</a> <br><table><tr><td colspan=2><h3>NeumannBoundaryFV1 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NeumannBoundaryFV12d (c_string Function)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NeumannBoundaryBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="CondUserNumber2d.html">CondUserNumber</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gt, c_string , c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
NeumannBoundaryFV12d

NeumannBoundaryFV12d (c_string Function)
NeumannBoundaryFV12d (c_string Function)<br>Constructor of class <b>NeumannBoundaryFV12d</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b>
;
class
NeumannBoundaryFV13d
IElemDisc3d NeumannBoundaryBase3d 
Classgroup <b>NeumannBoundaryFV1</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IElemDisc3d.html">IElemDisc3d</a> <a href="NeumannBoundaryBase3d.html">NeumannBoundaryBase3d</a> <a href="NeumannBoundaryFV13d.html">NeumannBoundaryFV13d</a> <br><table><tr><td colspan=2><h3>NeumannBoundaryFV1 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NeumannBoundaryFV13d (c_string Function)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NeumannBoundaryBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="CondUserNumber2d.html">CondUserNumber</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gt, c_string , c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
NeumannBoundaryFV13d

NeumannBoundaryFV13d (c_string Function)
NeumannBoundaryFV13d (c_string Function)<br>Constructor of class <b>NeumannBoundaryFV13d</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b>
;
class
NeumannBoundaryFV1d
IElemDisc1d NeumannBoundaryBase1d 
Classgroup <b>NeumannBoundaryFV</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="IElemDisc1d.html">IElemDisc1d</a> <a href="NeumannBoundaryBase1d.html">NeumannBoundaryBase1d</a> <a href="NeumannBoundaryFV1d.html">NeumannBoundaryFV1d</a> <br><table><tr><td colspan=2><h3>NeumannBoundaryFV Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NeumannBoundaryFV1d (c_string Function)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NeumannBoundaryBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="CondUserNumber2d.html">CondUserNumber</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gt, c_string , c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
NeumannBoundaryFV1d

NeumannBoundaryFV1d (c_string Function)
NeumannBoundaryFV1d (c_string Function)<br>Constructor of class <b>NeumannBoundaryFV1d</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b>
;
class
NeumannBoundaryFV2d
IElemDisc2d NeumannBoundaryBase2d 
Classgroup <b>NeumannBoundaryFV</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="NeumannBoundaryBase2d.html">NeumannBoundaryBase2d</a> <a href="NeumannBoundaryFV2d.html">NeumannBoundaryFV2d</a> <br><table><tr><td colspan=2><h3>NeumannBoundaryFV Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NeumannBoundaryFV2d (c_string Function)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NeumannBoundaryBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="CondUserNumber2d.html">CondUserNumber</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gt, c_string , c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
NeumannBoundaryFV2d

NeumannBoundaryFV2d (c_string Function)
NeumannBoundaryFV2d (c_string Function)<br>Constructor of class <b>NeumannBoundaryFV2d</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b>
;
class
NeumannBoundaryFV3d
IElemDisc3d NeumannBoundaryBase3d 
Classgroup <b>NeumannBoundaryFV</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IElemDisc3d.html">IElemDisc3d</a> <a href="NeumannBoundaryBase3d.html">NeumannBoundaryBase3d</a> <a href="NeumannBoundaryFV3d.html">NeumannBoundaryFV3d</a> <br><table><tr><td colspan=2><h3>NeumannBoundaryFV Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NeumannBoundaryFV3d (c_string Function)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NeumannBoundaryBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="CondUserNumber2d.html">CondUserNumber</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gt, c_string , c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
NeumannBoundaryFV3d

NeumannBoundaryFV3d (c_string Function)
NeumannBoundaryFV3d (c_string Function)<br>Constructor of class <b>NeumannBoundaryFV3d</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b>
;
class
NewtonSolverCPU1
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 IOperatorInverseCPU1 
Classgroup <b>NewtonSolver</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b><br>class has constructor.  Tag <b>alg=CPU1;</b><br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="IOperatorInverseCPU1.html">IOperatorInverseCPU1</a> <a href="NewtonSolverCPU1.html">NewtonSolverCPU1</a> <br><table><tr><td colspan=2><h3>NewtonSolver Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NewtonSolverCPU1 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NewtonSolverCPU1 (SmartPtr&lt;<a href="IOperatorCPU1.html">IOperator</a>&gt; Operator)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NewtonSolverCPU1 (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; AssemblingRoutine)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NewtonSolver Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_inner_step_update (SmartPtr&lt;<a href="INewtonUpdate.html">INewtonUpdate</a>&gt; )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns data update called before every linsolver step<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_step_update (SmartPtr&lt;<a href="INewtonUpdate.html">INewtonUpdate</a>&gt; )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns data update called before every Newton step<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear_average_convergence ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear_inner_step_update (SmartPtr&lt;<a href="INewtonUpdate.html">INewtonUpdate</a>&gt; )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns clear inner step update<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear_step_update (SmartPtr&lt;<a href="INewtonUpdate.html">INewtonUpdate</a>&gt; )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns clear step update<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="IOperatorCPU1.html">IOperator</a>&gt; op)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>prepare (<a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; convCheck)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_line_search (SmartPtr&lt;<a href="ILineSearchCPU1.html">ILineSearch</a>&gt; lineSeach)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_linear_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; linSolver)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NewtonSolver Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>average_linear_steps (size_t iNewtonStep)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns average number of linsolver steps per linsolver call in newton step iNewtonStep<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>num_linsolver_calls (size_t iNewtonStep)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns number of linsolver calls in iNewtonStep<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>num_linsolver_steps (size_t iNewtonStep)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns number of linsolver steps in newton step iNewtonStep<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_newton_steps ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns number of newton steps in history<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print_average_convergence ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>total_average_linear_steps ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns total average number of linsolver steps per linsolver call<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>total_linsolver_calls ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns total number of linsolver calls<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>total_linsolver_steps ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns total number of linsolver steps<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
NewtonSolverCPU1

NewtonSolverCPU1 ()
NewtonSolverCPU1 ()<br>Constructor of class <b>NewtonSolverCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
constructor
NewtonSolverCPU1

NewtonSolverCPU1 (SmartPtr<IOperator> Operator)
NewtonSolverCPU1 (SmartPtr&lt;<a href="IOperatorCPU1.html">IOperator</a>&gt; Operator)<br>Constructor of class <b>NewtonSolverCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
constructor
NewtonSolverCPU1

NewtonSolverCPU1 (SmartPtr<IAssemble> AssemblingRoutine)
NewtonSolverCPU1 (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; AssemblingRoutine)<br>Constructor of class <b>NewtonSolverCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_linear_solver
void
void set_linear_solver (SmartPtr<ILinearOperatorInverse> linSolver)
void set_linear_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; linSolver)<br><br>Member function of class <b>NewtonSolverCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_convergence_check
void
void set_convergence_check (SmartPtr<IConvergenceCheck> convCheck)
void set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; convCheck)<br><br>Member function of class <b>NewtonSolverCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_line_search
void
void set_line_search (SmartPtr<ILineSearch> lineSeach)
void set_line_search (SmartPtr&lt;<a href="ILineSearchCPU1.html">ILineSearch</a>&gt; lineSeach)<br><br>Member function of class <b>NewtonSolverCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
init
bool
bool init (SmartPtr<IOperator> op)
bool init (SmartPtr&lt;<a href="IOperatorCPU1.html">IOperator</a>&gt; op)<br><br>Member function of class <b>NewtonSolverCPU1</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
prepare
bool
bool prepare (Vector *u)
bool prepare (<a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>NewtonSolverCPU1</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
apply
bool
bool apply (Vector *u)
bool apply (<a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>NewtonSolverCPU1</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
clear_average_convergence
void
void clear_average_convergence ()
void clear_average_convergence ()<br><br>Member function of class <b>NewtonSolverCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
add_inner_step_update
void
void add_inner_step_update (SmartPtr<INewtonUpdate> )
void add_inner_step_update (SmartPtr&lt;<a href="INewtonUpdate.html">INewtonUpdate</a>&gt; )<br><br>Member function of class <b>NewtonSolverCPU1</b><br>returns data update called before every linsolver step<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
clear_inner_step_update
void
void clear_inner_step_update (SmartPtr<INewtonUpdate> )
void clear_inner_step_update (SmartPtr&lt;<a href="INewtonUpdate.html">INewtonUpdate</a>&gt; )<br><br>Member function of class <b>NewtonSolverCPU1</b><br>returns clear inner step update<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
add_step_update
void
void add_step_update (SmartPtr<INewtonUpdate> )
void add_step_update (SmartPtr&lt;<a href="INewtonUpdate.html">INewtonUpdate</a>&gt; )<br><br>Member function of class <b>NewtonSolverCPU1</b><br>returns data update called before every Newton step<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
clear_step_update
void
void clear_step_update (SmartPtr<INewtonUpdate> )
void clear_step_update (SmartPtr&lt;<a href="INewtonUpdate.html">INewtonUpdate</a>&gt; )<br><br>Member function of class <b>NewtonSolverCPU1</b><br>returns clear step update<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
print_average_convergence
void
void print_average_convergence () const
void print_average_convergence ()<br><br>Member function of class <b>NewtonSolverCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
num_newton_steps
unknown
size_t num_newton_steps () const
size_t num_newton_steps ()<br><br>Member function of class <b>NewtonSolverCPU1</b><br>returns number of newton steps in history<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
num_linsolver_calls
integer
integer num_linsolver_calls (size_t iNewtonStep) const
integer num_linsolver_calls (size_t iNewtonStep)<br><br>Member function of class <b>NewtonSolverCPU1</b><br>returns number of linsolver calls in iNewtonStep<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
num_linsolver_steps
integer
integer num_linsolver_steps (size_t iNewtonStep) const
integer num_linsolver_steps (size_t iNewtonStep)<br><br>Member function of class <b>NewtonSolverCPU1</b><br>returns number of linsolver steps in newton step iNewtonStep<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
average_linear_steps
number
number average_linear_steps (size_t iNewtonStep) const
number average_linear_steps (size_t iNewtonStep)<br><br>Member function of class <b>NewtonSolverCPU1</b><br>returns average number of linsolver steps per linsolver call in newton step iNewtonStep<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
total_linsolver_calls
integer
integer total_linsolver_calls () const
integer total_linsolver_calls ()<br><br>Member function of class <b>NewtonSolverCPU1</b><br>returns total number of linsolver calls<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
total_linsolver_steps
integer
integer total_linsolver_steps () const
integer total_linsolver_steps ()<br><br>Member function of class <b>NewtonSolverCPU1</b><br>returns total number of linsolver steps<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
total_average_linear_steps
number
number total_average_linear_steps () const
number total_average_linear_steps ()<br><br>Member function of class <b>NewtonSolverCPU1</b><br>returns total average number of linsolver steps per linsolver call<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
;
class
NewtonSolverCPU2
VectorDebugWritingObjectCPU2 DebugWritingObjectCPU2 IOperatorInverseCPU2 
Classgroup <b>NewtonSolver</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b><br>class has constructor.  Tag <b>alg=CPU2;</b><br>Inheritance: <a href="VectorDebugWritingObjectCPU2.html">VectorDebugWritingObjectCPU2</a> <a href="DebugWritingObjectCPU2.html">DebugWritingObjectCPU2</a> <a href="IOperatorInverseCPU2.html">IOperatorInverseCPU2</a> <a href="NewtonSolverCPU2.html">NewtonSolverCPU2</a> <br><table><tr><td colspan=2><h3>NewtonSolver Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NewtonSolverCPU2 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NewtonSolverCPU2 (SmartPtr&lt;<a href="IOperatorCPU1.html">IOperator</a>&gt; Operator)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NewtonSolverCPU2 (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; AssemblingRoutine)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NewtonSolver Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_inner_step_update (SmartPtr&lt;<a href="INewtonUpdate.html">INewtonUpdate</a>&gt; )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns data update called before every linsolver step<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_step_update (SmartPtr&lt;<a href="INewtonUpdate.html">INewtonUpdate</a>&gt; )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns data update called before every Newton step<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear_average_convergence ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear_inner_step_update (SmartPtr&lt;<a href="INewtonUpdate.html">INewtonUpdate</a>&gt; )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns clear inner step update<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear_step_update (SmartPtr&lt;<a href="INewtonUpdate.html">INewtonUpdate</a>&gt; )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns clear step update<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="IOperatorCPU1.html">IOperator</a>&gt; op)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>prepare (<a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; convCheck)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_line_search (SmartPtr&lt;<a href="ILineSearchCPU1.html">ILineSearch</a>&gt; lineSeach)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_linear_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; linSolver)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NewtonSolver Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>average_linear_steps (size_t iNewtonStep)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns average number of linsolver steps per linsolver call in newton step iNewtonStep<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>num_linsolver_calls (size_t iNewtonStep)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns number of linsolver calls in iNewtonStep<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>num_linsolver_steps (size_t iNewtonStep)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns number of linsolver steps in newton step iNewtonStep<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_newton_steps ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns number of newton steps in history<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print_average_convergence ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>total_average_linear_steps ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns total average number of linsolver steps per linsolver call<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>total_linsolver_calls ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns total number of linsolver calls<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>total_linsolver_steps ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns total number of linsolver steps<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
NewtonSolverCPU2

NewtonSolverCPU2 ()
NewtonSolverCPU2 ()<br>Constructor of class <b>NewtonSolverCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
constructor
NewtonSolverCPU2

NewtonSolverCPU2 (SmartPtr<IOperator> Operator)
NewtonSolverCPU2 (SmartPtr&lt;<a href="IOperatorCPU1.html">IOperator</a>&gt; Operator)<br>Constructor of class <b>NewtonSolverCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
constructor
NewtonSolverCPU2

NewtonSolverCPU2 (SmartPtr<IAssemble> AssemblingRoutine)
NewtonSolverCPU2 (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; AssemblingRoutine)<br>Constructor of class <b>NewtonSolverCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_linear_solver
void
void set_linear_solver (SmartPtr<ILinearOperatorInverse> linSolver)
void set_linear_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; linSolver)<br><br>Member function of class <b>NewtonSolverCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_convergence_check
void
void set_convergence_check (SmartPtr<IConvergenceCheck> convCheck)
void set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; convCheck)<br><br>Member function of class <b>NewtonSolverCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_line_search
void
void set_line_search (SmartPtr<ILineSearch> lineSeach)
void set_line_search (SmartPtr&lt;<a href="ILineSearchCPU1.html">ILineSearch</a>&gt; lineSeach)<br><br>Member function of class <b>NewtonSolverCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
init
bool
bool init (SmartPtr<IOperator> op)
bool init (SmartPtr&lt;<a href="IOperatorCPU1.html">IOperator</a>&gt; op)<br><br>Member function of class <b>NewtonSolverCPU2</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
prepare
bool
bool prepare (Vector *u)
bool prepare (<a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>NewtonSolverCPU2</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
apply
bool
bool apply (Vector *u)
bool apply (<a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>NewtonSolverCPU2</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
clear_average_convergence
void
void clear_average_convergence ()
void clear_average_convergence ()<br><br>Member function of class <b>NewtonSolverCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
add_inner_step_update
void
void add_inner_step_update (SmartPtr<INewtonUpdate> )
void add_inner_step_update (SmartPtr&lt;<a href="INewtonUpdate.html">INewtonUpdate</a>&gt; )<br><br>Member function of class <b>NewtonSolverCPU2</b><br>returns data update called before every linsolver step<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
clear_inner_step_update
void
void clear_inner_step_update (SmartPtr<INewtonUpdate> )
void clear_inner_step_update (SmartPtr&lt;<a href="INewtonUpdate.html">INewtonUpdate</a>&gt; )<br><br>Member function of class <b>NewtonSolverCPU2</b><br>returns clear inner step update<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
add_step_update
void
void add_step_update (SmartPtr<INewtonUpdate> )
void add_step_update (SmartPtr&lt;<a href="INewtonUpdate.html">INewtonUpdate</a>&gt; )<br><br>Member function of class <b>NewtonSolverCPU2</b><br>returns data update called before every Newton step<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
clear_step_update
void
void clear_step_update (SmartPtr<INewtonUpdate> )
void clear_step_update (SmartPtr&lt;<a href="INewtonUpdate.html">INewtonUpdate</a>&gt; )<br><br>Member function of class <b>NewtonSolverCPU2</b><br>returns clear step update<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
print_average_convergence
void
void print_average_convergence () const
void print_average_convergence ()<br><br>Member function of class <b>NewtonSolverCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
num_newton_steps
unknown
size_t num_newton_steps () const
size_t num_newton_steps ()<br><br>Member function of class <b>NewtonSolverCPU2</b><br>returns number of newton steps in history<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
num_linsolver_calls
integer
integer num_linsolver_calls (size_t iNewtonStep) const
integer num_linsolver_calls (size_t iNewtonStep)<br><br>Member function of class <b>NewtonSolverCPU2</b><br>returns number of linsolver calls in iNewtonStep<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
num_linsolver_steps
integer
integer num_linsolver_steps (size_t iNewtonStep) const
integer num_linsolver_steps (size_t iNewtonStep)<br><br>Member function of class <b>NewtonSolverCPU2</b><br>returns number of linsolver steps in newton step iNewtonStep<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
average_linear_steps
number
number average_linear_steps (size_t iNewtonStep) const
number average_linear_steps (size_t iNewtonStep)<br><br>Member function of class <b>NewtonSolverCPU2</b><br>returns average number of linsolver steps per linsolver call in newton step iNewtonStep<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
total_linsolver_calls
integer
integer total_linsolver_calls () const
integer total_linsolver_calls ()<br><br>Member function of class <b>NewtonSolverCPU2</b><br>returns total number of linsolver calls<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
total_linsolver_steps
integer
integer total_linsolver_steps () const
integer total_linsolver_steps ()<br><br>Member function of class <b>NewtonSolverCPU2</b><br>returns total number of linsolver steps<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
total_average_linear_steps
number
number total_average_linear_steps () const
number total_average_linear_steps ()<br><br>Member function of class <b>NewtonSolverCPU2</b><br>returns total average number of linsolver steps per linsolver call<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
;
class
NewtonSolverCPU3
VectorDebugWritingObjectCPU3 DebugWritingObjectCPU3 IOperatorInverseCPU3 
Classgroup <b>NewtonSolver</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b><br>class has constructor.  Tag <b>alg=CPU3;</b><br>Inheritance: <a href="VectorDebugWritingObjectCPU3.html">VectorDebugWritingObjectCPU3</a> <a href="DebugWritingObjectCPU3.html">DebugWritingObjectCPU3</a> <a href="IOperatorInverseCPU3.html">IOperatorInverseCPU3</a> <a href="NewtonSolverCPU3.html">NewtonSolverCPU3</a> <br><table><tr><td colspan=2><h3>NewtonSolver Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NewtonSolverCPU3 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NewtonSolverCPU3 (SmartPtr&lt;<a href="IOperatorCPU1.html">IOperator</a>&gt; Operator)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NewtonSolverCPU3 (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; AssemblingRoutine)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NewtonSolver Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_inner_step_update (SmartPtr&lt;<a href="INewtonUpdate.html">INewtonUpdate</a>&gt; )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns data update called before every linsolver step<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_step_update (SmartPtr&lt;<a href="INewtonUpdate.html">INewtonUpdate</a>&gt; )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns data update called before every Newton step<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear_average_convergence ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear_inner_step_update (SmartPtr&lt;<a href="INewtonUpdate.html">INewtonUpdate</a>&gt; )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns clear inner step update<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear_step_update (SmartPtr&lt;<a href="INewtonUpdate.html">INewtonUpdate</a>&gt; )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns clear step update<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="IOperatorCPU1.html">IOperator</a>&gt; op)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>prepare (<a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; convCheck)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_line_search (SmartPtr&lt;<a href="ILineSearchCPU1.html">ILineSearch</a>&gt; lineSeach)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_linear_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; linSolver)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NewtonSolver Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>average_linear_steps (size_t iNewtonStep)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns average number of linsolver steps per linsolver call in newton step iNewtonStep<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>num_linsolver_calls (size_t iNewtonStep)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns number of linsolver calls in iNewtonStep<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>num_linsolver_steps (size_t iNewtonStep)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns number of linsolver steps in newton step iNewtonStep<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_newton_steps ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns number of newton steps in history<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print_average_convergence ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>total_average_linear_steps ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns total average number of linsolver steps per linsolver call<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>total_linsolver_calls ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns total number of linsolver calls<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>total_linsolver_steps ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns total number of linsolver steps<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
NewtonSolverCPU3

NewtonSolverCPU3 ()
NewtonSolverCPU3 ()<br>Constructor of class <b>NewtonSolverCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
constructor
NewtonSolverCPU3

NewtonSolverCPU3 (SmartPtr<IOperator> Operator)
NewtonSolverCPU3 (SmartPtr&lt;<a href="IOperatorCPU1.html">IOperator</a>&gt; Operator)<br>Constructor of class <b>NewtonSolverCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
constructor
NewtonSolverCPU3

NewtonSolverCPU3 (SmartPtr<IAssemble> AssemblingRoutine)
NewtonSolverCPU3 (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; AssemblingRoutine)<br>Constructor of class <b>NewtonSolverCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_linear_solver
void
void set_linear_solver (SmartPtr<ILinearOperatorInverse> linSolver)
void set_linear_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; linSolver)<br><br>Member function of class <b>NewtonSolverCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_convergence_check
void
void set_convergence_check (SmartPtr<IConvergenceCheck> convCheck)
void set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; convCheck)<br><br>Member function of class <b>NewtonSolverCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_line_search
void
void set_line_search (SmartPtr<ILineSearch> lineSeach)
void set_line_search (SmartPtr&lt;<a href="ILineSearchCPU1.html">ILineSearch</a>&gt; lineSeach)<br><br>Member function of class <b>NewtonSolverCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
init
bool
bool init (SmartPtr<IOperator> op)
bool init (SmartPtr&lt;<a href="IOperatorCPU1.html">IOperator</a>&gt; op)<br><br>Member function of class <b>NewtonSolverCPU3</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
prepare
bool
bool prepare (Vector *u)
bool prepare (<a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>NewtonSolverCPU3</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
apply
bool
bool apply (Vector *u)
bool apply (<a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>NewtonSolverCPU3</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
clear_average_convergence
void
void clear_average_convergence ()
void clear_average_convergence ()<br><br>Member function of class <b>NewtonSolverCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
add_inner_step_update
void
void add_inner_step_update (SmartPtr<INewtonUpdate> )
void add_inner_step_update (SmartPtr&lt;<a href="INewtonUpdate.html">INewtonUpdate</a>&gt; )<br><br>Member function of class <b>NewtonSolverCPU3</b><br>returns data update called before every linsolver step<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
clear_inner_step_update
void
void clear_inner_step_update (SmartPtr<INewtonUpdate> )
void clear_inner_step_update (SmartPtr&lt;<a href="INewtonUpdate.html">INewtonUpdate</a>&gt; )<br><br>Member function of class <b>NewtonSolverCPU3</b><br>returns clear inner step update<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
add_step_update
void
void add_step_update (SmartPtr<INewtonUpdate> )
void add_step_update (SmartPtr&lt;<a href="INewtonUpdate.html">INewtonUpdate</a>&gt; )<br><br>Member function of class <b>NewtonSolverCPU3</b><br>returns data update called before every Newton step<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
clear_step_update
void
void clear_step_update (SmartPtr<INewtonUpdate> )
void clear_step_update (SmartPtr&lt;<a href="INewtonUpdate.html">INewtonUpdate</a>&gt; )<br><br>Member function of class <b>NewtonSolverCPU3</b><br>returns clear step update<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
print_average_convergence
void
void print_average_convergence () const
void print_average_convergence ()<br><br>Member function of class <b>NewtonSolverCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
num_newton_steps
unknown
size_t num_newton_steps () const
size_t num_newton_steps ()<br><br>Member function of class <b>NewtonSolverCPU3</b><br>returns number of newton steps in history<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
num_linsolver_calls
integer
integer num_linsolver_calls (size_t iNewtonStep) const
integer num_linsolver_calls (size_t iNewtonStep)<br><br>Member function of class <b>NewtonSolverCPU3</b><br>returns number of linsolver calls in iNewtonStep<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
num_linsolver_steps
integer
integer num_linsolver_steps (size_t iNewtonStep) const
integer num_linsolver_steps (size_t iNewtonStep)<br><br>Member function of class <b>NewtonSolverCPU3</b><br>returns number of linsolver steps in newton step iNewtonStep<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
average_linear_steps
number
number average_linear_steps (size_t iNewtonStep) const
number average_linear_steps (size_t iNewtonStep)<br><br>Member function of class <b>NewtonSolverCPU3</b><br>returns average number of linsolver steps per linsolver call in newton step iNewtonStep<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
total_linsolver_calls
integer
integer total_linsolver_calls () const
integer total_linsolver_calls ()<br><br>Member function of class <b>NewtonSolverCPU3</b><br>returns total number of linsolver calls<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
total_linsolver_steps
integer
integer total_linsolver_steps () const
integer total_linsolver_steps ()<br><br>Member function of class <b>NewtonSolverCPU3</b><br>returns total number of linsolver steps<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
total_average_linear_steps
number
number total_average_linear_steps () const
number total_average_linear_steps ()<br><br>Member function of class <b>NewtonSolverCPU3</b><br>returns total average number of linsolver steps per linsolver call<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
;
class
NoUpwind1d
IConvectionShapes1d 
Classgroup <b>NoUpwind</b><br>Registry Group: <b>/ug4/SpatialDisc/Upwind</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="IConvectionShapes1d.html">IConvectionShapes1d</a> <a href="NoUpwind1d.html">NoUpwind1d</a> <br><table><tr><td colspan=2><h3>NoUpwind Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NoUpwind1d ()</td></tr><tr><td><br></td></tr></table>
constructor
NoUpwind1d

NoUpwind1d ()
NoUpwind1d ()<br>Constructor of class <b>NoUpwind1d</b><br>Registry Group: <b>/ug4/SpatialDisc/Upwind</b>
;
class
NoUpwind2d
IConvectionShapes2d 
Classgroup <b>NoUpwind</b><br>Registry Group: <b>/ug4/SpatialDisc/Upwind</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IConvectionShapes2d.html">IConvectionShapes2d</a> <a href="NoUpwind2d.html">NoUpwind2d</a> <br><table><tr><td colspan=2><h3>NoUpwind Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NoUpwind2d ()</td></tr><tr><td><br></td></tr></table>
constructor
NoUpwind2d

NoUpwind2d ()
NoUpwind2d ()<br>Constructor of class <b>NoUpwind2d</b><br>Registry Group: <b>/ug4/SpatialDisc/Upwind</b>
;
class
NoUpwind3d
IConvectionShapes3d 
Classgroup <b>NoUpwind</b><br>Registry Group: <b>/ug4/SpatialDisc/Upwind</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IConvectionShapes3d.html">IConvectionShapes3d</a> <a href="NoUpwind3d.html">NoUpwind3d</a> <br><table><tr><td colspan=2><h3>NoUpwind Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NoUpwind3d ()</td></tr><tr><td><br></td></tr></table>
constructor
NoUpwind3d

NoUpwind3d ()
NoUpwind3d ()<br>Constructor of class <b>NoUpwind3d</b><br>Registry Group: <b>/ug4/SpatialDisc/Upwind</b>
;
class
NonlinearElastoPlasticity1d
LinProjElementEvaluator1d IElemDisc1d 
Classgroup <b>NonlinearElastoPlasticity</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="LinProjElementEvaluator1d.html">LinProjElementEvaluator1d</a> <a href="IElemDisc1d.html">IElemDisc1d</a> <a href="NonlinearElastoPlasticity1d.html">NonlinearElastoPlasticity1d</a> <br><table><tr><td colspan=2><h3>NonlinearElastoPlasticity Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NonlinearElastoPlasticity1d (c_string Function, c_string Subsets)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NonlinearElastoPlasticity Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>close_gnuplot_file ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init_state_variables (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>necking_radius (bool , bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>open_gnuplot_file ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_elasticity_tensor_formulation (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mat_response (SmartPtr&lt;<a href="IStressMaterialResponse2d.html">IStressMaterialResponse</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_quad_order (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_tangent_accuracy (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_volume_forces (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Force field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_volume_forces (number F)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_volume_forces (number F_x, F_y, number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_volume_forces (number F_x, F_y, F_z, number , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_volume_forces (c_string Force field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>stress_eigenvalues_at (number , number , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>write_gnuplot_output (number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
NonlinearElastoPlasticity1d

NonlinearElastoPlasticity1d (c_string Function, c_string Subsets)
NonlinearElastoPlasticity1d (c_string Function, c_string Subsets)<br>Constructor of class <b>NonlinearElastoPlasticity1d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_quad_order
void
void set_quad_order (size_t )
void set_quad_order (size_t )<br><br>Member function of class <b>NonlinearElastoPlasticity1d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_volume_forces
void
void set_volume_forces (SmartPtr<UserVector> Force field)
void set_volume_forces (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Force field)<br><br>Member function of class <b>NonlinearElastoPlasticity1d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_volume_forces
void
void set_volume_forces (number F)
void set_volume_forces (number F)<br><br>Member function of class <b>NonlinearElastoPlasticity1d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_volume_forces
void
void set_volume_forces (number F_x, F_y, number )
void set_volume_forces (number F_x, F_y, number )<br><br>Member function of class <b>NonlinearElastoPlasticity1d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_volume_forces
void
void set_volume_forces (number F_x, F_y, F_z, number , number )
void set_volume_forces (number F_x, F_y, F_z, number , number )<br><br>Member function of class <b>NonlinearElastoPlasticity1d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_volume_forces
void
void set_volume_forces (c_string Force field)
void set_volume_forces (c_string Force field)<br><br>Member function of class <b>NonlinearElastoPlasticity1d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_mat_response
void
void set_mat_response (SmartPtr<IStressMaterialResponse> )
void set_mat_response (SmartPtr&lt;<a href="IStressMaterialResponse2d.html">IStressMaterialResponse</a>&gt; )<br><br>Member function of class <b>NonlinearElastoPlasticity1d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_elasticity_tensor_formulation
void
void set_elasticity_tensor_formulation (size_t )
void set_elasticity_tensor_formulation (size_t )<br><br>Member function of class <b>NonlinearElastoPlasticity1d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_tangent_accuracy
void
void set_tangent_accuracy (number )
void set_tangent_accuracy (number )<br><br>Member function of class <b>NonlinearElastoPlasticity1d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
init_state_variables
void
void init_state_variables (size_t )
void init_state_variables (size_t )<br><br>Member function of class <b>NonlinearElastoPlasticity1d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
stress_eigenvalues_at
void
void stress_eigenvalues_at (number , number , number )
void stress_eigenvalues_at (number , number , number )<br><br>Member function of class <b>NonlinearElastoPlasticity1d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
necking_radius
void
void necking_radius (bool , bool )
void necking_radius (bool , bool )<br><br>Member function of class <b>NonlinearElastoPlasticity1d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
write_gnuplot_output
void
void write_gnuplot_output (number )
void write_gnuplot_output (number )<br><br>Member function of class <b>NonlinearElastoPlasticity1d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
open_gnuplot_file
void
void open_gnuplot_file ()
void open_gnuplot_file ()<br><br>Member function of class <b>NonlinearElastoPlasticity1d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
close_gnuplot_file
void
void close_gnuplot_file ()
void close_gnuplot_file ()<br><br>Member function of class <b>NonlinearElastoPlasticity1d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
;
class
NonlinearElastoPlasticity2d
LinProjElementEvaluator2d IElemDisc2d 
Classgroup <b>NonlinearElastoPlasticity</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator2d</a> <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="NonlinearElastoPlasticity2d.html">NonlinearElastoPlasticity2d</a> <br><table><tr><td colspan=2><h3>NonlinearElastoPlasticity Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NonlinearElastoPlasticity2d (c_string Function, c_string Subsets)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NonlinearElastoPlasticity Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>close_gnuplot_file ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init_state_variables (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>necking_radius (bool , bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>open_gnuplot_file ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_elasticity_tensor_formulation (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mat_response (SmartPtr&lt;<a href="IStressMaterialResponse2d.html">IStressMaterialResponse</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_quad_order (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_tangent_accuracy (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_volume_forces (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Force field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_volume_forces (number F)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_volume_forces (number F_x, F_y, number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_volume_forces (number F_x, F_y, F_z, number , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_volume_forces (c_string Force field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>stress_eigenvalues_at (number , number , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>write_gnuplot_output (number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
NonlinearElastoPlasticity2d

NonlinearElastoPlasticity2d (c_string Function, c_string Subsets)
NonlinearElastoPlasticity2d (c_string Function, c_string Subsets)<br>Constructor of class <b>NonlinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_quad_order
void
void set_quad_order (size_t )
void set_quad_order (size_t )<br><br>Member function of class <b>NonlinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_volume_forces
void
void set_volume_forces (SmartPtr<UserVector> Force field)
void set_volume_forces (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Force field)<br><br>Member function of class <b>NonlinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_volume_forces
void
void set_volume_forces (number F)
void set_volume_forces (number F)<br><br>Member function of class <b>NonlinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_volume_forces
void
void set_volume_forces (number F_x, F_y, number )
void set_volume_forces (number F_x, F_y, number )<br><br>Member function of class <b>NonlinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_volume_forces
void
void set_volume_forces (number F_x, F_y, F_z, number , number )
void set_volume_forces (number F_x, F_y, F_z, number , number )<br><br>Member function of class <b>NonlinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_volume_forces
void
void set_volume_forces (c_string Force field)
void set_volume_forces (c_string Force field)<br><br>Member function of class <b>NonlinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_mat_response
void
void set_mat_response (SmartPtr<IStressMaterialResponse> )
void set_mat_response (SmartPtr&lt;<a href="IStressMaterialResponse2d.html">IStressMaterialResponse</a>&gt; )<br><br>Member function of class <b>NonlinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_elasticity_tensor_formulation
void
void set_elasticity_tensor_formulation (size_t )
void set_elasticity_tensor_formulation (size_t )<br><br>Member function of class <b>NonlinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_tangent_accuracy
void
void set_tangent_accuracy (number )
void set_tangent_accuracy (number )<br><br>Member function of class <b>NonlinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
init_state_variables
void
void init_state_variables (size_t )
void init_state_variables (size_t )<br><br>Member function of class <b>NonlinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
stress_eigenvalues_at
void
void stress_eigenvalues_at (number , number , number )
void stress_eigenvalues_at (number , number , number )<br><br>Member function of class <b>NonlinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
necking_radius
void
void necking_radius (bool , bool )
void necking_radius (bool , bool )<br><br>Member function of class <b>NonlinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
write_gnuplot_output
void
void write_gnuplot_output (number )
void write_gnuplot_output (number )<br><br>Member function of class <b>NonlinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
open_gnuplot_file
void
void open_gnuplot_file ()
void open_gnuplot_file ()<br><br>Member function of class <b>NonlinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
close_gnuplot_file
void
void close_gnuplot_file ()
void close_gnuplot_file ()<br><br>Member function of class <b>NonlinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
;
class
NonlinearElastoPlasticity3d
LinProjElementEvaluator3d IElemDisc3d 
Classgroup <b>NonlinearElastoPlasticity</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="LinProjElementEvaluator3d.html">LinProjElementEvaluator3d</a> <a href="IElemDisc3d.html">IElemDisc3d</a> <a href="NonlinearElastoPlasticity3d.html">NonlinearElastoPlasticity3d</a> <br><table><tr><td colspan=2><h3>NonlinearElastoPlasticity Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NonlinearElastoPlasticity3d (c_string Function, c_string Subsets)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NonlinearElastoPlasticity Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>close_gnuplot_file ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init_state_variables (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>necking_radius (bool , bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>open_gnuplot_file ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_elasticity_tensor_formulation (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mat_response (SmartPtr&lt;<a href="IStressMaterialResponse2d.html">IStressMaterialResponse</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_quad_order (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_tangent_accuracy (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_volume_forces (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Force field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_volume_forces (number F)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_volume_forces (number F_x, F_y, number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_volume_forces (number F_x, F_y, F_z, number , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_volume_forces (c_string Force field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>stress_eigenvalues_at (number , number , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>write_gnuplot_output (number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
NonlinearElastoPlasticity3d

NonlinearElastoPlasticity3d (c_string Function, c_string Subsets)
NonlinearElastoPlasticity3d (c_string Function, c_string Subsets)<br>Constructor of class <b>NonlinearElastoPlasticity3d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_quad_order
void
void set_quad_order (size_t )
void set_quad_order (size_t )<br><br>Member function of class <b>NonlinearElastoPlasticity3d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_volume_forces
void
void set_volume_forces (SmartPtr<UserVector> Force field)
void set_volume_forces (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Force field)<br><br>Member function of class <b>NonlinearElastoPlasticity3d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_volume_forces
void
void set_volume_forces (number F)
void set_volume_forces (number F)<br><br>Member function of class <b>NonlinearElastoPlasticity3d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_volume_forces
void
void set_volume_forces (number F_x, F_y, number )
void set_volume_forces (number F_x, F_y, number )<br><br>Member function of class <b>NonlinearElastoPlasticity3d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_volume_forces
void
void set_volume_forces (number F_x, F_y, F_z, number , number )
void set_volume_forces (number F_x, F_y, F_z, number , number )<br><br>Member function of class <b>NonlinearElastoPlasticity3d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_volume_forces
void
void set_volume_forces (c_string Force field)
void set_volume_forces (c_string Force field)<br><br>Member function of class <b>NonlinearElastoPlasticity3d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_mat_response
void
void set_mat_response (SmartPtr<IStressMaterialResponse> )
void set_mat_response (SmartPtr&lt;<a href="IStressMaterialResponse2d.html">IStressMaterialResponse</a>&gt; )<br><br>Member function of class <b>NonlinearElastoPlasticity3d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_elasticity_tensor_formulation
void
void set_elasticity_tensor_formulation (size_t )
void set_elasticity_tensor_formulation (size_t )<br><br>Member function of class <b>NonlinearElastoPlasticity3d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_tangent_accuracy
void
void set_tangent_accuracy (number )
void set_tangent_accuracy (number )<br><br>Member function of class <b>NonlinearElastoPlasticity3d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
init_state_variables
void
void init_state_variables (size_t )
void init_state_variables (size_t )<br><br>Member function of class <b>NonlinearElastoPlasticity3d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
stress_eigenvalues_at
void
void stress_eigenvalues_at (number , number , number )
void stress_eigenvalues_at (number , number , number )<br><br>Member function of class <b>NonlinearElastoPlasticity3d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
necking_radius
void
void necking_radius (bool , bool )
void necking_radius (bool , bool )<br><br>Member function of class <b>NonlinearElastoPlasticity3d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
write_gnuplot_output
void
void write_gnuplot_output (number )
void write_gnuplot_output (number )<br><br>Member function of class <b>NonlinearElastoPlasticity3d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
open_gnuplot_file
void
void open_gnuplot_file ()
void open_gnuplot_file ()<br><br>Member function of class <b>NonlinearElastoPlasticity3d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
close_gnuplot_file
void
void close_gnuplot_file ()
void close_gnuplot_file ()<br><br>Member function of class <b>NonlinearElastoPlasticity3d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
;
class
OneSideP1Constraints1dCPU1
IConstraintCPU1 IDomainConstraint1dCPU1 
Classgroup <b>OneSideP1Constraints</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU1;</b><br>Inheritance: <a href="IConstraintCPU1.html">IConstraintCPU1</a> <a href="IDomainConstraint1dCPU1.html">IDomainConstraint1dCPU1</a> <a href="OneSideP1Constraints1dCPU1.html">OneSideP1Constraints1dCPU1</a> <br><table><tr><td colspan=2><h3>OneSideP1Constraints Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>OneSideP1Constraints1dCPU1 ()</td></tr><tr><td><br></td></tr></table>
constructor
OneSideP1Constraints1dCPU1

OneSideP1Constraints1dCPU1 ()
OneSideP1Constraints1dCPU1 ()<br>Constructor of class <b>OneSideP1Constraints1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
OneSideP1Constraints1dCPU2
IConstraintCPU2 IDomainConstraint1dCPU2 
Classgroup <b>OneSideP1Constraints</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU2;</b><br>Inheritance: <a href="IConstraintCPU2.html">IConstraintCPU2</a> <a href="IDomainConstraint1dCPU2.html">IDomainConstraint1dCPU2</a> <a href="OneSideP1Constraints1dCPU2.html">OneSideP1Constraints1dCPU2</a> <br><table><tr><td colspan=2><h3>OneSideP1Constraints Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>OneSideP1Constraints1dCPU2 ()</td></tr><tr><td><br></td></tr></table>
constructor
OneSideP1Constraints1dCPU2

OneSideP1Constraints1dCPU2 ()
OneSideP1Constraints1dCPU2 ()<br>Constructor of class <b>OneSideP1Constraints1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
OneSideP1Constraints1dCPU3
IConstraintCPU3 IDomainConstraint1dCPU3 
Classgroup <b>OneSideP1Constraints</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU3;</b><br>Inheritance: <a href="IConstraintCPU3.html">IConstraintCPU3</a> <a href="IDomainConstraint1dCPU3.html">IDomainConstraint1dCPU3</a> <a href="OneSideP1Constraints1dCPU3.html">OneSideP1Constraints1dCPU3</a> <br><table><tr><td colspan=2><h3>OneSideP1Constraints Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>OneSideP1Constraints1dCPU3 ()</td></tr><tr><td><br></td></tr></table>
constructor
OneSideP1Constraints1dCPU3

OneSideP1Constraints1dCPU3 ()
OneSideP1Constraints1dCPU3 ()<br>Constructor of class <b>OneSideP1Constraints1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
OneSideP1Constraints2dCPU1
IConstraintCPU1 IDomainConstraint2dCPU1 
Classgroup <b>OneSideP1Constraints</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU1;</b><br>Inheritance: <a href="IConstraintCPU1.html">IConstraintCPU1</a> <a href="IDomainConstraint2dCPU1.html">IDomainConstraint2dCPU1</a> <a href="OneSideP1Constraints2dCPU1.html">OneSideP1Constraints2dCPU1</a> <br><table><tr><td colspan=2><h3>OneSideP1Constraints Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>OneSideP1Constraints2dCPU1 ()</td></tr><tr><td><br></td></tr></table>
constructor
OneSideP1Constraints2dCPU1

OneSideP1Constraints2dCPU1 ()
OneSideP1Constraints2dCPU1 ()<br>Constructor of class <b>OneSideP1Constraints2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
OneSideP1Constraints2dCPU2
IConstraintCPU2 IDomainConstraint2dCPU2 
Classgroup <b>OneSideP1Constraints</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU2;</b><br>Inheritance: <a href="IConstraintCPU2.html">IConstraintCPU2</a> <a href="IDomainConstraint2dCPU2.html">IDomainConstraint2dCPU2</a> <a href="OneSideP1Constraints2dCPU2.html">OneSideP1Constraints2dCPU2</a> <br><table><tr><td colspan=2><h3>OneSideP1Constraints Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>OneSideP1Constraints2dCPU2 ()</td></tr><tr><td><br></td></tr></table>
constructor
OneSideP1Constraints2dCPU2

OneSideP1Constraints2dCPU2 ()
OneSideP1Constraints2dCPU2 ()<br>Constructor of class <b>OneSideP1Constraints2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
OneSideP1Constraints2dCPU3
IConstraintCPU3 IDomainConstraint2dCPU3 
Classgroup <b>OneSideP1Constraints</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU3;</b><br>Inheritance: <a href="IConstraintCPU3.html">IConstraintCPU3</a> <a href="IDomainConstraint2dCPU3.html">IDomainConstraint2dCPU3</a> <a href="OneSideP1Constraints2dCPU3.html">OneSideP1Constraints2dCPU3</a> <br><table><tr><td colspan=2><h3>OneSideP1Constraints Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>OneSideP1Constraints2dCPU3 ()</td></tr><tr><td><br></td></tr></table>
constructor
OneSideP1Constraints2dCPU3

OneSideP1Constraints2dCPU3 ()
OneSideP1Constraints2dCPU3 ()<br>Constructor of class <b>OneSideP1Constraints2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
OneSideP1Constraints3dCPU1
IConstraintCPU1 IDomainConstraint3dCPU1 
Classgroup <b>OneSideP1Constraints</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU1;</b><br>Inheritance: <a href="IConstraintCPU1.html">IConstraintCPU1</a> <a href="IDomainConstraint3dCPU1.html">IDomainConstraint3dCPU1</a> <a href="OneSideP1Constraints3dCPU1.html">OneSideP1Constraints3dCPU1</a> <br><table><tr><td colspan=2><h3>OneSideP1Constraints Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>OneSideP1Constraints3dCPU1 ()</td></tr><tr><td><br></td></tr></table>
constructor
OneSideP1Constraints3dCPU1

OneSideP1Constraints3dCPU1 ()
OneSideP1Constraints3dCPU1 ()<br>Constructor of class <b>OneSideP1Constraints3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
OneSideP1Constraints3dCPU2
IConstraintCPU2 IDomainConstraint3dCPU2 
Classgroup <b>OneSideP1Constraints</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU2;</b><br>Inheritance: <a href="IConstraintCPU2.html">IConstraintCPU2</a> <a href="IDomainConstraint3dCPU2.html">IDomainConstraint3dCPU2</a> <a href="OneSideP1Constraints3dCPU2.html">OneSideP1Constraints3dCPU2</a> <br><table><tr><td colspan=2><h3>OneSideP1Constraints Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>OneSideP1Constraints3dCPU2 ()</td></tr><tr><td><br></td></tr></table>
constructor
OneSideP1Constraints3dCPU2

OneSideP1Constraints3dCPU2 ()
OneSideP1Constraints3dCPU2 ()<br>Constructor of class <b>OneSideP1Constraints3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
OneSideP1Constraints3dCPU3
IConstraintCPU3 IDomainConstraint3dCPU3 
Classgroup <b>OneSideP1Constraints</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU3;</b><br>Inheritance: <a href="IConstraintCPU3.html">IConstraintCPU3</a> <a href="IDomainConstraint3dCPU3.html">IDomainConstraint3dCPU3</a> <a href="OneSideP1Constraints3dCPU3.html">OneSideP1Constraints3dCPU3</a> <br><table><tr><td colspan=2><h3>OneSideP1Constraints Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>OneSideP1Constraints3dCPU3 ()</td></tr><tr><td><br></td></tr></table>
constructor
OneSideP1Constraints3dCPU3

OneSideP1Constraints3dCPU3 ()
OneSideP1Constraints3dCPU3 ()<br>Constructor of class <b>OneSideP1Constraints3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
OperatorInverseIteratorCPU1
ILinearIteratorCPU1 
Classgroup <b>OperatorInverseIterator</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has constructor.  Tag <b>alg=CPU1;</b><br>Inheritance: <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="OperatorInverseIteratorCPU1.html">OperatorInverseIteratorCPU1</a> <br><table><tr><td colspan=2><h3>OperatorInverseIterator Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>OperatorInverseIteratorCPU1 (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; opInv)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
OperatorInverseIteratorCPU1

OperatorInverseIteratorCPU1 (SmartPtr<ILinearOperatorInverse> opInv)
OperatorInverseIteratorCPU1 (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; opInv)<br>Constructor of class <b>OperatorInverseIteratorCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
;
class
OperatorInverseIteratorCPU2
ILinearIteratorCPU2 
Classgroup <b>OperatorInverseIterator</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has constructor.  Tag <b>alg=CPU2;</b><br>Inheritance: <a href="ILinearIteratorCPU2.html">ILinearIteratorCPU2</a> <a href="OperatorInverseIteratorCPU2.html">OperatorInverseIteratorCPU2</a> <br><table><tr><td colspan=2><h3>OperatorInverseIterator Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>OperatorInverseIteratorCPU2 (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; opInv)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
OperatorInverseIteratorCPU2

OperatorInverseIteratorCPU2 (SmartPtr<ILinearOperatorInverse> opInv)
OperatorInverseIteratorCPU2 (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; opInv)<br>Constructor of class <b>OperatorInverseIteratorCPU2</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
;
class
OperatorInverseIteratorCPU3
ILinearIteratorCPU3 
Classgroup <b>OperatorInverseIterator</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has constructor.  Tag <b>alg=CPU3;</b><br>Inheritance: <a href="ILinearIteratorCPU3.html">ILinearIteratorCPU3</a> <a href="OperatorInverseIteratorCPU3.html">OperatorInverseIteratorCPU3</a> <br><table><tr><td colspan=2><h3>OperatorInverseIterator Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>OperatorInverseIteratorCPU3 (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; opInv)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
OperatorInverseIteratorCPU3

OperatorInverseIteratorCPU3 (SmartPtr<ILinearOperatorInverse> opInv)
OperatorInverseIteratorCPU3 (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; opInv)<br>Constructor of class <b>OperatorInverseIteratorCPU3</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
;
class
P1LocalTransferCPU1
ILocalTransfer ILocalTransferAlgebraCPU1 
Classgroup <b>P1LocalTransfer</b><br>Registry Group: <b></b><br>class has constructor.  Tag <b>alg=CPU1;</b><br>Inheritance: <a href="ILocalTransfer.html">ILocalTransfer</a> <a href="ILocalTransferAlgebraCPU1.html">ILocalTransferAlgebraCPU1</a> <a href="P1LocalTransferCPU1.html">P1LocalTransferCPU1</a> <br><table><tr><td colspan=2><h3>P1LocalTransfer Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>P1LocalTransferCPU1 (size_t fct)</td></tr><tr><td><br></td></tr></table>
constructor
P1LocalTransferCPU1

P1LocalTransferCPU1 (size_t fct)
P1LocalTransferCPU1 (size_t fct)<br>Constructor of class <b>P1LocalTransferCPU1</b>
;
class
P1LocalTransferCPU2
ILocalTransfer ILocalTransferAlgebraCPU2 
Classgroup <b>P1LocalTransfer</b><br>Registry Group: <b></b><br>class has constructor.  Tag <b>alg=CPU2;</b><br>Inheritance: <a href="ILocalTransfer.html">ILocalTransfer</a> <a href="ILocalTransferAlgebraCPU2.html">ILocalTransferAlgebraCPU2</a> <a href="P1LocalTransferCPU2.html">P1LocalTransferCPU2</a> <br><table><tr><td colspan=2><h3>P1LocalTransfer Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>P1LocalTransferCPU2 (size_t fct)</td></tr><tr><td><br></td></tr></table>
constructor
P1LocalTransferCPU2

P1LocalTransferCPU2 (size_t fct)
P1LocalTransferCPU2 (size_t fct)<br>Constructor of class <b>P1LocalTransferCPU2</b>
;
class
P1LocalTransferCPU3
ILocalTransfer ILocalTransferAlgebraCPU3 
Classgroup <b>P1LocalTransfer</b><br>Registry Group: <b></b><br>class has constructor.  Tag <b>alg=CPU3;</b><br>Inheritance: <a href="ILocalTransfer.html">ILocalTransfer</a> <a href="ILocalTransferAlgebraCPU3.html">ILocalTransferAlgebraCPU3</a> <a href="P1LocalTransferCPU3.html">P1LocalTransferCPU3</a> <br><table><tr><td colspan=2><h3>P1LocalTransfer Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>P1LocalTransferCPU3 (size_t fct)</td></tr><tr><td><br></td></tr></table>
constructor
P1LocalTransferCPU3

P1LocalTransferCPU3 (size_t fct)
P1LocalTransferCPU3 (size_t fct)<br>Constructor of class <b>P1LocalTransferCPU3</b>
;
class
ParallelHangingNodeRefiner_MultiGrid
IRefiner HangingNodeRefiner_MultiGrid 
Registry Group: <b>/ug4/Grid</b><br>class has constructor. <br>Inheritance: <a href="IRefiner.html">IRefiner</a> <a href="HangingNodeRefiner_MultiGrid.html">HangingNodeRefiner_MultiGrid</a> <a href="ParallelHangingNodeRefiner_MultiGrid.html">ParallelHangingNodeRefiner_MultiGrid</a> <br><table><tr><td colspan=2><h3>ParallelHangingNodeRefiner_MultiGrid Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ParallelHangingNodeRefiner_MultiGrid ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>HangingNodeRefiner_MultiGrid Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>HangingNodeRefiner_MultiGrid ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited HangingNodeRefiner_MultiGrid Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assign_grid (<a href="MultiGrid.html">MultiGrid</a> *mg)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IRefiner Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear_marks ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>coarsen ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>refine ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>save_marks_to_file (c_string filename)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_adjusted_marks_debug_filename (c_string filename)</td></tr><tr><td><br></td></tr></table>
constructor
ParallelHangingNodeRefiner_MultiGrid

ParallelHangingNodeRefiner_MultiGrid ()
ParallelHangingNodeRefiner_MultiGrid ()<br>Constructor of class <b>ParallelHangingNodeRefiner_MultiGrid</b><br>Registry Group: <b>/ug4/Grid</b>
;
class
PartialUpwind1d
IConvectionShapes1d 
Classgroup <b>PartialUpwind</b><br>Registry Group: <b>/ug4/SpatialDisc/Upwind</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="IConvectionShapes1d.html">IConvectionShapes1d</a> <a href="PartialUpwind1d.html">PartialUpwind1d</a> <br><table><tr><td colspan=2><h3>PartialUpwind Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>PartialUpwind1d ()</td></tr><tr><td><br></td></tr></table>
constructor
PartialUpwind1d

PartialUpwind1d ()
PartialUpwind1d ()<br>Constructor of class <b>PartialUpwind1d</b><br>Registry Group: <b>/ug4/SpatialDisc/Upwind</b>
;
class
PartialUpwind2d
IConvectionShapes2d 
Classgroup <b>PartialUpwind</b><br>Registry Group: <b>/ug4/SpatialDisc/Upwind</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IConvectionShapes2d.html">IConvectionShapes2d</a> <a href="PartialUpwind2d.html">PartialUpwind2d</a> <br><table><tr><td colspan=2><h3>PartialUpwind Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>PartialUpwind2d ()</td></tr><tr><td><br></td></tr></table>
constructor
PartialUpwind2d

PartialUpwind2d ()
PartialUpwind2d ()<br>Constructor of class <b>PartialUpwind2d</b><br>Registry Group: <b>/ug4/SpatialDisc/Upwind</b>
;
class
PartialUpwind3d
IConvectionShapes3d 
Classgroup <b>PartialUpwind</b><br>Registry Group: <b>/ug4/SpatialDisc/Upwind</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IConvectionShapes3d.html">IConvectionShapes3d</a> <a href="PartialUpwind3d.html">PartialUpwind3d</a> <br><table><tr><td colspan=2><h3>PartialUpwind Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>PartialUpwind3d ()</td></tr><tr><td><br></td></tr></table>
constructor
PartialUpwind3d

PartialUpwind3d ()
PartialUpwind3d ()<br>Constructor of class <b>PartialUpwind3d</b><br>Registry Group: <b>/ug4/SpatialDisc/Upwind</b>
;
class
Particle1dCPU1
ILocalToGlobalMapperCPU1 IConstraintCPU1 IDomainConstraint1dCPU1 
Classgroup <b>Particle</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU1;</b><br>Inheritance: <a href="ILocalToGlobalMapperCPU1.html">ILocalToGlobalMapperCPU1</a> <a href="IConstraintCPU1.html">IConstraintCPU1</a> <a href="IDomainConstraint1dCPU1.html">IDomainConstraint1dCPU1</a> <a href="Particle1dCPU1.html">Particle1dCPU1</a> <br><table><tr><td colspan=2><h3>Particle Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>Particle1dCPU1 (SmartPtr&lt;<a href=".html"></a>&gt; domain disc, grid function, c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Particle Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , const <a href="Vec1d.html">Vec</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; , SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>setInnerBndCond (const <a href="Vec1d.html">Vec</a> *, const <a href="Vec1d.html">Vec</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_DefectComputationByHand (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_ExtrapolationMode (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_Gravity (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_IntegrationBorder (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_NormalAdaption (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_RotationAssemblingAtIP (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_outputFile (c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (const <a href="VectorCPU1.html">Vector</a> *, number )</td></tr><tr><td><br></td></tr></table>
constructor
Particle1dCPU1

Particle1dCPU1 (SmartPtr<> domain disc, grid function, c_string )
Particle1dCPU1 (SmartPtr&lt;<a href=".html"></a>&gt; domain disc, grid function, c_string )<br>Constructor of class <b>Particle1dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
add
void
void add (number , const Vec *)
void add (number , const <a href="Vec1d.html">Vec</a> *)<br><br>Member function of class <b>Particle1dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
setInnerBndCond
void
void setInnerBndCond (const Vec *, const Vec *)
void setInnerBndCond (const <a href="Vec1d.html">Vec</a> *, const <a href="Vec1d.html">Vec</a> *)<br><br>Member function of class <b>Particle1dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_DefectComputationByHand
void
void set_DefectComputationByHand (bool )
void set_DefectComputationByHand (bool )<br><br>Member function of class <b>Particle1dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_IntegrationBorder
void
void set_IntegrationBorder (bool )
void set_IntegrationBorder (bool )<br><br>Member function of class <b>Particle1dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_ExtrapolationMode
void
void set_ExtrapolationMode (bool )
void set_ExtrapolationMode (bool )<br><br>Member function of class <b>Particle1dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_NormalAdaption
void
void set_NormalAdaption (bool )
void set_NormalAdaption (bool )<br><br>Member function of class <b>Particle1dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_RotationAssemblingAtIP
void
void set_RotationAssemblingAtIP (bool )
void set_RotationAssemblingAtIP (bool )<br><br>Member function of class <b>Particle1dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_Gravity
void
void set_Gravity (bool )
void set_Gravity (bool )<br><br>Member function of class <b>Particle1dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
clear
void
void clear ()
void clear ()<br><br>Member function of class <b>Particle1dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
init
bool
bool init (SmartPtr<ApproximationSpace> , SmartPtr<IAssemble> )
bool init (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; , SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; )<br><br>Member function of class <b>Particle1dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
update
bool
bool update (const Vector *, number )
bool update (const <a href="VectorCPU1.html">Vector</a> *, number )<br><br>Member function of class <b>Particle1dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_outputFile
void
void set_outputFile (c_string )
void set_outputFile (c_string )<br><br>Member function of class <b>Particle1dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
;
class
Particle1dCPU2
ILocalToGlobalMapperCPU2 IConstraintCPU2 IDomainConstraint1dCPU2 
Classgroup <b>Particle</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU2;</b><br>Inheritance: <a href="ILocalToGlobalMapperCPU2.html">ILocalToGlobalMapperCPU2</a> <a href="IConstraintCPU2.html">IConstraintCPU2</a> <a href="IDomainConstraint1dCPU2.html">IDomainConstraint1dCPU2</a> <a href="Particle1dCPU2.html">Particle1dCPU2</a> <br><table><tr><td colspan=2><h3>Particle Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>Particle1dCPU2 (SmartPtr&lt;<a href=".html"></a>&gt; domain disc, grid function, c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Particle Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , const <a href="Vec1d.html">Vec</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; , SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>setInnerBndCond (const <a href="Vec1d.html">Vec</a> *, const <a href="Vec1d.html">Vec</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_DefectComputationByHand (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_ExtrapolationMode (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_Gravity (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_IntegrationBorder (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_NormalAdaption (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_RotationAssemblingAtIP (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_outputFile (c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (const <a href="VectorCPU1.html">Vector</a> *, number )</td></tr><tr><td><br></td></tr></table>
constructor
Particle1dCPU2

Particle1dCPU2 (SmartPtr<> domain disc, grid function, c_string )
Particle1dCPU2 (SmartPtr&lt;<a href=".html"></a>&gt; domain disc, grid function, c_string )<br>Constructor of class <b>Particle1dCPU2</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
add
void
void add (number , const Vec *)
void add (number , const <a href="Vec1d.html">Vec</a> *)<br><br>Member function of class <b>Particle1dCPU2</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
setInnerBndCond
void
void setInnerBndCond (const Vec *, const Vec *)
void setInnerBndCond (const <a href="Vec1d.html">Vec</a> *, const <a href="Vec1d.html">Vec</a> *)<br><br>Member function of class <b>Particle1dCPU2</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_DefectComputationByHand
void
void set_DefectComputationByHand (bool )
void set_DefectComputationByHand (bool )<br><br>Member function of class <b>Particle1dCPU2</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_IntegrationBorder
void
void set_IntegrationBorder (bool )
void set_IntegrationBorder (bool )<br><br>Member function of class <b>Particle1dCPU2</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_ExtrapolationMode
void
void set_ExtrapolationMode (bool )
void set_ExtrapolationMode (bool )<br><br>Member function of class <b>Particle1dCPU2</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_NormalAdaption
void
void set_NormalAdaption (bool )
void set_NormalAdaption (bool )<br><br>Member function of class <b>Particle1dCPU2</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_RotationAssemblingAtIP
void
void set_RotationAssemblingAtIP (bool )
void set_RotationAssemblingAtIP (bool )<br><br>Member function of class <b>Particle1dCPU2</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_Gravity
void
void set_Gravity (bool )
void set_Gravity (bool )<br><br>Member function of class <b>Particle1dCPU2</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
clear
void
void clear ()
void clear ()<br><br>Member function of class <b>Particle1dCPU2</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
init
bool
bool init (SmartPtr<ApproximationSpace> , SmartPtr<IAssemble> )
bool init (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; , SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; )<br><br>Member function of class <b>Particle1dCPU2</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
update
bool
bool update (const Vector *, number )
bool update (const <a href="VectorCPU1.html">Vector</a> *, number )<br><br>Member function of class <b>Particle1dCPU2</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_outputFile
void
void set_outputFile (c_string )
void set_outputFile (c_string )<br><br>Member function of class <b>Particle1dCPU2</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
;
class
Particle1dCPU3
ILocalToGlobalMapperCPU3 IConstraintCPU3 IDomainConstraint1dCPU3 
Classgroup <b>Particle</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU3;</b><br>Inheritance: <a href="ILocalToGlobalMapperCPU3.html">ILocalToGlobalMapperCPU3</a> <a href="IConstraintCPU3.html">IConstraintCPU3</a> <a href="IDomainConstraint1dCPU3.html">IDomainConstraint1dCPU3</a> <a href="Particle1dCPU3.html">Particle1dCPU3</a> <br><table><tr><td colspan=2><h3>Particle Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>Particle1dCPU3 (SmartPtr&lt;<a href=".html"></a>&gt; domain disc, grid function, c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Particle Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , const <a href="Vec1d.html">Vec</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; , SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>setInnerBndCond (const <a href="Vec1d.html">Vec</a> *, const <a href="Vec1d.html">Vec</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_DefectComputationByHand (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_ExtrapolationMode (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_Gravity (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_IntegrationBorder (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_NormalAdaption (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_RotationAssemblingAtIP (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_outputFile (c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (const <a href="VectorCPU1.html">Vector</a> *, number )</td></tr><tr><td><br></td></tr></table>
constructor
Particle1dCPU3

Particle1dCPU3 (SmartPtr<> domain disc, grid function, c_string )
Particle1dCPU3 (SmartPtr&lt;<a href=".html"></a>&gt; domain disc, grid function, c_string )<br>Constructor of class <b>Particle1dCPU3</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
add
void
void add (number , const Vec *)
void add (number , const <a href="Vec1d.html">Vec</a> *)<br><br>Member function of class <b>Particle1dCPU3</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
setInnerBndCond
void
void setInnerBndCond (const Vec *, const Vec *)
void setInnerBndCond (const <a href="Vec1d.html">Vec</a> *, const <a href="Vec1d.html">Vec</a> *)<br><br>Member function of class <b>Particle1dCPU3</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_DefectComputationByHand
void
void set_DefectComputationByHand (bool )
void set_DefectComputationByHand (bool )<br><br>Member function of class <b>Particle1dCPU3</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_IntegrationBorder
void
void set_IntegrationBorder (bool )
void set_IntegrationBorder (bool )<br><br>Member function of class <b>Particle1dCPU3</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_ExtrapolationMode
void
void set_ExtrapolationMode (bool )
void set_ExtrapolationMode (bool )<br><br>Member function of class <b>Particle1dCPU3</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_NormalAdaption
void
void set_NormalAdaption (bool )
void set_NormalAdaption (bool )<br><br>Member function of class <b>Particle1dCPU3</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_RotationAssemblingAtIP
void
void set_RotationAssemblingAtIP (bool )
void set_RotationAssemblingAtIP (bool )<br><br>Member function of class <b>Particle1dCPU3</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_Gravity
void
void set_Gravity (bool )
void set_Gravity (bool )<br><br>Member function of class <b>Particle1dCPU3</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
clear
void
void clear ()
void clear ()<br><br>Member function of class <b>Particle1dCPU3</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
init
bool
bool init (SmartPtr<ApproximationSpace> , SmartPtr<IAssemble> )
bool init (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; , SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; )<br><br>Member function of class <b>Particle1dCPU3</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
update
bool
bool update (const Vector *, number )
bool update (const <a href="VectorCPU1.html">Vector</a> *, number )<br><br>Member function of class <b>Particle1dCPU3</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_outputFile
void
void set_outputFile (c_string )
void set_outputFile (c_string )<br><br>Member function of class <b>Particle1dCPU3</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
;
class
Particle2dCPU1
ILocalToGlobalMapperCPU1 IConstraintCPU1 IDomainConstraint2dCPU1 
Classgroup <b>Particle</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU1;</b><br>Inheritance: <a href="ILocalToGlobalMapperCPU1.html">ILocalToGlobalMapperCPU1</a> <a href="IConstraintCPU1.html">IConstraintCPU1</a> <a href="IDomainConstraint2dCPU1.html">IDomainConstraint2dCPU1</a> <a href="Particle2dCPU1.html">Particle2dCPU1</a> <br><table><tr><td colspan=2><h3>Particle Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>Particle2dCPU1 (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; domain disc, grid function, c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Particle Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , const <a href="Vec1d.html">Vec</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; , SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>setInnerBndCond (const <a href="Vec1d.html">Vec</a> *, const <a href="Vec1d.html">Vec</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_DefectComputationByHand (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_ExtrapolationMode (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_Gravity (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_IntegrationBorder (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_NormalAdaption (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_RotationAssemblingAtIP (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_outputFile (c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (const <a href="VectorCPU1.html">Vector</a> *, number )</td></tr><tr><td><br></td></tr></table>
constructor
Particle2dCPU1

Particle2dCPU1 (SmartPtr<NavierStokesBase> domain disc, grid function, c_string )
Particle2dCPU1 (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; domain disc, grid function, c_string )<br>Constructor of class <b>Particle2dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
add
void
void add (number , const Vec *)
void add (number , const <a href="Vec1d.html">Vec</a> *)<br><br>Member function of class <b>Particle2dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
setInnerBndCond
void
void setInnerBndCond (const Vec *, const Vec *)
void setInnerBndCond (const <a href="Vec1d.html">Vec</a> *, const <a href="Vec1d.html">Vec</a> *)<br><br>Member function of class <b>Particle2dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_DefectComputationByHand
void
void set_DefectComputationByHand (bool )
void set_DefectComputationByHand (bool )<br><br>Member function of class <b>Particle2dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_IntegrationBorder
void
void set_IntegrationBorder (bool )
void set_IntegrationBorder (bool )<br><br>Member function of class <b>Particle2dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_ExtrapolationMode
void
void set_ExtrapolationMode (bool )
void set_ExtrapolationMode (bool )<br><br>Member function of class <b>Particle2dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_NormalAdaption
void
void set_NormalAdaption (bool )
void set_NormalAdaption (bool )<br><br>Member function of class <b>Particle2dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_RotationAssemblingAtIP
void
void set_RotationAssemblingAtIP (bool )
void set_RotationAssemblingAtIP (bool )<br><br>Member function of class <b>Particle2dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_Gravity
void
void set_Gravity (bool )
void set_Gravity (bool )<br><br>Member function of class <b>Particle2dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
clear
void
void clear ()
void clear ()<br><br>Member function of class <b>Particle2dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
init
bool
bool init (SmartPtr<ApproximationSpace> , SmartPtr<IAssemble> )
bool init (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; , SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; )<br><br>Member function of class <b>Particle2dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
update
bool
bool update (const Vector *, number )
bool update (const <a href="VectorCPU1.html">Vector</a> *, number )<br><br>Member function of class <b>Particle2dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_outputFile
void
void set_outputFile (c_string )
void set_outputFile (c_string )<br><br>Member function of class <b>Particle2dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
;
class
Particle2dCPU2
ILocalToGlobalMapperCPU2 IConstraintCPU2 IDomainConstraint2dCPU2 
Classgroup <b>Particle</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU2;</b><br>Inheritance: <a href="ILocalToGlobalMapperCPU2.html">ILocalToGlobalMapperCPU2</a> <a href="IConstraintCPU2.html">IConstraintCPU2</a> <a href="IDomainConstraint2dCPU2.html">IDomainConstraint2dCPU2</a> <a href="Particle2dCPU2.html">Particle2dCPU2</a> <br><table><tr><td colspan=2><h3>Particle Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>Particle2dCPU2 (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; domain disc, grid function, c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Particle Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , const <a href="Vec1d.html">Vec</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; , SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>setInnerBndCond (const <a href="Vec1d.html">Vec</a> *, const <a href="Vec1d.html">Vec</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_DefectComputationByHand (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_ExtrapolationMode (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_Gravity (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_IntegrationBorder (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_NormalAdaption (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_RotationAssemblingAtIP (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_outputFile (c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (const <a href="VectorCPU1.html">Vector</a> *, number )</td></tr><tr><td><br></td></tr></table>
constructor
Particle2dCPU2

Particle2dCPU2 (SmartPtr<NavierStokesBase> domain disc, grid function, c_string )
Particle2dCPU2 (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; domain disc, grid function, c_string )<br>Constructor of class <b>Particle2dCPU2</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
add
void
void add (number , const Vec *)
void add (number , const <a href="Vec1d.html">Vec</a> *)<br><br>Member function of class <b>Particle2dCPU2</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
setInnerBndCond
void
void setInnerBndCond (const Vec *, const Vec *)
void setInnerBndCond (const <a href="Vec1d.html">Vec</a> *, const <a href="Vec1d.html">Vec</a> *)<br><br>Member function of class <b>Particle2dCPU2</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_DefectComputationByHand
void
void set_DefectComputationByHand (bool )
void set_DefectComputationByHand (bool )<br><br>Member function of class <b>Particle2dCPU2</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_IntegrationBorder
void
void set_IntegrationBorder (bool )
void set_IntegrationBorder (bool )<br><br>Member function of class <b>Particle2dCPU2</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_ExtrapolationMode
void
void set_ExtrapolationMode (bool )
void set_ExtrapolationMode (bool )<br><br>Member function of class <b>Particle2dCPU2</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_NormalAdaption
void
void set_NormalAdaption (bool )
void set_NormalAdaption (bool )<br><br>Member function of class <b>Particle2dCPU2</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_RotationAssemblingAtIP
void
void set_RotationAssemblingAtIP (bool )
void set_RotationAssemblingAtIP (bool )<br><br>Member function of class <b>Particle2dCPU2</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_Gravity
void
void set_Gravity (bool )
void set_Gravity (bool )<br><br>Member function of class <b>Particle2dCPU2</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
clear
void
void clear ()
void clear ()<br><br>Member function of class <b>Particle2dCPU2</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
init
bool
bool init (SmartPtr<ApproximationSpace> , SmartPtr<IAssemble> )
bool init (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; , SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; )<br><br>Member function of class <b>Particle2dCPU2</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
update
bool
bool update (const Vector *, number )
bool update (const <a href="VectorCPU1.html">Vector</a> *, number )<br><br>Member function of class <b>Particle2dCPU2</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_outputFile
void
void set_outputFile (c_string )
void set_outputFile (c_string )<br><br>Member function of class <b>Particle2dCPU2</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
;
class
Particle2dCPU3
ILocalToGlobalMapperCPU3 IConstraintCPU3 IDomainConstraint2dCPU3 
Classgroup <b>Particle</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU3;</b><br>Inheritance: <a href="ILocalToGlobalMapperCPU3.html">ILocalToGlobalMapperCPU3</a> <a href="IConstraintCPU3.html">IConstraintCPU3</a> <a href="IDomainConstraint2dCPU3.html">IDomainConstraint2dCPU3</a> <a href="Particle2dCPU3.html">Particle2dCPU3</a> <br><table><tr><td colspan=2><h3>Particle Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>Particle2dCPU3 (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; domain disc, grid function, c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Particle Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , const <a href="Vec1d.html">Vec</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; , SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>setInnerBndCond (const <a href="Vec1d.html">Vec</a> *, const <a href="Vec1d.html">Vec</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_DefectComputationByHand (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_ExtrapolationMode (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_Gravity (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_IntegrationBorder (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_NormalAdaption (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_RotationAssemblingAtIP (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_outputFile (c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (const <a href="VectorCPU1.html">Vector</a> *, number )</td></tr><tr><td><br></td></tr></table>
constructor
Particle2dCPU3

Particle2dCPU3 (SmartPtr<NavierStokesBase> domain disc, grid function, c_string )
Particle2dCPU3 (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; domain disc, grid function, c_string )<br>Constructor of class <b>Particle2dCPU3</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
add
void
void add (number , const Vec *)
void add (number , const <a href="Vec1d.html">Vec</a> *)<br><br>Member function of class <b>Particle2dCPU3</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
setInnerBndCond
void
void setInnerBndCond (const Vec *, const Vec *)
void setInnerBndCond (const <a href="Vec1d.html">Vec</a> *, const <a href="Vec1d.html">Vec</a> *)<br><br>Member function of class <b>Particle2dCPU3</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_DefectComputationByHand
void
void set_DefectComputationByHand (bool )
void set_DefectComputationByHand (bool )<br><br>Member function of class <b>Particle2dCPU3</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_IntegrationBorder
void
void set_IntegrationBorder (bool )
void set_IntegrationBorder (bool )<br><br>Member function of class <b>Particle2dCPU3</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_ExtrapolationMode
void
void set_ExtrapolationMode (bool )
void set_ExtrapolationMode (bool )<br><br>Member function of class <b>Particle2dCPU3</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_NormalAdaption
void
void set_NormalAdaption (bool )
void set_NormalAdaption (bool )<br><br>Member function of class <b>Particle2dCPU3</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_RotationAssemblingAtIP
void
void set_RotationAssemblingAtIP (bool )
void set_RotationAssemblingAtIP (bool )<br><br>Member function of class <b>Particle2dCPU3</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_Gravity
void
void set_Gravity (bool )
void set_Gravity (bool )<br><br>Member function of class <b>Particle2dCPU3</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
clear
void
void clear ()
void clear ()<br><br>Member function of class <b>Particle2dCPU3</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
init
bool
bool init (SmartPtr<ApproximationSpace> , SmartPtr<IAssemble> )
bool init (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; , SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; )<br><br>Member function of class <b>Particle2dCPU3</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
update
bool
bool update (const Vector *, number )
bool update (const <a href="VectorCPU1.html">Vector</a> *, number )<br><br>Member function of class <b>Particle2dCPU3</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_outputFile
void
void set_outputFile (c_string )
void set_outputFile (c_string )<br><br>Member function of class <b>Particle2dCPU3</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
;
class
Particle3dCPU1
ILocalToGlobalMapperCPU1 IConstraintCPU1 IDomainConstraint3dCPU1 
Classgroup <b>Particle</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU1;</b><br>Inheritance: <a href="ILocalToGlobalMapperCPU1.html">ILocalToGlobalMapperCPU1</a> <a href="IConstraintCPU1.html">IConstraintCPU1</a> <a href="IDomainConstraint3dCPU1.html">IDomainConstraint3dCPU1</a> <a href="Particle3dCPU1.html">Particle3dCPU1</a> <br><table><tr><td colspan=2><h3>Particle Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>Particle3dCPU1 (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; domain disc, grid function, c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Particle Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , const <a href="Vec1d.html">Vec</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; , SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>setInnerBndCond (const <a href="Vec1d.html">Vec</a> *, const <a href="Vec1d.html">Vec</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_DefectComputationByHand (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_ExtrapolationMode (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_Gravity (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_IntegrationBorder (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_NormalAdaption (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_RotationAssemblingAtIP (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_outputFile (c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (const <a href="VectorCPU1.html">Vector</a> *, number )</td></tr><tr><td><br></td></tr></table>
constructor
Particle3dCPU1

Particle3dCPU1 (SmartPtr<NavierStokesBase> domain disc, grid function, c_string )
Particle3dCPU1 (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; domain disc, grid function, c_string )<br>Constructor of class <b>Particle3dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
add
void
void add (number , const Vec *)
void add (number , const <a href="Vec1d.html">Vec</a> *)<br><br>Member function of class <b>Particle3dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
setInnerBndCond
void
void setInnerBndCond (const Vec *, const Vec *)
void setInnerBndCond (const <a href="Vec1d.html">Vec</a> *, const <a href="Vec1d.html">Vec</a> *)<br><br>Member function of class <b>Particle3dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_DefectComputationByHand
void
void set_DefectComputationByHand (bool )
void set_DefectComputationByHand (bool )<br><br>Member function of class <b>Particle3dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_IntegrationBorder
void
void set_IntegrationBorder (bool )
void set_IntegrationBorder (bool )<br><br>Member function of class <b>Particle3dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_ExtrapolationMode
void
void set_ExtrapolationMode (bool )
void set_ExtrapolationMode (bool )<br><br>Member function of class <b>Particle3dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_NormalAdaption
void
void set_NormalAdaption (bool )
void set_NormalAdaption (bool )<br><br>Member function of class <b>Particle3dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_RotationAssemblingAtIP
void
void set_RotationAssemblingAtIP (bool )
void set_RotationAssemblingAtIP (bool )<br><br>Member function of class <b>Particle3dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_Gravity
void
void set_Gravity (bool )
void set_Gravity (bool )<br><br>Member function of class <b>Particle3dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
clear
void
void clear ()
void clear ()<br><br>Member function of class <b>Particle3dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
init
bool
bool init (SmartPtr<ApproximationSpace> , SmartPtr<IAssemble> )
bool init (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; , SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; )<br><br>Member function of class <b>Particle3dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
update
bool
bool update (const Vector *, number )
bool update (const <a href="VectorCPU1.html">Vector</a> *, number )<br><br>Member function of class <b>Particle3dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_outputFile
void
void set_outputFile (c_string )
void set_outputFile (c_string )<br><br>Member function of class <b>Particle3dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
;
class
Particle3dCPU2
ILocalToGlobalMapperCPU2 IConstraintCPU2 IDomainConstraint3dCPU2 
Classgroup <b>Particle</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU2;</b><br>Inheritance: <a href="ILocalToGlobalMapperCPU2.html">ILocalToGlobalMapperCPU2</a> <a href="IConstraintCPU2.html">IConstraintCPU2</a> <a href="IDomainConstraint3dCPU2.html">IDomainConstraint3dCPU2</a> <a href="Particle3dCPU2.html">Particle3dCPU2</a> <br><table><tr><td colspan=2><h3>Particle Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>Particle3dCPU2 (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; domain disc, grid function, c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Particle Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , const <a href="Vec1d.html">Vec</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; , SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>setInnerBndCond (const <a href="Vec1d.html">Vec</a> *, const <a href="Vec1d.html">Vec</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_DefectComputationByHand (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_ExtrapolationMode (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_Gravity (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_IntegrationBorder (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_NormalAdaption (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_RotationAssemblingAtIP (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_outputFile (c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (const <a href="VectorCPU1.html">Vector</a> *, number )</td></tr><tr><td><br></td></tr></table>
constructor
Particle3dCPU2

Particle3dCPU2 (SmartPtr<NavierStokesBase> domain disc, grid function, c_string )
Particle3dCPU2 (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; domain disc, grid function, c_string )<br>Constructor of class <b>Particle3dCPU2</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
add
void
void add (number , const Vec *)
void add (number , const <a href="Vec1d.html">Vec</a> *)<br><br>Member function of class <b>Particle3dCPU2</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
setInnerBndCond
void
void setInnerBndCond (const Vec *, const Vec *)
void setInnerBndCond (const <a href="Vec1d.html">Vec</a> *, const <a href="Vec1d.html">Vec</a> *)<br><br>Member function of class <b>Particle3dCPU2</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_DefectComputationByHand
void
void set_DefectComputationByHand (bool )
void set_DefectComputationByHand (bool )<br><br>Member function of class <b>Particle3dCPU2</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_IntegrationBorder
void
void set_IntegrationBorder (bool )
void set_IntegrationBorder (bool )<br><br>Member function of class <b>Particle3dCPU2</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_ExtrapolationMode
void
void set_ExtrapolationMode (bool )
void set_ExtrapolationMode (bool )<br><br>Member function of class <b>Particle3dCPU2</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_NormalAdaption
void
void set_NormalAdaption (bool )
void set_NormalAdaption (bool )<br><br>Member function of class <b>Particle3dCPU2</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_RotationAssemblingAtIP
void
void set_RotationAssemblingAtIP (bool )
void set_RotationAssemblingAtIP (bool )<br><br>Member function of class <b>Particle3dCPU2</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_Gravity
void
void set_Gravity (bool )
void set_Gravity (bool )<br><br>Member function of class <b>Particle3dCPU2</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
clear
void
void clear ()
void clear ()<br><br>Member function of class <b>Particle3dCPU2</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
init
bool
bool init (SmartPtr<ApproximationSpace> , SmartPtr<IAssemble> )
bool init (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; , SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; )<br><br>Member function of class <b>Particle3dCPU2</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
update
bool
bool update (const Vector *, number )
bool update (const <a href="VectorCPU1.html">Vector</a> *, number )<br><br>Member function of class <b>Particle3dCPU2</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_outputFile
void
void set_outputFile (c_string )
void set_outputFile (c_string )<br><br>Member function of class <b>Particle3dCPU2</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
;
class
Particle3dCPU3
ILocalToGlobalMapperCPU3 IConstraintCPU3 IDomainConstraint3dCPU3 
Classgroup <b>Particle</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU3;</b><br>Inheritance: <a href="ILocalToGlobalMapperCPU3.html">ILocalToGlobalMapperCPU3</a> <a href="IConstraintCPU3.html">IConstraintCPU3</a> <a href="IDomainConstraint3dCPU3.html">IDomainConstraint3dCPU3</a> <a href="Particle3dCPU3.html">Particle3dCPU3</a> <br><table><tr><td colspan=2><h3>Particle Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>Particle3dCPU3 (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; domain disc, grid function, c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Particle Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , const <a href="Vec1d.html">Vec</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; , SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>setInnerBndCond (const <a href="Vec1d.html">Vec</a> *, const <a href="Vec1d.html">Vec</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_DefectComputationByHand (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_ExtrapolationMode (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_Gravity (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_IntegrationBorder (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_NormalAdaption (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_RotationAssemblingAtIP (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_outputFile (c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (const <a href="VectorCPU1.html">Vector</a> *, number )</td></tr><tr><td><br></td></tr></table>
constructor
Particle3dCPU3

Particle3dCPU3 (SmartPtr<NavierStokesBase> domain disc, grid function, c_string )
Particle3dCPU3 (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; domain disc, grid function, c_string )<br>Constructor of class <b>Particle3dCPU3</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
add
void
void add (number , const Vec *)
void add (number , const <a href="Vec1d.html">Vec</a> *)<br><br>Member function of class <b>Particle3dCPU3</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
setInnerBndCond
void
void setInnerBndCond (const Vec *, const Vec *)
void setInnerBndCond (const <a href="Vec1d.html">Vec</a> *, const <a href="Vec1d.html">Vec</a> *)<br><br>Member function of class <b>Particle3dCPU3</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_DefectComputationByHand
void
void set_DefectComputationByHand (bool )
void set_DefectComputationByHand (bool )<br><br>Member function of class <b>Particle3dCPU3</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_IntegrationBorder
void
void set_IntegrationBorder (bool )
void set_IntegrationBorder (bool )<br><br>Member function of class <b>Particle3dCPU3</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_ExtrapolationMode
void
void set_ExtrapolationMode (bool )
void set_ExtrapolationMode (bool )<br><br>Member function of class <b>Particle3dCPU3</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_NormalAdaption
void
void set_NormalAdaption (bool )
void set_NormalAdaption (bool )<br><br>Member function of class <b>Particle3dCPU3</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_RotationAssemblingAtIP
void
void set_RotationAssemblingAtIP (bool )
void set_RotationAssemblingAtIP (bool )<br><br>Member function of class <b>Particle3dCPU3</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_Gravity
void
void set_Gravity (bool )
void set_Gravity (bool )<br><br>Member function of class <b>Particle3dCPU3</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
clear
void
void clear ()
void clear ()<br><br>Member function of class <b>Particle3dCPU3</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
init
bool
bool init (SmartPtr<ApproximationSpace> , SmartPtr<IAssemble> )
bool init (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; , SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; )<br><br>Member function of class <b>Particle3dCPU3</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
update
bool
bool update (const Vector *, number )
bool update (const <a href="VectorCPU1.html">Vector</a> *, number )<br><br>Member function of class <b>Particle3dCPU3</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_outputFile
void
void set_outputFile (c_string )
void set_outputFile (c_string )<br><br>Member function of class <b>Particle3dCPU3</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
;
class
ParticleTransfer1dCPU1
ITransferOperatorCPU1 
Classgroup <b>ParticleTransfer</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU1;</b><br>Inheritance: <a href="ITransferOperatorCPU1.html">ITransferOperatorCPU1</a> <a href="ParticleTransfer1dCPU1.html">ParticleTransfer1dCPU1</a> <br><table><tr><td colspan=2><h3>ParticleTransfer Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ParticleTransfer1dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; approxSpace, Particle, SmartPtr&lt;<a href="Particle2dCPU1.html">Particle</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
ParticleTransfer1dCPU1

ParticleTransfer1dCPU1 (SmartPtr<ApproximationSpace> approxSpace, Particle, SmartPtr<Particle> )
ParticleTransfer1dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; approxSpace, Particle, SmartPtr&lt;<a href="Particle2dCPU1.html">Particle</a>&gt; )<br>Constructor of class <b>ParticleTransfer1dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
;
class
ParticleTransfer1dCPU2
ITransferOperatorCPU2 
Classgroup <b>ParticleTransfer</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU2;</b><br>Inheritance: <a href="ITransferOperatorCPU2.html">ITransferOperatorCPU2</a> <a href="ParticleTransfer1dCPU2.html">ParticleTransfer1dCPU2</a> <br><table><tr><td colspan=2><h3>ParticleTransfer Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ParticleTransfer1dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; approxSpace, Particle, SmartPtr&lt;<a href="Particle2dCPU1.html">Particle</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
ParticleTransfer1dCPU2

ParticleTransfer1dCPU2 (SmartPtr<ApproximationSpace> approxSpace, Particle, SmartPtr<Particle> )
ParticleTransfer1dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; approxSpace, Particle, SmartPtr&lt;<a href="Particle2dCPU1.html">Particle</a>&gt; )<br>Constructor of class <b>ParticleTransfer1dCPU2</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
;
class
ParticleTransfer1dCPU3
ITransferOperatorCPU3 
Classgroup <b>ParticleTransfer</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU3;</b><br>Inheritance: <a href="ITransferOperatorCPU3.html">ITransferOperatorCPU3</a> <a href="ParticleTransfer1dCPU3.html">ParticleTransfer1dCPU3</a> <br><table><tr><td colspan=2><h3>ParticleTransfer Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ParticleTransfer1dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; approxSpace, Particle, SmartPtr&lt;<a href="Particle2dCPU1.html">Particle</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
ParticleTransfer1dCPU3

ParticleTransfer1dCPU3 (SmartPtr<ApproximationSpace> approxSpace, Particle, SmartPtr<Particle> )
ParticleTransfer1dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; approxSpace, Particle, SmartPtr&lt;<a href="Particle2dCPU1.html">Particle</a>&gt; )<br>Constructor of class <b>ParticleTransfer1dCPU3</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
;
class
ParticleTransfer2dCPU1
ITransferOperatorCPU1 
Classgroup <b>ParticleTransfer</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU1;</b><br>Inheritance: <a href="ITransferOperatorCPU1.html">ITransferOperatorCPU1</a> <a href="ParticleTransfer2dCPU1.html">ParticleTransfer2dCPU1</a> <br><table><tr><td colspan=2><h3>ParticleTransfer Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ParticleTransfer2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; approxSpace, Particle, SmartPtr&lt;<a href="Particle2dCPU1.html">Particle</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
ParticleTransfer2dCPU1

ParticleTransfer2dCPU1 (SmartPtr<ApproximationSpace> approxSpace, Particle, SmartPtr<Particle> )
ParticleTransfer2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; approxSpace, Particle, SmartPtr&lt;<a href="Particle2dCPU1.html">Particle</a>&gt; )<br>Constructor of class <b>ParticleTransfer2dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
;
class
ParticleTransfer2dCPU2
ITransferOperatorCPU2 
Classgroup <b>ParticleTransfer</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU2;</b><br>Inheritance: <a href="ITransferOperatorCPU2.html">ITransferOperatorCPU2</a> <a href="ParticleTransfer2dCPU2.html">ParticleTransfer2dCPU2</a> <br><table><tr><td colspan=2><h3>ParticleTransfer Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ParticleTransfer2dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; approxSpace, Particle, SmartPtr&lt;<a href="Particle2dCPU1.html">Particle</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
ParticleTransfer2dCPU2

ParticleTransfer2dCPU2 (SmartPtr<ApproximationSpace> approxSpace, Particle, SmartPtr<Particle> )
ParticleTransfer2dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; approxSpace, Particle, SmartPtr&lt;<a href="Particle2dCPU1.html">Particle</a>&gt; )<br>Constructor of class <b>ParticleTransfer2dCPU2</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
;
class
ParticleTransfer2dCPU3
ITransferOperatorCPU3 
Classgroup <b>ParticleTransfer</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU3;</b><br>Inheritance: <a href="ITransferOperatorCPU3.html">ITransferOperatorCPU3</a> <a href="ParticleTransfer2dCPU3.html">ParticleTransfer2dCPU3</a> <br><table><tr><td colspan=2><h3>ParticleTransfer Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ParticleTransfer2dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; approxSpace, Particle, SmartPtr&lt;<a href="Particle2dCPU1.html">Particle</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
ParticleTransfer2dCPU3

ParticleTransfer2dCPU3 (SmartPtr<ApproximationSpace> approxSpace, Particle, SmartPtr<Particle> )
ParticleTransfer2dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; approxSpace, Particle, SmartPtr&lt;<a href="Particle2dCPU1.html">Particle</a>&gt; )<br>Constructor of class <b>ParticleTransfer2dCPU3</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
;
class
ParticleTransfer3dCPU1
ITransferOperatorCPU1 
Classgroup <b>ParticleTransfer</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU1;</b><br>Inheritance: <a href="ITransferOperatorCPU1.html">ITransferOperatorCPU1</a> <a href="ParticleTransfer3dCPU1.html">ParticleTransfer3dCPU1</a> <br><table><tr><td colspan=2><h3>ParticleTransfer Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ParticleTransfer3dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; approxSpace, Particle, SmartPtr&lt;<a href="Particle2dCPU1.html">Particle</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
ParticleTransfer3dCPU1

ParticleTransfer3dCPU1 (SmartPtr<ApproximationSpace> approxSpace, Particle, SmartPtr<Particle> )
ParticleTransfer3dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; approxSpace, Particle, SmartPtr&lt;<a href="Particle2dCPU1.html">Particle</a>&gt; )<br>Constructor of class <b>ParticleTransfer3dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
;
class
ParticleTransfer3dCPU2
ITransferOperatorCPU2 
Classgroup <b>ParticleTransfer</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU2;</b><br>Inheritance: <a href="ITransferOperatorCPU2.html">ITransferOperatorCPU2</a> <a href="ParticleTransfer3dCPU2.html">ParticleTransfer3dCPU2</a> <br><table><tr><td colspan=2><h3>ParticleTransfer Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ParticleTransfer3dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; approxSpace, Particle, SmartPtr&lt;<a href="Particle2dCPU1.html">Particle</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
ParticleTransfer3dCPU2

ParticleTransfer3dCPU2 (SmartPtr<ApproximationSpace> approxSpace, Particle, SmartPtr<Particle> )
ParticleTransfer3dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; approxSpace, Particle, SmartPtr&lt;<a href="Particle2dCPU1.html">Particle</a>&gt; )<br>Constructor of class <b>ParticleTransfer3dCPU2</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
;
class
ParticleTransfer3dCPU3
ITransferOperatorCPU3 
Classgroup <b>ParticleTransfer</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU3;</b><br>Inheritance: <a href="ITransferOperatorCPU3.html">ITransferOperatorCPU3</a> <a href="ParticleTransfer3dCPU3.html">ParticleTransfer3dCPU3</a> <br><table><tr><td colspan=2><h3>ParticleTransfer Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ParticleTransfer3dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; approxSpace, Particle, SmartPtr&lt;<a href="Particle2dCPU1.html">Particle</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
ParticleTransfer3dCPU3

ParticleTransfer3dCPU3 (SmartPtr<ApproximationSpace> approxSpace, Particle, SmartPtr<Particle> )
ParticleTransfer3dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; approxSpace, Particle, SmartPtr&lt;<a href="Particle2dCPU1.html">Particle</a>&gt; )<br>Constructor of class <b>ParticleTransfer3dCPU3</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
;
class
PartitionMap

Registry Group: <b>/ug4/Grid</b><br>class has constructor. <br><table><tr><td colspan=2><h3>PartitionMap Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>PartitionMap ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>PartitionMap Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_target_proc (integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_target_procs (integer , integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top><a href="SubsetHandler.html">SubsetHandler</a> *</td><td class="memItemRight" valign=bottom>get_partition_handler ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_target_proc (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_target_procs ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>shift_target_procs (integer )</td></tr><tr><td><br></td></tr></table>
constructor
PartitionMap

PartitionMap ()
PartitionMap ()<br>Constructor of class <b>PartitionMap</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
clear
void
void clear ()
void clear ()<br><br>Member function of class <b>PartitionMap</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
get_partition_handler
SubsetHandler*
SubsetHandler *get_partition_handler ()
<a href="SubsetHandler.html">SubsetHandler</a> *get_partition_handler ()<br><br>Member function of class <b>PartitionMap</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
add_target_proc
void
void add_target_proc (integer )
void add_target_proc (integer )<br><br>Member function of class <b>PartitionMap</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
add_target_procs
void
void add_target_procs (integer , integer )
void add_target_procs (integer , integer )<br><br>Member function of class <b>PartitionMap</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
num_target_procs
unknown
size_t num_target_procs ()
size_t num_target_procs ()<br><br>Member function of class <b>PartitionMap</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
get_target_proc
integer
integer get_target_proc (size_t )
integer get_target_proc (size_t )<br><br>Member function of class <b>PartitionMap</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
shift_target_procs
void
void shift_target_procs (integer )
void shift_target_procs (integer )<br><br>Member function of class <b>PartitionMap</b><br>Registry Group: <b>/ug4/Grid</b>
;
class
PartitionWeighting

Registry Group: <b>/ug4/Grid</b><br>class has constructor. <br><table><tr><td colspan=2><h3>PartitionWeighting Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>PartitionWeighting ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>PartitionWeighting Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_default_weights (integer hWeight, integer vWeight)</td></tr><tr><td><br></td></tr></table>
constructor
PartitionWeighting

PartitionWeighting ()
PartitionWeighting ()<br>Constructor of class <b>PartitionWeighting</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
set_default_weights
void
void set_default_weights (integer hWeight, integer vWeight)
void set_default_weights (integer hWeight, integer vWeight)<br><br>Member function of class <b>PartitionWeighting</b><br>Registry Group: <b>/ug4/Grid</b>
;
class
Partitioner_Bisection1d
IPartitioner1d 
Classgroup <b>Partitioner_Bisection</b><br>Registry Group: <b>/ug4/LoadBalancing</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="IPartitioner1d.html">IPartitioner1d</a> <a href="Partitioner_Bisection1d.html">Partitioner_Bisection1d</a> <br><table><tr><td colspan=2><h3>Partitioner_Bisection Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>Partitioner_Bisection1d ()</td></tr><tr><td><br></td></tr></table>
constructor
Partitioner_Bisection1d

Partitioner_Bisection1d ()
Partitioner_Bisection1d ()<br>Constructor of class <b>Partitioner_Bisection1d</b><br>Registry Group: <b>/ug4/LoadBalancing</b>
;
class
Partitioner_Bisection2d
IPartitioner2d 
Classgroup <b>Partitioner_Bisection</b><br>Registry Group: <b>/ug4/LoadBalancing</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IPartitioner2d.html">IPartitioner2d</a> <a href="Partitioner_Bisection2d.html">Partitioner_Bisection2d</a> <br><table><tr><td colspan=2><h3>Partitioner_Bisection Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>Partitioner_Bisection2d ()</td></tr><tr><td><br></td></tr></table>
constructor
Partitioner_Bisection2d

Partitioner_Bisection2d ()
Partitioner_Bisection2d ()<br>Constructor of class <b>Partitioner_Bisection2d</b><br>Registry Group: <b>/ug4/LoadBalancing</b>
;
class
Partitioner_Bisection3d
IPartitioner3d 
Classgroup <b>Partitioner_Bisection</b><br>Registry Group: <b>/ug4/LoadBalancing</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IPartitioner3d.html">IPartitioner3d</a> <a href="Partitioner_Bisection3d.html">Partitioner_Bisection3d</a> <br><table><tr><td colspan=2><h3>Partitioner_Bisection Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>Partitioner_Bisection3d ()</td></tr><tr><td><br></td></tr></table>
constructor
Partitioner_Bisection3d

Partitioner_Bisection3d ()
Partitioner_Bisection3d ()<br>Constructor of class <b>Partitioner_Bisection3d</b><br>Registry Group: <b>/ug4/LoadBalancing</b>
;
class
PeriodicBoundaryManager

Registry Group: <b>/ug4/Periodic</b><br>class has constructor. <br><table><tr><td colspan=2><h3>PeriodicBoundaryManager Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>PeriodicBoundaryManager ()</td></tr><tr><td><br></td></tr></table>
constructor
PeriodicBoundaryManager

PeriodicBoundaryManager ()
PeriodicBoundaryManager ()<br>Constructor of class <b>PeriodicBoundaryManager</b><br>Registry Group: <b>/ug4/Periodic</b>
;
class
RSAMGPreconditionerCPU1
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 ILinearIteratorCPU1 IPreconditionerCPU1 AMGBaseCPU1 
Classgroup <b>RSAMGPreconditioner</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b><br>class has constructor.  Tag <b>alg=CPU1;</b><br>Ruge-Stueben Algebraic Multigrid Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="IPreconditionerCPU1.html">IPreconditionerCPU1</a> <a href="AMGBaseCPU1.html">AMGBaseCPU1</a> <a href="RSAMGPreconditionerCPU1.html">RSAMGPreconditionerCPU1</a> <br><table><tr><td colspan=2><h3>RSAMGPreconditioner Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>RSAMGPreconditionerCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>RSAMGPreconditioner Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>disable_aggressive_coarsening ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: disables aggressive coarsening<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>enable_aggressive_coarsening_A (integer nrOfPaths)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: enables aggressive coarsening (A1 or A2) on the first level.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_epsilon_strong (number epsilon_str)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets epsilon_strong, a measure for strong connectivity<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_parallel_coarsening (<a href="IParallelCoarsening.html">IParallelCoarsening</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_prolongation_truncation (number prolongation_tr)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets the truncation of interpolation<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>RSAMGPreconditioner Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_epsilon_strong ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns epsilon_strong<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_prolongation_truncation ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns prolongation_tr<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>is_aggressive_coarsening ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>is_aggressive_coarsening_A (integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>tostring ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited AMGBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check (const <a href="VectorCPU1.html">Vector</a> *x, const <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: performs a check of convergence on all levels<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check2 (const <a href="VectorCPU1.html">Vector</a> *x, const <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: performs a check of convergence on all levels<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check_fsmoothing ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_Y_cycle (integer , number , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_base_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; basesmoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_checkLevel_post_iterations (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_cycle_type (size_t gamma)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets cycle type in multigrid cycle (gamma)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_fsmoothing (bool enable)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_matrix_write_path (c_string matrixWritePath)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: set the path where connectionviewer matrices of the levels are written<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_max_fill_before_base (number fillrate)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets maximal fill rate before base solver is used<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_max_levels (size_t max_levels)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets max nr of AMG levels<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_max_nodes_for_base (size_t maxNrOfNodes)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets the maximal nr of nodes for base solver<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_min_nodes_on_one_processor (size_t minNrOfNodes)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: if the node number on one processor falls below this, agglomerate<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_nr_of_preiterations_at_check (size_t i)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: nr of mg cycles performed before checking<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_postsmooth (size_t nu2)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets nr. of postsmoothing steps (nu2)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_presmooth (size_t nu1)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets nr. of presmoothing steps (nu1)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_one_init (bool b)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_position_provider (<a href="IPositionProvider2d.html">IPositionProvider</a> *prov)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: needed for connectionviewer output<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_position_provider (<a href="IPositionProvider2d.html">IPositionProvider</a> *prov)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: needed for connectionviewer output<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_postsmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; postsmoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_preferred_nodes_on_one_processor (size_t preferredNrOfNodes)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: if we need to agglomerate, ensure all nodes have more than this number of unknowns<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_preiterations_mimum_defect_at_check (number d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: minimum defect for preiterations before checking<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_presmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; presmoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>write_interfaces ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited AMGBase Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_cycle_type ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns cycle type in multigrid cycle (gamma)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>get_fsmoothing ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns f smoothing enabled<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_grid_complexity ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns grid complexity c_G<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: c_G = total number of nodes of all levels divided by number of nodes on level 0<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const <a href="AMGLevelInformationCPU1.html">AMGLevelInformation</a> *</td><td class="memItemRight" valign=bottom>get_level_information (size_t L)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns information about the level L<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_max_fill_before_base ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns maximal fill rate before base solver is used<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_max_levels ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns max nr of AMG levels<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_max_nodes_for_base ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns maximal nr of nodes for base solver<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_min_nodes_on_one_processor ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns minNrOfNodes<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: if the node number on one processor falls below this, agglomerate<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_num_postsmooth ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr. of postsmoothing steps (nu2)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_num_presmooth ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr. of presmoothing steps (nu1)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_operator_complexity ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns operator complexity c_A<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: c_A = total nnz of all matrices divided by nnz of matrix A<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_preferred_nodes_on_one_processor ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns preferredNrOfNodes<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: if we need to agglomerate, ensure all nodes have more than this number of unknowns<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_timing_coarse_solver_setup_ms ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the time spent in the coarse solver setup in ms<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_timing_whole_setup_ms ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the time spent on the whole setup in ms<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_used_levels ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns used nr of AMG levels<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
RSAMGPreconditionerCPU1

RSAMGPreconditionerCPU1 ()
RSAMGPreconditionerCPU1 ()<br>Constructor of class <b>RSAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_epsilon_strong
void
void set_epsilon_strong (number epsilon_str)
void set_epsilon_strong (number epsilon_str)<br><br>Member function of class <b>RSAMGPreconditionerCPU1</b><br>tooltip: sets epsilon_strong, a measure for strong connectivity<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_prolongation_truncation
void
void set_prolongation_truncation (number prolongation_tr)
void set_prolongation_truncation (number prolongation_tr)<br><br>Member function of class <b>RSAMGPreconditionerCPU1</b><br>tooltip: sets the truncation of interpolation<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
enable_aggressive_coarsening_A
void
void enable_aggressive_coarsening_A (integer nrOfPaths)
void enable_aggressive_coarsening_A (integer nrOfPaths)<br><br>Member function of class <b>RSAMGPreconditionerCPU1</b><br>tooltip: enables aggressive coarsening (A1 or A2) on the first level.<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
disable_aggressive_coarsening
void
void disable_aggressive_coarsening ()
void disable_aggressive_coarsening ()<br><br>Member function of class <b>RSAMGPreconditionerCPU1</b><br>tooltip: disables aggressive coarsening<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_parallel_coarsening
void
void set_parallel_coarsening (IParallelCoarsening *)
void set_parallel_coarsening (<a href="IParallelCoarsening.html">IParallelCoarsening</a> *)<br><br>Member function of class <b>RSAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_epsilon_strong
number
number get_epsilon_strong () const
number get_epsilon_strong ()<br><br>Member function of class <b>RSAMGPreconditionerCPU1</b><br>returns epsilon_strong<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_prolongation_truncation
number
number get_prolongation_truncation () const
number get_prolongation_truncation ()<br><br>Member function of class <b>RSAMGPreconditionerCPU1</b><br>returns prolongation_tr<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
tostring
void
void tostring () const
void tostring ()<br><br>Member function of class <b>RSAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
is_aggressive_coarsening
bool
bool is_aggressive_coarsening () const
bool is_aggressive_coarsening ()<br><br>Member function of class <b>RSAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
is_aggressive_coarsening_A
bool
bool is_aggressive_coarsening_A (integer ) const
bool is_aggressive_coarsening_A (integer )<br><br>Member function of class <b>RSAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
;
class
ScaleAddLinkerMatrix1d
ICplUserData1d UserMatrix1d DependentUserDataMatrix1d DataLinkerMatrix1d 
Classgroup <b>ScaleAddLinkerMatrix</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="UserMatrix1d.html">UserMatrix1d</a> <a href="DependentUserDataMatrix1d.html">DependentUserDataMatrix1d</a> <a href="DataLinkerMatrix1d.html">DataLinkerMatrix1d</a> <a href="ScaleAddLinkerMatrix1d.html">ScaleAddLinkerMatrix1d</a> <br><table><tr><td colspan=2><h3>ScaleAddLinkerMatrix Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ScaleAddLinkerMatrix1d ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ScaleAddLinkerMatrix1d (const <a href="ScaleAddLinkerMatrix2d.html">ScaleAddLinkerMatrix</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ScaleAddLinkerMatrix Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserMatrix Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
ScaleAddLinkerMatrix1d

ScaleAddLinkerMatrix1d ()
ScaleAddLinkerMatrix1d ()<br>Constructor of class <b>ScaleAddLinkerMatrix1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
constructor
ScaleAddLinkerMatrix1d

ScaleAddLinkerMatrix1d (const ScaleAddLinkerMatrix *)
ScaleAddLinkerMatrix1d (const <a href="ScaleAddLinkerMatrix2d.html">ScaleAddLinkerMatrix</a> *)<br>Constructor of class <b>ScaleAddLinkerMatrix1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (SmartPtr<UserNumber> , SmartPtr<UserMatrix> )
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; )<br><br>Member function of class <b>ScaleAddLinkerMatrix1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (number , SmartPtr<UserMatrix> )
void add (number , SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; )<br><br>Member function of class <b>ScaleAddLinkerMatrix1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (SmartPtr<UserNumber> , number )
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , number )<br><br>Member function of class <b>ScaleAddLinkerMatrix1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (number , number )
void add (number , number )<br><br>Member function of class <b>ScaleAddLinkerMatrix1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
ScaleAddLinkerMatrix2d
ICplUserData2d UserMatrix2d DependentUserDataMatrix2d DataLinkerMatrix2d 
Classgroup <b>ScaleAddLinkerMatrix</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserMatrix2d.html">UserMatrix2d</a> <a href="DependentUserDataMatrix2d.html">DependentUserDataMatrix2d</a> <a href="DataLinkerMatrix2d.html">DataLinkerMatrix2d</a> <a href="ScaleAddLinkerMatrix2d.html">ScaleAddLinkerMatrix2d</a> <br><table><tr><td colspan=2><h3>ScaleAddLinkerMatrix Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ScaleAddLinkerMatrix2d ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ScaleAddLinkerMatrix2d (const <a href="ScaleAddLinkerMatrix2d.html">ScaleAddLinkerMatrix</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ScaleAddLinkerMatrix Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserMatrix Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
ScaleAddLinkerMatrix2d

ScaleAddLinkerMatrix2d ()
ScaleAddLinkerMatrix2d ()<br>Constructor of class <b>ScaleAddLinkerMatrix2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
constructor
ScaleAddLinkerMatrix2d

ScaleAddLinkerMatrix2d (const ScaleAddLinkerMatrix *)
ScaleAddLinkerMatrix2d (const <a href="ScaleAddLinkerMatrix2d.html">ScaleAddLinkerMatrix</a> *)<br>Constructor of class <b>ScaleAddLinkerMatrix2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (SmartPtr<UserNumber> , SmartPtr<UserMatrix> )
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; )<br><br>Member function of class <b>ScaleAddLinkerMatrix2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (number , SmartPtr<UserMatrix> )
void add (number , SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; )<br><br>Member function of class <b>ScaleAddLinkerMatrix2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (SmartPtr<UserNumber> , number )
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , number )<br><br>Member function of class <b>ScaleAddLinkerMatrix2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (number , number )
void add (number , number )<br><br>Member function of class <b>ScaleAddLinkerMatrix2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
ScaleAddLinkerMatrix3d
ICplUserData3d UserMatrix3d DependentUserDataMatrix3d DataLinkerMatrix3d 
Classgroup <b>ScaleAddLinkerMatrix</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserMatrix3d.html">UserMatrix3d</a> <a href="DependentUserDataMatrix3d.html">DependentUserDataMatrix3d</a> <a href="DataLinkerMatrix3d.html">DataLinkerMatrix3d</a> <a href="ScaleAddLinkerMatrix3d.html">ScaleAddLinkerMatrix3d</a> <br><table><tr><td colspan=2><h3>ScaleAddLinkerMatrix Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ScaleAddLinkerMatrix3d ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ScaleAddLinkerMatrix3d (const <a href="ScaleAddLinkerMatrix2d.html">ScaleAddLinkerMatrix</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ScaleAddLinkerMatrix Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserMatrix Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
ScaleAddLinkerMatrix3d

ScaleAddLinkerMatrix3d ()
ScaleAddLinkerMatrix3d ()<br>Constructor of class <b>ScaleAddLinkerMatrix3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
constructor
ScaleAddLinkerMatrix3d

ScaleAddLinkerMatrix3d (const ScaleAddLinkerMatrix *)
ScaleAddLinkerMatrix3d (const <a href="ScaleAddLinkerMatrix2d.html">ScaleAddLinkerMatrix</a> *)<br>Constructor of class <b>ScaleAddLinkerMatrix3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (SmartPtr<UserNumber> , SmartPtr<UserMatrix> )
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; )<br><br>Member function of class <b>ScaleAddLinkerMatrix3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (number , SmartPtr<UserMatrix> )
void add (number , SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; )<br><br>Member function of class <b>ScaleAddLinkerMatrix3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (SmartPtr<UserNumber> , number )
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , number )<br><br>Member function of class <b>ScaleAddLinkerMatrix3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (number , number )
void add (number , number )<br><br>Member function of class <b>ScaleAddLinkerMatrix3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
ScaleAddLinkerNumber1d
ICplUserData1d UserNumber1d DependentUserDataNumber1d DataLinkerNumber1d 
Classgroup <b>ScaleAddLinkerNumber</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="UserNumber1d.html">UserNumber1d</a> <a href="DependentUserDataNumber1d.html">DependentUserDataNumber1d</a> <a href="DataLinkerNumber1d.html">DataLinkerNumber1d</a> <a href="ScaleAddLinkerNumber1d.html">ScaleAddLinkerNumber1d</a> <br><table><tr><td colspan=2><h3>ScaleAddLinkerNumber Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ScaleAddLinkerNumber1d ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ScaleAddLinkerNumber1d (const <a href="ScaleAddLinkerNumber2d.html">ScaleAddLinkerNumber</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ScaleAddLinkerNumber Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
ScaleAddLinkerNumber1d

ScaleAddLinkerNumber1d ()
ScaleAddLinkerNumber1d ()<br>Constructor of class <b>ScaleAddLinkerNumber1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
constructor
ScaleAddLinkerNumber1d

ScaleAddLinkerNumber1d (const ScaleAddLinkerNumber *)
ScaleAddLinkerNumber1d (const <a href="ScaleAddLinkerNumber2d.html">ScaleAddLinkerNumber</a> *)<br>Constructor of class <b>ScaleAddLinkerNumber1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (SmartPtr<UserNumber> , SmartPtr<UserNumber> )
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>ScaleAddLinkerNumber1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (number , SmartPtr<UserNumber> )
void add (number , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>ScaleAddLinkerNumber1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (SmartPtr<UserNumber> , number )
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , number )<br><br>Member function of class <b>ScaleAddLinkerNumber1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (number , number )
void add (number , number )<br><br>Member function of class <b>ScaleAddLinkerNumber1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
ScaleAddLinkerNumber2d
ICplUserData2d UserNumber2d DependentUserDataNumber2d DataLinkerNumber2d 
Classgroup <b>ScaleAddLinkerNumber</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserNumber2d.html">UserNumber2d</a> <a href="DependentUserDataNumber2d.html">DependentUserDataNumber2d</a> <a href="DataLinkerNumber2d.html">DataLinkerNumber2d</a> <a href="ScaleAddLinkerNumber2d.html">ScaleAddLinkerNumber2d</a> <br><table><tr><td colspan=2><h3>ScaleAddLinkerNumber Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ScaleAddLinkerNumber2d ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ScaleAddLinkerNumber2d (const <a href="ScaleAddLinkerNumber2d.html">ScaleAddLinkerNumber</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ScaleAddLinkerNumber Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
ScaleAddLinkerNumber2d

ScaleAddLinkerNumber2d ()
ScaleAddLinkerNumber2d ()<br>Constructor of class <b>ScaleAddLinkerNumber2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
constructor
ScaleAddLinkerNumber2d

ScaleAddLinkerNumber2d (const ScaleAddLinkerNumber *)
ScaleAddLinkerNumber2d (const <a href="ScaleAddLinkerNumber2d.html">ScaleAddLinkerNumber</a> *)<br>Constructor of class <b>ScaleAddLinkerNumber2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (SmartPtr<UserNumber> , SmartPtr<UserNumber> )
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>ScaleAddLinkerNumber2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (number , SmartPtr<UserNumber> )
void add (number , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>ScaleAddLinkerNumber2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (SmartPtr<UserNumber> , number )
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , number )<br><br>Member function of class <b>ScaleAddLinkerNumber2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (number , number )
void add (number , number )<br><br>Member function of class <b>ScaleAddLinkerNumber2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
ScaleAddLinkerNumber3d
ICplUserData3d UserNumber3d DependentUserDataNumber3d DataLinkerNumber3d 
Classgroup <b>ScaleAddLinkerNumber</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserNumber3d.html">UserNumber3d</a> <a href="DependentUserDataNumber3d.html">DependentUserDataNumber3d</a> <a href="DataLinkerNumber3d.html">DataLinkerNumber3d</a> <a href="ScaleAddLinkerNumber3d.html">ScaleAddLinkerNumber3d</a> <br><table><tr><td colspan=2><h3>ScaleAddLinkerNumber Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ScaleAddLinkerNumber3d ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ScaleAddLinkerNumber3d (const <a href="ScaleAddLinkerNumber2d.html">ScaleAddLinkerNumber</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ScaleAddLinkerNumber Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
ScaleAddLinkerNumber3d

ScaleAddLinkerNumber3d ()
ScaleAddLinkerNumber3d ()<br>Constructor of class <b>ScaleAddLinkerNumber3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
constructor
ScaleAddLinkerNumber3d

ScaleAddLinkerNumber3d (const ScaleAddLinkerNumber *)
ScaleAddLinkerNumber3d (const <a href="ScaleAddLinkerNumber2d.html">ScaleAddLinkerNumber</a> *)<br>Constructor of class <b>ScaleAddLinkerNumber3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (SmartPtr<UserNumber> , SmartPtr<UserNumber> )
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>ScaleAddLinkerNumber3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (number , SmartPtr<UserNumber> )
void add (number , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>ScaleAddLinkerNumber3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (SmartPtr<UserNumber> , number )
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , number )<br><br>Member function of class <b>ScaleAddLinkerNumber3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (number , number )
void add (number , number )<br><br>Member function of class <b>ScaleAddLinkerNumber3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
ScaleAddLinkerTensor41d
ICplUserData1d UserTensor41d DependentUserDataTensor41d DataLinkerTensor41d 
Classgroup <b>ScaleAddLinkerTensor4</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="UserTensor41d.html">UserTensor41d</a> <a href="DependentUserDataTensor41d.html">DependentUserDataTensor41d</a> <a href="DataLinkerTensor41d.html">DataLinkerTensor41d</a> <a href="ScaleAddLinkerTensor41d.html">ScaleAddLinkerTensor41d</a> <br><table><tr><td colspan=2><h3>ScaleAddLinkerTensor4 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ScaleAddLinkerTensor41d ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ScaleAddLinkerTensor41d (const <a href="ScaleAddLinkerTensor42d.html">ScaleAddLinkerTensor4</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ScaleAddLinkerTensor4 Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserTensor42d.html">UserTensor4</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , SmartPtr&lt;<a href="UserTensor42d.html">UserTensor4</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserTensor4 Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
ScaleAddLinkerTensor41d

ScaleAddLinkerTensor41d ()
ScaleAddLinkerTensor41d ()<br>Constructor of class <b>ScaleAddLinkerTensor41d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
constructor
ScaleAddLinkerTensor41d

ScaleAddLinkerTensor41d (const ScaleAddLinkerTensor4 *)
ScaleAddLinkerTensor41d (const <a href="ScaleAddLinkerTensor42d.html">ScaleAddLinkerTensor4</a> *)<br>Constructor of class <b>ScaleAddLinkerTensor41d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (SmartPtr<UserNumber> , SmartPtr<UserTensor4> )
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserTensor42d.html">UserTensor4</a>&gt; )<br><br>Member function of class <b>ScaleAddLinkerTensor41d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (number , SmartPtr<UserTensor4> )
void add (number , SmartPtr&lt;<a href="UserTensor42d.html">UserTensor4</a>&gt; )<br><br>Member function of class <b>ScaleAddLinkerTensor41d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (SmartPtr<UserNumber> , number )
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , number )<br><br>Member function of class <b>ScaleAddLinkerTensor41d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (number , number )
void add (number , number )<br><br>Member function of class <b>ScaleAddLinkerTensor41d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
ScaleAddLinkerTensor42d
ICplUserData2d UserTensor42d DependentUserDataTensor42d DataLinkerTensor42d 
Classgroup <b>ScaleAddLinkerTensor4</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserTensor42d.html">UserTensor42d</a> <a href="DependentUserDataTensor42d.html">DependentUserDataTensor42d</a> <a href="DataLinkerTensor42d.html">DataLinkerTensor42d</a> <a href="ScaleAddLinkerTensor42d.html">ScaleAddLinkerTensor42d</a> <br><table><tr><td colspan=2><h3>ScaleAddLinkerTensor4 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ScaleAddLinkerTensor42d ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ScaleAddLinkerTensor42d (const <a href="ScaleAddLinkerTensor42d.html">ScaleAddLinkerTensor4</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ScaleAddLinkerTensor4 Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserTensor42d.html">UserTensor4</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , SmartPtr&lt;<a href="UserTensor42d.html">UserTensor4</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserTensor4 Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
ScaleAddLinkerTensor42d

ScaleAddLinkerTensor42d ()
ScaleAddLinkerTensor42d ()<br>Constructor of class <b>ScaleAddLinkerTensor42d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
constructor
ScaleAddLinkerTensor42d

ScaleAddLinkerTensor42d (const ScaleAddLinkerTensor4 *)
ScaleAddLinkerTensor42d (const <a href="ScaleAddLinkerTensor42d.html">ScaleAddLinkerTensor4</a> *)<br>Constructor of class <b>ScaleAddLinkerTensor42d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (SmartPtr<UserNumber> , SmartPtr<UserTensor4> )
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserTensor42d.html">UserTensor4</a>&gt; )<br><br>Member function of class <b>ScaleAddLinkerTensor42d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (number , SmartPtr<UserTensor4> )
void add (number , SmartPtr&lt;<a href="UserTensor42d.html">UserTensor4</a>&gt; )<br><br>Member function of class <b>ScaleAddLinkerTensor42d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (SmartPtr<UserNumber> , number )
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , number )<br><br>Member function of class <b>ScaleAddLinkerTensor42d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (number , number )
void add (number , number )<br><br>Member function of class <b>ScaleAddLinkerTensor42d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
ScaleAddLinkerTensor43d
ICplUserData3d UserTensor43d DependentUserDataTensor43d DataLinkerTensor43d 
Classgroup <b>ScaleAddLinkerTensor4</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserTensor43d.html">UserTensor43d</a> <a href="DependentUserDataTensor43d.html">DependentUserDataTensor43d</a> <a href="DataLinkerTensor43d.html">DataLinkerTensor43d</a> <a href="ScaleAddLinkerTensor43d.html">ScaleAddLinkerTensor43d</a> <br><table><tr><td colspan=2><h3>ScaleAddLinkerTensor4 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ScaleAddLinkerTensor43d ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ScaleAddLinkerTensor43d (const <a href="ScaleAddLinkerTensor42d.html">ScaleAddLinkerTensor4</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ScaleAddLinkerTensor4 Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserTensor42d.html">UserTensor4</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , SmartPtr&lt;<a href="UserTensor42d.html">UserTensor4</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserTensor4 Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
ScaleAddLinkerTensor43d

ScaleAddLinkerTensor43d ()
ScaleAddLinkerTensor43d ()<br>Constructor of class <b>ScaleAddLinkerTensor43d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
constructor
ScaleAddLinkerTensor43d

ScaleAddLinkerTensor43d (const ScaleAddLinkerTensor4 *)
ScaleAddLinkerTensor43d (const <a href="ScaleAddLinkerTensor42d.html">ScaleAddLinkerTensor4</a> *)<br>Constructor of class <b>ScaleAddLinkerTensor43d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (SmartPtr<UserNumber> , SmartPtr<UserTensor4> )
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserTensor42d.html">UserTensor4</a>&gt; )<br><br>Member function of class <b>ScaleAddLinkerTensor43d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (number , SmartPtr<UserTensor4> )
void add (number , SmartPtr&lt;<a href="UserTensor42d.html">UserTensor4</a>&gt; )<br><br>Member function of class <b>ScaleAddLinkerTensor43d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (SmartPtr<UserNumber> , number )
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , number )<br><br>Member function of class <b>ScaleAddLinkerTensor43d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (number , number )
void add (number , number )<br><br>Member function of class <b>ScaleAddLinkerTensor43d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
ScaleAddLinkerVector1d
ICplUserData1d UserVector1d DependentUserDataVector1d DataLinkerVector1d 
Classgroup <b>ScaleAddLinkerVector</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="UserVector1d.html">UserVector1d</a> <a href="DependentUserDataVector1d.html">DependentUserDataVector1d</a> <a href="DataLinkerVector1d.html">DataLinkerVector1d</a> <a href="ScaleAddLinkerVector1d.html">ScaleAddLinkerVector1d</a> <br><table><tr><td colspan=2><h3>ScaleAddLinkerVector Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ScaleAddLinkerVector1d ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ScaleAddLinkerVector1d (const <a href="ScaleAddLinkerVector2d.html">ScaleAddLinkerVector</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ScaleAddLinkerVector Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
ScaleAddLinkerVector1d

ScaleAddLinkerVector1d ()
ScaleAddLinkerVector1d ()<br>Constructor of class <b>ScaleAddLinkerVector1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
constructor
ScaleAddLinkerVector1d

ScaleAddLinkerVector1d (const ScaleAddLinkerVector *)
ScaleAddLinkerVector1d (const <a href="ScaleAddLinkerVector2d.html">ScaleAddLinkerVector</a> *)<br>Constructor of class <b>ScaleAddLinkerVector1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (SmartPtr<UserNumber> , SmartPtr<UserVector> )
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; )<br><br>Member function of class <b>ScaleAddLinkerVector1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (number , SmartPtr<UserVector> )
void add (number , SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; )<br><br>Member function of class <b>ScaleAddLinkerVector1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (SmartPtr<UserNumber> , number )
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , number )<br><br>Member function of class <b>ScaleAddLinkerVector1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (number , number )
void add (number , number )<br><br>Member function of class <b>ScaleAddLinkerVector1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
ScaleAddLinkerVector2d
ICplUserData2d UserVector2d DependentUserDataVector2d DataLinkerVector2d 
Classgroup <b>ScaleAddLinkerVector</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserVector2d.html">UserVector2d</a> <a href="DependentUserDataVector2d.html">DependentUserDataVector2d</a> <a href="DataLinkerVector2d.html">DataLinkerVector2d</a> <a href="ScaleAddLinkerVector2d.html">ScaleAddLinkerVector2d</a> <br><table><tr><td colspan=2><h3>ScaleAddLinkerVector Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ScaleAddLinkerVector2d ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ScaleAddLinkerVector2d (const <a href="ScaleAddLinkerVector2d.html">ScaleAddLinkerVector</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ScaleAddLinkerVector Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
ScaleAddLinkerVector2d

ScaleAddLinkerVector2d ()
ScaleAddLinkerVector2d ()<br>Constructor of class <b>ScaleAddLinkerVector2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
constructor
ScaleAddLinkerVector2d

ScaleAddLinkerVector2d (const ScaleAddLinkerVector *)
ScaleAddLinkerVector2d (const <a href="ScaleAddLinkerVector2d.html">ScaleAddLinkerVector</a> *)<br>Constructor of class <b>ScaleAddLinkerVector2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (SmartPtr<UserNumber> , SmartPtr<UserVector> )
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; )<br><br>Member function of class <b>ScaleAddLinkerVector2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (number , SmartPtr<UserVector> )
void add (number , SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; )<br><br>Member function of class <b>ScaleAddLinkerVector2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (SmartPtr<UserNumber> , number )
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , number )<br><br>Member function of class <b>ScaleAddLinkerVector2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (number , number )
void add (number , number )<br><br>Member function of class <b>ScaleAddLinkerVector2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
ScaleAddLinkerVector3d
ICplUserData3d UserVector3d DependentUserDataVector3d DataLinkerVector3d 
Classgroup <b>ScaleAddLinkerVector</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserVector3d.html">UserVector3d</a> <a href="DependentUserDataVector3d.html">DependentUserDataVector3d</a> <a href="DataLinkerVector3d.html">DataLinkerVector3d</a> <a href="ScaleAddLinkerVector3d.html">ScaleAddLinkerVector3d</a> <br><table><tr><td colspan=2><h3>ScaleAddLinkerVector Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ScaleAddLinkerVector3d ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ScaleAddLinkerVector3d (const <a href="ScaleAddLinkerVector2d.html">ScaleAddLinkerVector</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ScaleAddLinkerVector Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
ScaleAddLinkerVector3d

ScaleAddLinkerVector3d ()
ScaleAddLinkerVector3d ()<br>Constructor of class <b>ScaleAddLinkerVector3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
constructor
ScaleAddLinkerVector3d

ScaleAddLinkerVector3d (const ScaleAddLinkerVector *)
ScaleAddLinkerVector3d (const <a href="ScaleAddLinkerVector2d.html">ScaleAddLinkerVector</a> *)<br>Constructor of class <b>ScaleAddLinkerVector3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (SmartPtr<UserNumber> , SmartPtr<UserVector> )
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; )<br><br>Member function of class <b>ScaleAddLinkerVector3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (number , SmartPtr<UserVector> )
void add (number , SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; )<br><br>Member function of class <b>ScaleAddLinkerVector3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (SmartPtr<UserNumber> , number )
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , number )<br><br>Member function of class <b>ScaleAddLinkerVector3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (number , number )
void add (number , number )<br><br>Member function of class <b>ScaleAddLinkerVector3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
Selector
ISelector 
Registry Group: <b>/ug4/Grid</b><br>class has constructor. <br>Inheritance: <a href="ISelector.html">ISelector</a> <a href="Selector.html">Selector</a> <br><table><tr><td colspan=2><h3>Selector Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>Selector (<a href="Grid.html">Grid</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Selector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_edges ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_faces ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_hexahedrons ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_prisms ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_pyramids ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_quadrilaterals ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_tetrahedrons ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_triangles ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_vertices ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_volumes ()</td></tr><tr><td><br></td></tr></table>
constructor
Selector

Selector (Grid *)
Selector (<a href="Grid.html">Grid</a> *)<br>Constructor of class <b>Selector</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
num_vertices
unknown
size_t num_vertices () const
size_t num_vertices ()<br><br>Member function of class <b>Selector</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
num_edges
unknown
size_t num_edges () const
size_t num_edges ()<br><br>Member function of class <b>Selector</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
num_faces
unknown
size_t num_faces () const
size_t num_faces ()<br><br>Member function of class <b>Selector</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
num_triangles
unknown
size_t num_triangles () const
size_t num_triangles ()<br><br>Member function of class <b>Selector</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
num_quadrilaterals
unknown
size_t num_quadrilaterals () const
size_t num_quadrilaterals ()<br><br>Member function of class <b>Selector</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
num_volumes
unknown
size_t num_volumes () const
size_t num_volumes ()<br><br>Member function of class <b>Selector</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
num_tetrahedrons
unknown
size_t num_tetrahedrons () const
size_t num_tetrahedrons ()<br><br>Member function of class <b>Selector</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
num_pyramids
unknown
size_t num_pyramids () const
size_t num_pyramids ()<br><br>Member function of class <b>Selector</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
num_prisms
unknown
size_t num_prisms () const
size_t num_prisms ()<br><br>Member function of class <b>Selector</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
num_hexahedrons
unknown
size_t num_hexahedrons () const
size_t num_hexahedrons ()<br><br>Member function of class <b>Selector</b><br>Registry Group: <b>/ug4/Grid</b>
;
class
SeparatedPressureSource2dCPU1
INewtonUpdate ICplUserData2d UserVector2d 
Classgroup <b>SeparatedPressureSource</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU1;</b><br>Inheritance: <a href="INewtonUpdate.html">INewtonUpdate</a> <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserVector2d.html">UserVector2d</a> <a href="SeparatedPressureSource2dCPU1.html">SeparatedPressureSource2dCPU1</a> <br><table><tr><td colspan=2><h3>SeparatedPressureSource Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>SeparatedPressureSource2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>SeparatedPressureSource Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number F_x)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number F_x, F_y, number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number F_x, F_y, F_z, number , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source Vector)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>update ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
SeparatedPressureSource2dCPU1

SeparatedPressureSource2dCPU1 (SmartPtr<ApproximationSpace> Approximation space, grid function, SmartPtr<GridFunction> )
SeparatedPressureSource2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )<br>Constructor of class <b>SeparatedPressureSource2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_source
void
void set_source (SmartPtr<UserVector> Source)
void set_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Source)<br><br>Member function of class <b>SeparatedPressureSource2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_source
void
void set_source (number F_x)
void set_source (number F_x)<br><br>Member function of class <b>SeparatedPressureSource2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_source
void
void set_source (number F_x, F_y, number )
void set_source (number F_x, F_y, number )<br><br>Member function of class <b>SeparatedPressureSource2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_source
void
void set_source (number F_x, F_y, F_z, number , number )
void set_source (number F_x, F_y, F_z, number , number )<br><br>Member function of class <b>SeparatedPressureSource2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_source
void
void set_source (c_string Source Vector)
void set_source (c_string Source Vector)<br><br>Member function of class <b>SeparatedPressureSource2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
update
void
void update ()
void update ()<br><br>Member function of class <b>SeparatedPressureSource2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
SeparatedPressureSource2dCPU2
INewtonUpdate ICplUserData2d UserVector2d 
Classgroup <b>SeparatedPressureSource</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU2;</b><br>Inheritance: <a href="INewtonUpdate.html">INewtonUpdate</a> <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserVector2d.html">UserVector2d</a> <a href="SeparatedPressureSource2dCPU2.html">SeparatedPressureSource2dCPU2</a> <br><table><tr><td colspan=2><h3>SeparatedPressureSource Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>SeparatedPressureSource2dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>SeparatedPressureSource Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number F_x)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number F_x, F_y, number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number F_x, F_y, F_z, number , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source Vector)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>update ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
SeparatedPressureSource2dCPU2

SeparatedPressureSource2dCPU2 (SmartPtr<ApproximationSpace> Approximation space, grid function, SmartPtr<GridFunction> )
SeparatedPressureSource2dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )<br>Constructor of class <b>SeparatedPressureSource2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_source
void
void set_source (SmartPtr<UserVector> Source)
void set_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Source)<br><br>Member function of class <b>SeparatedPressureSource2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_source
void
void set_source (number F_x)
void set_source (number F_x)<br><br>Member function of class <b>SeparatedPressureSource2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_source
void
void set_source (number F_x, F_y, number )
void set_source (number F_x, F_y, number )<br><br>Member function of class <b>SeparatedPressureSource2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_source
void
void set_source (number F_x, F_y, F_z, number , number )
void set_source (number F_x, F_y, F_z, number , number )<br><br>Member function of class <b>SeparatedPressureSource2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_source
void
void set_source (c_string Source Vector)
void set_source (c_string Source Vector)<br><br>Member function of class <b>SeparatedPressureSource2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
update
void
void update ()
void update ()<br><br>Member function of class <b>SeparatedPressureSource2dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
SeparatedPressureSource2dCPU3
INewtonUpdate ICplUserData2d UserVector2d 
Classgroup <b>SeparatedPressureSource</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU3;</b><br>Inheritance: <a href="INewtonUpdate.html">INewtonUpdate</a> <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserVector2d.html">UserVector2d</a> <a href="SeparatedPressureSource2dCPU3.html">SeparatedPressureSource2dCPU3</a> <br><table><tr><td colspan=2><h3>SeparatedPressureSource Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>SeparatedPressureSource2dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>SeparatedPressureSource Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number F_x)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number F_x, F_y, number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number F_x, F_y, F_z, number , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source Vector)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>update ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
SeparatedPressureSource2dCPU3

SeparatedPressureSource2dCPU3 (SmartPtr<ApproximationSpace> Approximation space, grid function, SmartPtr<GridFunction> )
SeparatedPressureSource2dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )<br>Constructor of class <b>SeparatedPressureSource2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_source
void
void set_source (SmartPtr<UserVector> Source)
void set_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Source)<br><br>Member function of class <b>SeparatedPressureSource2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_source
void
void set_source (number F_x)
void set_source (number F_x)<br><br>Member function of class <b>SeparatedPressureSource2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_source
void
void set_source (number F_x, F_y, number )
void set_source (number F_x, F_y, number )<br><br>Member function of class <b>SeparatedPressureSource2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_source
void
void set_source (number F_x, F_y, F_z, number , number )
void set_source (number F_x, F_y, F_z, number , number )<br><br>Member function of class <b>SeparatedPressureSource2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_source
void
void set_source (c_string Source Vector)
void set_source (c_string Source Vector)<br><br>Member function of class <b>SeparatedPressureSource2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
update
void
void update ()
void update ()<br><br>Member function of class <b>SeparatedPressureSource2dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
SeparatedPressureSource3dCPU1
INewtonUpdate ICplUserData3d UserVector3d 
Classgroup <b>SeparatedPressureSource</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU1;</b><br>Inheritance: <a href="INewtonUpdate.html">INewtonUpdate</a> <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserVector3d.html">UserVector3d</a> <a href="SeparatedPressureSource3dCPU1.html">SeparatedPressureSource3dCPU1</a> <br><table><tr><td colspan=2><h3>SeparatedPressureSource Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>SeparatedPressureSource3dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>SeparatedPressureSource Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number F_x)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number F_x, F_y, number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number F_x, F_y, F_z, number , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source Vector)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>update ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
SeparatedPressureSource3dCPU1

SeparatedPressureSource3dCPU1 (SmartPtr<ApproximationSpace> Approximation space, grid function, SmartPtr<GridFunction> )
SeparatedPressureSource3dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )<br>Constructor of class <b>SeparatedPressureSource3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_source
void
void set_source (SmartPtr<UserVector> Source)
void set_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Source)<br><br>Member function of class <b>SeparatedPressureSource3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_source
void
void set_source (number F_x)
void set_source (number F_x)<br><br>Member function of class <b>SeparatedPressureSource3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_source
void
void set_source (number F_x, F_y, number )
void set_source (number F_x, F_y, number )<br><br>Member function of class <b>SeparatedPressureSource3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_source
void
void set_source (number F_x, F_y, F_z, number , number )
void set_source (number F_x, F_y, F_z, number , number )<br><br>Member function of class <b>SeparatedPressureSource3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_source
void
void set_source (c_string Source Vector)
void set_source (c_string Source Vector)<br><br>Member function of class <b>SeparatedPressureSource3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
update
void
void update ()
void update ()<br><br>Member function of class <b>SeparatedPressureSource3dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
SeparatedPressureSource3dCPU2
INewtonUpdate ICplUserData3d UserVector3d 
Classgroup <b>SeparatedPressureSource</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU2;</b><br>Inheritance: <a href="INewtonUpdate.html">INewtonUpdate</a> <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserVector3d.html">UserVector3d</a> <a href="SeparatedPressureSource3dCPU2.html">SeparatedPressureSource3dCPU2</a> <br><table><tr><td colspan=2><h3>SeparatedPressureSource Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>SeparatedPressureSource3dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>SeparatedPressureSource Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number F_x)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number F_x, F_y, number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number F_x, F_y, F_z, number , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source Vector)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>update ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
SeparatedPressureSource3dCPU2

SeparatedPressureSource3dCPU2 (SmartPtr<ApproximationSpace> Approximation space, grid function, SmartPtr<GridFunction> )
SeparatedPressureSource3dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )<br>Constructor of class <b>SeparatedPressureSource3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_source
void
void set_source (SmartPtr<UserVector> Source)
void set_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Source)<br><br>Member function of class <b>SeparatedPressureSource3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_source
void
void set_source (number F_x)
void set_source (number F_x)<br><br>Member function of class <b>SeparatedPressureSource3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_source
void
void set_source (number F_x, F_y, number )
void set_source (number F_x, F_y, number )<br><br>Member function of class <b>SeparatedPressureSource3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_source
void
void set_source (number F_x, F_y, F_z, number , number )
void set_source (number F_x, F_y, F_z, number , number )<br><br>Member function of class <b>SeparatedPressureSource3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_source
void
void set_source (c_string Source Vector)
void set_source (c_string Source Vector)<br><br>Member function of class <b>SeparatedPressureSource3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
update
void
void update ()
void update ()<br><br>Member function of class <b>SeparatedPressureSource3dCPU2</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
SeparatedPressureSource3dCPU3
INewtonUpdate ICplUserData3d UserVector3d 
Classgroup <b>SeparatedPressureSource</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU3;</b><br>Inheritance: <a href="INewtonUpdate.html">INewtonUpdate</a> <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserVector3d.html">UserVector3d</a> <a href="SeparatedPressureSource3dCPU3.html">SeparatedPressureSource3dCPU3</a> <br><table><tr><td colspan=2><h3>SeparatedPressureSource Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>SeparatedPressureSource3dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>SeparatedPressureSource Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number F_x)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number F_x, F_y, number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number F_x, F_y, F_z, number , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source Vector)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>update ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
SeparatedPressureSource3dCPU3

SeparatedPressureSource3dCPU3 (SmartPtr<ApproximationSpace> Approximation space, grid function, SmartPtr<GridFunction> )
SeparatedPressureSource3dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )<br>Constructor of class <b>SeparatedPressureSource3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_source
void
void set_source (SmartPtr<UserVector> Source)
void set_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Source)<br><br>Member function of class <b>SeparatedPressureSource3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_source
void
void set_source (number F_x)
void set_source (number F_x)<br><br>Member function of class <b>SeparatedPressureSource3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_source
void
void set_source (number F_x, F_y, number )
void set_source (number F_x, F_y, number )<br><br>Member function of class <b>SeparatedPressureSource3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_source
void
void set_source (number F_x, F_y, F_z, number , number )
void set_source (number F_x, F_y, F_z, number , number )<br><br>Member function of class <b>SeparatedPressureSource3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_source
void
void set_source (c_string Source Vector)
void set_source (c_string Source Vector)<br><br>Member function of class <b>SeparatedPressureSource3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
update
void
void update ()
void update ()<br><br>Member function of class <b>SeparatedPressureSource3dCPU3</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
SimoMaterialResponse1d
IStressMaterialResponse1d 
Classgroup <b>SimoMaterialResponse</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="IStressMaterialResponse1d.html">IStressMaterialResponse1d</a> <a href="SimoMaterialResponse1d.html">SimoMaterialResponse1d</a> <br><table><tr><td colspan=2><h3>SimoMaterialResponse Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>SimoMaterialResponse1d ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>SimoMaterialResponse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_hardening_behavior (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>write_data_to_console (number )</td></tr><tr><td><br></td></tr></table>
constructor
SimoMaterialResponse1d

SimoMaterialResponse1d ()
SimoMaterialResponse1d ()<br>Constructor of class <b>SimoMaterialResponse1d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_hardening_behavior
void
void set_hardening_behavior (size_t )
void set_hardening_behavior (size_t )<br><br>Member function of class <b>SimoMaterialResponse1d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
write_data_to_console
void
void write_data_to_console (number )
void write_data_to_console (number )<br><br>Member function of class <b>SimoMaterialResponse1d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
;
class
SimoMaterialResponse2d
IStressMaterialResponse2d 
Classgroup <b>SimoMaterialResponse</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IStressMaterialResponse2d.html">IStressMaterialResponse2d</a> <a href="SimoMaterialResponse2d.html">SimoMaterialResponse2d</a> <br><table><tr><td colspan=2><h3>SimoMaterialResponse Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>SimoMaterialResponse2d ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>SimoMaterialResponse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_hardening_behavior (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>write_data_to_console (number )</td></tr><tr><td><br></td></tr></table>
constructor
SimoMaterialResponse2d

SimoMaterialResponse2d ()
SimoMaterialResponse2d ()<br>Constructor of class <b>SimoMaterialResponse2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_hardening_behavior
void
void set_hardening_behavior (size_t )
void set_hardening_behavior (size_t )<br><br>Member function of class <b>SimoMaterialResponse2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
write_data_to_console
void
void write_data_to_console (number )
void write_data_to_console (number )<br><br>Member function of class <b>SimoMaterialResponse2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
;
class
SimoMaterialResponse3d
IStressMaterialResponse3d 
Classgroup <b>SimoMaterialResponse</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IStressMaterialResponse3d.html">IStressMaterialResponse3d</a> <a href="SimoMaterialResponse3d.html">SimoMaterialResponse3d</a> <br><table><tr><td colspan=2><h3>SimoMaterialResponse Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>SimoMaterialResponse3d ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>SimoMaterialResponse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_hardening_behavior (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>write_data_to_console (number )</td></tr><tr><td><br></td></tr></table>
constructor
SimoMaterialResponse3d

SimoMaterialResponse3d ()
SimoMaterialResponse3d ()<br>Constructor of class <b>SimoMaterialResponse3d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_hardening_behavior
void
void set_hardening_behavior (size_t )
void set_hardening_behavior (size_t )<br><br>Member function of class <b>SimoMaterialResponse3d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
write_data_to_console
void
void write_data_to_console (number )
void write_data_to_console (number )<br><br>Member function of class <b>SimoMaterialResponse3d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
;
class
SimoMaterialResponseLin1d
IStressMaterialResponse1d SimoMaterialResponse1d 
Classgroup <b>SimoMaterialResponseLin</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="IStressMaterialResponse1d.html">IStressMaterialResponse1d</a> <a href="SimoMaterialResponse1d.html">SimoMaterialResponse1d</a> <a href="SimoMaterialResponseLin1d.html">SimoMaterialResponseLin1d</a> <br><table><tr><td colspan=2><h3>SimoMaterialResponseLin Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>SimoMaterialResponseLin1d ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>SimoMaterialResponseLin Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_hardening_behavior (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>write_data_to_console (number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>SimoMaterialResponse Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>SimoMaterialResponse1d ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited SimoMaterialResponse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_hardening_behavior (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>write_data_to_console (number )</td></tr><tr><td><br></td></tr></table>
constructor
SimoMaterialResponseLin1d

SimoMaterialResponseLin1d ()
SimoMaterialResponseLin1d ()<br>Constructor of class <b>SimoMaterialResponseLin1d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_hardening_behavior
void
void set_hardening_behavior (size_t )
void set_hardening_behavior (size_t )<br><br>Member function of class <b>SimoMaterialResponseLin1d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
write_data_to_console
void
void write_data_to_console (number )
void write_data_to_console (number )<br><br>Member function of class <b>SimoMaterialResponseLin1d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
;
class
SimoMaterialResponseLin2d
IStressMaterialResponse2d SimoMaterialResponse2d 
Classgroup <b>SimoMaterialResponseLin</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IStressMaterialResponse2d.html">IStressMaterialResponse2d</a> <a href="SimoMaterialResponse2d.html">SimoMaterialResponse2d</a> <a href="SimoMaterialResponseLin2d.html">SimoMaterialResponseLin2d</a> <br><table><tr><td colspan=2><h3>SimoMaterialResponseLin Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>SimoMaterialResponseLin2d ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>SimoMaterialResponseLin Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_hardening_behavior (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>write_data_to_console (number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>SimoMaterialResponse Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>SimoMaterialResponse2d ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited SimoMaterialResponse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_hardening_behavior (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>write_data_to_console (number )</td></tr><tr><td><br></td></tr></table>
constructor
SimoMaterialResponseLin2d

SimoMaterialResponseLin2d ()
SimoMaterialResponseLin2d ()<br>Constructor of class <b>SimoMaterialResponseLin2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_hardening_behavior
void
void set_hardening_behavior (size_t )
void set_hardening_behavior (size_t )<br><br>Member function of class <b>SimoMaterialResponseLin2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
write_data_to_console
void
void write_data_to_console (number )
void write_data_to_console (number )<br><br>Member function of class <b>SimoMaterialResponseLin2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
;
class
SimoMaterialResponseLin3d
IStressMaterialResponse3d SimoMaterialResponse3d 
Classgroup <b>SimoMaterialResponseLin</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IStressMaterialResponse3d.html">IStressMaterialResponse3d</a> <a href="SimoMaterialResponse3d.html">SimoMaterialResponse3d</a> <a href="SimoMaterialResponseLin3d.html">SimoMaterialResponseLin3d</a> <br><table><tr><td colspan=2><h3>SimoMaterialResponseLin Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>SimoMaterialResponseLin3d ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>SimoMaterialResponseLin Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_hardening_behavior (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>write_data_to_console (number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>SimoMaterialResponse Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>SimoMaterialResponse3d ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited SimoMaterialResponse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_hardening_behavior (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>write_data_to_console (number )</td></tr><tr><td><br></td></tr></table>
constructor
SimoMaterialResponseLin3d

SimoMaterialResponseLin3d ()
SimoMaterialResponseLin3d ()<br>Constructor of class <b>SimoMaterialResponseLin3d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_hardening_behavior
void
void set_hardening_behavior (size_t )
void set_hardening_behavior (size_t )<br><br>Member function of class <b>SimoMaterialResponseLin3d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
write_data_to_console
void
void write_data_to_console (number )
void write_data_to_console (number )<br><br>Member function of class <b>SimoMaterialResponseLin3d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
;
class
SolutionTimeSeriesCPU1

Classgroup <b>SolutionTimeSeries</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b><br>class has constructor.  Tag <b>alg=CPU1;</b><br><table><tr><td colspan=2><h3>SolutionTimeSeries Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>SolutionTimeSeriesCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>SolutionTimeSeries Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; </td><td class="memItemRight" valign=bottom>latest ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns latest solution<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; </td><td class="memItemRight" valign=bottom>oldest ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns oldest solution<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>push (SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; vec, number time)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: adds new time point, not discarding the oldest<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; </td><td class="memItemRight" valign=bottom>push_discard_oldest (SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; vec, number time)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns oldest solution<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: adds new time point, oldest solution is discarded and returned<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>SolutionTimeSeries Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>size ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns number of time steps handled<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; </td><td class="memItemRight" valign=bottom>solution (size_t i)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the local vector for the i'th time point<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>time (size_t i)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns point in time for solution<br/></td></tr><tr><td><br></td></tr></table>
constructor
SolutionTimeSeriesCPU1

SolutionTimeSeriesCPU1 ()
SolutionTimeSeriesCPU1 ()<br>Constructor of class <b>SolutionTimeSeriesCPU1</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
push_discard_oldest
SmartPtr<VectorCPU1>
SmartPtr<Vector> push_discard_oldest (SmartPtr<Vector> vec, number time)
SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; push_discard_oldest (SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; vec, number time)<br><br>Member function of class <b>SolutionTimeSeriesCPU1</b><br>returns oldest solution<br>tooltip: adds new time point, oldest solution is discarded and returned<br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
push
void
void push (SmartPtr<Vector> vec, number time)
void push (SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; vec, number time)<br><br>Member function of class <b>SolutionTimeSeriesCPU1</b><br>tooltip: adds new time point, not discarding the oldest<br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
oldest
SmartPtr<VectorCPU1>
SmartPtr<Vector> oldest ()
SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; oldest ()<br><br>Member function of class <b>SolutionTimeSeriesCPU1</b><br>returns oldest solution<br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
latest
SmartPtr<VectorCPU1>
SmartPtr<Vector> latest ()
SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; latest ()<br><br>Member function of class <b>SolutionTimeSeriesCPU1</b><br>returns latest solution<br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
size
unknown
size_t size () const
size_t size ()<br><br>Member function of class <b>SolutionTimeSeriesCPU1</b><br>returns number of time steps handled<br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
solution
ConstSmartPtr<VectorCPU1>
const SmartPtr<Vector> solution (size_t i) const
const SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; solution (size_t i)<br><br>Member function of class <b>SolutionTimeSeriesCPU1</b><br>returns the local vector for the i'th time point<br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
time
number
number time (size_t i) const
number time (size_t i)<br><br>Member function of class <b>SolutionTimeSeriesCPU1</b><br>returns point in time for solution<br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
;
class
SolutionTimeSeriesCPU2

Classgroup <b>SolutionTimeSeries</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b><br>class has constructor.  Tag <b>alg=CPU2;</b><br><table><tr><td colspan=2><h3>SolutionTimeSeries Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>SolutionTimeSeriesCPU2 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>SolutionTimeSeries Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; </td><td class="memItemRight" valign=bottom>latest ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns latest solution<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; </td><td class="memItemRight" valign=bottom>oldest ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns oldest solution<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>push (SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; vec, number time)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: adds new time point, not discarding the oldest<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; </td><td class="memItemRight" valign=bottom>push_discard_oldest (SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; vec, number time)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns oldest solution<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: adds new time point, oldest solution is discarded and returned<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>SolutionTimeSeries Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>size ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns number of time steps handled<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; </td><td class="memItemRight" valign=bottom>solution (size_t i)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the local vector for the i'th time point<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>time (size_t i)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns point in time for solution<br/></td></tr><tr><td><br></td></tr></table>
constructor
SolutionTimeSeriesCPU2

SolutionTimeSeriesCPU2 ()
SolutionTimeSeriesCPU2 ()<br>Constructor of class <b>SolutionTimeSeriesCPU2</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
push_discard_oldest
SmartPtr<VectorCPU2>
SmartPtr<Vector> push_discard_oldest (SmartPtr<Vector> vec, number time)
SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; push_discard_oldest (SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; vec, number time)<br><br>Member function of class <b>SolutionTimeSeriesCPU2</b><br>returns oldest solution<br>tooltip: adds new time point, oldest solution is discarded and returned<br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
push
void
void push (SmartPtr<Vector> vec, number time)
void push (SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; vec, number time)<br><br>Member function of class <b>SolutionTimeSeriesCPU2</b><br>tooltip: adds new time point, not discarding the oldest<br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
oldest
SmartPtr<VectorCPU2>
SmartPtr<Vector> oldest ()
SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; oldest ()<br><br>Member function of class <b>SolutionTimeSeriesCPU2</b><br>returns oldest solution<br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
latest
SmartPtr<VectorCPU2>
SmartPtr<Vector> latest ()
SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; latest ()<br><br>Member function of class <b>SolutionTimeSeriesCPU2</b><br>returns latest solution<br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
size
unknown
size_t size () const
size_t size ()<br><br>Member function of class <b>SolutionTimeSeriesCPU2</b><br>returns number of time steps handled<br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
solution
ConstSmartPtr<VectorCPU2>
const SmartPtr<Vector> solution (size_t i) const
const SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; solution (size_t i)<br><br>Member function of class <b>SolutionTimeSeriesCPU2</b><br>returns the local vector for the i'th time point<br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
time
number
number time (size_t i) const
number time (size_t i)<br><br>Member function of class <b>SolutionTimeSeriesCPU2</b><br>returns point in time for solution<br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
;
class
SolutionTimeSeriesCPU3

Classgroup <b>SolutionTimeSeries</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b><br>class has constructor.  Tag <b>alg=CPU3;</b><br><table><tr><td colspan=2><h3>SolutionTimeSeries Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>SolutionTimeSeriesCPU3 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>SolutionTimeSeries Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; </td><td class="memItemRight" valign=bottom>latest ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns latest solution<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; </td><td class="memItemRight" valign=bottom>oldest ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns oldest solution<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>push (SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; vec, number time)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: adds new time point, not discarding the oldest<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; </td><td class="memItemRight" valign=bottom>push_discard_oldest (SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; vec, number time)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns oldest solution<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: adds new time point, oldest solution is discarded and returned<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>SolutionTimeSeries Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>size ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns number of time steps handled<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; </td><td class="memItemRight" valign=bottom>solution (size_t i)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the local vector for the i'th time point<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>time (size_t i)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns point in time for solution<br/></td></tr><tr><td><br></td></tr></table>
constructor
SolutionTimeSeriesCPU3

SolutionTimeSeriesCPU3 ()
SolutionTimeSeriesCPU3 ()<br>Constructor of class <b>SolutionTimeSeriesCPU3</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
push_discard_oldest
SmartPtr<VectorCPU3>
SmartPtr<Vector> push_discard_oldest (SmartPtr<Vector> vec, number time)
SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; push_discard_oldest (SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; vec, number time)<br><br>Member function of class <b>SolutionTimeSeriesCPU3</b><br>returns oldest solution<br>tooltip: adds new time point, oldest solution is discarded and returned<br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
push
void
void push (SmartPtr<Vector> vec, number time)
void push (SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; vec, number time)<br><br>Member function of class <b>SolutionTimeSeriesCPU3</b><br>tooltip: adds new time point, not discarding the oldest<br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
oldest
SmartPtr<VectorCPU3>
SmartPtr<Vector> oldest ()
SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; oldest ()<br><br>Member function of class <b>SolutionTimeSeriesCPU3</b><br>returns oldest solution<br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
latest
SmartPtr<VectorCPU3>
SmartPtr<Vector> latest ()
SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; latest ()<br><br>Member function of class <b>SolutionTimeSeriesCPU3</b><br>returns latest solution<br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
size
unknown
size_t size () const
size_t size ()<br><br>Member function of class <b>SolutionTimeSeriesCPU3</b><br>returns number of time steps handled<br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
solution
ConstSmartPtr<VectorCPU3>
const SmartPtr<Vector> solution (size_t i) const
const SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; solution (size_t i)<br><br>Member function of class <b>SolutionTimeSeriesCPU3</b><br>returns the local vector for the i'th time point<br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
time
number
number time (size_t i) const
number time (size_t i)<br><br>Member function of class <b>SolutionTimeSeriesCPU3</b><br>returns point in time for solution<br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
;
class
StandardDomainDecompositionInfo
IDomainDecompositionInfo 
Registry Group: <b>/ug4/Discretization</b><br>class has constructor. <br>Inheritance: <a href="IDomainDecompositionInfo.html">IDomainDecompositionInfo</a> <a href="StandardDomainDecompositionInfo.html">StandardDomainDecompositionInfo</a> <br><table><tr><td colspan=2><h3>StandardDomainDecompositionInfo Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>StandardDomainDecompositionInfo ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>StandardDomainDecompositionInfo Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_spatial_dimensions (integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_subdomains (integer )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>StandardDomainDecompositionInfo Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_num_spatial_dimensions ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_num_subdomains ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>map_proc_id_to_subdomain_id (integer )</td></tr><tr><td><br></td></tr></table>
constructor
StandardDomainDecompositionInfo

StandardDomainDecompositionInfo ()
StandardDomainDecompositionInfo ()<br>Constructor of class <b>StandardDomainDecompositionInfo</b><br>Registry Group: <b>/ug4/Discretization</b>
memberfunction
set_num_subdomains
void
void set_num_subdomains (integer )
void set_num_subdomains (integer )<br><br>Member function of class <b>StandardDomainDecompositionInfo</b><br>Registry Group: <b>/ug4/Discretization</b>
memberfunction
set_num_spatial_dimensions
void
void set_num_spatial_dimensions (integer )
void set_num_spatial_dimensions (integer )<br><br>Member function of class <b>StandardDomainDecompositionInfo</b><br>Registry Group: <b>/ug4/Discretization</b>
memberfunction
map_proc_id_to_subdomain_id
integer
integer map_proc_id_to_subdomain_id (integer ) const
integer map_proc_id_to_subdomain_id (integer )<br><br>Member function of class <b>StandardDomainDecompositionInfo</b><br>Registry Group: <b>/ug4/Discretization</b>
memberfunction
get_num_subdomains
integer
integer get_num_subdomains () const
integer get_num_subdomains ()<br><br>Member function of class <b>StandardDomainDecompositionInfo</b><br>Registry Group: <b>/ug4/Discretization</b>
memberfunction
get_num_spatial_dimensions
integer
integer get_num_spatial_dimensions () const
integer get_num_spatial_dimensions ()<br><br>Member function of class <b>StandardDomainDecompositionInfo</b><br>Registry Group: <b>/ug4/Discretization</b>
;
class
StandardLineSearchCPU1
ILineSearchCPU1 
Classgroup <b>StandardLineSearch</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b><br>class has constructor.  Tag <b>alg=CPU1;</b><br>Inheritance: <a href="ILineSearchCPU1.html">ILineSearchCPU1</a> <a href="StandardLineSearchCPU1.html">StandardLineSearchCPU1</a> <br><table><tr><td colspan=2><h3>StandardLineSearch Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>StandardLineSearchCPU1 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>StandardLineSearchCPU1 (integer , number , number , bool )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>StandardLineSearch Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_accept_best (bool bAcceptBest)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_lambda_start (number start)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_maximum_defect (number maxDef)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_maximum_steps (integer steps)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_offset (std_string strOffset)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reduce_factor (number factor)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_verbose (bool verboseLevel)</td></tr><tr><td><br></td></tr></table>
constructor
StandardLineSearchCPU1

StandardLineSearchCPU1 ()
StandardLineSearchCPU1 ()<br>Constructor of class <b>StandardLineSearchCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
constructor
StandardLineSearchCPU1

StandardLineSearchCPU1 (integer , number , number , bool )
StandardLineSearchCPU1 (integer , number , number , bool )<br>Constructor of class <b>StandardLineSearchCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_maximum_steps
void
void set_maximum_steps (integer steps)
void set_maximum_steps (integer steps)<br><br>Member function of class <b>StandardLineSearchCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_lambda_start
void
void set_lambda_start (number start)
void set_lambda_start (number start)<br><br>Member function of class <b>StandardLineSearchCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_reduce_factor
void
void set_reduce_factor (number factor)
void set_reduce_factor (number factor)<br><br>Member function of class <b>StandardLineSearchCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_accept_best
void
void set_accept_best (bool bAcceptBest)
void set_accept_best (bool bAcceptBest)<br><br>Member function of class <b>StandardLineSearchCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_maximum_defect
void
void set_maximum_defect (number maxDef)
void set_maximum_defect (number maxDef)<br><br>Member function of class <b>StandardLineSearchCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_verbose
void
void set_verbose (bool verboseLevel)
void set_verbose (bool verboseLevel)<br><br>Member function of class <b>StandardLineSearchCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_offset
void
void set_offset (std_string strOffset)
void set_offset (std_string strOffset)<br><br>Member function of class <b>StandardLineSearchCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
;
class
StandardLineSearchCPU2
ILineSearchCPU2 
Classgroup <b>StandardLineSearch</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b><br>class has constructor.  Tag <b>alg=CPU2;</b><br>Inheritance: <a href="ILineSearchCPU2.html">ILineSearchCPU2</a> <a href="StandardLineSearchCPU2.html">StandardLineSearchCPU2</a> <br><table><tr><td colspan=2><h3>StandardLineSearch Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>StandardLineSearchCPU2 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>StandardLineSearchCPU2 (integer , number , number , bool )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>StandardLineSearch Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_accept_best (bool bAcceptBest)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_lambda_start (number start)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_maximum_defect (number maxDef)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_maximum_steps (integer steps)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_offset (std_string strOffset)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reduce_factor (number factor)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_verbose (bool verboseLevel)</td></tr><tr><td><br></td></tr></table>
constructor
StandardLineSearchCPU2

StandardLineSearchCPU2 ()
StandardLineSearchCPU2 ()<br>Constructor of class <b>StandardLineSearchCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
constructor
StandardLineSearchCPU2

StandardLineSearchCPU2 (integer , number , number , bool )
StandardLineSearchCPU2 (integer , number , number , bool )<br>Constructor of class <b>StandardLineSearchCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_maximum_steps
void
void set_maximum_steps (integer steps)
void set_maximum_steps (integer steps)<br><br>Member function of class <b>StandardLineSearchCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_lambda_start
void
void set_lambda_start (number start)
void set_lambda_start (number start)<br><br>Member function of class <b>StandardLineSearchCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_reduce_factor
void
void set_reduce_factor (number factor)
void set_reduce_factor (number factor)<br><br>Member function of class <b>StandardLineSearchCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_accept_best
void
void set_accept_best (bool bAcceptBest)
void set_accept_best (bool bAcceptBest)<br><br>Member function of class <b>StandardLineSearchCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_maximum_defect
void
void set_maximum_defect (number maxDef)
void set_maximum_defect (number maxDef)<br><br>Member function of class <b>StandardLineSearchCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_verbose
void
void set_verbose (bool verboseLevel)
void set_verbose (bool verboseLevel)<br><br>Member function of class <b>StandardLineSearchCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_offset
void
void set_offset (std_string strOffset)
void set_offset (std_string strOffset)<br><br>Member function of class <b>StandardLineSearchCPU2</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
;
class
StandardLineSearchCPU3
ILineSearchCPU3 
Classgroup <b>StandardLineSearch</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b><br>class has constructor.  Tag <b>alg=CPU3;</b><br>Inheritance: <a href="ILineSearchCPU3.html">ILineSearchCPU3</a> <a href="StandardLineSearchCPU3.html">StandardLineSearchCPU3</a> <br><table><tr><td colspan=2><h3>StandardLineSearch Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>StandardLineSearchCPU3 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>StandardLineSearchCPU3 (integer , number , number , bool )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>StandardLineSearch Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_accept_best (bool bAcceptBest)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_lambda_start (number start)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_maximum_defect (number maxDef)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_maximum_steps (integer steps)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_offset (std_string strOffset)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reduce_factor (number factor)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_verbose (bool verboseLevel)</td></tr><tr><td><br></td></tr></table>
constructor
StandardLineSearchCPU3

StandardLineSearchCPU3 ()
StandardLineSearchCPU3 ()<br>Constructor of class <b>StandardLineSearchCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
constructor
StandardLineSearchCPU3

StandardLineSearchCPU3 (integer , number , number , bool )
StandardLineSearchCPU3 (integer , number , number , bool )<br>Constructor of class <b>StandardLineSearchCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_maximum_steps
void
void set_maximum_steps (integer steps)
void set_maximum_steps (integer steps)<br><br>Member function of class <b>StandardLineSearchCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_lambda_start
void
void set_lambda_start (number start)
void set_lambda_start (number start)<br><br>Member function of class <b>StandardLineSearchCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_reduce_factor
void
void set_reduce_factor (number factor)
void set_reduce_factor (number factor)<br><br>Member function of class <b>StandardLineSearchCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_accept_best
void
void set_accept_best (bool bAcceptBest)
void set_accept_best (bool bAcceptBest)<br><br>Member function of class <b>StandardLineSearchCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_maximum_defect
void
void set_maximum_defect (number maxDef)
void set_maximum_defect (number maxDef)<br><br>Member function of class <b>StandardLineSearchCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_verbose
void
void set_verbose (bool verboseLevel)
void set_verbose (bool verboseLevel)<br><br>Member function of class <b>StandardLineSearchCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_offset
void
void set_offset (std_string strOffset)
void set_offset (std_string strOffset)<br><br>Member function of class <b>StandardLineSearchCPU3</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
;
class
StdTransfer1dCPU1
ITransferOperatorCPU1 
Classgroup <b>StdTransfer</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU1;</b><br>Inheritance: <a href="ITransferOperatorCPU1.html">ITransferOperatorCPU1</a> <a href="StdTransfer1dCPU1.html">StdTransfer1dCPU1</a> <br><table><tr><td colspan=2><h3>StdTransfer Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>StdTransfer1dCPU1 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>StdTransfer1dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>StdTransfer Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_constraint (SmartPtr&lt;<a href="IConstraintCPU1.html">IConstraint</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_restriction_damping (number )</td></tr><tr><td><br></td></tr></table>
constructor
StdTransfer1dCPU1

StdTransfer1dCPU1 ()
StdTransfer1dCPU1 ()<br>Constructor of class <b>StdTransfer1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
StdTransfer1dCPU1

StdTransfer1dCPU1 (SmartPtr<ApproximationSpace> Approximation Space)
StdTransfer1dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>StdTransfer1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_restriction_damping
void
void set_restriction_damping (number )
void set_restriction_damping (number )<br><br>Member function of class <b>StdTransfer1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
add_constraint
void
void add_constraint (SmartPtr<IConstraint> )
void add_constraint (SmartPtr&lt;<a href="IConstraintCPU1.html">IConstraint</a>&gt; )<br><br>Member function of class <b>StdTransfer1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_debug
void
void set_debug (SmartPtr<IDebugWriter> )
void set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )<br><br>Member function of class <b>StdTransfer1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
StdTransfer1dCPU2
ITransferOperatorCPU2 
Classgroup <b>StdTransfer</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU2;</b><br>Inheritance: <a href="ITransferOperatorCPU2.html">ITransferOperatorCPU2</a> <a href="StdTransfer1dCPU2.html">StdTransfer1dCPU2</a> <br><table><tr><td colspan=2><h3>StdTransfer Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>StdTransfer1dCPU2 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>StdTransfer1dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>StdTransfer Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_constraint (SmartPtr&lt;<a href="IConstraintCPU1.html">IConstraint</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_restriction_damping (number )</td></tr><tr><td><br></td></tr></table>
constructor
StdTransfer1dCPU2

StdTransfer1dCPU2 ()
StdTransfer1dCPU2 ()<br>Constructor of class <b>StdTransfer1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
StdTransfer1dCPU2

StdTransfer1dCPU2 (SmartPtr<ApproximationSpace> Approximation Space)
StdTransfer1dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>StdTransfer1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_restriction_damping
void
void set_restriction_damping (number )
void set_restriction_damping (number )<br><br>Member function of class <b>StdTransfer1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
add_constraint
void
void add_constraint (SmartPtr<IConstraint> )
void add_constraint (SmartPtr&lt;<a href="IConstraintCPU1.html">IConstraint</a>&gt; )<br><br>Member function of class <b>StdTransfer1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_debug
void
void set_debug (SmartPtr<IDebugWriter> )
void set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )<br><br>Member function of class <b>StdTransfer1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
StdTransfer1dCPU3
ITransferOperatorCPU3 
Classgroup <b>StdTransfer</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU3;</b><br>Inheritance: <a href="ITransferOperatorCPU3.html">ITransferOperatorCPU3</a> <a href="StdTransfer1dCPU3.html">StdTransfer1dCPU3</a> <br><table><tr><td colspan=2><h3>StdTransfer Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>StdTransfer1dCPU3 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>StdTransfer1dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>StdTransfer Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_constraint (SmartPtr&lt;<a href="IConstraintCPU1.html">IConstraint</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_restriction_damping (number )</td></tr><tr><td><br></td></tr></table>
constructor
StdTransfer1dCPU3

StdTransfer1dCPU3 ()
StdTransfer1dCPU3 ()<br>Constructor of class <b>StdTransfer1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
StdTransfer1dCPU3

StdTransfer1dCPU3 (SmartPtr<ApproximationSpace> Approximation Space)
StdTransfer1dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>StdTransfer1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_restriction_damping
void
void set_restriction_damping (number )
void set_restriction_damping (number )<br><br>Member function of class <b>StdTransfer1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
add_constraint
void
void add_constraint (SmartPtr<IConstraint> )
void add_constraint (SmartPtr&lt;<a href="IConstraintCPU1.html">IConstraint</a>&gt; )<br><br>Member function of class <b>StdTransfer1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_debug
void
void set_debug (SmartPtr<IDebugWriter> )
void set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )<br><br>Member function of class <b>StdTransfer1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
StdTransfer2dCPU1
ITransferOperatorCPU1 
Classgroup <b>StdTransfer</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU1;</b><br>Inheritance: <a href="ITransferOperatorCPU1.html">ITransferOperatorCPU1</a> <a href="StdTransfer2dCPU1.html">StdTransfer2dCPU1</a> <br><table><tr><td colspan=2><h3>StdTransfer Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>StdTransfer2dCPU1 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>StdTransfer2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>StdTransfer Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_constraint (SmartPtr&lt;<a href="IConstraintCPU1.html">IConstraint</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_restriction_damping (number )</td></tr><tr><td><br></td></tr></table>
constructor
StdTransfer2dCPU1

StdTransfer2dCPU1 ()
StdTransfer2dCPU1 ()<br>Constructor of class <b>StdTransfer2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
StdTransfer2dCPU1

StdTransfer2dCPU1 (SmartPtr<ApproximationSpace> Approximation Space)
StdTransfer2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>StdTransfer2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_restriction_damping
void
void set_restriction_damping (number )
void set_restriction_damping (number )<br><br>Member function of class <b>StdTransfer2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
add_constraint
void
void add_constraint (SmartPtr<IConstraint> )
void add_constraint (SmartPtr&lt;<a href="IConstraintCPU1.html">IConstraint</a>&gt; )<br><br>Member function of class <b>StdTransfer2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_debug
void
void set_debug (SmartPtr<IDebugWriter> )
void set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )<br><br>Member function of class <b>StdTransfer2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
StdTransfer2dCPU2
ITransferOperatorCPU2 
Classgroup <b>StdTransfer</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU2;</b><br>Inheritance: <a href="ITransferOperatorCPU2.html">ITransferOperatorCPU2</a> <a href="StdTransfer2dCPU2.html">StdTransfer2dCPU2</a> <br><table><tr><td colspan=2><h3>StdTransfer Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>StdTransfer2dCPU2 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>StdTransfer2dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>StdTransfer Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_constraint (SmartPtr&lt;<a href="IConstraintCPU1.html">IConstraint</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_restriction_damping (number )</td></tr><tr><td><br></td></tr></table>
constructor
StdTransfer2dCPU2

StdTransfer2dCPU2 ()
StdTransfer2dCPU2 ()<br>Constructor of class <b>StdTransfer2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
StdTransfer2dCPU2

StdTransfer2dCPU2 (SmartPtr<ApproximationSpace> Approximation Space)
StdTransfer2dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>StdTransfer2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_restriction_damping
void
void set_restriction_damping (number )
void set_restriction_damping (number )<br><br>Member function of class <b>StdTransfer2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
add_constraint
void
void add_constraint (SmartPtr<IConstraint> )
void add_constraint (SmartPtr&lt;<a href="IConstraintCPU1.html">IConstraint</a>&gt; )<br><br>Member function of class <b>StdTransfer2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_debug
void
void set_debug (SmartPtr<IDebugWriter> )
void set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )<br><br>Member function of class <b>StdTransfer2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
StdTransfer2dCPU3
ITransferOperatorCPU3 
Classgroup <b>StdTransfer</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU3;</b><br>Inheritance: <a href="ITransferOperatorCPU3.html">ITransferOperatorCPU3</a> <a href="StdTransfer2dCPU3.html">StdTransfer2dCPU3</a> <br><table><tr><td colspan=2><h3>StdTransfer Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>StdTransfer2dCPU3 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>StdTransfer2dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>StdTransfer Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_constraint (SmartPtr&lt;<a href="IConstraintCPU1.html">IConstraint</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_restriction_damping (number )</td></tr><tr><td><br></td></tr></table>
constructor
StdTransfer2dCPU3

StdTransfer2dCPU3 ()
StdTransfer2dCPU3 ()<br>Constructor of class <b>StdTransfer2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
StdTransfer2dCPU3

StdTransfer2dCPU3 (SmartPtr<ApproximationSpace> Approximation Space)
StdTransfer2dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>StdTransfer2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_restriction_damping
void
void set_restriction_damping (number )
void set_restriction_damping (number )<br><br>Member function of class <b>StdTransfer2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
add_constraint
void
void add_constraint (SmartPtr<IConstraint> )
void add_constraint (SmartPtr&lt;<a href="IConstraintCPU1.html">IConstraint</a>&gt; )<br><br>Member function of class <b>StdTransfer2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_debug
void
void set_debug (SmartPtr<IDebugWriter> )
void set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )<br><br>Member function of class <b>StdTransfer2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
StdTransfer3dCPU1
ITransferOperatorCPU1 
Classgroup <b>StdTransfer</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU1;</b><br>Inheritance: <a href="ITransferOperatorCPU1.html">ITransferOperatorCPU1</a> <a href="StdTransfer3dCPU1.html">StdTransfer3dCPU1</a> <br><table><tr><td colspan=2><h3>StdTransfer Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>StdTransfer3dCPU1 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>StdTransfer3dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>StdTransfer Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_constraint (SmartPtr&lt;<a href="IConstraintCPU1.html">IConstraint</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_restriction_damping (number )</td></tr><tr><td><br></td></tr></table>
constructor
StdTransfer3dCPU1

StdTransfer3dCPU1 ()
StdTransfer3dCPU1 ()<br>Constructor of class <b>StdTransfer3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
StdTransfer3dCPU1

StdTransfer3dCPU1 (SmartPtr<ApproximationSpace> Approximation Space)
StdTransfer3dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>StdTransfer3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_restriction_damping
void
void set_restriction_damping (number )
void set_restriction_damping (number )<br><br>Member function of class <b>StdTransfer3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
add_constraint
void
void add_constraint (SmartPtr<IConstraint> )
void add_constraint (SmartPtr&lt;<a href="IConstraintCPU1.html">IConstraint</a>&gt; )<br><br>Member function of class <b>StdTransfer3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_debug
void
void set_debug (SmartPtr<IDebugWriter> )
void set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )<br><br>Member function of class <b>StdTransfer3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
StdTransfer3dCPU2
ITransferOperatorCPU2 
Classgroup <b>StdTransfer</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU2;</b><br>Inheritance: <a href="ITransferOperatorCPU2.html">ITransferOperatorCPU2</a> <a href="StdTransfer3dCPU2.html">StdTransfer3dCPU2</a> <br><table><tr><td colspan=2><h3>StdTransfer Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>StdTransfer3dCPU2 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>StdTransfer3dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>StdTransfer Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_constraint (SmartPtr&lt;<a href="IConstraintCPU1.html">IConstraint</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_restriction_damping (number )</td></tr><tr><td><br></td></tr></table>
constructor
StdTransfer3dCPU2

StdTransfer3dCPU2 ()
StdTransfer3dCPU2 ()<br>Constructor of class <b>StdTransfer3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
StdTransfer3dCPU2

StdTransfer3dCPU2 (SmartPtr<ApproximationSpace> Approximation Space)
StdTransfer3dCPU2 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>StdTransfer3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_restriction_damping
void
void set_restriction_damping (number )
void set_restriction_damping (number )<br><br>Member function of class <b>StdTransfer3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
add_constraint
void
void add_constraint (SmartPtr<IConstraint> )
void add_constraint (SmartPtr&lt;<a href="IConstraintCPU1.html">IConstraint</a>&gt; )<br><br>Member function of class <b>StdTransfer3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_debug
void
void set_debug (SmartPtr<IDebugWriter> )
void set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )<br><br>Member function of class <b>StdTransfer3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
StdTransfer3dCPU3
ITransferOperatorCPU3 
Classgroup <b>StdTransfer</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU3;</b><br>Inheritance: <a href="ITransferOperatorCPU3.html">ITransferOperatorCPU3</a> <a href="StdTransfer3dCPU3.html">StdTransfer3dCPU3</a> <br><table><tr><td colspan=2><h3>StdTransfer Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>StdTransfer3dCPU3 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>StdTransfer3dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>StdTransfer Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_constraint (SmartPtr&lt;<a href="IConstraintCPU1.html">IConstraint</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_restriction_damping (number )</td></tr><tr><td><br></td></tr></table>
constructor
StdTransfer3dCPU3

StdTransfer3dCPU3 ()
StdTransfer3dCPU3 ()<br>Constructor of class <b>StdTransfer3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
StdTransfer3dCPU3

StdTransfer3dCPU3 (SmartPtr<ApproximationSpace> Approximation Space)
StdTransfer3dCPU3 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>StdTransfer3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_restriction_damping
void
void set_restriction_damping (number )
void set_restriction_damping (number )<br><br>Member function of class <b>StdTransfer3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
add_constraint
void
void add_constraint (SmartPtr<IConstraint> )
void add_constraint (SmartPtr&lt;<a href="IConstraintCPU1.html">IConstraint</a>&gt; )<br><br>Member function of class <b>StdTransfer3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_debug
void
void set_debug (SmartPtr<IDebugWriter> )
void set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )<br><br>Member function of class <b>StdTransfer3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
SubsetHandler
ISubsetHandler 
Registry Group: <b>/ug4/Grid</b><br>class has constructor. <br>Inheritance: <a href="ISubsetHandler.html">ISubsetHandler</a> <a href="SubsetHandler.html">SubsetHandler</a> <br><table><tr><td colspan=2><h3>SubsetHandler Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>SubsetHandler ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>SubsetHandler Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assign_grid (<a href="Grid.html">Grid</a> *g)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ISubsetHandler Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_subset_name (c_string name, integer subsetIndex)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited ISubsetHandler Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_subset_index (c_string subsetName)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns subset index<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>c_string </td><td class="memItemRight" valign=bottom>get_subset_name (integer subsetIndex)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns subset name<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>num_subsets ()</td></tr><tr><td><br></td></tr></table>
constructor
SubsetHandler

SubsetHandler ()
SubsetHandler ()<br>Constructor of class <b>SubsetHandler</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
assign_grid
void
void assign_grid (Grid *g)
void assign_grid (<a href="Grid.html">Grid</a> *g)<br><br>Member function of class <b>SubsetHandler</b><br>Registry Group: <b>/ug4/Grid</b>
;
class
SurfaceView

Registry Group: <b>/ug4/Grid</b><br>class has no constructor. <br><table><tr><td colspan=2><h3>SurfaceView Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="MGSubsetHandler.html">MGSubsetHandler</a>&gt; </td><td class="memItemRight" valign=bottom>subset_handler ()</td></tr><tr><td><br></td></tr></table>
memberfunction
subset_handler
ConstSmartPtr<MGSubsetHandler>
const SmartPtr<MGSubsetHandler> subset_handler () const
const SmartPtr&lt;<a href="MGSubsetHandler.html">MGSubsetHandler</a>&gt; subset_handler ()<br><br>Member function of class <b>SurfaceView</b><br>Registry Group: <b>/ug4/Grid</b>
;
class
SymP1Constraints1dCPU1
IConstraintCPU1 IDomainConstraint1dCPU1 
Classgroup <b>SymP1Constraints</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU1;</b><br>Inheritance: <a href="IConstraintCPU1.html">IConstraintCPU1</a> <a href="IDomainConstraint1dCPU1.html">IDomainConstraint1dCPU1</a> <a href="SymP1Constraints1dCPU1.html">SymP1Constraints1dCPU1</a> <br><table><tr><td colspan=2><h3>SymP1Constraints Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>SymP1Constraints1dCPU1 ()</td></tr><tr><td><br></td></tr></table>
constructor
SymP1Constraints1dCPU1

SymP1Constraints1dCPU1 ()
SymP1Constraints1dCPU1 ()<br>Constructor of class <b>SymP1Constraints1dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
SymP1Constraints1dCPU2
IConstraintCPU2 IDomainConstraint1dCPU2 
Classgroup <b>SymP1Constraints</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU2;</b><br>Inheritance: <a href="IConstraintCPU2.html">IConstraintCPU2</a> <a href="IDomainConstraint1dCPU2.html">IDomainConstraint1dCPU2</a> <a href="SymP1Constraints1dCPU2.html">SymP1Constraints1dCPU2</a> <br><table><tr><td colspan=2><h3>SymP1Constraints Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>SymP1Constraints1dCPU2 ()</td></tr><tr><td><br></td></tr></table>
constructor
SymP1Constraints1dCPU2

SymP1Constraints1dCPU2 ()
SymP1Constraints1dCPU2 ()<br>Constructor of class <b>SymP1Constraints1dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
SymP1Constraints1dCPU3
IConstraintCPU3 IDomainConstraint1dCPU3 
Classgroup <b>SymP1Constraints</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=1d;alg=CPU3;</b><br>Inheritance: <a href="IConstraintCPU3.html">IConstraintCPU3</a> <a href="IDomainConstraint1dCPU3.html">IDomainConstraint1dCPU3</a> <a href="SymP1Constraints1dCPU3.html">SymP1Constraints1dCPU3</a> <br><table><tr><td colspan=2><h3>SymP1Constraints Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>SymP1Constraints1dCPU3 ()</td></tr><tr><td><br></td></tr></table>
constructor
SymP1Constraints1dCPU3

SymP1Constraints1dCPU3 ()
SymP1Constraints1dCPU3 ()<br>Constructor of class <b>SymP1Constraints1dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
SymP1Constraints2dCPU1
IConstraintCPU1 IDomainConstraint2dCPU1 
Classgroup <b>SymP1Constraints</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU1;</b><br>Inheritance: <a href="IConstraintCPU1.html">IConstraintCPU1</a> <a href="IDomainConstraint2dCPU1.html">IDomainConstraint2dCPU1</a> <a href="SymP1Constraints2dCPU1.html">SymP1Constraints2dCPU1</a> <br><table><tr><td colspan=2><h3>SymP1Constraints Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>SymP1Constraints2dCPU1 ()</td></tr><tr><td><br></td></tr></table>
constructor
SymP1Constraints2dCPU1

SymP1Constraints2dCPU1 ()
SymP1Constraints2dCPU1 ()<br>Constructor of class <b>SymP1Constraints2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
SymP1Constraints2dCPU2
IConstraintCPU2 IDomainConstraint2dCPU2 
Classgroup <b>SymP1Constraints</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU2;</b><br>Inheritance: <a href="IConstraintCPU2.html">IConstraintCPU2</a> <a href="IDomainConstraint2dCPU2.html">IDomainConstraint2dCPU2</a> <a href="SymP1Constraints2dCPU2.html">SymP1Constraints2dCPU2</a> <br><table><tr><td colspan=2><h3>SymP1Constraints Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>SymP1Constraints2dCPU2 ()</td></tr><tr><td><br></td></tr></table>
constructor
SymP1Constraints2dCPU2

SymP1Constraints2dCPU2 ()
SymP1Constraints2dCPU2 ()<br>Constructor of class <b>SymP1Constraints2dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
SymP1Constraints2dCPU3
IConstraintCPU3 IDomainConstraint2dCPU3 
Classgroup <b>SymP1Constraints</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=2d;alg=CPU3;</b><br>Inheritance: <a href="IConstraintCPU3.html">IConstraintCPU3</a> <a href="IDomainConstraint2dCPU3.html">IDomainConstraint2dCPU3</a> <a href="SymP1Constraints2dCPU3.html">SymP1Constraints2dCPU3</a> <br><table><tr><td colspan=2><h3>SymP1Constraints Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>SymP1Constraints2dCPU3 ()</td></tr><tr><td><br></td></tr></table>
constructor
SymP1Constraints2dCPU3

SymP1Constraints2dCPU3 ()
SymP1Constraints2dCPU3 ()<br>Constructor of class <b>SymP1Constraints2dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
SymP1Constraints3dCPU1
IConstraintCPU1 IDomainConstraint3dCPU1 
Classgroup <b>SymP1Constraints</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU1;</b><br>Inheritance: <a href="IConstraintCPU1.html">IConstraintCPU1</a> <a href="IDomainConstraint3dCPU1.html">IDomainConstraint3dCPU1</a> <a href="SymP1Constraints3dCPU1.html">SymP1Constraints3dCPU1</a> <br><table><tr><td colspan=2><h3>SymP1Constraints Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>SymP1Constraints3dCPU1 ()</td></tr><tr><td><br></td></tr></table>
constructor
SymP1Constraints3dCPU1

SymP1Constraints3dCPU1 ()
SymP1Constraints3dCPU1 ()<br>Constructor of class <b>SymP1Constraints3dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
SymP1Constraints3dCPU2
IConstraintCPU2 IDomainConstraint3dCPU2 
Classgroup <b>SymP1Constraints</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU2;</b><br>Inheritance: <a href="IConstraintCPU2.html">IConstraintCPU2</a> <a href="IDomainConstraint3dCPU2.html">IDomainConstraint3dCPU2</a> <a href="SymP1Constraints3dCPU2.html">SymP1Constraints3dCPU2</a> <br><table><tr><td colspan=2><h3>SymP1Constraints Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>SymP1Constraints3dCPU2 ()</td></tr><tr><td><br></td></tr></table>
constructor
SymP1Constraints3dCPU2

SymP1Constraints3dCPU2 ()
SymP1Constraints3dCPU2 ()<br>Constructor of class <b>SymP1Constraints3dCPU2</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
SymP1Constraints3dCPU3
IConstraintCPU3 IDomainConstraint3dCPU3 
Classgroup <b>SymP1Constraints</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor.  Tag <b>dim=3d;alg=CPU3;</b><br>Inheritance: <a href="IConstraintCPU3.html">IConstraintCPU3</a> <a href="IDomainConstraint3dCPU3.html">IDomainConstraint3dCPU3</a> <a href="SymP1Constraints3dCPU3.html">SymP1Constraints3dCPU3</a> <br><table><tr><td colspan=2><h3>SymP1Constraints Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>SymP1Constraints3dCPU3 ()</td></tr><tr><td><br></td></tr></table>
constructor
SymP1Constraints3dCPU3

SymP1Constraints3dCPU3 ()
SymP1Constraints3dCPU3 ()<br>Constructor of class <b>SymP1Constraints3dCPU3</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
SymmetricGaussSeidelCPU1
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 ILinearIteratorCPU1 IPreconditionerCPU1 
Classgroup <b>SymmetricGaussSeidel</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>alg=CPU1;</b><br>Symmetric Gauss Seidel Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="IPreconditionerCPU1.html">IPreconditionerCPU1</a> <a href="SymmetricGaussSeidelCPU1.html">SymmetricGaussSeidelCPU1</a> <br><table><tr><td colspan=2><h3>SymmetricGaussSeidel Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>SymmetricGaussSeidelCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
SymmetricGaussSeidelCPU1

SymmetricGaussSeidelCPU1 ()
SymmetricGaussSeidelCPU1 ()<br>Constructor of class <b>SymmetricGaussSeidelCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
SymmetricGaussSeidelCPU2
VectorDebugWritingObjectCPU2 DebugWritingObjectCPU2 ILinearIteratorCPU2 IPreconditionerCPU2 
Classgroup <b>SymmetricGaussSeidel</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>alg=CPU2;</b><br>Symmetric Gauss Seidel Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU2.html">VectorDebugWritingObjectCPU2</a> <a href="DebugWritingObjectCPU2.html">DebugWritingObjectCPU2</a> <a href="ILinearIteratorCPU2.html">ILinearIteratorCPU2</a> <a href="IPreconditionerCPU2.html">IPreconditionerCPU2</a> <a href="SymmetricGaussSeidelCPU2.html">SymmetricGaussSeidelCPU2</a> <br><table><tr><td colspan=2><h3>SymmetricGaussSeidel Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>SymmetricGaussSeidelCPU2 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
SymmetricGaussSeidelCPU2

SymmetricGaussSeidelCPU2 ()
SymmetricGaussSeidelCPU2 ()<br>Constructor of class <b>SymmetricGaussSeidelCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
SymmetricGaussSeidelCPU3
VectorDebugWritingObjectCPU3 DebugWritingObjectCPU3 ILinearIteratorCPU3 IPreconditionerCPU3 
Classgroup <b>SymmetricGaussSeidel</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>alg=CPU3;</b><br>Symmetric Gauss Seidel Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU3.html">VectorDebugWritingObjectCPU3</a> <a href="DebugWritingObjectCPU3.html">DebugWritingObjectCPU3</a> <a href="ILinearIteratorCPU3.html">ILinearIteratorCPU3</a> <a href="IPreconditionerCPU3.html">IPreconditionerCPU3</a> <a href="SymmetricGaussSeidelCPU3.html">SymmetricGaussSeidelCPU3</a> <br><table><tr><td colspan=2><h3>SymmetricGaussSeidel Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>SymmetricGaussSeidelCPU3 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
SymmetricGaussSeidelCPU3

SymmetricGaussSeidelCPU3 ()
SymmetricGaussSeidelCPU3 ()<br>Constructor of class <b>SymmetricGaussSeidelCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
TKDDomainGenerator

Registry Group: <b>(Plugin) ug4/tkd_generator/</b><br>class has constructor. <br>Domain (grid) generator for tkds.<br><table><tr><td colspan=2><h3>TKDDomainGenerator Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>TKDDomainGenerator (<a href="Grid.html">Grid</a> *Grid to fill with TKD, <a href="ISubsetHandler.html">ISubsetHandler</a> *SubsetHandler to use)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>TKDDomainGenerator (<a href="Grid.html">Grid</a> *Grid to fill with TKD, <a href="ISubsetHandler.html">ISubsetHandler</a> *SubsetHandler to use;third parameter indicates whether a SC domain should be created, bool , bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>TKDDomainGenerator (<a href="Domain2d.html">Domain</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>TKDDomainGenerator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>createSCDomain (number a, number w, number h, number d_lipid, integer rows, integer cols, integer layers)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns fills your given grid and SubsetHandler with a stratum corneum domain  with given parameters a, h, w and d_lipid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>createSimpleTKDDomain (number a, number w, number h, integer d_lipid, integer rows, integer cols)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns fills your given grid and SubsetHandler with tkds with given parameters a, h, w and d_lipid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top><a href="TKDGeometryGenerator.html">TKDGeometryGenerator</a> *</td><td class="memItemRight" valign=bottom>getGeometryGenerator ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Geometry generator used to build coordinate informations. 			 Also calculates volume and surface of single tkd<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>setGridObject (<a href="Grid.html">Grid</a> *, <a href="ISubsetHandler.html">ISubsetHandler</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets Grid and SubsetHandler to use.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>setIsSCDomain (bool )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns switch whether a stratum corneum domain or a simple tkd domainwill be created on createDomain()<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>setSubsetInfo (c_string corneocyte_name, c_string lipid_name, const <a href="Vec1d.html">Vec</a> *corneocyte_color, const <a href="Vec1d.html">Vec</a> *lipid_color)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Set SubsetHandler informations (name, color) for corneocytes and lipid matrix<br/></td></tr><tr><td><br></td></tr></table>
constructor
TKDDomainGenerator

TKDDomainGenerator (Grid *Grid to fill with TKD, ISubsetHandler *SubsetHandler to use)
TKDDomainGenerator (<a href="Grid.html">Grid</a> *Grid to fill with TKD, <a href="ISubsetHandler.html">ISubsetHandler</a> *SubsetHandler to use)<br>Constructor of class <b>TKDDomainGenerator</b><br>Registry Group: <b>(Plugin) ug4/tkd_generator/</b>
constructor
TKDDomainGenerator

TKDDomainGenerator (Grid *Grid to fill with TKD, ISubsetHandler *SubsetHandler to use;third parameter indicates whether a SC domain should be created, bool , bool )
TKDDomainGenerator (<a href="Grid.html">Grid</a> *Grid to fill with TKD, <a href="ISubsetHandler.html">ISubsetHandler</a> *SubsetHandler to use;third parameter indicates whether a SC domain should be created, bool , bool )<br>Constructor of class <b>TKDDomainGenerator</b><br>Registry Group: <b>(Plugin) ug4/tkd_generator/</b>
constructor
TKDDomainGenerator

TKDDomainGenerator (Domain *)
TKDDomainGenerator (<a href="Domain2d.html">Domain</a> *)<br>Constructor of class <b>TKDDomainGenerator</b><br>Registry Group: <b>(Plugin) ug4/tkd_generator/</b>
memberfunction
setIsSCDomain
void
void setIsSCDomain (bool )
void setIsSCDomain (bool )<br><br>Member function of class <b>TKDDomainGenerator</b><br>returns switch whether a stratum corneum domain or a simple tkd domainwill be created on createDomain()<br>Registry Group: <b>(Plugin) ug4/tkd_generator/</b>
memberfunction
setGridObject
void
void setGridObject (Grid *, ISubsetHandler *)
void setGridObject (<a href="Grid.html">Grid</a> *, <a href="ISubsetHandler.html">ISubsetHandler</a> *)<br><br>Member function of class <b>TKDDomainGenerator</b><br>returns sets Grid and SubsetHandler to use.<br>Registry Group: <b>(Plugin) ug4/tkd_generator/</b>
memberfunction
createSCDomain
void
void createSCDomain (number a, number w, number h, number d_lipid, integer rows, integer cols, integer layers)
void createSCDomain (number a, number w, number h, number d_lipid, integer rows, integer cols, integer layers)<br><br>Member function of class <b>TKDDomainGenerator</b><br>returns fills your given grid and SubsetHandler with a stratum corneum domain  with given parameters a, h, w and d_lipid<br>Registry Group: <b>(Plugin) ug4/tkd_generator/</b>
memberfunction
createSimpleTKDDomain
void
void createSimpleTKDDomain (number a, number w, number h, integer d_lipid, integer rows, integer cols)
void createSimpleTKDDomain (number a, number w, number h, integer d_lipid, integer rows, integer cols)<br><br>Member function of class <b>TKDDomainGenerator</b><br>returns fills your given grid and SubsetHandler with tkds with given parameters a, h, w and d_lipid<br>Registry Group: <b>(Plugin) ug4/tkd_generator/</b>
memberfunction
setSubsetInfo
void
void setSubsetInfo (c_string corneocyte_name, c_string lipid_name, const Vec *corneocyte_color, const Vec *lipid_color)
void setSubsetInfo (c_string corneocyte_name, c_string lipid_name, const <a href="Vec1d.html">Vec</a> *corneocyte_color, const <a href="Vec1d.html">Vec</a> *lipid_color)<br><br>Member function of class <b>TKDDomainGenerator</b><br>returns Set SubsetHandler informations (name, color) for corneocytes and lipid matrix<br>Registry Group: <b>(Plugin) ug4/tkd_generator/</b>
memberfunction
getGeometryGenerator
TKDGeometryGenerator*
TKDGeometryGenerator *getGeometryGenerator ()
<a href="TKDGeometryGenerator.html">TKDGeometryGenerator</a> *getGeometryGenerator ()<br><br>Member function of class <b>TKDDomainGenerator</b><br>returns Geometry generator used to build coordinate informations. 			 Also calculates volume and surface of single tkd<br>Registry Group: <b>(Plugin) ug4/tkd_generator/</b>
;
class
TKDGeometryGenerator

Registry Group: <b>(Plugin) ug4/tkd_generator/</b><br>class has constructor. <br>Geometry generator class for tkds<br><table><tr><td colspan=2><h3>TKDGeometryGenerator Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>TKDGeometryGenerator (number height, number baseEdgeLength, number diameter, number d_lipid)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>TKDGeometryGenerator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>createGeometry ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>TKDGeometryGenerator Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>GetSurface (integer )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Surface of given subset (1 element)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>GetVolume (integer )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Volume of given subset (1 element)<br/></td></tr><tr><td><br></td></tr></table>
constructor
TKDGeometryGenerator

TKDGeometryGenerator (number height, number baseEdgeLength, number diameter, number d_lipid)
TKDGeometryGenerator (number height, number baseEdgeLength, number diameter, number d_lipid)<br>Constructor of class <b>TKDGeometryGenerator</b><br>Registry Group: <b>(Plugin) ug4/tkd_generator/</b>
memberfunction
createGeometry
void
void createGeometry ()
void createGeometry ()<br><br>Member function of class <b>TKDGeometryGenerator</b><br>Registry Group: <b>(Plugin) ug4/tkd_generator/</b>
memberfunction
GetVolume
number
number GetVolume (integer ) const
number GetVolume (integer )<br><br>Member function of class <b>TKDGeometryGenerator</b><br>returns Volume of given subset (1 element)<br>Registry Group: <b>(Plugin) ug4/tkd_generator/</b>
memberfunction
GetSurface
number
number GetSurface (integer ) const
number GetSurface (integer )<br><br>Member function of class <b>TKDGeometryGenerator</b><br>returns Surface of given subset (1 element)<br>Registry Group: <b>(Plugin) ug4/tkd_generator/</b>
;
class
TensorMatUtilFuncs1d

Classgroup <b>TensorMatUtilFuncs</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b><br>class has no constructor.  Tag <b>dim=1d;</b><br><table></table>
;
class
TensorMatUtilFuncs2d

Classgroup <b>TensorMatUtilFuncs</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b><br>class has no constructor.  Tag <b>dim=2d;</b><br><table></table>
;
class
TensorMatUtilFuncs3d

Classgroup <b>TensorMatUtilFuncs</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b><br>class has no constructor.  Tag <b>dim=3d;</b><br><table></table>
;
class
ThermohalineFlow1d
IElemDisc1d 
Classgroup <b>ThermohalineFlow</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="IElemDisc1d.html">IElemDisc1d</a> <a href="ThermohalineFlow1d.html">ThermohalineFlow1d</a> <br><table><tr><td colspan=2><h3>ThermohalineFlow Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ThermohalineFlow1d (c_string Function(s), c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ThermohalineFlow Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>brine ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>darcy_velocity ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>pressure_grad ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_boussinesq_density (number BoussinesqDensity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_boussinesq_flow (bool BoussinesqFlow)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_boussinesq_transport (bool BoussinesqTransport)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_consistent_gravity (bool ConsistentGravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Gravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (number g_x)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (number g_x, g_y, number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (number g_x, g_y, g_z, number , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (c_string Gravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_heat_capacity_fluid (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_heat_capacity_solid (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_density_solid (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (number MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (c_string MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (number Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (c_string Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (number Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (c_string Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_thermal_conductivity (c_string ThermalConductivity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_thermal_conductivity (number ThermalConductivity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_thermal_conductivity (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; ThermalConductivity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_upwind (SmartPtr&lt;<a href="IConvectionShapes2d.html">IConvectionShapes</a>&gt; Upwind (no, part, full))</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_upwind_energy (SmartPtr&lt;<a href="IConvectionShapes2d.html">IConvectionShapes</a>&gt; Upwind (no, part, full))</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (number Viscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (c_string Viscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Viscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>temperature ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
ThermohalineFlow1d

ThermohalineFlow1d (c_string Function(s), c_string Subset(s))
ThermohalineFlow1d (c_string Function(s), c_string Subset(s))<br>Constructor of class <b>ThermohalineFlow1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_consistent_gravity
void
void set_consistent_gravity (bool ConsistentGravity)
void set_consistent_gravity (bool ConsistentGravity)<br><br>Member function of class <b>ThermohalineFlow1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_boussinesq_transport
void
void set_boussinesq_transport (bool BoussinesqTransport)
void set_boussinesq_transport (bool BoussinesqTransport)<br><br>Member function of class <b>ThermohalineFlow1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_boussinesq_flow
void
void set_boussinesq_flow (bool BoussinesqFlow)
void set_boussinesq_flow (bool BoussinesqFlow)<br><br>Member function of class <b>ThermohalineFlow1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_boussinesq_density
void
void set_boussinesq_density (number BoussinesqDensity)
void set_boussinesq_density (number BoussinesqDensity)<br><br>Member function of class <b>ThermohalineFlow1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_upwind
void
void set_upwind (SmartPtr<IConvectionShapes> Upwind (no, part, full))
void set_upwind (SmartPtr&lt;<a href="IConvectionShapes2d.html">IConvectionShapes</a>&gt; Upwind (no, part, full))<br><br>Member function of class <b>ThermohalineFlow1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_upwind_energy
void
void set_upwind_energy (SmartPtr<IConvectionShapes> Upwind (no, part, full))
void set_upwind_energy (SmartPtr&lt;<a href="IConvectionShapes2d.html">IConvectionShapes</a>&gt; Upwind (no, part, full))<br><br>Member function of class <b>ThermohalineFlow1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_porosity
void
void set_porosity (SmartPtr<UserNumber> Porosity)
void set_porosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Porosity)<br><br>Member function of class <b>ThermohalineFlow1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_porosity
void
void set_porosity (number Porosity)
void set_porosity (number Porosity)<br><br>Member function of class <b>ThermohalineFlow1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_porosity
void
void set_porosity (c_string Porosity)
void set_porosity (c_string Porosity)<br><br>Member function of class <b>ThermohalineFlow1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_gravity
void
void set_gravity (SmartPtr<UserVector> Gravity)
void set_gravity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Gravity)<br><br>Member function of class <b>ThermohalineFlow1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_gravity
void
void set_gravity (number g_x)
void set_gravity (number g_x)<br><br>Member function of class <b>ThermohalineFlow1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_gravity
void
void set_gravity (number g_x, g_y, number )
void set_gravity (number g_x, g_y, number )<br><br>Member function of class <b>ThermohalineFlow1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_gravity
void
void set_gravity (number g_x, g_y, g_z, number , number )
void set_gravity (number g_x, g_y, g_z, number , number )<br><br>Member function of class <b>ThermohalineFlow1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_gravity
void
void set_gravity (c_string Gravity)
void set_gravity (c_string Gravity)<br><br>Member function of class <b>ThermohalineFlow1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_molecular_diffusion
void
void set_molecular_diffusion (SmartPtr<UserMatrix> MolecularDiffusion)
void set_molecular_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; MolecularDiffusion)<br><br>Member function of class <b>ThermohalineFlow1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_molecular_diffusion
void
void set_molecular_diffusion (number MolecularDiffusion)
void set_molecular_diffusion (number MolecularDiffusion)<br><br>Member function of class <b>ThermohalineFlow1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_molecular_diffusion
void
void set_molecular_diffusion (c_string MolecularDiffusion)
void set_molecular_diffusion (c_string MolecularDiffusion)<br><br>Member function of class <b>ThermohalineFlow1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_thermal_conductivity
void
void set_thermal_conductivity (SmartPtr<UserMatrix> ThermalConductivity)
void set_thermal_conductivity (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; ThermalConductivity)<br><br>Member function of class <b>ThermohalineFlow1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_thermal_conductivity
void
void set_thermal_conductivity (number ThermalConductivity)
void set_thermal_conductivity (number ThermalConductivity)<br><br>Member function of class <b>ThermohalineFlow1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_thermal_conductivity
void
void set_thermal_conductivity (c_string ThermalConductivity)
void set_thermal_conductivity (c_string ThermalConductivity)<br><br>Member function of class <b>ThermohalineFlow1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_permeability
void
void set_permeability (SmartPtr<UserMatrix> Permeability)
void set_permeability (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Permeability)<br><br>Member function of class <b>ThermohalineFlow1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_permeability
void
void set_permeability (number Permeability)
void set_permeability (number Permeability)<br><br>Member function of class <b>ThermohalineFlow1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_permeability
void
void set_permeability (c_string Permeability)
void set_permeability (c_string Permeability)<br><br>Member function of class <b>ThermohalineFlow1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_viscosity
void
void set_viscosity (SmartPtr<UserNumber> Viscosity)
void set_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Viscosity)<br><br>Member function of class <b>ThermohalineFlow1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_viscosity
void
void set_viscosity (number Viscosity)
void set_viscosity (number Viscosity)<br><br>Member function of class <b>ThermohalineFlow1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_viscosity
void
void set_viscosity (c_string Viscosity)
void set_viscosity (c_string Viscosity)<br><br>Member function of class <b>ThermohalineFlow1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_density
void
void set_density (SmartPtr<UserNumber> Density)
void set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Density)<br><br>Member function of class <b>ThermohalineFlow1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_heat_capacity_fluid
void
void set_heat_capacity_fluid (number )
void set_heat_capacity_fluid (number )<br><br>Member function of class <b>ThermohalineFlow1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_heat_capacity_solid
void
void set_heat_capacity_solid (number )
void set_heat_capacity_solid (number )<br><br>Member function of class <b>ThermohalineFlow1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_mass_density_solid
void
void set_mass_density_solid (number )
void set_mass_density_solid (number )<br><br>Member function of class <b>ThermohalineFlow1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
darcy_velocity
SmartPtr<UserVector1d>
SmartPtr<UserVector> darcy_velocity ()
SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; darcy_velocity ()<br><br>Member function of class <b>ThermohalineFlow1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
pressure_grad
SmartPtr<UserVector1d>
SmartPtr<UserVector> pressure_grad ()
SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; pressure_grad ()<br><br>Member function of class <b>ThermohalineFlow1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
temperature
SmartPtr<UserNumber1d>
SmartPtr<UserNumber> temperature ()
SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; temperature ()<br><br>Member function of class <b>ThermohalineFlow1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
brine
SmartPtr<UserNumber1d>
SmartPtr<UserNumber> brine ()
SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; brine ()<br><br>Member function of class <b>ThermohalineFlow1d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
;
class
ThermohalineFlow2d
IElemDisc2d 
Classgroup <b>ThermohalineFlow</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="ThermohalineFlow2d.html">ThermohalineFlow2d</a> <br><table><tr><td colspan=2><h3>ThermohalineFlow Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ThermohalineFlow2d (c_string Function(s), c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ThermohalineFlow Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>brine ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>darcy_velocity ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>pressure_grad ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_boussinesq_density (number BoussinesqDensity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_boussinesq_flow (bool BoussinesqFlow)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_boussinesq_transport (bool BoussinesqTransport)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_consistent_gravity (bool ConsistentGravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Gravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (number g_x)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (number g_x, g_y, number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (number g_x, g_y, g_z, number , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (c_string Gravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_heat_capacity_fluid (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_heat_capacity_solid (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_density_solid (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (number MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (c_string MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (number Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (c_string Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (number Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (c_string Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_thermal_conductivity (c_string ThermalConductivity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_thermal_conductivity (number ThermalConductivity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_thermal_conductivity (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; ThermalConductivity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_upwind (SmartPtr&lt;<a href="IConvectionShapes2d.html">IConvectionShapes</a>&gt; Upwind (no, part, full))</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_upwind_energy (SmartPtr&lt;<a href="IConvectionShapes2d.html">IConvectionShapes</a>&gt; Upwind (no, part, full))</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (number Viscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (c_string Viscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Viscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>temperature ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
ThermohalineFlow2d

ThermohalineFlow2d (c_string Function(s), c_string Subset(s))
ThermohalineFlow2d (c_string Function(s), c_string Subset(s))<br>Constructor of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_consistent_gravity
void
void set_consistent_gravity (bool ConsistentGravity)
void set_consistent_gravity (bool ConsistentGravity)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_boussinesq_transport
void
void set_boussinesq_transport (bool BoussinesqTransport)
void set_boussinesq_transport (bool BoussinesqTransport)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_boussinesq_flow
void
void set_boussinesq_flow (bool BoussinesqFlow)
void set_boussinesq_flow (bool BoussinesqFlow)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_boussinesq_density
void
void set_boussinesq_density (number BoussinesqDensity)
void set_boussinesq_density (number BoussinesqDensity)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_upwind
void
void set_upwind (SmartPtr<IConvectionShapes> Upwind (no, part, full))
void set_upwind (SmartPtr&lt;<a href="IConvectionShapes2d.html">IConvectionShapes</a>&gt; Upwind (no, part, full))<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_upwind_energy
void
void set_upwind_energy (SmartPtr<IConvectionShapes> Upwind (no, part, full))
void set_upwind_energy (SmartPtr&lt;<a href="IConvectionShapes2d.html">IConvectionShapes</a>&gt; Upwind (no, part, full))<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_porosity
void
void set_porosity (SmartPtr<UserNumber> Porosity)
void set_porosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Porosity)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_porosity
void
void set_porosity (number Porosity)
void set_porosity (number Porosity)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_porosity
void
void set_porosity (c_string Porosity)
void set_porosity (c_string Porosity)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_gravity
void
void set_gravity (SmartPtr<UserVector> Gravity)
void set_gravity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Gravity)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_gravity
void
void set_gravity (number g_x)
void set_gravity (number g_x)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_gravity
void
void set_gravity (number g_x, g_y, number )
void set_gravity (number g_x, g_y, number )<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_gravity
void
void set_gravity (number g_x, g_y, g_z, number , number )
void set_gravity (number g_x, g_y, g_z, number , number )<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_gravity
void
void set_gravity (c_string Gravity)
void set_gravity (c_string Gravity)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_molecular_diffusion
void
void set_molecular_diffusion (SmartPtr<UserMatrix> MolecularDiffusion)
void set_molecular_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; MolecularDiffusion)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_molecular_diffusion
void
void set_molecular_diffusion (number MolecularDiffusion)
void set_molecular_diffusion (number MolecularDiffusion)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_molecular_diffusion
void
void set_molecular_diffusion (c_string MolecularDiffusion)
void set_molecular_diffusion (c_string MolecularDiffusion)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_thermal_conductivity
void
void set_thermal_conductivity (SmartPtr<UserMatrix> ThermalConductivity)
void set_thermal_conductivity (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; ThermalConductivity)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_thermal_conductivity
void
void set_thermal_conductivity (number ThermalConductivity)
void set_thermal_conductivity (number ThermalConductivity)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_thermal_conductivity
void
void set_thermal_conductivity (c_string ThermalConductivity)
void set_thermal_conductivity (c_string ThermalConductivity)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_permeability
void
void set_permeability (SmartPtr<UserMatrix> Permeability)
void set_permeability (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Permeability)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_permeability
void
void set_permeability (number Permeability)
void set_permeability (number Permeability)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_permeability
void
void set_permeability (c_string Permeability)
void set_permeability (c_string Permeability)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_viscosity
void
void set_viscosity (SmartPtr<UserNumber> Viscosity)
void set_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Viscosity)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_viscosity
void
void set_viscosity (number Viscosity)
void set_viscosity (number Viscosity)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_viscosity
void
void set_viscosity (c_string Viscosity)
void set_viscosity (c_string Viscosity)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_density
void
void set_density (SmartPtr<UserNumber> Density)
void set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Density)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_heat_capacity_fluid
void
void set_heat_capacity_fluid (number )
void set_heat_capacity_fluid (number )<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_heat_capacity_solid
void
void set_heat_capacity_solid (number )
void set_heat_capacity_solid (number )<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_mass_density_solid
void
void set_mass_density_solid (number )
void set_mass_density_solid (number )<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
darcy_velocity
SmartPtr<UserVector2d>
SmartPtr<UserVector> darcy_velocity ()
SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; darcy_velocity ()<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
pressure_grad
SmartPtr<UserVector2d>
SmartPtr<UserVector> pressure_grad ()
SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; pressure_grad ()<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
temperature
SmartPtr<UserNumber2d>
SmartPtr<UserNumber> temperature ()
SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; temperature ()<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
brine
SmartPtr<UserNumber2d>
SmartPtr<UserNumber> brine ()
SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; brine ()<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
;
class
ThermohalineFlow3d
IElemDisc3d 
Classgroup <b>ThermohalineFlow</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IElemDisc3d.html">IElemDisc3d</a> <a href="ThermohalineFlow3d.html">ThermohalineFlow3d</a> <br><table><tr><td colspan=2><h3>ThermohalineFlow Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ThermohalineFlow3d (c_string Function(s), c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ThermohalineFlow Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>brine ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>darcy_velocity ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>pressure_grad ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_boussinesq_density (number BoussinesqDensity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_boussinesq_flow (bool BoussinesqFlow)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_boussinesq_transport (bool BoussinesqTransport)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_consistent_gravity (bool ConsistentGravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Gravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (number g_x)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (number g_x, g_y, number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (number g_x, g_y, g_z, number , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (c_string Gravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_heat_capacity_fluid (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_heat_capacity_solid (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_density_solid (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (number MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (c_string MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (number Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (c_string Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (number Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (c_string Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_thermal_conductivity (c_string ThermalConductivity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_thermal_conductivity (number ThermalConductivity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_thermal_conductivity (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; ThermalConductivity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_upwind (SmartPtr&lt;<a href="IConvectionShapes2d.html">IConvectionShapes</a>&gt; Upwind (no, part, full))</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_upwind_energy (SmartPtr&lt;<a href="IConvectionShapes2d.html">IConvectionShapes</a>&gt; Upwind (no, part, full))</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (number Viscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (c_string Viscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Viscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>temperature ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
ThermohalineFlow3d

ThermohalineFlow3d (c_string Function(s), c_string Subset(s))
ThermohalineFlow3d (c_string Function(s), c_string Subset(s))<br>Constructor of class <b>ThermohalineFlow3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_consistent_gravity
void
void set_consistent_gravity (bool ConsistentGravity)
void set_consistent_gravity (bool ConsistentGravity)<br><br>Member function of class <b>ThermohalineFlow3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_boussinesq_transport
void
void set_boussinesq_transport (bool BoussinesqTransport)
void set_boussinesq_transport (bool BoussinesqTransport)<br><br>Member function of class <b>ThermohalineFlow3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_boussinesq_flow
void
void set_boussinesq_flow (bool BoussinesqFlow)
void set_boussinesq_flow (bool BoussinesqFlow)<br><br>Member function of class <b>ThermohalineFlow3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_boussinesq_density
void
void set_boussinesq_density (number BoussinesqDensity)
void set_boussinesq_density (number BoussinesqDensity)<br><br>Member function of class <b>ThermohalineFlow3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_upwind
void
void set_upwind (SmartPtr<IConvectionShapes> Upwind (no, part, full))
void set_upwind (SmartPtr&lt;<a href="IConvectionShapes2d.html">IConvectionShapes</a>&gt; Upwind (no, part, full))<br><br>Member function of class <b>ThermohalineFlow3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_upwind_energy
void
void set_upwind_energy (SmartPtr<IConvectionShapes> Upwind (no, part, full))
void set_upwind_energy (SmartPtr&lt;<a href="IConvectionShapes2d.html">IConvectionShapes</a>&gt; Upwind (no, part, full))<br><br>Member function of class <b>ThermohalineFlow3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_porosity
void
void set_porosity (SmartPtr<UserNumber> Porosity)
void set_porosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Porosity)<br><br>Member function of class <b>ThermohalineFlow3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_porosity
void
void set_porosity (number Porosity)
void set_porosity (number Porosity)<br><br>Member function of class <b>ThermohalineFlow3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_porosity
void
void set_porosity (c_string Porosity)
void set_porosity (c_string Porosity)<br><br>Member function of class <b>ThermohalineFlow3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_gravity
void
void set_gravity (SmartPtr<UserVector> Gravity)
void set_gravity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Gravity)<br><br>Member function of class <b>ThermohalineFlow3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_gravity
void
void set_gravity (number g_x)
void set_gravity (number g_x)<br><br>Member function of class <b>ThermohalineFlow3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_gravity
void
void set_gravity (number g_x, g_y, number )
void set_gravity (number g_x, g_y, number )<br><br>Member function of class <b>ThermohalineFlow3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_gravity
void
void set_gravity (number g_x, g_y, g_z, number , number )
void set_gravity (number g_x, g_y, g_z, number , number )<br><br>Member function of class <b>ThermohalineFlow3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_gravity
void
void set_gravity (c_string Gravity)
void set_gravity (c_string Gravity)<br><br>Member function of class <b>ThermohalineFlow3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_molecular_diffusion
void
void set_molecular_diffusion (SmartPtr<UserMatrix> MolecularDiffusion)
void set_molecular_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; MolecularDiffusion)<br><br>Member function of class <b>ThermohalineFlow3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_molecular_diffusion
void
void set_molecular_diffusion (number MolecularDiffusion)
void set_molecular_diffusion (number MolecularDiffusion)<br><br>Member function of class <b>ThermohalineFlow3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_molecular_diffusion
void
void set_molecular_diffusion (c_string MolecularDiffusion)
void set_molecular_diffusion (c_string MolecularDiffusion)<br><br>Member function of class <b>ThermohalineFlow3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_thermal_conductivity
void
void set_thermal_conductivity (SmartPtr<UserMatrix> ThermalConductivity)
void set_thermal_conductivity (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; ThermalConductivity)<br><br>Member function of class <b>ThermohalineFlow3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_thermal_conductivity
void
void set_thermal_conductivity (number ThermalConductivity)
void set_thermal_conductivity (number ThermalConductivity)<br><br>Member function of class <b>ThermohalineFlow3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_thermal_conductivity
void
void set_thermal_conductivity (c_string ThermalConductivity)
void set_thermal_conductivity (c_string ThermalConductivity)<br><br>Member function of class <b>ThermohalineFlow3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_permeability
void
void set_permeability (SmartPtr<UserMatrix> Permeability)
void set_permeability (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Permeability)<br><br>Member function of class <b>ThermohalineFlow3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_permeability
void
void set_permeability (number Permeability)
void set_permeability (number Permeability)<br><br>Member function of class <b>ThermohalineFlow3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_permeability
void
void set_permeability (c_string Permeability)
void set_permeability (c_string Permeability)<br><br>Member function of class <b>ThermohalineFlow3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_viscosity
void
void set_viscosity (SmartPtr<UserNumber> Viscosity)
void set_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Viscosity)<br><br>Member function of class <b>ThermohalineFlow3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_viscosity
void
void set_viscosity (number Viscosity)
void set_viscosity (number Viscosity)<br><br>Member function of class <b>ThermohalineFlow3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_viscosity
void
void set_viscosity (c_string Viscosity)
void set_viscosity (c_string Viscosity)<br><br>Member function of class <b>ThermohalineFlow3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_density
void
void set_density (SmartPtr<UserNumber> Density)
void set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Density)<br><br>Member function of class <b>ThermohalineFlow3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_heat_capacity_fluid
void
void set_heat_capacity_fluid (number )
void set_heat_capacity_fluid (number )<br><br>Member function of class <b>ThermohalineFlow3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_heat_capacity_solid
void
void set_heat_capacity_solid (number )
void set_heat_capacity_solid (number )<br><br>Member function of class <b>ThermohalineFlow3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_mass_density_solid
void
void set_mass_density_solid (number )
void set_mass_density_solid (number )<br><br>Member function of class <b>ThermohalineFlow3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
darcy_velocity
SmartPtr<UserVector3d>
SmartPtr<UserVector> darcy_velocity ()
SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; darcy_velocity ()<br><br>Member function of class <b>ThermohalineFlow3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
pressure_grad
SmartPtr<UserVector3d>
SmartPtr<UserVector> pressure_grad ()
SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; pressure_grad ()<br><br>Member function of class <b>ThermohalineFlow3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
temperature
SmartPtr<UserNumber3d>
SmartPtr<UserNumber> temperature ()
SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; temperature ()<br><br>Member function of class <b>ThermohalineFlow3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
brine
SmartPtr<UserNumber3d>
SmartPtr<UserNumber> brine ()
SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; brine ()<br><br>Member function of class <b>ThermohalineFlow3d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
;
class
ThetaTimeStepCPU1
IAssembleCPU1 ITimeDiscretizationCPU1 
Classgroup <b>ThetaTimeStep</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b><br>class has constructor.  Tag <b>alg=CPU1;</b><br>Inheritance: <a href="IAssembleCPU1.html">IAssembleCPU1</a> <a href="ITimeDiscretizationCPU1.html">ITimeDiscretizationCPU1</a> <a href="ThetaTimeStepCPU1.html">ThetaTimeStepCPU1</a> <br><table><tr><td colspan=2><h3>ThetaTimeStep Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ThetaTimeStepCPU1 (SmartPtr&lt;<a href="IDomainDiscretizationCPU1.html">IDomainDiscretization</a>&gt; Domain Discretization)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ThetaTimeStepCPU1 (SmartPtr&lt;<a href="IDomainDiscretizationCPU1.html">IDomainDiscretization</a>&gt; Domain Discretization, number Theta)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ThetaTimeStepCPU1 (SmartPtr&lt;<a href="IDomainDiscretizationCPU1.html">IDomainDiscretization</a>&gt; Domain Discretization, c_string Scheme)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ThetaTimeStep Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_scheme (c_string Scheme)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stage (size_t Stage)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_theta (number Theta (1 = Impl; 0 = Expl))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ITimeDiscretization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>finish_step_elem (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>prepare_step (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; prepares the assembling of Defect/Jacobian for a time step, number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>prepare_step_elem (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stage (size_t stage)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited ITimeDiscretization Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>future_time ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the future time point (i.e. the one that will be computed)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_prev_steps ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_stages ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the number of stages<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IAssemble Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_matrix_rhs (<a href="MatrixCPU1.html">Matrix</a> *, <a href="VectorCPU1.html">Vector</a> *, std::vector&ltSmartPtr&lt;<a href="MultiIndex2.html">MultiIndex2</a>&gt; &gt, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on grid level.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_mass_matrix (<a href="MatrixCPU1.html">Matrix</a> *M, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles mass matrix on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_stiffness_matrix (<a href="MatrixCPU1.html">Matrix</a> *A, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles stiffness matrix on surface grid<br/></td></tr><tr><td><br></td></tr></table>
constructor
ThetaTimeStepCPU1

ThetaTimeStepCPU1 (SmartPtr<IDomainDiscretization> Domain Discretization)
ThetaTimeStepCPU1 (SmartPtr&lt;<a href="IDomainDiscretizationCPU1.html">IDomainDiscretization</a>&gt; Domain Discretization)<br>Constructor of class <b>ThetaTimeStepCPU1</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
constructor
ThetaTimeStepCPU1

ThetaTimeStepCPU1 (SmartPtr<IDomainDiscretization> Domain Discretization, number Theta)
ThetaTimeStepCPU1 (SmartPtr&lt;<a href="IDomainDiscretizationCPU1.html">IDomainDiscretization</a>&gt; Domain Discretization, number Theta)<br>Constructor of class <b>ThetaTimeStepCPU1</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
constructor
ThetaTimeStepCPU1

ThetaTimeStepCPU1 (SmartPtr<IDomainDiscretization> Domain Discretization, c_string Scheme)
ThetaTimeStepCPU1 (SmartPtr&lt;<a href="IDomainDiscretizationCPU1.html">IDomainDiscretization</a>&gt; Domain Discretization, c_string Scheme)<br>Constructor of class <b>ThetaTimeStepCPU1</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
set_theta
void
void set_theta (number Theta (1 = Impl; 0 = Expl))
void set_theta (number Theta (1 = Impl; 0 = Expl))<br><br>Member function of class <b>ThetaTimeStepCPU1</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
set_scheme
void
void set_scheme (c_string Scheme)
void set_scheme (c_string Scheme)<br><br>Member function of class <b>ThetaTimeStepCPU1</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
set_stage
void
void set_stage (size_t Stage)
void set_stage (size_t Stage)<br><br>Member function of class <b>ThetaTimeStepCPU1</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
;
class
ThetaTimeStepCPU2
IAssembleCPU2 ITimeDiscretizationCPU2 
Classgroup <b>ThetaTimeStep</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b><br>class has constructor.  Tag <b>alg=CPU2;</b><br>Inheritance: <a href="IAssembleCPU2.html">IAssembleCPU2</a> <a href="ITimeDiscretizationCPU2.html">ITimeDiscretizationCPU2</a> <a href="ThetaTimeStepCPU2.html">ThetaTimeStepCPU2</a> <br><table><tr><td colspan=2><h3>ThetaTimeStep Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ThetaTimeStepCPU2 (SmartPtr&lt;<a href="IDomainDiscretizationCPU1.html">IDomainDiscretization</a>&gt; Domain Discretization)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ThetaTimeStepCPU2 (SmartPtr&lt;<a href="IDomainDiscretizationCPU1.html">IDomainDiscretization</a>&gt; Domain Discretization, number Theta)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ThetaTimeStepCPU2 (SmartPtr&lt;<a href="IDomainDiscretizationCPU1.html">IDomainDiscretization</a>&gt; Domain Discretization, c_string Scheme)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ThetaTimeStep Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_scheme (c_string Scheme)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stage (size_t Stage)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_theta (number Theta (1 = Impl; 0 = Expl))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ITimeDiscretization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>finish_step_elem (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>prepare_step (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; prepares the assembling of Defect/Jacobian for a time step, number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>prepare_step_elem (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stage (size_t stage)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited ITimeDiscretization Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>future_time ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the future time point (i.e. the one that will be computed)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_prev_steps ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_stages ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the number of stages<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IAssemble Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_matrix_rhs (<a href="MatrixCPU1.html">Matrix</a> *, <a href="VectorCPU1.html">Vector</a> *, std::vector&ltSmartPtr&lt;<a href="MultiIndex2.html">MultiIndex2</a>&gt; &gt, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on grid level.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_mass_matrix (<a href="MatrixCPU1.html">Matrix</a> *M, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles mass matrix on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_stiffness_matrix (<a href="MatrixCPU1.html">Matrix</a> *A, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles stiffness matrix on surface grid<br/></td></tr><tr><td><br></td></tr></table>
constructor
ThetaTimeStepCPU2

ThetaTimeStepCPU2 (SmartPtr<IDomainDiscretization> Domain Discretization)
ThetaTimeStepCPU2 (SmartPtr&lt;<a href="IDomainDiscretizationCPU1.html">IDomainDiscretization</a>&gt; Domain Discretization)<br>Constructor of class <b>ThetaTimeStepCPU2</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
constructor
ThetaTimeStepCPU2

ThetaTimeStepCPU2 (SmartPtr<IDomainDiscretization> Domain Discretization, number Theta)
ThetaTimeStepCPU2 (SmartPtr&lt;<a href="IDomainDiscretizationCPU1.html">IDomainDiscretization</a>&gt; Domain Discretization, number Theta)<br>Constructor of class <b>ThetaTimeStepCPU2</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
constructor
ThetaTimeStepCPU2

ThetaTimeStepCPU2 (SmartPtr<IDomainDiscretization> Domain Discretization, c_string Scheme)
ThetaTimeStepCPU2 (SmartPtr&lt;<a href="IDomainDiscretizationCPU1.html">IDomainDiscretization</a>&gt; Domain Discretization, c_string Scheme)<br>Constructor of class <b>ThetaTimeStepCPU2</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
set_theta
void
void set_theta (number Theta (1 = Impl; 0 = Expl))
void set_theta (number Theta (1 = Impl; 0 = Expl))<br><br>Member function of class <b>ThetaTimeStepCPU2</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
set_scheme
void
void set_scheme (c_string Scheme)
void set_scheme (c_string Scheme)<br><br>Member function of class <b>ThetaTimeStepCPU2</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
set_stage
void
void set_stage (size_t Stage)
void set_stage (size_t Stage)<br><br>Member function of class <b>ThetaTimeStepCPU2</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
;
class
ThetaTimeStepCPU3
IAssembleCPU3 ITimeDiscretizationCPU3 
Classgroup <b>ThetaTimeStep</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b><br>class has constructor.  Tag <b>alg=CPU3;</b><br>Inheritance: <a href="IAssembleCPU3.html">IAssembleCPU3</a> <a href="ITimeDiscretizationCPU3.html">ITimeDiscretizationCPU3</a> <a href="ThetaTimeStepCPU3.html">ThetaTimeStepCPU3</a> <br><table><tr><td colspan=2><h3>ThetaTimeStep Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ThetaTimeStepCPU3 (SmartPtr&lt;<a href="IDomainDiscretizationCPU1.html">IDomainDiscretization</a>&gt; Domain Discretization)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ThetaTimeStepCPU3 (SmartPtr&lt;<a href="IDomainDiscretizationCPU1.html">IDomainDiscretization</a>&gt; Domain Discretization, number Theta)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ThetaTimeStepCPU3 (SmartPtr&lt;<a href="IDomainDiscretizationCPU1.html">IDomainDiscretization</a>&gt; Domain Discretization, c_string Scheme)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ThetaTimeStep Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_scheme (c_string Scheme)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stage (size_t Stage)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_theta (number Theta (1 = Impl; 0 = Expl))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ITimeDiscretization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>finish_step_elem (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>prepare_step (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; prepares the assembling of Defect/Jacobian for a time step, number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>prepare_step_elem (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stage (size_t stage)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited ITimeDiscretization Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>future_time ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the future time point (i.e. the one that will be computed)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_prev_steps ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_stages ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the number of stages<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IAssemble Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_matrix_rhs (<a href="MatrixCPU1.html">Matrix</a> *, <a href="VectorCPU1.html">Vector</a> *, std::vector&ltSmartPtr&lt;<a href="MultiIndex2.html">MultiIndex2</a>&gt; &gt, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on grid level.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_mass_matrix (<a href="MatrixCPU1.html">Matrix</a> *M, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles mass matrix on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_stiffness_matrix (<a href="MatrixCPU1.html">Matrix</a> *A, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles stiffness matrix on surface grid<br/></td></tr><tr><td><br></td></tr></table>
constructor
ThetaTimeStepCPU3

ThetaTimeStepCPU3 (SmartPtr<IDomainDiscretization> Domain Discretization)
ThetaTimeStepCPU3 (SmartPtr&lt;<a href="IDomainDiscretizationCPU1.html">IDomainDiscretization</a>&gt; Domain Discretization)<br>Constructor of class <b>ThetaTimeStepCPU3</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
constructor
ThetaTimeStepCPU3

ThetaTimeStepCPU3 (SmartPtr<IDomainDiscretization> Domain Discretization, number Theta)
ThetaTimeStepCPU3 (SmartPtr&lt;<a href="IDomainDiscretizationCPU1.html">IDomainDiscretization</a>&gt; Domain Discretization, number Theta)<br>Constructor of class <b>ThetaTimeStepCPU3</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
constructor
ThetaTimeStepCPU3

ThetaTimeStepCPU3 (SmartPtr<IDomainDiscretization> Domain Discretization, c_string Scheme)
ThetaTimeStepCPU3 (SmartPtr&lt;<a href="IDomainDiscretizationCPU1.html">IDomainDiscretization</a>&gt; Domain Discretization, c_string Scheme)<br>Constructor of class <b>ThetaTimeStepCPU3</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
set_theta
void
void set_theta (number Theta (1 = Impl; 0 = Expl))
void set_theta (number Theta (1 = Impl; 0 = Expl))<br><br>Member function of class <b>ThetaTimeStepCPU3</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
set_scheme
void
void set_scheme (c_string Scheme)
void set_scheme (c_string Scheme)<br><br>Member function of class <b>ThetaTimeStepCPU3</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
set_stage
void
void set_stage (size_t Stage)
void set_stage (size_t Stage)<br><br>Member function of class <b>ThetaTimeStepCPU3</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
;
class
UGProfileNode

Registry Group: <b>/ug4/Util/Profiler</b><br>class has no constructor. <br><table><tr><td colspan=2><h3>UGProfileNode Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>call_tree ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns string with call tree<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>call_tree (number dSkipMarginal)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns string with call tree<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>child_self_time_sorted ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns string with sorted childs<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: childs are sorted by self time<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>child_self_time_sorted (number dSkipMarginal)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns string with sorted childs<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: childs are sorted by self time<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>entry_count_sorted ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns string with sorted childs<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: childs are sorted by entry count<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>entry_count_sorted (number dSkipMarginal)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns string with sorted childs<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: childs are sorted by entry count<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_avg_entry_count ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns number of entries in this profiler node<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_avg_self_time_ms ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns time in milliseconds spend in this node excluding subnodes<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_avg_total_time_ms ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns time in milliseconds spend in this node including subnodes<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>groups ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>is_valid ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns true if node has been found<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>total_time_sorted ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns string with sorted childs<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: childs are sorted by total time<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>total_time_sorted (number dSkipMarginal)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns string with sorted childs<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: childs are sorted by total time<br/></td></tr><tr><td><br></td></tr></table>
memberfunction
call_tree
string
std_string call_tree () const
std_string call_tree ()<br><br>Member function of class <b>UGProfileNode</b><br>returns string with call tree<br>Registry Group: <b>/ug4/Util/Profiler</b>
memberfunction
call_tree
string
std_string call_tree (number dSkipMarginal) const
std_string call_tree (number dSkipMarginal)<br><br>Member function of class <b>UGProfileNode</b><br>returns string with call tree<br>Registry Group: <b>/ug4/Util/Profiler</b>
memberfunction
child_self_time_sorted
string
std_string child_self_time_sorted () const
std_string child_self_time_sorted ()<br><br>Member function of class <b>UGProfileNode</b><br>returns string with sorted childs<br>tooltip: childs are sorted by self time<br>Registry Group: <b>/ug4/Util/Profiler</b>
memberfunction
child_self_time_sorted
string
std_string child_self_time_sorted (number dSkipMarginal) const
std_string child_self_time_sorted (number dSkipMarginal)<br><br>Member function of class <b>UGProfileNode</b><br>returns string with sorted childs<br>tooltip: childs are sorted by self time<br>Registry Group: <b>/ug4/Util/Profiler</b>
memberfunction
total_time_sorted
string
std_string total_time_sorted () const
std_string total_time_sorted ()<br><br>Member function of class <b>UGProfileNode</b><br>returns string with sorted childs<br>tooltip: childs are sorted by total time<br>Registry Group: <b>/ug4/Util/Profiler</b>
memberfunction
total_time_sorted
string
std_string total_time_sorted (number dSkipMarginal) const
std_string total_time_sorted (number dSkipMarginal)<br><br>Member function of class <b>UGProfileNode</b><br>returns string with sorted childs<br>tooltip: childs are sorted by total time<br>Registry Group: <b>/ug4/Util/Profiler</b>
memberfunction
entry_count_sorted
string
std_string entry_count_sorted () const
std_string entry_count_sorted ()<br><br>Member function of class <b>UGProfileNode</b><br>returns string with sorted childs<br>tooltip: childs are sorted by entry count<br>Registry Group: <b>/ug4/Util/Profiler</b>
memberfunction
entry_count_sorted
string
std_string entry_count_sorted (number dSkipMarginal) const
std_string entry_count_sorted (number dSkipMarginal)<br><br>Member function of class <b>UGProfileNode</b><br>returns string with sorted childs<br>tooltip: childs are sorted by entry count<br>Registry Group: <b>/ug4/Util/Profiler</b>
memberfunction
get_avg_entry_count
number
number get_avg_entry_count () const
number get_avg_entry_count ()<br><br>Member function of class <b>UGProfileNode</b><br>returns number of entries in this profiler node<br>Registry Group: <b>/ug4/Util/Profiler</b>
memberfunction
get_avg_self_time_ms
number
number get_avg_self_time_ms () const
number get_avg_self_time_ms ()<br><br>Member function of class <b>UGProfileNode</b><br>returns time in milliseconds spend in this node excluding subnodes<br>Registry Group: <b>/ug4/Util/Profiler</b>
memberfunction
get_avg_total_time_ms
number
number get_avg_total_time_ms () const
number get_avg_total_time_ms ()<br><br>Member function of class <b>UGProfileNode</b><br>returns time in milliseconds spend in this node including subnodes<br>Registry Group: <b>/ug4/Util/Profiler</b>
memberfunction
is_valid
bool
bool is_valid () const
bool is_valid ()<br><br>Member function of class <b>UGProfileNode</b><br>returns true if node has been found<br>Registry Group: <b>/ug4/Util/Profiler</b>
memberfunction
groups
string
std_string groups () const
std_string groups ()<br><br>Member function of class <b>UGProfileNode</b><br>Registry Group: <b>/ug4/Util/Profiler</b>
;
class
UGXFileInfo

Registry Group: <b>/ug4/Grid</b><br>class has constructor. <br><table><tr><td colspan=2><h3>UGXFileInfo Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>UGXFileInfo ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>UGXFileInfo Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>parse_file (c_string filename)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>UGXFileInfo Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>grid_name (size_t gridInd)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns grid name<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>grid_world_dimension (size_t gridInd)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_grids ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_subset_handlers (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_subsets (size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>subset_handler_name (size_t gridInd, size_t shInd)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>subset_name (size_t gridInd, size_t shInd, size_t subsetInd)</td></tr><tr><td><br></td></tr></table>
constructor
UGXFileInfo

UGXFileInfo ()
UGXFileInfo ()<br>Constructor of class <b>UGXFileInfo</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
parse_file
bool
bool parse_file (c_string filename)
bool parse_file (c_string filename)<br><br>Member function of class <b>UGXFileInfo</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
num_grids
unknown
size_t num_grids () const
size_t num_grids ()<br><br>Member function of class <b>UGXFileInfo</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
num_subset_handlers
unknown
size_t num_subset_handlers (size_t ) const
size_t num_subset_handlers (size_t )<br><br>Member function of class <b>UGXFileInfo</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
num_subsets
unknown
size_t num_subsets (size_t , size_t ) const
size_t num_subsets (size_t , size_t )<br><br>Member function of class <b>UGXFileInfo</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
grid_name
string
std_string grid_name (size_t gridInd) const
std_string grid_name (size_t gridInd)<br><br>Member function of class <b>UGXFileInfo</b><br>returns grid name<br>Registry Group: <b>/ug4/Grid</b>
memberfunction
subset_handler_name
string
std_string subset_handler_name (size_t gridInd, size_t shInd) const
std_string subset_handler_name (size_t gridInd, size_t shInd)<br><br>Member function of class <b>UGXFileInfo</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
subset_name
string
std_string subset_name (size_t gridInd, size_t shInd, size_t subsetInd) const
std_string subset_name (size_t gridInd, size_t shInd, size_t subsetInd)<br><br>Member function of class <b>UGXFileInfo</b><br>Registry Group: <b>/ug4/Grid</b>
memberfunction
grid_world_dimension
integer
integer grid_world_dimension (size_t gridInd) const
integer grid_world_dimension (size_t gridInd)<br><br>Member function of class <b>UGXFileInfo</b><br>Registry Group: <b>/ug4/Grid</b>
;
class
UserMatrix1d
ICplUserData1d 
Classgroup <b>UserMatrix</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="UserMatrix1d.html">UserMatrix1d</a> <br><table><tr><td colspan=2><h3>UserMatrix Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
memberfunction
get_dim
integer
integer get_dim () const
integer get_dim ()<br><br>Member function of class <b>UserMatrix1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
type
string
std_string type () const
std_string type ()<br><br>Member function of class <b>UserMatrix1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
UserMatrix2d
ICplUserData2d 
Classgroup <b>UserMatrix</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserMatrix2d.html">UserMatrix2d</a> <br><table><tr><td colspan=2><h3>UserMatrix Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
memberfunction
get_dim
integer
integer get_dim () const
integer get_dim ()<br><br>Member function of class <b>UserMatrix2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
type
string
std_string type () const
std_string type ()<br><br>Member function of class <b>UserMatrix2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
UserMatrix3d
ICplUserData3d 
Classgroup <b>UserMatrix</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserMatrix3d.html">UserMatrix3d</a> <br><table><tr><td colspan=2><h3>UserMatrix Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
memberfunction
get_dim
integer
integer get_dim () const
integer get_dim ()<br><br>Member function of class <b>UserMatrix3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
type
string
std_string type () const
std_string type ()<br><br>Member function of class <b>UserMatrix3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
UserNumber1d
ICplUserData1d 
Classgroup <b>UserNumber</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="UserNumber1d.html">UserNumber1d</a> <br><table><tr><td colspan=2><h3>UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
memberfunction
get_dim
integer
integer get_dim () const
integer get_dim ()<br><br>Member function of class <b>UserNumber1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
type
string
std_string type () const
std_string type ()<br><br>Member function of class <b>UserNumber1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
UserNumber2d
ICplUserData2d 
Classgroup <b>UserNumber</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserNumber2d.html">UserNumber2d</a> <br><table><tr><td colspan=2><h3>UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
memberfunction
get_dim
integer
integer get_dim () const
integer get_dim ()<br><br>Member function of class <b>UserNumber2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
type
string
std_string type () const
std_string type ()<br><br>Member function of class <b>UserNumber2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
UserNumber3d
ICplUserData3d 
Classgroup <b>UserNumber</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserNumber3d.html">UserNumber3d</a> <br><table><tr><td colspan=2><h3>UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
memberfunction
get_dim
integer
integer get_dim () const
integer get_dim ()<br><br>Member function of class <b>UserNumber3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
type
string
std_string type () const
std_string type ()<br><br>Member function of class <b>UserNumber3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
UserTensor41d
ICplUserData1d 
Classgroup <b>UserTensor4</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="UserTensor41d.html">UserTensor41d</a> <br><table><tr><td colspan=2><h3>UserTensor4 Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
memberfunction
get_dim
integer
integer get_dim () const
integer get_dim ()<br><br>Member function of class <b>UserTensor41d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
type
string
std_string type () const
std_string type ()<br><br>Member function of class <b>UserTensor41d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
UserTensor42d
ICplUserData2d 
Classgroup <b>UserTensor4</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserTensor42d.html">UserTensor42d</a> <br><table><tr><td colspan=2><h3>UserTensor4 Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
memberfunction
get_dim
integer
integer get_dim () const
integer get_dim ()<br><br>Member function of class <b>UserTensor42d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
type
string
std_string type () const
std_string type ()<br><br>Member function of class <b>UserTensor42d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
UserTensor43d
ICplUserData3d 
Classgroup <b>UserTensor4</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserTensor43d.html">UserTensor43d</a> <br><table><tr><td colspan=2><h3>UserTensor4 Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
memberfunction
get_dim
integer
integer get_dim () const
integer get_dim ()<br><br>Member function of class <b>UserTensor43d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
type
string
std_string type () const
std_string type ()<br><br>Member function of class <b>UserTensor43d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
UserVector1d
ICplUserData1d 
Classgroup <b>UserVector</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="ICplUserData1d.html">ICplUserData1d</a> <a href="UserVector1d.html">UserVector1d</a> <br><table><tr><td colspan=2><h3>UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
memberfunction
get_dim
integer
integer get_dim () const
integer get_dim ()<br><br>Member function of class <b>UserVector1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
type
string
std_string type () const
std_string type ()<br><br>Member function of class <b>UserVector1d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
UserVector2d
ICplUserData2d 
Classgroup <b>UserVector</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserVector2d.html">UserVector2d</a> <br><table><tr><td colspan=2><h3>UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
memberfunction
get_dim
integer
integer get_dim () const
integer get_dim ()<br><br>Member function of class <b>UserVector2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
type
string
std_string type () const
std_string type ()<br><br>Member function of class <b>UserVector2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
UserVector3d
ICplUserData3d 
Classgroup <b>UserVector</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="ICplUserData3d.html">ICplUserData3d</a> <a href="UserVector3d.html">UserVector3d</a> <br><table><tr><td colspan=2><h3>UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
memberfunction
get_dim
integer
integer get_dim () const
integer get_dim ()<br><br>Member function of class <b>UserVector3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
type
string
std_string type () const
std_string type ()<br><br>Member function of class <b>UserVector3d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
VTKOutput1d

Classgroup <b>VTKOutput</b><br>Registry Group: <b>/ug4/Discretization/Output</b><br>class has constructor.  Tag <b>dim=1d;</b><br><table><tr><td colspan=2><h3>VTKOutput Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>VTKOutput1d ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>VTKOutput Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear_selection ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number , bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number , bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number , bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select (c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select (std::vector&ltstd_string &gt, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select_all (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select_element (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select_element (c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select_element (std::vector&ltstd_string &gt, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select_element (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select_nodal (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select_nodal (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select_nodal (std::vector&ltstd_string &gt, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select_nodal (c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_binary (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>write_time_pvd (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>write_time_pvd (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>write_time_pvd (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td><br></td></tr></table>
constructor
VTKOutput1d

VTKOutput1d ()
VTKOutput1d ()<br>Constructor of class <b>VTKOutput1d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
clear_selection
void
void clear_selection ()
void clear_selection ()<br><br>Member function of class <b>VTKOutput1d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select_all
void
void select_all (bool )
void select_all (bool )<br><br>Member function of class <b>VTKOutput1d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select
void
void select (c_string , c_string )
void select (c_string , c_string )<br><br>Member function of class <b>VTKOutput1d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select
void
void select (std::vector<std_string >, c_string )
void select (std::vector&ltstd_string &gt, c_string )<br><br>Member function of class <b>VTKOutput1d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select
void
void select (SmartPtr<UserNumber> , c_string )
void select (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , c_string )<br><br>Member function of class <b>VTKOutput1d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select
void
void select (SmartPtr<UserVector> , c_string )
void select (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , c_string )<br><br>Member function of class <b>VTKOutput1d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select_nodal
void
void select_nodal (c_string , c_string )
void select_nodal (c_string , c_string )<br><br>Member function of class <b>VTKOutput1d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select_nodal
void
void select_nodal (std::vector<std_string >, c_string )
void select_nodal (std::vector&ltstd_string &gt, c_string )<br><br>Member function of class <b>VTKOutput1d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select_nodal
void
void select_nodal (SmartPtr<UserNumber> , c_string )
void select_nodal (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , c_string )<br><br>Member function of class <b>VTKOutput1d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select_nodal
void
void select_nodal (SmartPtr<UserVector> , c_string )
void select_nodal (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , c_string )<br><br>Member function of class <b>VTKOutput1d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select_element
void
void select_element (c_string , c_string )
void select_element (c_string , c_string )<br><br>Member function of class <b>VTKOutput1d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select_element
void
void select_element (std::vector<std_string >, c_string )
void select_element (std::vector&ltstd_string &gt, c_string )<br><br>Member function of class <b>VTKOutput1d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select_element
void
void select_element (SmartPtr<UserNumber> , c_string )
void select_element (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , c_string )<br><br>Member function of class <b>VTKOutput1d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select_element
void
void select_element (SmartPtr<UserVector> , c_string )
void select_element (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , c_string )<br><br>Member function of class <b>VTKOutput1d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_binary
void
void set_binary (bool )
void set_binary (bool )<br><br>Member function of class <b>VTKOutput1d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
write_time_pvd
void
void write_time_pvd (c_string , GridFunction *)
void write_time_pvd (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>VTKOutput1d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
write_time_pvd
void
void write_time_pvd (c_string , GridFunction *)
void write_time_pvd (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>VTKOutput1d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
write_time_pvd
void
void write_time_pvd (c_string , GridFunction *)
void write_time_pvd (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>VTKOutput1d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *, integer , number , bool )
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number , bool )<br><br>Member function of class <b>VTKOutput1d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *, integer , number )
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number )<br><br>Member function of class <b>VTKOutput1d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *, bool )
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool )<br><br>Member function of class <b>VTKOutput1d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *)
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>VTKOutput1d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *, integer , number , bool )
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number , bool )<br><br>Member function of class <b>VTKOutput1d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *, integer , number )
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number )<br><br>Member function of class <b>VTKOutput1d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *, bool )
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool )<br><br>Member function of class <b>VTKOutput1d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *)
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>VTKOutput1d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *, integer , number , bool )
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number , bool )<br><br>Member function of class <b>VTKOutput1d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *, integer , number )
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number )<br><br>Member function of class <b>VTKOutput1d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *, bool )
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool )<br><br>Member function of class <b>VTKOutput1d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *)
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>VTKOutput1d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
;
class
VTKOutput2d

Classgroup <b>VTKOutput</b><br>Registry Group: <b>/ug4/Discretization/Output</b><br>class has constructor.  Tag <b>dim=2d;</b><br><table><tr><td colspan=2><h3>VTKOutput Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>VTKOutput2d ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>VTKOutput Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear_selection ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number , bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number , bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number , bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select (c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select (std::vector&ltstd_string &gt, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select_all (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select_element (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select_element (c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select_element (std::vector&ltstd_string &gt, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select_element (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select_nodal (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select_nodal (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select_nodal (std::vector&ltstd_string &gt, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select_nodal (c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_binary (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>write_time_pvd (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>write_time_pvd (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>write_time_pvd (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td><br></td></tr></table>
constructor
VTKOutput2d

VTKOutput2d ()
VTKOutput2d ()<br>Constructor of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
clear_selection
void
void clear_selection ()
void clear_selection ()<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select_all
void
void select_all (bool )
void select_all (bool )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select
void
void select (c_string , c_string )
void select (c_string , c_string )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select
void
void select (std::vector<std_string >, c_string )
void select (std::vector&ltstd_string &gt, c_string )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select
void
void select (SmartPtr<UserNumber> , c_string )
void select (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , c_string )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select
void
void select (SmartPtr<UserVector> , c_string )
void select (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , c_string )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select_nodal
void
void select_nodal (c_string , c_string )
void select_nodal (c_string , c_string )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select_nodal
void
void select_nodal (std::vector<std_string >, c_string )
void select_nodal (std::vector&ltstd_string &gt, c_string )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select_nodal
void
void select_nodal (SmartPtr<UserNumber> , c_string )
void select_nodal (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , c_string )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select_nodal
void
void select_nodal (SmartPtr<UserVector> , c_string )
void select_nodal (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , c_string )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select_element
void
void select_element (c_string , c_string )
void select_element (c_string , c_string )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select_element
void
void select_element (std::vector<std_string >, c_string )
void select_element (std::vector&ltstd_string &gt, c_string )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select_element
void
void select_element (SmartPtr<UserNumber> , c_string )
void select_element (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , c_string )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select_element
void
void select_element (SmartPtr<UserVector> , c_string )
void select_element (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , c_string )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_binary
void
void set_binary (bool )
void set_binary (bool )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
write_time_pvd
void
void write_time_pvd (c_string , GridFunction *)
void write_time_pvd (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
write_time_pvd
void
void write_time_pvd (c_string , GridFunction *)
void write_time_pvd (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
write_time_pvd
void
void write_time_pvd (c_string , GridFunction *)
void write_time_pvd (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *, integer , number , bool )
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number , bool )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *, integer , number )
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *, bool )
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *)
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *, integer , number , bool )
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number , bool )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *, integer , number )
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *, bool )
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *)
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *, integer , number , bool )
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number , bool )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *, integer , number )
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *, bool )
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *)
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
;
class
VTKOutput3d

Classgroup <b>VTKOutput</b><br>Registry Group: <b>/ug4/Discretization/Output</b><br>class has constructor.  Tag <b>dim=3d;</b><br><table><tr><td colspan=2><h3>VTKOutput Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>VTKOutput3d ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>VTKOutput Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear_selection ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number , bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number , bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number , bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select (c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select (std::vector&ltstd_string &gt, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select_all (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select_element (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select_element (c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select_element (std::vector&ltstd_string &gt, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select_element (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select_nodal (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select_nodal (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select_nodal (std::vector&ltstd_string &gt, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select_nodal (c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_binary (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>write_time_pvd (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>write_time_pvd (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>write_time_pvd (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td><br></td></tr></table>
constructor
VTKOutput3d

VTKOutput3d ()
VTKOutput3d ()<br>Constructor of class <b>VTKOutput3d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
clear_selection
void
void clear_selection ()
void clear_selection ()<br><br>Member function of class <b>VTKOutput3d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select_all
void
void select_all (bool )
void select_all (bool )<br><br>Member function of class <b>VTKOutput3d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select
void
void select (c_string , c_string )
void select (c_string , c_string )<br><br>Member function of class <b>VTKOutput3d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select
void
void select (std::vector<std_string >, c_string )
void select (std::vector&ltstd_string &gt, c_string )<br><br>Member function of class <b>VTKOutput3d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select
void
void select (SmartPtr<UserNumber> , c_string )
void select (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , c_string )<br><br>Member function of class <b>VTKOutput3d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select
void
void select (SmartPtr<UserVector> , c_string )
void select (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , c_string )<br><br>Member function of class <b>VTKOutput3d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select_nodal
void
void select_nodal (c_string , c_string )
void select_nodal (c_string , c_string )<br><br>Member function of class <b>VTKOutput3d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select_nodal
void
void select_nodal (std::vector<std_string >, c_string )
void select_nodal (std::vector&ltstd_string &gt, c_string )<br><br>Member function of class <b>VTKOutput3d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select_nodal
void
void select_nodal (SmartPtr<UserNumber> , c_string )
void select_nodal (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , c_string )<br><br>Member function of class <b>VTKOutput3d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select_nodal
void
void select_nodal (SmartPtr<UserVector> , c_string )
void select_nodal (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , c_string )<br><br>Member function of class <b>VTKOutput3d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select_element
void
void select_element (c_string , c_string )
void select_element (c_string , c_string )<br><br>Member function of class <b>VTKOutput3d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select_element
void
void select_element (std::vector<std_string >, c_string )
void select_element (std::vector&ltstd_string &gt, c_string )<br><br>Member function of class <b>VTKOutput3d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select_element
void
void select_element (SmartPtr<UserNumber> , c_string )
void select_element (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , c_string )<br><br>Member function of class <b>VTKOutput3d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select_element
void
void select_element (SmartPtr<UserVector> , c_string )
void select_element (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , c_string )<br><br>Member function of class <b>VTKOutput3d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_binary
void
void set_binary (bool )
void set_binary (bool )<br><br>Member function of class <b>VTKOutput3d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
write_time_pvd
void
void write_time_pvd (c_string , GridFunction *)
void write_time_pvd (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>VTKOutput3d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
write_time_pvd
void
void write_time_pvd (c_string , GridFunction *)
void write_time_pvd (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>VTKOutput3d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
write_time_pvd
void
void write_time_pvd (c_string , GridFunction *)
void write_time_pvd (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>VTKOutput3d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *, integer , number , bool )
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number , bool )<br><br>Member function of class <b>VTKOutput3d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *, integer , number )
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number )<br><br>Member function of class <b>VTKOutput3d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *, bool )
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool )<br><br>Member function of class <b>VTKOutput3d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *)
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>VTKOutput3d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *, integer , number , bool )
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number , bool )<br><br>Member function of class <b>VTKOutput3d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *, integer , number )
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number )<br><br>Member function of class <b>VTKOutput3d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *, bool )
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool )<br><br>Member function of class <b>VTKOutput3d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *)
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>VTKOutput3d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *, integer , number , bool )
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number , bool )<br><br>Member function of class <b>VTKOutput3d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *, integer , number )
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number )<br><br>Member function of class <b>VTKOutput3d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *, bool )
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool )<br><br>Member function of class <b>VTKOutput3d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *)
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>VTKOutput3d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
;
class
VankaCPU1
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 ILinearIteratorCPU1 IPreconditionerCPU1 
Classgroup <b>Vanka</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>alg=CPU1;</b><br>Vanka Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="IPreconditionerCPU1.html">IPreconditionerCPU1</a> <a href="VankaCPU1.html">VankaCPU1</a> <br><table><tr><td colspan=2><h3>Vanka Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>VankaCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Vanka Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_relax (number relax)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
VankaCPU1

VankaCPU1 ()
VankaCPU1 ()<br>Constructor of class <b>VankaCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_relax
void
void set_relax (number relax)
void set_relax (number relax)<br><br>Member function of class <b>VankaCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
VankaCPU2
VectorDebugWritingObjectCPU2 DebugWritingObjectCPU2 ILinearIteratorCPU2 IPreconditionerCPU2 
Classgroup <b>Vanka</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>alg=CPU2;</b><br>Vanka Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU2.html">VectorDebugWritingObjectCPU2</a> <a href="DebugWritingObjectCPU2.html">DebugWritingObjectCPU2</a> <a href="ILinearIteratorCPU2.html">ILinearIteratorCPU2</a> <a href="IPreconditionerCPU2.html">IPreconditionerCPU2</a> <a href="VankaCPU2.html">VankaCPU2</a> <br><table><tr><td colspan=2><h3>Vanka Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>VankaCPU2 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Vanka Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_relax (number relax)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
VankaCPU2

VankaCPU2 ()
VankaCPU2 ()<br>Constructor of class <b>VankaCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_relax
void
void set_relax (number relax)
void set_relax (number relax)<br><br>Member function of class <b>VankaCPU2</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
VankaCPU3
VectorDebugWritingObjectCPU3 DebugWritingObjectCPU3 ILinearIteratorCPU3 IPreconditionerCPU3 
Classgroup <b>Vanka</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor.  Tag <b>alg=CPU3;</b><br>Vanka Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU3.html">VectorDebugWritingObjectCPU3</a> <a href="DebugWritingObjectCPU3.html">DebugWritingObjectCPU3</a> <a href="ILinearIteratorCPU3.html">ILinearIteratorCPU3</a> <a href="IPreconditionerCPU3.html">IPreconditionerCPU3</a> <a href="VankaCPU3.html">VankaCPU3</a> <br><table><tr><td colspan=2><h3>Vanka Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>VankaCPU3 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Vanka Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_relax (number relax)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
VankaCPU3

VankaCPU3 ()
VankaCPU3 ()<br>Constructor of class <b>VankaCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_relax
void
void set_relax (number relax)
void set_relax (number relax)<br><br>Member function of class <b>VankaCPU3</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
Vec1d

Classgroup <b>Vec</b><br>Registry Group: <b>/ug4/Util/VecMath</b><br>class has no constructor.  Tag <b>dim=1d</b><br><table><tr><td colspan=2><h3>Vec Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const <a href="c_double.html">c_double</a> *</td><td class="memItemRight" valign=bottom>coord (size_t )</td></tr><tr><td><br></td></tr></table>
memberfunction
coord
const c_double*
const c_double *coord (size_t ) const
const <a href="c_double.html">c_double</a> *coord (size_t )<br><br>Member function of class <b>Vec1d</b><br>Registry Group: <b>/ug4/Util/VecMath</b>
;
class
Vec2d

Classgroup <b>Vec</b><br>Registry Group: <b>/ug4/Util/VecMath</b><br>class has no constructor.  Tag <b>dim=2d</b><br><table><tr><td colspan=2><h3>Vec Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const <a href="c_double.html">c_double</a> *</td><td class="memItemRight" valign=bottom>coord (size_t )</td></tr><tr><td><br></td></tr></table>
memberfunction
coord
const c_double*
const c_double *coord (size_t ) const
const <a href="c_double.html">c_double</a> *coord (size_t )<br><br>Member function of class <b>Vec2d</b><br>Registry Group: <b>/ug4/Util/VecMath</b>
;
class
Vec3d

Classgroup <b>Vec</b><br>Registry Group: <b>/ug4/Util/VecMath</b><br>class has no constructor.  Tag <b>dim=3d</b><br><table><tr><td colspan=2><h3>Vec Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const <a href="c_double.html">c_double</a> *</td><td class="memItemRight" valign=bottom>coord (size_t )</td></tr><tr><td><br></td></tr></table>
memberfunction
coord
const c_double*
const c_double *coord (size_t ) const
const <a href="c_double.html">c_double</a> *coord (size_t )<br><br>Member function of class <b>Vec3d</b><br>Registry Group: <b>/ug4/Util/VecMath</b>
;
class
Vec4d

Classgroup <b>Vec</b><br>Registry Group: <b>/ug4/Util/VecMath</b><br>class has no constructor.  Tag <b>dim=4d</b><br><table><tr><td colspan=2><h3>Vec Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const <a href="c_double.html">c_double</a> *</td><td class="memItemRight" valign=bottom>coord (size_t )</td></tr><tr><td><br></td></tr></table>
memberfunction
coord
const c_double*
const c_double *coord (size_t ) const
const <a href="c_double.html">c_double</a> *coord (size_t )<br><br>Member function of class <b>Vec4d</b><br>Registry Group: <b>/ug4/Util/VecMath</b>
;
class
VectorCPU1

Classgroup <b>Vector</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has constructor.  Tag <b>alg=CPU1;</b><br><table><tr><td colspan=2><h3>Vector Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>VectorCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Vector Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>set (number Number)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>set_random (number Number, number )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Vector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>size ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Size<br/></td></tr><tr><td><br></td></tr></table>
constructor
VectorCPU1

VectorCPU1 ()
VectorCPU1 ()<br>Constructor of class <b>VectorCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
set
bool
bool set (number Number)
bool set (number Number)<br><br>Member function of class <b>VectorCPU1</b><br>returns Success<br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
set_random
bool
bool set_random (number Number, number )
bool set_random (number Number, number )<br><br>Member function of class <b>VectorCPU1</b><br>returns Success<br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
print
void
void print ()
void print ()<br><br>Member function of class <b>VectorCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
size
unknown
size_t size () const
size_t size ()<br><br>Member function of class <b>VectorCPU1</b><br>returns Size<br>Registry Group: <b>/ug4/Algebra</b>
;
class
VectorCPU2

Classgroup <b>Vector</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has constructor.  Tag <b>alg=CPU2;</b><br><table><tr><td colspan=2><h3>Vector Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>VectorCPU2 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Vector Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>set (number Number)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>set_random (number Number, number )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Vector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>size ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Size<br/></td></tr><tr><td><br></td></tr></table>
constructor
VectorCPU2

VectorCPU2 ()
VectorCPU2 ()<br>Constructor of class <b>VectorCPU2</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
set
bool
bool set (number Number)
bool set (number Number)<br><br>Member function of class <b>VectorCPU2</b><br>returns Success<br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
set_random
bool
bool set_random (number Number, number )
bool set_random (number Number, number )<br><br>Member function of class <b>VectorCPU2</b><br>returns Success<br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
print
void
void print ()
void print ()<br><br>Member function of class <b>VectorCPU2</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
size
unknown
size_t size () const
size_t size ()<br><br>Member function of class <b>VectorCPU2</b><br>returns Size<br>Registry Group: <b>/ug4/Algebra</b>
;
class
VectorCPU3

Classgroup <b>Vector</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has constructor.  Tag <b>alg=CPU3;</b><br><table><tr><td colspan=2><h3>Vector Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>VectorCPU3 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Vector Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>set (number Number)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>set_random (number Number, number )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Vector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>size ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Size<br/></td></tr><tr><td><br></td></tr></table>
constructor
VectorCPU3

VectorCPU3 ()
VectorCPU3 ()<br>Constructor of class <b>VectorCPU3</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
set
bool
bool set (number Number)
bool set (number Number)<br><br>Member function of class <b>VectorCPU3</b><br>returns Success<br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
set_random
bool
bool set_random (number Number, number )
bool set_random (number Number, number )<br><br>Member function of class <b>VectorCPU3</b><br>returns Success<br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
print
void
void print ()
void print ()<br><br>Member function of class <b>VectorCPU3</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
size
unknown
size_t size () const
size_t size ()<br><br>Member function of class <b>VectorCPU3</b><br>returns Size<br>Registry Group: <b>/ug4/Algebra</b>
;
class
VectorDebugWritingObjectCPU1

Classgroup <b>VectorDebugWritingObject</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>alg=CPU1;</b><br><table><tr><td colspan=2><h3>VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
memberfunction
set_debug
void
void set_debug (SmartPtr<IVectorDebugWriter> debugWriter)
void set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)<br><br>Member function of class <b>VectorDebugWritingObjectCPU1</b><br>returns sets a debug writer<br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
vector_debug_writer
SmartPtr<IVectorDebugWriterCPU1>
SmartPtr<IVectorDebugWriter> vector_debug_writer ()
SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; vector_debug_writer ()<br><br>Member function of class <b>VectorDebugWritingObjectCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
vector_debug_writer
ConstSmartPtr<IVectorDebugWriterCPU1>
const SmartPtr<IVectorDebugWriter> vector_debug_writer () const
const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; vector_debug_writer ()<br><br>Member function of class <b>VectorDebugWritingObjectCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
;
class
VectorDebugWritingObjectCPU2

Classgroup <b>VectorDebugWritingObject</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>alg=CPU2;</b><br><table><tr><td colspan=2><h3>VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
memberfunction
set_debug
void
void set_debug (SmartPtr<IVectorDebugWriter> debugWriter)
void set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)<br><br>Member function of class <b>VectorDebugWritingObjectCPU2</b><br>returns sets a debug writer<br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
vector_debug_writer
SmartPtr<IVectorDebugWriterCPU2>
SmartPtr<IVectorDebugWriter> vector_debug_writer ()
SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; vector_debug_writer ()<br><br>Member function of class <b>VectorDebugWritingObjectCPU2</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
vector_debug_writer
ConstSmartPtr<IVectorDebugWriterCPU2>
const SmartPtr<IVectorDebugWriter> vector_debug_writer () const
const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; vector_debug_writer ()<br><br>Member function of class <b>VectorDebugWritingObjectCPU2</b><br>Registry Group: <b>/ug4/Algebra</b>
;
class
VectorDebugWritingObjectCPU3

Classgroup <b>VectorDebugWritingObject</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor.  Tag <b>alg=CPU3;</b><br><table><tr><td colspan=2><h3>VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
memberfunction
set_debug
void
void set_debug (SmartPtr<IVectorDebugWriter> debugWriter)
void set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)<br><br>Member function of class <b>VectorDebugWritingObjectCPU3</b><br>returns sets a debug writer<br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
vector_debug_writer
SmartPtr<IVectorDebugWriterCPU3>
SmartPtr<IVectorDebugWriter> vector_debug_writer ()
SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; vector_debug_writer ()<br><br>Member function of class <b>VectorDebugWritingObjectCPU3</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
vector_debug_writer
ConstSmartPtr<IVectorDebugWriterCPU3>
const SmartPtr<IVectorDebugWriter> vector_debug_writer () const
const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; vector_debug_writer ()<br><br>Member function of class <b>VectorDebugWritingObjectCPU3</b><br>Registry Group: <b>/ug4/Algebra</b>
;
class
WeightedUpwind1d
IConvectionShapes1d 
Classgroup <b>WeightedUpwind</b><br>Registry Group: <b>/ug4/SpatialDisc/Upwind</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="IConvectionShapes1d.html">IConvectionShapes1d</a> <a href="WeightedUpwind1d.html">WeightedUpwind1d</a> <br><table><tr><td colspan=2><h3>WeightedUpwind Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>WeightedUpwind1d ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>WeightedUpwind1d (number weight)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>WeightedUpwind Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_weight (number )</td></tr><tr><td><br></td></tr></table>
constructor
WeightedUpwind1d

WeightedUpwind1d ()
WeightedUpwind1d ()<br>Constructor of class <b>WeightedUpwind1d</b><br>Registry Group: <b>/ug4/SpatialDisc/Upwind</b>
constructor
WeightedUpwind1d

WeightedUpwind1d (number weight)
WeightedUpwind1d (number weight)<br>Constructor of class <b>WeightedUpwind1d</b><br>Registry Group: <b>/ug4/SpatialDisc/Upwind</b>
memberfunction
set_weight
void
void set_weight (number )
void set_weight (number )<br><br>Member function of class <b>WeightedUpwind1d</b><br>Registry Group: <b>/ug4/SpatialDisc/Upwind</b>
;
class
WeightedUpwind2d
IConvectionShapes2d 
Classgroup <b>WeightedUpwind</b><br>Registry Group: <b>/ug4/SpatialDisc/Upwind</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IConvectionShapes2d.html">IConvectionShapes2d</a> <a href="WeightedUpwind2d.html">WeightedUpwind2d</a> <br><table><tr><td colspan=2><h3>WeightedUpwind Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>WeightedUpwind2d ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>WeightedUpwind2d (number weight)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>WeightedUpwind Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_weight (number )</td></tr><tr><td><br></td></tr></table>
constructor
WeightedUpwind2d

WeightedUpwind2d ()
WeightedUpwind2d ()<br>Constructor of class <b>WeightedUpwind2d</b><br>Registry Group: <b>/ug4/SpatialDisc/Upwind</b>
constructor
WeightedUpwind2d

WeightedUpwind2d (number weight)
WeightedUpwind2d (number weight)<br>Constructor of class <b>WeightedUpwind2d</b><br>Registry Group: <b>/ug4/SpatialDisc/Upwind</b>
memberfunction
set_weight
void
void set_weight (number )
void set_weight (number )<br><br>Member function of class <b>WeightedUpwind2d</b><br>Registry Group: <b>/ug4/SpatialDisc/Upwind</b>
;
class
WeightedUpwind3d
IConvectionShapes3d 
Classgroup <b>WeightedUpwind</b><br>Registry Group: <b>/ug4/SpatialDisc/Upwind</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IConvectionShapes3d.html">IConvectionShapes3d</a> <a href="WeightedUpwind3d.html">WeightedUpwind3d</a> <br><table><tr><td colspan=2><h3>WeightedUpwind Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>WeightedUpwind3d ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>WeightedUpwind3d (number weight)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>WeightedUpwind Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_weight (number )</td></tr><tr><td><br></td></tr></table>
constructor
WeightedUpwind3d

WeightedUpwind3d ()
WeightedUpwind3d ()<br>Constructor of class <b>WeightedUpwind3d</b><br>Registry Group: <b>/ug4/SpatialDisc/Upwind</b>
constructor
WeightedUpwind3d

WeightedUpwind3d (number weight)
WeightedUpwind3d (number weight)<br>Constructor of class <b>WeightedUpwind3d</b><br>Registry Group: <b>/ug4/SpatialDisc/Upwind</b>
memberfunction
set_weight
void
void set_weight (number )
void set_weight (number )<br><br>Member function of class <b>WeightedUpwind3d</b><br>Registry Group: <b>/ug4/SpatialDisc/Upwind</b>
;
class
c_bool

Registry Group: <b></b><br>class has no constructor. <br><table></table>
;
class
c_char

Registry Group: <b></b><br>class has no constructor. <br><table></table>
;
class
c_const_char_ptr

Registry Group: <b></b><br>class has no constructor. <br><table></table>
;
class
c_double

Registry Group: <b></b><br>class has no constructor. <br><table></table>
;
class
c_float

Registry Group: <b></b><br>class has no constructor. <br><table></table>
;
class
c_int

Registry Group: <b></b><br>class has no constructor. <br><table></table>
;
class
c_size_t

Registry Group: <b></b><br>class has no constructor. <br><table></table>
;
class
c_string

Registry Group: <b></b><br>class has no constructor. <br><table></table>
;
class
odes1d
IElemDisc1d 
Classgroup <b>odes</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="IElemDisc1d.html">IElemDisc1d</a> <a href="odes1d.html">odes1d</a> <br><table><tr><td colspan=2><h3>odes Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>odes1d (c_string Functions, c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>odes Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_D1rhs (<a href="IFunctionNumber.html">IFunctionNumber</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_D2rhs (<a href="IFunctionNumber.html">IFunctionNumber</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_name (c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_rhs (<a href="IFunctionNumber.html">IFunctionNumber</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
odes1d

odes1d (c_string Functions, c_string Subset(s))
odes1d (c_string Functions, c_string Subset(s))<br>Constructor of class <b>odes1d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_rhs
void
void set_rhs (IFunctionNumber *)
void set_rhs (<a href="IFunctionNumber.html">IFunctionNumber</a> *)<br><br>Member function of class <b>odes1d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_D1rhs
void
void set_D1rhs (IFunctionNumber *)
void set_D1rhs (<a href="IFunctionNumber.html">IFunctionNumber</a> *)<br><br>Member function of class <b>odes1d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_D2rhs
void
void set_D2rhs (IFunctionNumber *)
void set_D2rhs (<a href="IFunctionNumber.html">IFunctionNumber</a> *)<br><br>Member function of class <b>odes1d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_name
void
void set_name (c_string )
void set_name (c_string )<br><br>Member function of class <b>odes1d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
;
class
odes2d
IElemDisc2d 
Classgroup <b>odes</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="odes2d.html">odes2d</a> <br><table><tr><td colspan=2><h3>odes Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>odes2d (c_string Functions, c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>odes Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_D1rhs (<a href="IFunctionNumber.html">IFunctionNumber</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_D2rhs (<a href="IFunctionNumber.html">IFunctionNumber</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_name (c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_rhs (<a href="IFunctionNumber.html">IFunctionNumber</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
odes2d

odes2d (c_string Functions, c_string Subset(s))
odes2d (c_string Functions, c_string Subset(s))<br>Constructor of class <b>odes2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_rhs
void
void set_rhs (IFunctionNumber *)
void set_rhs (<a href="IFunctionNumber.html">IFunctionNumber</a> *)<br><br>Member function of class <b>odes2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_D1rhs
void
void set_D1rhs (IFunctionNumber *)
void set_D1rhs (<a href="IFunctionNumber.html">IFunctionNumber</a> *)<br><br>Member function of class <b>odes2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_D2rhs
void
void set_D2rhs (IFunctionNumber *)
void set_D2rhs (<a href="IFunctionNumber.html">IFunctionNumber</a> *)<br><br>Member function of class <b>odes2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_name
void
void set_name (c_string )
void set_name (c_string )<br><br>Member function of class <b>odes2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
;
class
odes3d
IElemDisc3d 
Classgroup <b>odes</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IElemDisc3d.html">IElemDisc3d</a> <a href="odes3d.html">odes3d</a> <br><table><tr><td colspan=2><h3>odes Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>odes3d (c_string Functions, c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>odes Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_D1rhs (<a href="IFunctionNumber.html">IFunctionNumber</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_D2rhs (<a href="IFunctionNumber.html">IFunctionNumber</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_name (c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_rhs (<a href="IFunctionNumber.html">IFunctionNumber</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
odes3d

odes3d (c_string Functions, c_string Subset(s))
odes3d (c_string Functions, c_string Subset(s))<br>Constructor of class <b>odes3d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_rhs
void
void set_rhs (IFunctionNumber *)
void set_rhs (<a href="IFunctionNumber.html">IFunctionNumber</a> *)<br><br>Member function of class <b>odes3d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_D1rhs
void
void set_D1rhs (IFunctionNumber *)
void set_D1rhs (<a href="IFunctionNumber.html">IFunctionNumber</a> *)<br><br>Member function of class <b>odes3d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_D2rhs
void
void set_D2rhs (IFunctionNumber *)
void set_D2rhs (<a href="IFunctionNumber.html">IFunctionNumber</a> *)<br><br>Member function of class <b>odes3d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_name
void
void set_name (c_string )
void set_name (c_string )<br><br>Member function of class <b>odes3d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
;
class
transmembrane_current1d
IElemDisc1d 
Classgroup <b>transmembrane_current</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b><br>class has constructor.  Tag <b>dim=1d;</b><br>Inheritance: <a href="IElemDisc1d.html">IElemDisc1d</a> <a href="transmembrane_current1d.html">transmembrane_current1d</a> <br><table><tr><td colspan=2><h3>transmembrane_current Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>transmembrane_current1d (c_string Functions, c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>transmembrane_current Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_activemembrane (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_capacity (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_dendrite (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_injection (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_measure_capacitive_current (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_measure_injection_current (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_measure_leakage_current (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_measure_postsynaptic_current (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_measure_potassium_current (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_measure_sodium_current (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_measure_transmembrane_net_current (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_myelin (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_psc (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_sign (number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
transmembrane_current1d

transmembrane_current1d (c_string Functions, c_string Subset(s))
transmembrane_current1d (c_string Functions, c_string Subset(s))<br>Constructor of class <b>transmembrane_current1d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_capacity
void
void set_capacity (number )
void set_capacity (number )<br><br>Member function of class <b>transmembrane_current1d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_sign
void
void set_sign (number )
void set_sign (number )<br><br>Member function of class <b>transmembrane_current1d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_injection
void
void set_injection (SmartPtr<UserNumber> )
void set_injection (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>transmembrane_current1d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_myelin
void
void set_myelin (number )
void set_myelin (number )<br><br>Member function of class <b>transmembrane_current1d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_activemembrane
void
void set_activemembrane (number )
void set_activemembrane (number )<br><br>Member function of class <b>transmembrane_current1d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_dendrite
void
void set_dendrite (number )
void set_dendrite (number )<br><br>Member function of class <b>transmembrane_current1d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_psc
void
void set_psc (number )
void set_psc (number )<br><br>Member function of class <b>transmembrane_current1d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_measure_sodium_current
void
void set_measure_sodium_current (number )
void set_measure_sodium_current (number )<br><br>Member function of class <b>transmembrane_current1d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_measure_potassium_current
void
void set_measure_potassium_current (number )
void set_measure_potassium_current (number )<br><br>Member function of class <b>transmembrane_current1d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_measure_leakage_current
void
void set_measure_leakage_current (number )
void set_measure_leakage_current (number )<br><br>Member function of class <b>transmembrane_current1d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_measure_capacitive_current
void
void set_measure_capacitive_current (number )
void set_measure_capacitive_current (number )<br><br>Member function of class <b>transmembrane_current1d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_measure_transmembrane_net_current
void
void set_measure_transmembrane_net_current (number )
void set_measure_transmembrane_net_current (number )<br><br>Member function of class <b>transmembrane_current1d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_measure_injection_current
void
void set_measure_injection_current (number )
void set_measure_injection_current (number )<br><br>Member function of class <b>transmembrane_current1d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_measure_postsynaptic_current
void
void set_measure_postsynaptic_current (number )
void set_measure_postsynaptic_current (number )<br><br>Member function of class <b>transmembrane_current1d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
;
class
transmembrane_current2d
IElemDisc2d 
Classgroup <b>transmembrane_current</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b><br>class has constructor.  Tag <b>dim=2d;</b><br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="transmembrane_current2d.html">transmembrane_current2d</a> <br><table><tr><td colspan=2><h3>transmembrane_current Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>transmembrane_current2d (c_string Functions, c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>transmembrane_current Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_activemembrane (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_capacity (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_dendrite (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_injection (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_measure_capacitive_current (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_measure_injection_current (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_measure_leakage_current (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_measure_postsynaptic_current (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_measure_potassium_current (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_measure_sodium_current (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_measure_transmembrane_net_current (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_myelin (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_psc (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_sign (number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
transmembrane_current2d

transmembrane_current2d (c_string Functions, c_string Subset(s))
transmembrane_current2d (c_string Functions, c_string Subset(s))<br>Constructor of class <b>transmembrane_current2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_capacity
void
void set_capacity (number )
void set_capacity (number )<br><br>Member function of class <b>transmembrane_current2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_sign
void
void set_sign (number )
void set_sign (number )<br><br>Member function of class <b>transmembrane_current2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_injection
void
void set_injection (SmartPtr<UserNumber> )
void set_injection (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>transmembrane_current2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_myelin
void
void set_myelin (number )
void set_myelin (number )<br><br>Member function of class <b>transmembrane_current2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_activemembrane
void
void set_activemembrane (number )
void set_activemembrane (number )<br><br>Member function of class <b>transmembrane_current2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_dendrite
void
void set_dendrite (number )
void set_dendrite (number )<br><br>Member function of class <b>transmembrane_current2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_psc
void
void set_psc (number )
void set_psc (number )<br><br>Member function of class <b>transmembrane_current2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_measure_sodium_current
void
void set_measure_sodium_current (number )
void set_measure_sodium_current (number )<br><br>Member function of class <b>transmembrane_current2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_measure_potassium_current
void
void set_measure_potassium_current (number )
void set_measure_potassium_current (number )<br><br>Member function of class <b>transmembrane_current2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_measure_leakage_current
void
void set_measure_leakage_current (number )
void set_measure_leakage_current (number )<br><br>Member function of class <b>transmembrane_current2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_measure_capacitive_current
void
void set_measure_capacitive_current (number )
void set_measure_capacitive_current (number )<br><br>Member function of class <b>transmembrane_current2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_measure_transmembrane_net_current
void
void set_measure_transmembrane_net_current (number )
void set_measure_transmembrane_net_current (number )<br><br>Member function of class <b>transmembrane_current2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_measure_injection_current
void
void set_measure_injection_current (number )
void set_measure_injection_current (number )<br><br>Member function of class <b>transmembrane_current2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_measure_postsynaptic_current
void
void set_measure_postsynaptic_current (number )
void set_measure_postsynaptic_current (number )<br><br>Member function of class <b>transmembrane_current2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
;
class
transmembrane_current3d
IElemDisc3d 
Classgroup <b>transmembrane_current</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b><br>class has constructor.  Tag <b>dim=3d;</b><br>Inheritance: <a href="IElemDisc3d.html">IElemDisc3d</a> <a href="transmembrane_current3d.html">transmembrane_current3d</a> <br><table><tr><td colspan=2><h3>transmembrane_current Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>transmembrane_current3d (c_string Functions, c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>transmembrane_current Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_activemembrane (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_capacity (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_dendrite (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_injection (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_measure_capacitive_current (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_measure_injection_current (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_measure_leakage_current (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_measure_postsynaptic_current (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_measure_potassium_current (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_measure_sodium_current (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_measure_transmembrane_net_current (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_myelin (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_psc (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_sign (number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
transmembrane_current3d

transmembrane_current3d (c_string Functions, c_string Subset(s))
transmembrane_current3d (c_string Functions, c_string Subset(s))<br>Constructor of class <b>transmembrane_current3d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_capacity
void
void set_capacity (number )
void set_capacity (number )<br><br>Member function of class <b>transmembrane_current3d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_sign
void
void set_sign (number )
void set_sign (number )<br><br>Member function of class <b>transmembrane_current3d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_injection
void
void set_injection (SmartPtr<UserNumber> )
void set_injection (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>transmembrane_current3d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_myelin
void
void set_myelin (number )
void set_myelin (number )<br><br>Member function of class <b>transmembrane_current3d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_activemembrane
void
void set_activemembrane (number )
void set_activemembrane (number )<br><br>Member function of class <b>transmembrane_current3d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_dendrite
void
void set_dendrite (number )
void set_dendrite (number )<br><br>Member function of class <b>transmembrane_current3d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_psc
void
void set_psc (number )
void set_psc (number )<br><br>Member function of class <b>transmembrane_current3d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_measure_sodium_current
void
void set_measure_sodium_current (number )
void set_measure_sodium_current (number )<br><br>Member function of class <b>transmembrane_current3d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_measure_potassium_current
void
void set_measure_potassium_current (number )
void set_measure_potassium_current (number )<br><br>Member function of class <b>transmembrane_current3d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_measure_leakage_current
void
void set_measure_leakage_current (number )
void set_measure_leakage_current (number )<br><br>Member function of class <b>transmembrane_current3d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_measure_capacitive_current
void
void set_measure_capacitive_current (number )
void set_measure_capacitive_current (number )<br><br>Member function of class <b>transmembrane_current3d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_measure_transmembrane_net_current
void
void set_measure_transmembrane_net_current (number )
void set_measure_transmembrane_net_current (number )<br><br>Member function of class <b>transmembrane_current3d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_measure_injection_current
void
void set_measure_injection_current (number )
void set_measure_injection_current (number )<br><br>Member function of class <b>transmembrane_current3d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_measure_postsynaptic_current
void
void set_measure_postsynaptic_current (number )
void set_measure_postsynaptic_current (number )<br><br>Member function of class <b>transmembrane_current3d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
;
class
Vec

Class <b>Vec1d</b>, default implementation of classgroup <b>Vec</b><br>Registry Group: <b>/ug4/Util/VecMath</b><br>class has no constructor. <br><table><tr><td colspan=2><h3>Vec Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const <a href="c_double.html">c_double</a> *</td><td class="memItemRight" valign=bottom>coord (size_t )</td></tr><tr><td><br></td></tr></table>
memberfunction
coord
const c_double*
const c_double *coord (size_t ) const
const <a href="c_double.html">c_double</a> *coord (size_t )<br><br>Member function of class <b>Vec1d</b><br>Registry Group: <b>/ug4/Util/VecMath</b>
;
class
Domain
IDomain 
Class <b>Domain2d</b>, default implementation of classgroup <b>Domain</b><br>Registry Group: <b>/ug4/Domain</b><br>class has constructor. <br>Inheritance: <a href="IDomain.html">IDomain</a> <a href="Domain2d.html">Domain2d</a> <br><table><tr><td colspan=2><h3>Domain Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>Domain2d ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Domain Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>empty ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IDomain Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="MultiGrid.html">MultiGrid</a>&gt; </td><td class="memItemRight" valign=bottom>grid ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="MGSubsetHandler.html">MGSubsetHandler</a>&gt; </td><td class="memItemRight" valign=bottom>subset_handler ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited IDomain Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const <a href="DomainInfo.html">DomainInfo</a> *</td><td class="memItemRight" valign=bottom>domain_info ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns DomainInfo<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td><br></td></tr></table>
constructor
Domain2d

Domain2d ()
Domain2d ()<br>Constructor of class <b>Domain2d</b><br>Registry Group: <b>/ug4/Domain</b>
memberfunction
empty
bool
bool empty () const
bool empty ()<br><br>Member function of class <b>Domain2d</b><br>Registry Group: <b>/ug4/Domain</b>
;
class
IPartitioner

Class <b>IPartitioner2d</b>, default implementation of classgroup <b>IPartitioner</b><br>Registry Group: <b>/ug4/LoadBalancing</b><br>class has no constructor. <br><table></table>
;
class
Partitioner_Bisection
IPartitioner2d 
Class <b>Partitioner_Bisection2d</b>, default implementation of classgroup <b>Partitioner_Bisection</b><br>Registry Group: <b>/ug4/LoadBalancing</b><br>class has constructor. <br>Inheritance: <a href="IPartitioner2d.html">IPartitioner2d</a> <a href="Partitioner_Bisection2d.html">Partitioner_Bisection2d</a> <br><table><tr><td colspan=2><h3>Partitioner_Bisection Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>Partitioner_Bisection2d ()</td></tr><tr><td><br></td></tr></table>
constructor
Partitioner_Bisection2d

Partitioner_Bisection2d ()
Partitioner_Bisection2d ()<br>Constructor of class <b>Partitioner_Bisection2d</b><br>Registry Group: <b>/ug4/LoadBalancing</b>
;
class
LoadBalancer

Class <b>LoadBalancer2d</b>, default implementation of classgroup <b>LoadBalancer</b><br>Registry Group: <b>/ug4/LoadBalancing</b><br>class has no constructor. <br><table><tr><td colspan=2><h3>LoadBalancer Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_distribution_level (size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>rebalance ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_balance_threshold (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_element_threshold (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_partitioner (SmartPtr&lt;<a href="IPartitioner2d.html">IPartitioner</a>&gt; )</td></tr><tr><td><br></td></tr></table>
memberfunction
add_distribution_level
void
void add_distribution_level (size_t , size_t )
void add_distribution_level (size_t , size_t )<br><br>Member function of class <b>LoadBalancer2d</b><br>Registry Group: <b>/ug4/LoadBalancing</b>
memberfunction
rebalance
void
void rebalance ()
void rebalance ()<br><br>Member function of class <b>LoadBalancer2d</b><br>Registry Group: <b>/ug4/LoadBalancing</b>
memberfunction
set_balance_threshold
void
void set_balance_threshold (number )
void set_balance_threshold (number )<br><br>Member function of class <b>LoadBalancer2d</b><br>Registry Group: <b>/ug4/LoadBalancing</b>
memberfunction
set_element_threshold
void
void set_element_threshold (size_t )
void set_element_threshold (size_t )<br><br>Member function of class <b>LoadBalancer2d</b><br>Registry Group: <b>/ug4/LoadBalancing</b>
memberfunction
set_partitioner
void
void set_partitioner (SmartPtr<IPartitioner> )
void set_partitioner (SmartPtr&lt;<a href="IPartitioner2d.html">IPartitioner</a>&gt; )<br><br>Member function of class <b>LoadBalancer2d</b><br>Registry Group: <b>/ug4/LoadBalancing</b>
;
class
IElemDisc

Class <b>IElemDisc2d</b>, default implementation of classgroup <b>IElemDisc</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b><br>class has no constructor. <br><table><tr><td colspan=2><h3>IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
memberfunction
set_stationary
void
void set_stationary ()
void set_stationary ()<br><br>Member function of class <b>IElemDisc2d</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b>
;
class
NeumannBoundaryBase
IElemDisc2d 
Class <b>NeumannBoundaryBase2d</b>, default implementation of classgroup <b>NeumannBoundaryBase</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b><br>class has no constructor. <br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="NeumannBoundaryBase2d.html">NeumannBoundaryBase2d</a> <br><table><tr><td colspan=2><h3>NeumannBoundaryBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="CondUserNumber2d.html">CondUserNumber</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gt, c_string , c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
memberfunction
add
void
void add (SmartPtr<UserNumber> , c_string , c_string )
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , c_string , c_string )<br><br>Member function of class <b>NeumannBoundaryBase2d</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b>
memberfunction
add
void
void add (SmartPtr<CondUserNumber> , c_string , c_string )
void add (SmartPtr&lt;<a href="CondUserNumber2d.html">CondUserNumber</a>&gt; , c_string , c_string )<br><br>Member function of class <b>NeumannBoundaryBase2d</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b>
memberfunction
add
void
void add (SmartPtr<UserVector> , c_string , c_string )
void add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , c_string , c_string )<br><br>Member function of class <b>NeumannBoundaryBase2d</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b>
memberfunction
add
void
void add (number , c_string , c_string )
void add (number , c_string , c_string )<br><br>Member function of class <b>NeumannBoundaryBase2d</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b>
memberfunction
add
void
void add (c_string , c_string , c_string )
void add (c_string , c_string , c_string )<br><br>Member function of class <b>NeumannBoundaryBase2d</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b>
memberfunction
add
void
void add (std::vector<number >, c_string , c_string )
void add (std::vector&ltnumber &gt, c_string , c_string )<br><br>Member function of class <b>NeumannBoundaryBase2d</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b>
;
class
NeumannBoundaryFV1
IElemDisc2d NeumannBoundaryBase2d 
Class <b>NeumannBoundaryFV12d</b>, default implementation of classgroup <b>NeumannBoundaryFV1</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b><br>class has constructor. <br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="NeumannBoundaryBase2d.html">NeumannBoundaryBase2d</a> <a href="NeumannBoundaryFV12d.html">NeumannBoundaryFV12d</a> <br><table><tr><td colspan=2><h3>NeumannBoundaryFV1 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NeumannBoundaryFV12d (c_string Function)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NeumannBoundaryBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="CondUserNumber2d.html">CondUserNumber</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gt, c_string , c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
NeumannBoundaryFV12d

NeumannBoundaryFV12d (c_string Function)
NeumannBoundaryFV12d (c_string Function)<br>Constructor of class <b>NeumannBoundaryFV12d</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b>
;
class
NeumannBoundaryFV
IElemDisc2d NeumannBoundaryBase2d 
Class <b>NeumannBoundaryFV2d</b>, default implementation of classgroup <b>NeumannBoundaryFV</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b><br>class has constructor. <br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="NeumannBoundaryBase2d.html">NeumannBoundaryBase2d</a> <a href="NeumannBoundaryFV2d.html">NeumannBoundaryFV2d</a> <br><table><tr><td colspan=2><h3>NeumannBoundaryFV Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NeumannBoundaryFV2d (c_string Function)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NeumannBoundaryBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="CondUserNumber2d.html">CondUserNumber</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gt, c_string , c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
NeumannBoundaryFV2d

NeumannBoundaryFV2d (c_string Function)
NeumannBoundaryFV2d (c_string Function)<br>Constructor of class <b>NeumannBoundaryFV2d</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b>
;
class
NeumannBoundaryFE
IElemDisc2d NeumannBoundaryBase2d 
Class <b>NeumannBoundaryFE2d</b>, default implementation of classgroup <b>NeumannBoundaryFE</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b><br>class has constructor. <br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="NeumannBoundaryBase2d.html">NeumannBoundaryBase2d</a> <a href="NeumannBoundaryFE2d.html">NeumannBoundaryFE2d</a> <br><table><tr><td colspan=2><h3>NeumannBoundaryFE Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NeumannBoundaryFE2d (c_string Function)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NeumannBoundaryBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="CondUserNumber2d.html">CondUserNumber</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string , c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gt, c_string , c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
NeumannBoundaryFE2d

NeumannBoundaryFE2d (c_string Function)
NeumannBoundaryFE2d (c_string Function)<br>Constructor of class <b>NeumannBoundaryFE2d</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b>
;
class
FV1InnerBoundary
IElemDisc2d 
Class <b>FV1InnerBoundary2d</b>, default implementation of classgroup <b>FV1InnerBoundary</b><br>Registry Group: <b>/ug4/SpatialDisc/ElemDisc</b><br>class has no constructor. <br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="FV1InnerBoundary2d.html">FV1InnerBoundary2d</a> <br><table><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
;
class
IConvectionShapes

Class <b>IConvectionShapes2d</b>, default implementation of classgroup <b>IConvectionShapes</b><br>Registry Group: <b>/ug4/SpatialDisc/Upwind</b><br>class has no constructor. <br><table></table>
;
class
NoUpwind
IConvectionShapes2d 
Class <b>NoUpwind2d</b>, default implementation of classgroup <b>NoUpwind</b><br>Registry Group: <b>/ug4/SpatialDisc/Upwind</b><br>class has constructor. <br>Inheritance: <a href="IConvectionShapes2d.html">IConvectionShapes2d</a> <a href="NoUpwind2d.html">NoUpwind2d</a> <br><table><tr><td colspan=2><h3>NoUpwind Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NoUpwind2d ()</td></tr><tr><td><br></td></tr></table>
constructor
NoUpwind2d

NoUpwind2d ()
NoUpwind2d ()<br>Constructor of class <b>NoUpwind2d</b><br>Registry Group: <b>/ug4/SpatialDisc/Upwind</b>
;
class
FullUpwind
IConvectionShapes2d 
Class <b>FullUpwind2d</b>, default implementation of classgroup <b>FullUpwind</b><br>Registry Group: <b>/ug4/SpatialDisc/Upwind</b><br>class has constructor. <br>Inheritance: <a href="IConvectionShapes2d.html">IConvectionShapes2d</a> <a href="FullUpwind2d.html">FullUpwind2d</a> <br><table><tr><td colspan=2><h3>FullUpwind Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>FullUpwind2d ()</td></tr><tr><td><br></td></tr></table>
constructor
FullUpwind2d

FullUpwind2d ()
FullUpwind2d ()<br>Constructor of class <b>FullUpwind2d</b><br>Registry Group: <b>/ug4/SpatialDisc/Upwind</b>
;
class
WeightedUpwind
IConvectionShapes2d 
Class <b>WeightedUpwind2d</b>, default implementation of classgroup <b>WeightedUpwind</b><br>Registry Group: <b>/ug4/SpatialDisc/Upwind</b><br>class has constructor. <br>Inheritance: <a href="IConvectionShapes2d.html">IConvectionShapes2d</a> <a href="WeightedUpwind2d.html">WeightedUpwind2d</a> <br><table><tr><td colspan=2><h3>WeightedUpwind Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>WeightedUpwind2d ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>WeightedUpwind2d (number weight)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>WeightedUpwind Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_weight (number )</td></tr><tr><td><br></td></tr></table>
constructor
WeightedUpwind2d

WeightedUpwind2d ()
WeightedUpwind2d ()<br>Constructor of class <b>WeightedUpwind2d</b><br>Registry Group: <b>/ug4/SpatialDisc/Upwind</b>
constructor
WeightedUpwind2d

WeightedUpwind2d (number weight)
WeightedUpwind2d (number weight)<br>Constructor of class <b>WeightedUpwind2d</b><br>Registry Group: <b>/ug4/SpatialDisc/Upwind</b>
memberfunction
set_weight
void
void set_weight (number )
void set_weight (number )<br><br>Member function of class <b>WeightedUpwind2d</b><br>Registry Group: <b>/ug4/SpatialDisc/Upwind</b>
;
class
PartialUpwind
IConvectionShapes2d 
Class <b>PartialUpwind2d</b>, default implementation of classgroup <b>PartialUpwind</b><br>Registry Group: <b>/ug4/SpatialDisc/Upwind</b><br>class has constructor. <br>Inheritance: <a href="IConvectionShapes2d.html">IConvectionShapes2d</a> <a href="PartialUpwind2d.html">PartialUpwind2d</a> <br><table><tr><td colspan=2><h3>PartialUpwind Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>PartialUpwind2d ()</td></tr><tr><td><br></td></tr></table>
constructor
PartialUpwind2d

PartialUpwind2d ()
PartialUpwind2d ()<br>Constructor of class <b>PartialUpwind2d</b><br>Registry Group: <b>/ug4/SpatialDisc/Upwind</b>
;
class
IPositionProvider

Class <b>IPositionProvider2d</b>, default implementation of classgroup <b>IPositionProvider</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor. <br><table></table>
;
class
Vector

Class <b>VectorCPU1</b>, default implementation of classgroup <b>Vector</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has constructor. <br><table><tr><td colspan=2><h3>Vector Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>VectorCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Vector Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>set (number Number)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>set_random (number Number, number )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Vector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>size ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Size<br/></td></tr><tr><td><br></td></tr></table>
constructor
VectorCPU1

VectorCPU1 ()
VectorCPU1 ()<br>Constructor of class <b>VectorCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
set
bool
bool set (number Number)
bool set (number Number)<br><br>Member function of class <b>VectorCPU1</b><br>returns Success<br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
set_random
bool
bool set_random (number Number, number )
bool set_random (number Number, number )<br><br>Member function of class <b>VectorCPU1</b><br>returns Success<br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
print
void
void print ()
void print ()<br><br>Member function of class <b>VectorCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
size
unknown
size_t size () const
size_t size ()<br><br>Member function of class <b>VectorCPU1</b><br>returns Size<br>Registry Group: <b>/ug4/Algebra</b>
;
class
Matrix

Class <b>MatrixCPU1</b>, default implementation of classgroup <b>Matrix</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has constructor. <br><table><tr><td colspan=2><h3>Matrix Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>MatrixCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Matrix Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print ()</td></tr><tr><td><br></td></tr></table>
constructor
MatrixCPU1

MatrixCPU1 ()
MatrixCPU1 ()<br>Constructor of class <b>MatrixCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
print
void
void print () const
void print ()<br><br>Member function of class <b>MatrixCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
;
class
IVectorDebugWriter

Class <b>IVectorDebugWriterCPU1</b>, default implementation of classgroup <b>IVectorDebugWriter</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor. <br><table></table>
;
class
IDebugWriter
IVectorDebugWriterCPU1 
Class <b>IDebugWriterCPU1</b>, default implementation of classgroup <b>IDebugWriter</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor. <br>Inheritance: <a href="IVectorDebugWriterCPU1.html">IVectorDebugWriterCPU1</a> <a href="IDebugWriterCPU1.html">IDebugWriterCPU1</a> <br><table></table>
;
class
VectorDebugWritingObject

Class <b>VectorDebugWritingObjectCPU1</b>, default implementation of classgroup <b>VectorDebugWritingObject</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor. <br><table><tr><td colspan=2><h3>VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
memberfunction
set_debug
void
void set_debug (SmartPtr<IVectorDebugWriter> debugWriter)
void set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)<br><br>Member function of class <b>VectorDebugWritingObjectCPU1</b><br>returns sets a debug writer<br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
vector_debug_writer
SmartPtr<IVectorDebugWriterCPU1>
SmartPtr<IVectorDebugWriter> vector_debug_writer ()
SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; vector_debug_writer ()<br><br>Member function of class <b>VectorDebugWritingObjectCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
vector_debug_writer
ConstSmartPtr<IVectorDebugWriterCPU1>
const SmartPtr<IVectorDebugWriter> vector_debug_writer () const
const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; vector_debug_writer ()<br><br>Member function of class <b>VectorDebugWritingObjectCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
;
class
DebugWritingObject
VectorDebugWritingObjectCPU1 
Class <b>DebugWritingObjectCPU1</b>, default implementation of classgroup <b>DebugWritingObject</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor. <br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <br><table><tr><td colspan=2><h3>DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
memberfunction
set_debug
void
void set_debug (SmartPtr<IDebugWriter> d)
void set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)<br><br>Member function of class <b>DebugWritingObjectCPU1</b><br>returns sets a debug writer<br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
debug_writer
SmartPtr<IDebugWriterCPU1>
SmartPtr<IDebugWriter> debug_writer ()
SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; debug_writer ()<br><br>Member function of class <b>DebugWritingObjectCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
debug_writer
ConstSmartPtr<IDebugWriterCPU1>
const SmartPtr<IDebugWriter> debug_writer () const
const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; debug_writer ()<br><br>Member function of class <b>DebugWritingObjectCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
;
class
IVectorWriter

Class <b>IVectorWriterCPU1</b>, default implementation of classgroup <b>IVectorWriter</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor. <br><table><tr><td colspan=2><h3>IVectorWriter Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (<a href="VectorCPU1.html">Vector</a> *v)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: updates the vector v<br/></td></tr><tr><td><br></td></tr></table>
memberfunction
update
bool
bool update (Vector *v)
bool update (<a href="VectorCPU1.html">Vector</a> *v)<br><br>Member function of class <b>IVectorWriterCPU1</b><br>tooltip: updates the vector v<br>Registry Group: <b>/ug4/Algebra</b>
;
class
ILinearOperator
IOperatorCPU1 
Class <b>ILinearOperatorCPU1</b>, default implementation of classgroup <b>ILinearOperator</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor. <br>Inheritance: <a href="IOperatorCPU1.html">IOperatorCPU1</a> <a href="ILinearOperatorCPU1.html">ILinearOperatorCPU1</a> <br><table><tr><td colspan=2><h3>ILinearOperator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns f#u<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init ()</td></tr><tr><td><br></td></tr></table>
memberfunction
init
void
void init ()
void init ()<br><br>Member function of class <b>ILinearOperatorCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
apply
void
void apply (Vector *, const Vector *)
void apply (<a href="VectorCPU1.html">Vector</a> *, const <a href="VectorCPU1.html">Vector</a> *)<br><br>Member function of class <b>ILinearOperatorCPU1</b><br>returns f#u<br>Registry Group: <b>/ug4/Algebra</b>
;
class
MatrixOperator
MatrixCPU1 IOperatorCPU1 ILinearOperatorCPU1 
Class <b>MatrixOperatorCPU1</b>, default implementation of classgroup <b>MatrixOperator</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has constructor. <br>Inheritance: <a href="MatrixCPU1.html">MatrixCPU1</a> <a href="IOperatorCPU1.html">IOperatorCPU1</a> <a href="ILinearOperatorCPU1.html">ILinearOperatorCPU1</a> <a href="MatrixOperatorCPU1.html">MatrixOperatorCPU1</a> <br><table><tr><td colspan=2><h3>MatrixOperator Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>MatrixOperatorCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearOperator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns f#u<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Matrix Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>MatrixCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited Matrix Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print ()</td></tr><tr><td><br></td></tr></table>
constructor
MatrixOperatorCPU1

MatrixOperatorCPU1 ()
MatrixOperatorCPU1 ()<br>Constructor of class <b>MatrixOperatorCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
;
class
ILinearIterator

Class <b>ILinearIteratorCPU1</b>, default implementation of classgroup <b>ILinearIterator</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor. <br><table><tr><td colspan=2><h3>ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr></table>
memberfunction
set_damp
void
void set_damp (number )
void set_damp (number )<br><br>Member function of class <b>ILinearIteratorCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
set_damp
void
void set_damp (SmartPtr<IDamping> )
void set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )<br><br>Member function of class <b>ILinearIteratorCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
;
class
IPreconditioner
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 ILinearIteratorCPU1 
Class <b>IPreconditionerCPU1</b>, default implementation of classgroup <b>IPreconditioner</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor. <br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="IPreconditionerCPU1.html">IPreconditionerCPU1</a> <br><table><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
;
class
ILinearOperatorInverse

Class <b>ILinearOperatorInverseCPU1</b>, default implementation of classgroup <b>ILinearOperatorInverse</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor. <br><table><tr><td colspan=2><h3>ILinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u, const <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u), f remains constant<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply_return_defect (<a href="VectorCPU1.html">Vector</a> *u, <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u),  f := f - A*u becomes new defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; , const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ILinearOperatorInverse Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; </td><td class="memItemRight" valign=bottom>convergence_check ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td><br></td></tr></table>
memberfunction
init
bool
bool init (SmartPtr<ILinearOperator> )
bool init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; )<br><br>Member function of class <b>ILinearOperatorInverseCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
init
bool
bool init (SmartPtr<ILinearOperator> , const Vector *)
bool init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; , const <a href="VectorCPU1.html">Vector</a> *)<br><br>Member function of class <b>ILinearOperatorInverseCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
apply_return_defect
bool
bool apply_return_defect (Vector *u, Vector *f)
bool apply_return_defect (<a href="VectorCPU1.html">Vector</a> *u, <a href="VectorCPU1.html">Vector</a> *f)<br><br>Member function of class <b>ILinearOperatorInverseCPU1</b><br>returns Success<br>tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u),  f := f - A*u becomes new defect<br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
apply
bool
bool apply (Vector *u, const Vector *f)
bool apply (<a href="VectorCPU1.html">Vector</a> *u, const <a href="VectorCPU1.html">Vector</a> *f)<br><br>Member function of class <b>ILinearOperatorInverseCPU1</b><br>returns Success<br>tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u), f remains constant<br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
set_convergence_check
void
void set_convergence_check (SmartPtr<IConvergenceCheck> )
void set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )<br><br>Member function of class <b>ILinearOperatorInverseCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
convergence_check
ConstSmartPtr<IConvergenceCheckCPU1>
const SmartPtr<IConvergenceCheck> convergence_check () const
const SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; convergence_check ()<br><br>Member function of class <b>ILinearOperatorInverseCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
defect
number
number defect () const
number defect ()<br><br>Member function of class <b>ILinearOperatorInverseCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
step
integer
integer step () const
integer step ()<br><br>Member function of class <b>ILinearOperatorInverseCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
reduction
number
number reduction () const
number reduction ()<br><br>Member function of class <b>ILinearOperatorInverseCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
;
class
IPreconditionedLinearOperatorInverse
VectorDebugWritingObjectCPU1 ILinearOperatorInverseCPU1 
Class <b>IPreconditionedLinearOperatorInverseCPU1</b>, default implementation of classgroup <b>IPreconditionedLinearOperatorInverse</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor. <br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverseCPU1</a> <a href="IPreconditionedLinearOperatorInverseCPU1.html">IPreconditionedLinearOperatorInverseCPU1</a> <br><table><tr><td colspan=2><h3>IPreconditionedLinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_compute_fresh_defect_when_finished (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_preconditioner (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Preconditioner)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u, const <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u), f remains constant<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply_return_defect (<a href="VectorCPU1.html">Vector</a> *u, <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u),  f := f - A*u becomes new defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; , const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited ILinearOperatorInverse Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; </td><td class="memItemRight" valign=bottom>convergence_check ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
memberfunction
set_preconditioner
void
void set_preconditioner (SmartPtr<ILinearIterator> Preconditioner)
void set_preconditioner (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Preconditioner)<br><br>Member function of class <b>IPreconditionedLinearOperatorInverseCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
set_compute_fresh_defect_when_finished
void
void set_compute_fresh_defect_when_finished (bool )
void set_compute_fresh_defect_when_finished (bool )<br><br>Member function of class <b>IPreconditionedLinearOperatorInverseCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
;
class
IMatrixOperatorInverse
ILinearOperatorInverseCPU1 
Class <b>IMatrixOperatorInverseCPU1</b>, default implementation of classgroup <b>IMatrixOperatorInverse</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor. <br>Inheritance: <a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverseCPU1</a> <a href="IMatrixOperatorInverseCPU1.html">IMatrixOperatorInverseCPU1</a> <br><table><tr><td colspan=2><h3>Inherited ILinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u, const <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u), f remains constant<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply_return_defect (<a href="VectorCPU1.html">Vector</a> *u, <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u),  f := f - A*u becomes new defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; , const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited ILinearOperatorInverse Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; </td><td class="memItemRight" valign=bottom>convergence_check ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td><br></td></tr></table>
;
class
IOperator

Class <b>IOperatorCPU1</b>, default implementation of classgroup <b>IOperator</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor. <br><table></table>
;
class
IOperatorInverse

Class <b>IOperatorInverseCPU1</b>, default implementation of classgroup <b>IOperatorInverse</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor. <br><table></table>
;
class
IConvergenceCheck

Class <b>IConvergenceCheckCPU1</b>, default implementation of classgroup <b>IConvergenceCheck</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has no constructor. <br><table></table>
;
class
ConvCheck
IConvergenceCheckCPU1 
Class <b>ConvCheckCPU1</b>, default implementation of classgroup <b>ConvCheck</b><br>Registry Group: <b>/ug4/Algebra</b><br>class has constructor. <br>Convergence Check<br>Inheritance: <a href="IConvergenceCheckCPU1.html">IConvergenceCheckCPU1</a> <a href="ConvCheckCPU1.html">ConvCheckCPU1</a> <br><table><tr><td colspan=2><h3>ConvCheck Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConvCheckCPU1 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConvCheckCPU1 (integer Maximum Steps, number Minimum Defect, number Relative Reduction, bool Verbosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConvCheckCPU1 (integer Maximum Steps, number Minimum Defect, number Relative Reduction)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConvCheck Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>iteration_ended ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_maximum_steps (integer Maximum Steps)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: maximum number of steps to do<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_minimum_defect (number Minimum Defect)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reduction (number Relative Reduction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_verbose (bool Verbosity)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConvCheck Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns defect<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>previous_defect ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns reduction<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current relative reduction<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns step<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current number of steps<br/></td></tr><tr><td><br></td></tr></table>
constructor
ConvCheckCPU1

ConvCheckCPU1 ()
ConvCheckCPU1 ()<br>Constructor of class <b>ConvCheckCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
constructor
ConvCheckCPU1

ConvCheckCPU1 (integer Maximum Steps, number Minimum Defect, number Relative Reduction, bool Verbosity)
ConvCheckCPU1 (integer Maximum Steps, number Minimum Defect, number Relative Reduction, bool Verbosity)<br>Constructor of class <b>ConvCheckCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
constructor
ConvCheckCPU1

ConvCheckCPU1 (integer Maximum Steps, number Minimum Defect, number Relative Reduction)
ConvCheckCPU1 (integer Maximum Steps, number Minimum Defect, number Relative Reduction)<br>Constructor of class <b>ConvCheckCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
set_maximum_steps
void
void set_maximum_steps (integer Maximum Steps)
void set_maximum_steps (integer Maximum Steps)<br><br>Member function of class <b>ConvCheckCPU1</b><br>tooltip: maximum number of steps to do<br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
set_minimum_defect
void
void set_minimum_defect (number Minimum Defect)
void set_minimum_defect (number Minimum Defect)<br><br>Member function of class <b>ConvCheckCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
set_reduction
void
void set_reduction (number Relative Reduction)
void set_reduction (number Relative Reduction)<br><br>Member function of class <b>ConvCheckCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
set_verbose
void
void set_verbose (bool Verbosity)
void set_verbose (bool Verbosity)<br><br>Member function of class <b>ConvCheckCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
iteration_ended
bool
bool iteration_ended ()
bool iteration_ended ()<br><br>Member function of class <b>ConvCheckCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
defect
number
number defect () const
number defect ()<br><br>Member function of class <b>ConvCheckCPU1</b><br>returns defect<br>tooltip: returns the current defect<br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
step
integer
integer step () const
integer step ()<br><br>Member function of class <b>ConvCheckCPU1</b><br>returns step<br>tooltip: returns the current number of steps<br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
reduction
number
number reduction () const
number reduction ()<br><br>Member function of class <b>ConvCheckCPU1</b><br>returns reduction<br>tooltip: returns the current relative reduction<br>Registry Group: <b>/ug4/Algebra</b>
memberfunction
previous_defect
number
number previous_defect () const
number previous_defect ()<br><br>Member function of class <b>ConvCheckCPU1</b><br>Registry Group: <b>/ug4/Algebra</b>
;
class
Jacobi
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 ILinearIteratorCPU1 IPreconditionerCPU1 
Class <b>JacobiCPU1</b>, default implementation of classgroup <b>Jacobi</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor. <br>Jacobi Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="IPreconditionerCPU1.html">IPreconditionerCPU1</a> <a href="JacobiCPU1.html">JacobiCPU1</a> <br><table><tr><td colspan=2><h3>Jacobi Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>JacobiCPU1 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>JacobiCPU1 (number DampingFactor)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
JacobiCPU1

JacobiCPU1 ()
JacobiCPU1 ()<br>Constructor of class <b>JacobiCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
constructor
JacobiCPU1

JacobiCPU1 (number DampingFactor)
JacobiCPU1 (number DampingFactor)<br>Constructor of class <b>JacobiCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
GaussSeidel
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 ILinearIteratorCPU1 IPreconditionerCPU1 
Class <b>GaussSeidelCPU1</b>, default implementation of classgroup <b>GaussSeidel</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor. <br>Gauss-Seidel Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="IPreconditionerCPU1.html">IPreconditionerCPU1</a> <a href="GaussSeidelCPU1.html">GaussSeidelCPU1</a> <br><table><tr><td colspan=2><h3>GaussSeidel Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GaussSeidelCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
GaussSeidelCPU1

GaussSeidelCPU1 ()
GaussSeidelCPU1 ()<br>Constructor of class <b>GaussSeidelCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
SymmetricGaussSeidel
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 ILinearIteratorCPU1 IPreconditionerCPU1 
Class <b>SymmetricGaussSeidelCPU1</b>, default implementation of classgroup <b>SymmetricGaussSeidel</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor. <br>Symmetric Gauss Seidel Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="IPreconditionerCPU1.html">IPreconditionerCPU1</a> <a href="SymmetricGaussSeidelCPU1.html">SymmetricGaussSeidelCPU1</a> <br><table><tr><td colspan=2><h3>SymmetricGaussSeidel Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>SymmetricGaussSeidelCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
SymmetricGaussSeidelCPU1

SymmetricGaussSeidelCPU1 ()
SymmetricGaussSeidelCPU1 ()<br>Constructor of class <b>SymmetricGaussSeidelCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
BackwardGaussSeidel
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 ILinearIteratorCPU1 IPreconditionerCPU1 
Class <b>BackwardGaussSeidelCPU1</b>, default implementation of classgroup <b>BackwardGaussSeidel</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor. <br>Backward Gauss Seidel Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="IPreconditionerCPU1.html">IPreconditionerCPU1</a> <a href="BackwardGaussSeidelCPU1.html">BackwardGaussSeidelCPU1</a> <br><table><tr><td colspan=2><h3>BackwardGaussSeidel Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>BackwardGaussSeidelCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
BackwardGaussSeidelCPU1

BackwardGaussSeidelCPU1 ()
BackwardGaussSeidelCPU1 ()<br>Constructor of class <b>BackwardGaussSeidelCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
ILU
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 ILinearIteratorCPU1 IPreconditionerCPU1 
Class <b>ILUCPU1</b>, default implementation of classgroup <b>ILU</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor. <br>Incomplete LU Decomposition<br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="IPreconditionerCPU1.html">IPreconditionerCPU1</a> <a href="ILUCPU1.html">ILUCPU1</a> <br><table><tr><td colspan=2><h3>ILU Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ILUCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ILU Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_beta (number beta)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
ILUCPU1

ILUCPU1 ()
ILUCPU1 ()<br>Constructor of class <b>ILUCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_beta
void
void set_beta (number beta)
void set_beta (number beta)<br><br>Member function of class <b>ILUCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
ILUT
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 ILinearIteratorCPU1 IPreconditionerCPU1 
Class <b>ILUTCPU1</b>, default implementation of classgroup <b>ILUT</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor. <br>Incomplete LU Decomposition with threshold<br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="IPreconditionerCPU1.html">IPreconditionerCPU1</a> <a href="ILUTCPU1.html">ILUTCPU1</a> <br><table><tr><td colspan=2><h3>ILUT Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ILUTCPU1 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ILUTCPU1 (number threshold parameter)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ILUT Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_info (bool info)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets storage information output<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_threshold (number threshold)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets threshold of incomplete LU factorisation<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
ILUTCPU1

ILUTCPU1 ()
ILUTCPU1 ()<br>Constructor of class <b>ILUTCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
constructor
ILUTCPU1

ILUTCPU1 (number threshold parameter)
ILUTCPU1 (number threshold parameter)<br>Constructor of class <b>ILUTCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_threshold
void
void set_threshold (number threshold)
void set_threshold (number threshold)<br><br>Member function of class <b>ILUTCPU1</b><br>tooltip: sets threshold of incomplete LU factorisation<br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_info
void
void set_info (bool info)
void set_info (bool info)<br><br>Member function of class <b>ILUTCPU1</b><br>tooltip: sets storage information output<br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
LinearIteratorProduct
ILinearIteratorCPU1 
Class <b>LinearIteratorProductCPU1</b>, default implementation of classgroup <b>LinearIteratorProduct</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor. <br>Linear Iterator consisting of several LinearIterations<br>Inheritance: <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="LinearIteratorProductCPU1.html">LinearIteratorProductCPU1</a> <br><table><tr><td colspan=2><h3>LinearIteratorProduct Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LinearIteratorProductCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LinearIteratorProduct Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_iteration (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Add an iterator<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
LinearIteratorProductCPU1

LinearIteratorProductCPU1 ()
LinearIteratorProductCPU1 ()<br>Constructor of class <b>LinearIteratorProductCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
add_iteration
void
void add_iteration (SmartPtr<ILinearIterator> )
void add_iteration (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; )<br><br>Member function of class <b>LinearIteratorProductCPU1</b><br>returns Add an iterator<br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
Vanka
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 ILinearIteratorCPU1 IPreconditionerCPU1 
Class <b>VankaCPU1</b>, default implementation of classgroup <b>Vanka</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor. <br>Vanka Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="IPreconditionerCPU1.html">IPreconditionerCPU1</a> <a href="VankaCPU1.html">VankaCPU1</a> <br><table><tr><td colspan=2><h3>Vanka Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>VankaCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Vanka Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_relax (number relax)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
VankaCPU1

VankaCPU1 ()
VankaCPU1 ()<br>Constructor of class <b>VankaCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_relax
void
void set_relax (number relax)
void set_relax (number relax)<br><br>Member function of class <b>VankaCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
DiagVanka
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 ILinearIteratorCPU1 IPreconditionerCPU1 
Class <b>DiagVankaCPU1</b>, default implementation of classgroup <b>DiagVanka</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor. <br>Diagonal Vanka Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="IPreconditionerCPU1.html">IPreconditionerCPU1</a> <a href="DiagVankaCPU1.html">DiagVankaCPU1</a> <br><table><tr><td colspan=2><h3>DiagVanka Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DiagVankaCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DiagVanka Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_relax (number relax)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
DiagVankaCPU1

DiagVankaCPU1 ()
DiagVankaCPU1 ()<br>Constructor of class <b>DiagVankaCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_relax
void
void set_relax (number relax)
void set_relax (number relax)<br><br>Member function of class <b>DiagVankaCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
IDamping

Class <b>IDampingCPU1</b>, default implementation of classgroup <b>IDamping</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has no constructor. <br><table></table>
;
class
MinimalResiduumDamping
IDampingCPU1 
Class <b>MinimalResiduumDampingCPU1</b>, default implementation of classgroup <b>MinimalResiduumDamping</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has constructor. <br>Minimal Residdum Damping (damping computed based on the minimal residuum)<br>Inheritance: <a href="IDampingCPU1.html">IDampingCPU1</a> <a href="MinimalResiduumDampingCPU1.html">MinimalResiduumDampingCPU1</a> <br><table><tr><td colspan=2><h3>MinimalResiduumDamping Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>MinimalResiduumDampingCPU1 ()</td></tr><tr><td><br></td></tr></table>
constructor
MinimalResiduumDampingCPU1

MinimalResiduumDampingCPU1 ()
MinimalResiduumDampingCPU1 ()<br>Constructor of class <b>MinimalResiduumDampingCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
;
class
MinimalEnergyDamping
IDampingCPU1 
Class <b>MinimalEnergyDampingCPU1</b>, default implementation of classgroup <b>MinimalEnergyDamping</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has constructor. <br>Minimal Energy Damping (damping computed based on the minimal energy)<br>Inheritance: <a href="IDampingCPU1.html">IDampingCPU1</a> <a href="MinimalEnergyDampingCPU1.html">MinimalEnergyDampingCPU1</a> <br><table><tr><td colspan=2><h3>MinimalEnergyDamping Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>MinimalEnergyDampingCPU1 ()</td></tr><tr><td><br></td></tr></table>
constructor
MinimalEnergyDampingCPU1

MinimalEnergyDampingCPU1 ()
MinimalEnergyDampingCPU1 ()<br>Constructor of class <b>MinimalEnergyDampingCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
;
class
LinearSolver
VectorDebugWritingObjectCPU1 ILinearOperatorInverseCPU1 IPreconditionedLinearOperatorInverseCPU1 
Class <b>LinearSolverCPU1</b>, default implementation of classgroup <b>LinearSolver</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has constructor. <br>Linear Solver<br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverseCPU1</a> <a href="IPreconditionedLinearOperatorInverseCPU1.html">IPreconditionedLinearOperatorInverseCPU1</a> <a href="LinearSolverCPU1.html">LinearSolverCPU1</a> <br><table><tr><td colspan=2><h3>LinearSolver Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LinearSolverCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IPreconditionedLinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_compute_fresh_defect_when_finished (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_preconditioner (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Preconditioner)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u, const <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u), f remains constant<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply_return_defect (<a href="VectorCPU1.html">Vector</a> *u, <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u),  f := f - A*u becomes new defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; , const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited ILinearOperatorInverse Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; </td><td class="memItemRight" valign=bottom>convergence_check ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
LinearSolverCPU1

LinearSolverCPU1 ()
LinearSolverCPU1 ()<br>Constructor of class <b>LinearSolverCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
;
class
CG
VectorDebugWritingObjectCPU1 ILinearOperatorInverseCPU1 IPreconditionedLinearOperatorInverseCPU1 
Class <b>CGCPU1</b>, default implementation of classgroup <b>CG</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has constructor. <br>Conjugate Gradient Solver<br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverseCPU1</a> <a href="IPreconditionedLinearOperatorInverseCPU1.html">IPreconditionedLinearOperatorInverseCPU1</a> <a href="CGCPU1.html">CGCPU1</a> <br><table><tr><td colspan=2><h3>CG Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>CGCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IPreconditionedLinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_compute_fresh_defect_when_finished (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_preconditioner (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Preconditioner)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u, const <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u), f remains constant<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply_return_defect (<a href="VectorCPU1.html">Vector</a> *u, <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u),  f := f - A*u becomes new defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; , const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited ILinearOperatorInverse Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; </td><td class="memItemRight" valign=bottom>convergence_check ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
CGCPU1

CGCPU1 ()
CGCPU1 ()<br>Constructor of class <b>CGCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
;
class
BiCGStab
VectorDebugWritingObjectCPU1 ILinearOperatorInverseCPU1 IPreconditionedLinearOperatorInverseCPU1 
Class <b>BiCGStabCPU1</b>, default implementation of classgroup <b>BiCGStab</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has constructor. <br>BiCGStab Solver<br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverseCPU1</a> <a href="IPreconditionedLinearOperatorInverseCPU1.html">IPreconditionedLinearOperatorInverseCPU1</a> <a href="BiCGStabCPU1.html">BiCGStabCPU1</a> <br><table><tr><td colspan=2><h3>BiCGStab Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>BiCGStabCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IPreconditionedLinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_compute_fresh_defect_when_finished (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_preconditioner (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Preconditioner)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u, const <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u), f remains constant<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply_return_defect (<a href="VectorCPU1.html">Vector</a> *u, <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u),  f := f - A*u becomes new defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; , const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited ILinearOperatorInverse Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; </td><td class="memItemRight" valign=bottom>convergence_check ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
BiCGStabCPU1

BiCGStabCPU1 ()
BiCGStabCPU1 ()<br>Constructor of class <b>BiCGStabCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
;
class
LU
ILinearOperatorInverseCPU1 
Class <b>LUCPU1</b>, default implementation of classgroup <b>LU</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has constructor. <br>LU-Decomposition exact solver<br>Inheritance: <a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverseCPU1</a> <a href="LUCPU1.html">LUCPU1</a> <br><table><tr><td colspan=2><h3>LU Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LUCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u, const <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u), f remains constant<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply_return_defect (<a href="VectorCPU1.html">Vector</a> *u, <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u),  f := f - A*u becomes new defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; , const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited ILinearOperatorInverse Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; </td><td class="memItemRight" valign=bottom>convergence_check ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td><br></td></tr></table>
constructor
LUCPU1

LUCPU1 ()
LUCPU1 ()<br>Constructor of class <b>LUCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
;
class
LocalSchurComplement
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 IOperatorCPU1 ILinearOperatorCPU1 
Class <b>LocalSchurComplementCPU1</b>, default implementation of classgroup <b>LocalSchurComplement</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has constructor. <br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="IOperatorCPU1.html">IOperatorCPU1</a> <a href="ILinearOperatorCPU1.html">ILinearOperatorCPU1</a> <a href="LocalSchurComplementCPU1.html">LocalSchurComplementCPU1</a> <br><table><tr><td colspan=2><h3>LocalSchurComplement Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LocalSchurComplementCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LocalSchurComplement Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *local SC times Vector, const <a href="VectorCPU1.html">Vector</a> *Vector)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_dirichlet_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Dirichlet Solver)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_matrix (SmartPtr&lt;<a href="MatrixOperatorCPU1.html">MatrixOperator</a>&gt; Matrix)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearOperator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns f#u<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
LocalSchurComplementCPU1

LocalSchurComplementCPU1 ()
LocalSchurComplementCPU1 ()<br>Constructor of class <b>LocalSchurComplementCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_matrix
void
void set_matrix (SmartPtr<MatrixOperator> Matrix)
void set_matrix (SmartPtr&lt;<a href="MatrixOperatorCPU1.html">MatrixOperator</a>&gt; Matrix)<br><br>Member function of class <b>LocalSchurComplementCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_dirichlet_solver
void
void set_dirichlet_solver (SmartPtr<ILinearOperatorInverse> Dirichlet Solver)
void set_dirichlet_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Dirichlet Solver)<br><br>Member function of class <b>LocalSchurComplementCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
init
void
void init ()
void init ()<br><br>Member function of class <b>LocalSchurComplementCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
apply
void
void apply (Vector *local SC times Vector, const Vector *Vector)
void apply (<a href="VectorCPU1.html">Vector</a> *local SC times Vector, const <a href="VectorCPU1.html">Vector</a> *Vector)<br><br>Member function of class <b>LocalSchurComplementCPU1</b><br>returns Success<br>Registry Group: <b>/ug4/Algebra/Solver</b>
;
class
FETI
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 ILinearOperatorInverseCPU1 IMatrixOperatorInverseCPU1 
Class <b>FETICPU1</b>, default implementation of classgroup <b>FETI</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has constructor. <br>FETI Domain Decomposition Solver<br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverseCPU1</a> <a href="IMatrixOperatorInverseCPU1.html">IMatrixOperatorInverseCPU1</a> <a href="FETICPU1.html">FETICPU1</a> <br><table><tr><td colspan=2><h3>FETI Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>FETICPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>FETI Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print_statistic_of_inner_solver (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_coarse_problem_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Coarse Problem Solver)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_dirichlet_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Dirichlet Solver)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_domain_decomp_info (<a href="IDomainDecompositionInfo.html">IDomainDecompositionInfo</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_neumann_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Neumann Solver)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_test_one_to_many_layouts (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>test_layouts (bool )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearOperatorInverse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u, const <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u), f remains constant<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply_return_defect (<a href="VectorCPU1.html">Vector</a> *u, <a href="VectorCPU1.html">Vector</a> *f)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Solve A*u = f, such that u = A^{-1} f by iterating u := u + B(f - A*u),  f := f - A*u becomes new defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; , const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited ILinearOperatorInverse Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; </td><td class="memItemRight" valign=bottom>convergence_check ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
FETICPU1

FETICPU1 ()
FETICPU1 ()<br>Constructor of class <b>FETICPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_neumann_solver
void
void set_neumann_solver (SmartPtr<ILinearOperatorInverse> Neumann Solver)
void set_neumann_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Neumann Solver)<br><br>Member function of class <b>FETICPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_dirichlet_solver
void
void set_dirichlet_solver (SmartPtr<ILinearOperatorInverse> Dirichlet Solver)
void set_dirichlet_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Dirichlet Solver)<br><br>Member function of class <b>FETICPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_coarse_problem_solver
void
void set_coarse_problem_solver (SmartPtr<ILinearOperatorInverse> Coarse Problem Solver)
void set_coarse_problem_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Coarse Problem Solver)<br><br>Member function of class <b>FETICPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_domain_decomp_info
void
void set_domain_decomp_info (IDomainDecompositionInfo *)
void set_domain_decomp_info (<a href="IDomainDecompositionInfo.html">IDomainDecompositionInfo</a> *)<br><br>Member function of class <b>FETICPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
print_statistic_of_inner_solver
void
void print_statistic_of_inner_solver (bool )
void print_statistic_of_inner_solver (bool )<br><br>Member function of class <b>FETICPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_debug
void
void set_debug (SmartPtr<IDebugWriter> )
void set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )<br><br>Member function of class <b>FETICPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
test_layouts
void
void test_layouts (bool )
void test_layouts (bool )<br><br>Member function of class <b>FETICPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_test_one_to_many_layouts
void
void set_test_one_to_many_layouts (bool )
void set_test_one_to_many_layouts (bool )<br><br>Member function of class <b>FETICPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
;
class
ActiveSet

Class <b>ActiveSetCPU1</b>, default implementation of classgroup <b>ActiveSet</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has constructor. <br><table><tr><td colspan=2><h3>ActiveSet Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ActiveSetCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ActiveSet Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std::vector&ltSmartPtr&lt;<a href="MultiIndex2.html">MultiIndex2</a>&gt; &gt</td><td class="memItemRight" valign=bottom>activeMultiIndices ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>active_index (<a href="VectorCPU1.html">Vector</a> *is index active or not, stores activeSetList, <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check_conv (const <a href="VectorCPU1.html">Vector</a> *activeIndexSet changed or not, size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check_dist_to_obs (<a href="VectorCPU1.html">Vector</a> *is distance to obs >= 0)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>comp_lambda (<a href="VectorCPU1.html">Vector</a> *complementary function computed, const <a href="MatrixCPU1.html">Matrix</a> *, const <a href="VectorCPU1.html">Vector</a> *, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>prepare (<a href="VectorCPU1.html">Vector</a> *prepare)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_constraint (<a href="VectorCPU1.html">Vector</a> *constraint)</td></tr><tr><td><br></td></tr></table>
constructor
ActiveSetCPU1

ActiveSetCPU1 ()
ActiveSetCPU1 ()<br>Constructor of class <b>ActiveSetCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_constraint
void
void set_constraint (Vector *constraint)
void set_constraint (<a href="VectorCPU1.html">Vector</a> *constraint)<br><br>Member function of class <b>ActiveSetCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
prepare
void
void prepare (Vector *prepare)
void prepare (<a href="VectorCPU1.html">Vector</a> *prepare)<br><br>Member function of class <b>ActiveSetCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
check_dist_to_obs
bool
bool check_dist_to_obs (Vector *is distance to obs >= 0)
bool check_dist_to_obs (<a href="VectorCPU1.html">Vector</a> *is distance to obs >= 0)<br><br>Member function of class <b>ActiveSetCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
active_index
bool
bool active_index (Vector *is index active or not, stores activeSetList, Vector *)
bool active_index (<a href="VectorCPU1.html">Vector</a> *is index active or not, stores activeSetList, <a href="VectorCPU1.html">Vector</a> *)<br><br>Member function of class <b>ActiveSetCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
comp_lambda
void
void comp_lambda (Vector *complementary function computed, const Matrix *, const Vector *, const Vector *)
void comp_lambda (<a href="VectorCPU1.html">Vector</a> *complementary function computed, const <a href="MatrixCPU1.html">Matrix</a> *, const <a href="VectorCPU1.html">Vector</a> *, const <a href="VectorCPU1.html">Vector</a> *)<br><br>Member function of class <b>ActiveSetCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
check_conv
bool
bool check_conv (const Vector *activeIndexSet changed or not, size_t )
bool check_conv (const <a href="VectorCPU1.html">Vector</a> *activeIndexSet changed or not, size_t )<br><br>Member function of class <b>ActiveSetCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
activeMultiIndices
std::vector<SmartPtr<MultiIndex2>>
std::vector<SmartPtr<MultiIndex2> >activeMultiIndices ()
std::vector&ltSmartPtr&lt;<a href="MultiIndex2.html">MultiIndex2</a>&gt; &gtactiveMultiIndices ()<br><br>Member function of class <b>ActiveSetCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
;
class
EigenSolver
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 
Class <b>EigenSolverCPU1</b>, default implementation of classgroup <b>EigenSolver</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has constructor. <br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="EigenSolverCPU1.html">EigenSolverCPU1</a> <br><table><tr><td colspan=2><h3>EigenSolver Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>EigenSolverCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>EigenSolver Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_vector (<a href="VectorCPU1.html">Vector</a> *vector)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>apply ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_eigenvalue (size_t i)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns eigenvalue i<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top><a href="VectorCPU1.html">Vector</a> *</td><td class="memItemRight" valign=bottom>get_eigenvector (size_t i)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns eigenvector i<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_eigenvalues ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns number of eigenvalues<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_additional_eigenvectors_to_keep (size_t i)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: additional i smallest ritz-eigenvectors are added to the test space<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_calc_projected_eigenvalues (bool b)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_linear_operator_A (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; LinearOperatorA)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_linear_operator_B (<a href="MatrixOperatorCPU1.html">MatrixOperator</a> *LinearOperatorB)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_max_iterations (size_t precision)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_pinvit (size_t iPINVIT)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: 1 = preconditioned inverse block iteration, 2 = preconditioned block gradient descent, 3 = LOBPCG<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_precision (number precision)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_preconditioner (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Preconditioner)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_print_projected_eigenproblem (bool b)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_print_projected_eigenvalues (bool b)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_print_projected_eigenvectors (bool b)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_print_used_testvectors (bool b)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_use_additional_corrections (bool b)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
EigenSolverCPU1

EigenSolverCPU1 ()
EigenSolverCPU1 ()<br>Constructor of class <b>EigenSolverCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
add_vector
void
void add_vector (Vector *vector)
void add_vector (<a href="VectorCPU1.html">Vector</a> *vector)<br><br>Member function of class <b>EigenSolverCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_preconditioner
void
void set_preconditioner (SmartPtr<ILinearIterator> Preconditioner)
void set_preconditioner (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Preconditioner)<br><br>Member function of class <b>EigenSolverCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_linear_operator_A
void
void set_linear_operator_A (SmartPtr<ILinearOperator> LinearOperatorA)
void set_linear_operator_A (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; LinearOperatorA)<br><br>Member function of class <b>EigenSolverCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_linear_operator_B
void
void set_linear_operator_B (MatrixOperator *LinearOperatorB)
void set_linear_operator_B (<a href="MatrixOperatorCPU1.html">MatrixOperator</a> *LinearOperatorB)<br><br>Member function of class <b>EigenSolverCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_max_iterations
void
void set_max_iterations (size_t precision)
void set_max_iterations (size_t precision)<br><br>Member function of class <b>EigenSolverCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
num_eigenvalues
unknown
size_t num_eigenvalues ()
size_t num_eigenvalues ()<br><br>Member function of class <b>EigenSolverCPU1</b><br>returns number of eigenvalues<br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
get_eigenvalue
number
number get_eigenvalue (size_t i)
number get_eigenvalue (size_t i)<br><br>Member function of class <b>EigenSolverCPU1</b><br>returns eigenvalue i<br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_precision
void
void set_precision (number precision)
void set_precision (number precision)<br><br>Member function of class <b>EigenSolverCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
get_eigenvector
VectorCPU1*
Vector *get_eigenvector (size_t i)
<a href="VectorCPU1.html">Vector</a> *get_eigenvector (size_t i)<br><br>Member function of class <b>EigenSolverCPU1</b><br>returns eigenvector i<br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_print_projected_eigenvectors
void
void set_print_projected_eigenvectors (bool b)
void set_print_projected_eigenvectors (bool b)<br><br>Member function of class <b>EigenSolverCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_print_projected_eigenvalues
void
void set_print_projected_eigenvalues (bool b)
void set_print_projected_eigenvalues (bool b)<br><br>Member function of class <b>EigenSolverCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_print_projected_eigenproblem
void
void set_print_projected_eigenproblem (bool b)
void set_print_projected_eigenproblem (bool b)<br><br>Member function of class <b>EigenSolverCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_additional_eigenvectors_to_keep
void
void set_additional_eigenvectors_to_keep (size_t i)
void set_additional_eigenvectors_to_keep (size_t i)<br><br>Member function of class <b>EigenSolverCPU1</b><br>tooltip: additional i smallest ritz-eigenvectors are added to the test space<br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_use_additional_corrections
void
void set_use_additional_corrections (bool b)
void set_use_additional_corrections (bool b)<br><br>Member function of class <b>EigenSolverCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_debug_calc_projected_eigenvalues
void
void set_debug_calc_projected_eigenvalues (bool b)
void set_debug_calc_projected_eigenvalues (bool b)<br><br>Member function of class <b>EigenSolverCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_print_used_testvectors
void
void set_print_used_testvectors (bool b)
void set_print_used_testvectors (bool b)<br><br>Member function of class <b>EigenSolverCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
set_pinvit
void
void set_pinvit (size_t iPINVIT)
void set_pinvit (size_t iPINVIT)<br><br>Member function of class <b>EigenSolverCPU1</b><br>tooltip: 1 = preconditioned inverse block iteration, 2 = preconditioned block gradient descent, 3 = LOBPCG<br>Registry Group: <b>/ug4/Algebra/Solver</b>
memberfunction
apply
integer
integer apply ()
integer apply ()<br><br>Member function of class <b>EigenSolverCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
;
class
OperatorInverseIterator
ILinearIteratorCPU1 
Class <b>OperatorInverseIteratorCPU1</b>, default implementation of classgroup <b>OperatorInverseIterator</b><br>Registry Group: <b>/ug4/Algebra/Solver</b><br>class has constructor. <br>Inheritance: <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="OperatorInverseIteratorCPU1.html">OperatorInverseIteratorCPU1</a> <br><table><tr><td colspan=2><h3>OperatorInverseIterator Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>OperatorInverseIteratorCPU1 (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; opInv)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
OperatorInverseIteratorCPU1

OperatorInverseIteratorCPU1 (SmartPtr<ILinearOperatorInverse> opInv)
OperatorInverseIteratorCPU1 (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; opInv)<br>Constructor of class <b>OperatorInverseIteratorCPU1</b><br>Registry Group: <b>/ug4/Algebra/Solver</b>
;
class
LineGaussSeidel
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 ILinearIteratorCPU1 IPreconditionerCPU1 
Class <b>LineGaussSeidel2dCPU1</b>, default implementation of classgroup <b>LineGaussSeidel</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor. <br>Line Gauss-Seidel Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="IPreconditionerCPU1.html">IPreconditionerCPU1</a> <a href="LineGaussSeidel2dCPU1.html">LineGaussSeidel2dCPU1</a> <br><table><tr><td colspan=2><h3>LineGaussSeidel Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LineGaussSeidel2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LineGaussSeidel Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t , size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (size_t update)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
LineGaussSeidel2dCPU1

LineGaussSeidel2dCPU1 (SmartPtr<ApproximationSpace> Approximation Space)
LineGaussSeidel2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>LineGaussSeidel2dCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
update
bool
bool update (size_t update)
bool update (size_t update)<br><br>Member function of class <b>LineGaussSeidel2dCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )<br><br>Member function of class <b>LineGaussSeidel2dCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t )
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t )<br><br>Member function of class <b>LineGaussSeidel2dCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t )
void set_num_steps (size_t set_num_steps, size_t )<br><br>Member function of class <b>LineGaussSeidel2dCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
LineVanka
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 ILinearIteratorCPU1 IPreconditionerCPU1 
Class <b>LineVanka2dCPU1</b>, default implementation of classgroup <b>LineVanka</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b><br>class has constructor. <br>LineVanka Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="IPreconditionerCPU1.html">IPreconditionerCPU1</a> <a href="LineVanka2dCPU1.html">LineVanka2dCPU1</a> <br><table><tr><td colspan=2><h3>LineVanka Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LineVanka2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LineVanka Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t , size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_steps (size_t set_num_steps, size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_relax (number relax)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (size_t update)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
LineVanka2dCPU1

LineVanka2dCPU1 (SmartPtr<ApproximationSpace> Approximation Space)
LineVanka2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>LineVanka2dCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
update
bool
bool update (size_t update)
bool update (size_t update)<br><br>Member function of class <b>LineVanka2dCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t , size_t , size_t )<br><br>Member function of class <b>LineVanka2dCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t )
void set_num_steps (size_t set_num_steps, size_t , size_t , size_t )<br><br>Member function of class <b>LineVanka2dCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_num_steps
void
void set_num_steps (size_t set_num_steps, size_t )
void set_num_steps (size_t set_num_steps, size_t )<br><br>Member function of class <b>LineVanka2dCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
memberfunction
set_relax
void
void set_relax (number relax)
void set_relax (number relax)<br><br>Member function of class <b>LineVanka2dCPU1</b><br>Registry Group: <b>/ug4/Algebra/Preconditioner</b>
;
class
IConstraint

Class <b>IConstraintCPU1</b>, default implementation of classgroup <b>IConstraint</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has no constructor. <br><table></table>
;
class
IAssemble

Class <b>IAssembleCPU1</b>, default implementation of classgroup <b>IAssemble</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has no constructor. <br><table><tr><td colspan=2><h3>IAssemble Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_matrix_rhs (<a href="MatrixCPU1.html">Matrix</a> *, <a href="VectorCPU1.html">Vector</a> *, std::vector&ltSmartPtr&lt;<a href="MultiIndex2.html">MultiIndex2</a>&gt; &gt, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on grid level.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_mass_matrix (<a href="MatrixCPU1.html">Matrix</a> *M, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles mass matrix on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_stiffness_matrix (<a href="MatrixCPU1.html">Matrix</a> *A, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles stiffness matrix on surface grid<br/></td></tr><tr><td><br></td></tr></table>
memberfunction
assemble_jacobian
void
void assemble_jacobian (Matrix *J(u), const Vector *u)
void assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>IAssembleCPU1</b><br>tooltip: assembles jacobian on surface grid<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_jacobian
void
void assemble_jacobian (Matrix *J(u), const Vector *u, const GridLevel *GridLevel)
void assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)<br><br>Member function of class <b>IAssembleCPU1</b><br>tooltip: assembles jacobian on grid level<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_defect
void
void assemble_defect (Vector *d(u), const Vector *u)
void assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>IAssembleCPU1</b><br>tooltip: Assembles Defect on surface grid.<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_defect
void
void assemble_defect (Vector *d(u), const Vector *u, const GridLevel *GridLevel)
void assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)<br><br>Member function of class <b>IAssembleCPU1</b><br>tooltip: Assembles Defect on grid level<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_linear
void
void assemble_linear (Matrix *A, Vector *b)
void assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b)<br><br>Member function of class <b>IAssembleCPU1</b><br>tooltip: Assembles Matrix and rhs on surface grid.<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_linear
void
void assemble_linear (Matrix *A, Vector *b, const GridLevel *GridLevel)
void assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b, const <a href="GridLevel.html">GridLevel</a> *GridLevel)<br><br>Member function of class <b>IAssembleCPU1</b><br>tooltip: Assembles Matrix and rhs on grid level.<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_rhs
void
void assemble_rhs (Vector *rhs, const Vector *u)
void assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>IAssembleCPU1</b><br>tooltip: assembles right-hand side on surface grid<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_rhs
void
void assemble_rhs (Vector *rhs, const Vector *u, const GridLevel *GridLevel)
void assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)<br><br>Member function of class <b>IAssembleCPU1</b><br>tooltip: assembles right-hand side on grid level<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_rhs
void
void assemble_rhs (Vector *rhs)
void assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs)<br><br>Member function of class <b>IAssembleCPU1</b><br>tooltip: assembles right-hand side on surface grid for linear case<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_rhs
void
void assemble_rhs (Vector *rhs, const GridLevel *)
void assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="GridLevel.html">GridLevel</a> *)<br><br>Member function of class <b>IAssembleCPU1</b><br>tooltip: assembles right-hand side on grid level for linear case<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_stiffness_matrix
void
void assemble_stiffness_matrix (Matrix *A, const Vector *u)
void assemble_stiffness_matrix (<a href="MatrixCPU1.html">Matrix</a> *A, const <a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>IAssembleCPU1</b><br>tooltip: assembles stiffness matrix on surface grid<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_mass_matrix
void
void assemble_mass_matrix (Matrix *M, const Vector *u)
void assemble_mass_matrix (<a href="MatrixCPU1.html">Matrix</a> *M, const <a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>IAssembleCPU1</b><br>tooltip: assembles mass matrix on surface grid<br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
adjust_solution
void
void adjust_solution (Vector *)
void adjust_solution (<a href="VectorCPU1.html">Vector</a> *)<br><br>Member function of class <b>IAssembleCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
adjust_solution
void
void adjust_solution (Vector *, const GridLevel *)
void adjust_solution (<a href="VectorCPU1.html">Vector</a> *, const <a href="GridLevel.html">GridLevel</a> *)<br><br>Member function of class <b>IAssembleCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
adjust_matrix_rhs
void
void adjust_matrix_rhs (Matrix *, Vector *, std::vector<SmartPtr<MultiIndex2> >, const Vector *)
void adjust_matrix_rhs (<a href="MatrixCPU1.html">Matrix</a> *, <a href="VectorCPU1.html">Vector</a> *, std::vector&ltSmartPtr&lt;<a href="MultiIndex2.html">MultiIndex2</a>&gt; &gt, const <a href="VectorCPU1.html">Vector</a> *)<br><br>Member function of class <b>IAssembleCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
IDomainDiscretization
IAssembleCPU1 
Class <b>IDomainDiscretizationCPU1</b>, default implementation of classgroup <b>IDomainDiscretization</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has no constructor. <br>Inheritance: <a href="IAssembleCPU1.html">IAssembleCPU1</a> <a href="IDomainDiscretizationCPU1.html">IDomainDiscretizationCPU1</a> <br><table><tr><td colspan=2><h3>IDomainDiscretization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *, const SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IAssemble Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_matrix_rhs (<a href="MatrixCPU1.html">Matrix</a> *, <a href="VectorCPU1.html">Vector</a> *, std::vector&ltSmartPtr&lt;<a href="MultiIndex2.html">MultiIndex2</a>&gt; &gt, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on grid level.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_mass_matrix (<a href="MatrixCPU1.html">Matrix</a> *M, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles mass matrix on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_stiffness_matrix (<a href="MatrixCPU1.html">Matrix</a> *A, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles stiffness matrix on surface grid<br/></td></tr><tr><td><br></td></tr></table>
memberfunction
assemble_jacobian
void
void assemble_jacobian (Matrix *, const SmartPtr<SolutionTimeSeries> , number )
void assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *, const SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; , number )<br><br>Member function of class <b>IDomainDiscretizationCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
ITimeDiscretization
IAssembleCPU1 
Class <b>ITimeDiscretizationCPU1</b>, default implementation of classgroup <b>ITimeDiscretization</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b><br>class has no constructor. <br>Inheritance: <a href="IAssembleCPU1.html">IAssembleCPU1</a> <a href="ITimeDiscretizationCPU1.html">ITimeDiscretizationCPU1</a> <br><table><tr><td colspan=2><h3>ITimeDiscretization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>finish_step_elem (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>prepare_step (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; prepares the assembling of Defect/Jacobian for a time step, number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>prepare_step_elem (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stage (size_t stage)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ITimeDiscretization Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>future_time ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the future time point (i.e. the one that will be computed)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_prev_steps ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_stages ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the number of stages<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IAssemble Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_matrix_rhs (<a href="MatrixCPU1.html">Matrix</a> *, <a href="VectorCPU1.html">Vector</a> *, std::vector&ltSmartPtr&lt;<a href="MultiIndex2.html">MultiIndex2</a>&gt; &gt, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on grid level.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_mass_matrix (<a href="MatrixCPU1.html">Matrix</a> *M, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles mass matrix on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_stiffness_matrix (<a href="MatrixCPU1.html">Matrix</a> *A, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles stiffness matrix on surface grid<br/></td></tr><tr><td><br></td></tr></table>
memberfunction
prepare_step
void
void prepare_step (SmartPtr<SolutionTimeSeries> prepares the assembling of Defect/Jacobian for a time step, number )
void prepare_step (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; prepares the assembling of Defect/Jacobian for a time step, number )<br><br>Member function of class <b>ITimeDiscretizationCPU1</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
prepare_step_elem
void
void prepare_step_elem (SmartPtr<SolutionTimeSeries> , number )
void prepare_step_elem (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; , number )<br><br>Member function of class <b>ITimeDiscretizationCPU1</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
finish_step_elem
void
void finish_step_elem (SmartPtr<SolutionTimeSeries> )
void finish_step_elem (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; )<br><br>Member function of class <b>ITimeDiscretizationCPU1</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
set_stage
void
void set_stage (size_t stage)
void set_stage (size_t stage)<br><br>Member function of class <b>ITimeDiscretizationCPU1</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
num_stages
unknown
size_t num_stages () const
size_t num_stages ()<br><br>Member function of class <b>ITimeDiscretizationCPU1</b><br>returns the number of stages<br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
future_time
number
number future_time () const
number future_time ()<br><br>Member function of class <b>ITimeDiscretizationCPU1</b><br>returns the future time point (i.e. the one that will be computed)<br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
num_prev_steps
unknown
size_t num_prev_steps () const
size_t num_prev_steps ()<br><br>Member function of class <b>ITimeDiscretizationCPU1</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
;
class
ThetaTimeStep
IAssembleCPU1 ITimeDiscretizationCPU1 
Class <b>ThetaTimeStepCPU1</b>, default implementation of classgroup <b>ThetaTimeStep</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b><br>class has constructor. <br>Inheritance: <a href="IAssembleCPU1.html">IAssembleCPU1</a> <a href="ITimeDiscretizationCPU1.html">ITimeDiscretizationCPU1</a> <a href="ThetaTimeStepCPU1.html">ThetaTimeStepCPU1</a> <br><table><tr><td colspan=2><h3>ThetaTimeStep Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ThetaTimeStepCPU1 (SmartPtr&lt;<a href="IDomainDiscretizationCPU1.html">IDomainDiscretization</a>&gt; Domain Discretization)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ThetaTimeStepCPU1 (SmartPtr&lt;<a href="IDomainDiscretizationCPU1.html">IDomainDiscretization</a>&gt; Domain Discretization, number Theta)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ThetaTimeStepCPU1 (SmartPtr&lt;<a href="IDomainDiscretizationCPU1.html">IDomainDiscretization</a>&gt; Domain Discretization, c_string Scheme)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ThetaTimeStep Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_scheme (c_string Scheme)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stage (size_t Stage)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_theta (number Theta (1 = Impl; 0 = Expl))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ITimeDiscretization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>finish_step_elem (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>prepare_step (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; prepares the assembling of Defect/Jacobian for a time step, number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>prepare_step_elem (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stage (size_t stage)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited ITimeDiscretization Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>future_time ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the future time point (i.e. the one that will be computed)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_prev_steps ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_stages ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the number of stages<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IAssemble Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_matrix_rhs (<a href="MatrixCPU1.html">Matrix</a> *, <a href="VectorCPU1.html">Vector</a> *, std::vector&ltSmartPtr&lt;<a href="MultiIndex2.html">MultiIndex2</a>&gt; &gt, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on grid level.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_mass_matrix (<a href="MatrixCPU1.html">Matrix</a> *M, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles mass matrix on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_stiffness_matrix (<a href="MatrixCPU1.html">Matrix</a> *A, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles stiffness matrix on surface grid<br/></td></tr><tr><td><br></td></tr></table>
constructor
ThetaTimeStepCPU1

ThetaTimeStepCPU1 (SmartPtr<IDomainDiscretization> Domain Discretization)
ThetaTimeStepCPU1 (SmartPtr&lt;<a href="IDomainDiscretizationCPU1.html">IDomainDiscretization</a>&gt; Domain Discretization)<br>Constructor of class <b>ThetaTimeStepCPU1</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
constructor
ThetaTimeStepCPU1

ThetaTimeStepCPU1 (SmartPtr<IDomainDiscretization> Domain Discretization, number Theta)
ThetaTimeStepCPU1 (SmartPtr&lt;<a href="IDomainDiscretizationCPU1.html">IDomainDiscretization</a>&gt; Domain Discretization, number Theta)<br>Constructor of class <b>ThetaTimeStepCPU1</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
constructor
ThetaTimeStepCPU1

ThetaTimeStepCPU1 (SmartPtr<IDomainDiscretization> Domain Discretization, c_string Scheme)
ThetaTimeStepCPU1 (SmartPtr&lt;<a href="IDomainDiscretizationCPU1.html">IDomainDiscretization</a>&gt; Domain Discretization, c_string Scheme)<br>Constructor of class <b>ThetaTimeStepCPU1</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
set_theta
void
void set_theta (number Theta (1 = Impl; 0 = Expl))
void set_theta (number Theta (1 = Impl; 0 = Expl))<br><br>Member function of class <b>ThetaTimeStepCPU1</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
set_scheme
void
void set_scheme (c_string Scheme)
void set_scheme (c_string Scheme)<br><br>Member function of class <b>ThetaTimeStepCPU1</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
set_stage
void
void set_stage (size_t Stage)
void set_stage (size_t Stage)<br><br>Member function of class <b>ThetaTimeStepCPU1</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
;
class
BDF
IAssembleCPU1 ITimeDiscretizationCPU1 
Class <b>BDFCPU1</b>, default implementation of classgroup <b>BDF</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b><br>class has constructor. <br>Inheritance: <a href="IAssembleCPU1.html">IAssembleCPU1</a> <a href="ITimeDiscretizationCPU1.html">ITimeDiscretizationCPU1</a> <a href="BDFCPU1.html">BDFCPU1</a> <br><table><tr><td colspan=2><h3>BDF Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>BDFCPU1 (SmartPtr&lt;<a href="IDomainDiscretizationCPU1.html">IDomainDiscretization</a>&gt; Domain Discretization)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>BDFCPU1 (SmartPtr&lt;<a href="IDomainDiscretizationCPU1.html">IDomainDiscretization</a>&gt; Domain Discretization, integer Order)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>BDF Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_order (size_t Order)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ITimeDiscretization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>finish_step_elem (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>prepare_step (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; prepares the assembling of Defect/Jacobian for a time step, number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>prepare_step_elem (SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stage (size_t stage)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited ITimeDiscretization Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>future_time ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the future time point (i.e. the one that will be computed)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_prev_steps ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_stages ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the number of stages<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IAssemble Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_matrix_rhs (<a href="MatrixCPU1.html">Matrix</a> *, <a href="VectorCPU1.html">Vector</a> *, std::vector&ltSmartPtr&lt;<a href="MultiIndex2.html">MultiIndex2</a>&gt; &gt, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on grid level.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_mass_matrix (<a href="MatrixCPU1.html">Matrix</a> *M, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles mass matrix on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_stiffness_matrix (<a href="MatrixCPU1.html">Matrix</a> *A, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles stiffness matrix on surface grid<br/></td></tr><tr><td><br></td></tr></table>
constructor
BDFCPU1

BDFCPU1 (SmartPtr<IDomainDiscretization> Domain Discretization)
BDFCPU1 (SmartPtr&lt;<a href="IDomainDiscretizationCPU1.html">IDomainDiscretization</a>&gt; Domain Discretization)<br>Constructor of class <b>BDFCPU1</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
constructor
BDFCPU1

BDFCPU1 (SmartPtr<IDomainDiscretization> Domain Discretization, integer Order)
BDFCPU1 (SmartPtr&lt;<a href="IDomainDiscretizationCPU1.html">IDomainDiscretization</a>&gt; Domain Discretization, integer Order)<br>Constructor of class <b>BDFCPU1</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
set_order
void
void set_order (size_t Order)
void set_order (size_t Order)<br><br>Member function of class <b>BDFCPU1</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
;
class
AssembledLinearOperator
MatrixCPU1 IOperatorCPU1 ILinearOperatorCPU1 MatrixOperatorCPU1 
Class <b>AssembledLinearOperatorCPU1</b>, default implementation of classgroup <b>AssembledLinearOperator</b><br>Registry Group: <b>/ug4/Discretization</b><br>class has constructor. <br>Inheritance: <a href="MatrixCPU1.html">MatrixCPU1</a> <a href="IOperatorCPU1.html">IOperatorCPU1</a> <a href="ILinearOperatorCPU1.html">ILinearOperatorCPU1</a> <a href="MatrixOperatorCPU1.html">MatrixOperatorCPU1</a> <a href="AssembledLinearOperatorCPU1.html">AssembledLinearOperatorCPU1</a> <br><table><tr><td colspan=2><h3>AssembledLinearOperator Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>AssembledLinearOperatorCPU1 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>AssembledLinearOperatorCPU1 (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; Assembling Routine)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>AssembledLinearOperatorCPU1 (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; AssemblingRoutine, GridLevel, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>AssembledLinearOperator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init_op_and_rhs (<a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_dirichlet_values (<a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_discretization (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_level (const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>AssembledLinearOperator Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const <a href="GridLevel.html">GridLevel</a> *</td><td class="memItemRight" valign=bottom>level ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>MatrixOperator Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>MatrixOperatorCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearOperator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns f#u<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Matrix Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>MatrixCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited Matrix Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print ()</td></tr><tr><td><br></td></tr></table>
constructor
AssembledLinearOperatorCPU1

AssembledLinearOperatorCPU1 ()
AssembledLinearOperatorCPU1 ()<br>Constructor of class <b>AssembledLinearOperatorCPU1</b><br>Registry Group: <b>/ug4/Discretization</b>
constructor
AssembledLinearOperatorCPU1

AssembledLinearOperatorCPU1 (SmartPtr<IAssemble> Assembling Routine)
AssembledLinearOperatorCPU1 (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; Assembling Routine)<br>Constructor of class <b>AssembledLinearOperatorCPU1</b><br>Registry Group: <b>/ug4/Discretization</b>
constructor
AssembledLinearOperatorCPU1

AssembledLinearOperatorCPU1 (SmartPtr<IAssemble> AssemblingRoutine, GridLevel, const GridLevel *)
AssembledLinearOperatorCPU1 (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; AssemblingRoutine, GridLevel, const <a href="GridLevel.html">GridLevel</a> *)<br>Constructor of class <b>AssembledLinearOperatorCPU1</b><br>Registry Group: <b>/ug4/Discretization</b>
memberfunction
set_discretization
void
void set_discretization (SmartPtr<IAssemble> )
void set_discretization (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; )<br><br>Member function of class <b>AssembledLinearOperatorCPU1</b><br>Registry Group: <b>/ug4/Discretization</b>
memberfunction
set_level
void
void set_level (const GridLevel *)
void set_level (const <a href="GridLevel.html">GridLevel</a> *)<br><br>Member function of class <b>AssembledLinearOperatorCPU1</b><br>Registry Group: <b>/ug4/Discretization</b>
memberfunction
set_dirichlet_values
void
void set_dirichlet_values (Vector *)
void set_dirichlet_values (<a href="VectorCPU1.html">Vector</a> *)<br><br>Member function of class <b>AssembledLinearOperatorCPU1</b><br>Registry Group: <b>/ug4/Discretization</b>
memberfunction
init_op_and_rhs
void
void init_op_and_rhs (Vector *)
void init_op_and_rhs (<a href="VectorCPU1.html">Vector</a> *)<br><br>Member function of class <b>AssembledLinearOperatorCPU1</b><br>Registry Group: <b>/ug4/Discretization</b>
memberfunction
level
const GridLevel*
const GridLevel *level () const
const <a href="GridLevel.html">GridLevel</a> *level ()<br><br>Member function of class <b>AssembledLinearOperatorCPU1</b><br>Registry Group: <b>/ug4/Discretization</b>
;
class
NewtonSolver
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 IOperatorInverseCPU1 
Class <b>NewtonSolverCPU1</b>, default implementation of classgroup <b>NewtonSolver</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b><br>class has constructor. <br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="IOperatorInverseCPU1.html">IOperatorInverseCPU1</a> <a href="NewtonSolverCPU1.html">NewtonSolverCPU1</a> <br><table><tr><td colspan=2><h3>NewtonSolver Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NewtonSolverCPU1 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NewtonSolverCPU1 (SmartPtr&lt;<a href="IOperatorCPU1.html">IOperator</a>&gt; Operator)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NewtonSolverCPU1 (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; AssemblingRoutine)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NewtonSolver Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_inner_step_update (SmartPtr&lt;<a href="INewtonUpdate.html">INewtonUpdate</a>&gt; )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns data update called before every linsolver step<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_step_update (SmartPtr&lt;<a href="INewtonUpdate.html">INewtonUpdate</a>&gt; )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns data update called before every Newton step<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear_average_convergence ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear_inner_step_update (SmartPtr&lt;<a href="INewtonUpdate.html">INewtonUpdate</a>&gt; )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns clear inner step update<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear_step_update (SmartPtr&lt;<a href="INewtonUpdate.html">INewtonUpdate</a>&gt; )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns clear step update<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="IOperatorCPU1.html">IOperator</a>&gt; op)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>prepare (<a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; convCheck)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_line_search (SmartPtr&lt;<a href="ILineSearchCPU1.html">ILineSearch</a>&gt; lineSeach)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_linear_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; linSolver)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NewtonSolver Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>average_linear_steps (size_t iNewtonStep)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns average number of linsolver steps per linsolver call in newton step iNewtonStep<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>num_linsolver_calls (size_t iNewtonStep)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns number of linsolver calls in iNewtonStep<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>num_linsolver_steps (size_t iNewtonStep)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns number of linsolver steps in newton step iNewtonStep<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_newton_steps ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns number of newton steps in history<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print_average_convergence ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>total_average_linear_steps ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns total average number of linsolver steps per linsolver call<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>total_linsolver_calls ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns total number of linsolver calls<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>total_linsolver_steps ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns total number of linsolver steps<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
NewtonSolverCPU1

NewtonSolverCPU1 ()
NewtonSolverCPU1 ()<br>Constructor of class <b>NewtonSolverCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
constructor
NewtonSolverCPU1

NewtonSolverCPU1 (SmartPtr<IOperator> Operator)
NewtonSolverCPU1 (SmartPtr&lt;<a href="IOperatorCPU1.html">IOperator</a>&gt; Operator)<br>Constructor of class <b>NewtonSolverCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
constructor
NewtonSolverCPU1

NewtonSolverCPU1 (SmartPtr<IAssemble> AssemblingRoutine)
NewtonSolverCPU1 (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; AssemblingRoutine)<br>Constructor of class <b>NewtonSolverCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_linear_solver
void
void set_linear_solver (SmartPtr<ILinearOperatorInverse> linSolver)
void set_linear_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; linSolver)<br><br>Member function of class <b>NewtonSolverCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_convergence_check
void
void set_convergence_check (SmartPtr<IConvergenceCheck> convCheck)
void set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; convCheck)<br><br>Member function of class <b>NewtonSolverCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_line_search
void
void set_line_search (SmartPtr<ILineSearch> lineSeach)
void set_line_search (SmartPtr&lt;<a href="ILineSearchCPU1.html">ILineSearch</a>&gt; lineSeach)<br><br>Member function of class <b>NewtonSolverCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
init
bool
bool init (SmartPtr<IOperator> op)
bool init (SmartPtr&lt;<a href="IOperatorCPU1.html">IOperator</a>&gt; op)<br><br>Member function of class <b>NewtonSolverCPU1</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
prepare
bool
bool prepare (Vector *u)
bool prepare (<a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>NewtonSolverCPU1</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
apply
bool
bool apply (Vector *u)
bool apply (<a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>NewtonSolverCPU1</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
clear_average_convergence
void
void clear_average_convergence ()
void clear_average_convergence ()<br><br>Member function of class <b>NewtonSolverCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
add_inner_step_update
void
void add_inner_step_update (SmartPtr<INewtonUpdate> )
void add_inner_step_update (SmartPtr&lt;<a href="INewtonUpdate.html">INewtonUpdate</a>&gt; )<br><br>Member function of class <b>NewtonSolverCPU1</b><br>returns data update called before every linsolver step<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
clear_inner_step_update
void
void clear_inner_step_update (SmartPtr<INewtonUpdate> )
void clear_inner_step_update (SmartPtr&lt;<a href="INewtonUpdate.html">INewtonUpdate</a>&gt; )<br><br>Member function of class <b>NewtonSolverCPU1</b><br>returns clear inner step update<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
add_step_update
void
void add_step_update (SmartPtr<INewtonUpdate> )
void add_step_update (SmartPtr&lt;<a href="INewtonUpdate.html">INewtonUpdate</a>&gt; )<br><br>Member function of class <b>NewtonSolverCPU1</b><br>returns data update called before every Newton step<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
clear_step_update
void
void clear_step_update (SmartPtr<INewtonUpdate> )
void clear_step_update (SmartPtr&lt;<a href="INewtonUpdate.html">INewtonUpdate</a>&gt; )<br><br>Member function of class <b>NewtonSolverCPU1</b><br>returns clear step update<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
print_average_convergence
void
void print_average_convergence () const
void print_average_convergence ()<br><br>Member function of class <b>NewtonSolverCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
num_newton_steps
unknown
size_t num_newton_steps () const
size_t num_newton_steps ()<br><br>Member function of class <b>NewtonSolverCPU1</b><br>returns number of newton steps in history<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
num_linsolver_calls
integer
integer num_linsolver_calls (size_t iNewtonStep) const
integer num_linsolver_calls (size_t iNewtonStep)<br><br>Member function of class <b>NewtonSolverCPU1</b><br>returns number of linsolver calls in iNewtonStep<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
num_linsolver_steps
integer
integer num_linsolver_steps (size_t iNewtonStep) const
integer num_linsolver_steps (size_t iNewtonStep)<br><br>Member function of class <b>NewtonSolverCPU1</b><br>returns number of linsolver steps in newton step iNewtonStep<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
average_linear_steps
number
number average_linear_steps (size_t iNewtonStep) const
number average_linear_steps (size_t iNewtonStep)<br><br>Member function of class <b>NewtonSolverCPU1</b><br>returns average number of linsolver steps per linsolver call in newton step iNewtonStep<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
total_linsolver_calls
integer
integer total_linsolver_calls () const
integer total_linsolver_calls ()<br><br>Member function of class <b>NewtonSolverCPU1</b><br>returns total number of linsolver calls<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
total_linsolver_steps
integer
integer total_linsolver_steps () const
integer total_linsolver_steps ()<br><br>Member function of class <b>NewtonSolverCPU1</b><br>returns total number of linsolver steps<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
total_average_linear_steps
number
number total_average_linear_steps () const
number total_average_linear_steps ()<br><br>Member function of class <b>NewtonSolverCPU1</b><br>returns total average number of linsolver steps per linsolver call<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
;
class
NLJacobiSolver
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 IOperatorInverseCPU1 
Class <b>NLJacobiSolverCPU1</b>, default implementation of classgroup <b>NLJacobiSolver</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b><br>class has constructor. <br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="IOperatorInverseCPU1.html">IOperatorInverseCPU1</a> <a href="NLJacobiSolverCPU1.html">NLJacobiSolverCPU1</a> <br><table><tr><td colspan=2><h3>NLJacobiSolver Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NLJacobiSolverCPU1 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NLJacobiSolverCPU1 (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; ConvCheck)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NLJacobiSolver Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="IOperatorCPU1.html">IOperator</a>&gt; op)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>prepare (<a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; convCheck)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number setDampingFactor)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
NLJacobiSolverCPU1

NLJacobiSolverCPU1 ()
NLJacobiSolverCPU1 ()<br>Constructor of class <b>NLJacobiSolverCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
constructor
NLJacobiSolverCPU1

NLJacobiSolverCPU1 (SmartPtr<IConvergenceCheck> ConvCheck)
NLJacobiSolverCPU1 (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; ConvCheck)<br>Constructor of class <b>NLJacobiSolverCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_convergence_check
void
void set_convergence_check (SmartPtr<IConvergenceCheck> convCheck)
void set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; convCheck)<br><br>Member function of class <b>NLJacobiSolverCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_damp
void
void set_damp (number setDampingFactor)
void set_damp (number setDampingFactor)<br><br>Member function of class <b>NLJacobiSolverCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
init
bool
bool init (SmartPtr<IOperator> op)
bool init (SmartPtr&lt;<a href="IOperatorCPU1.html">IOperator</a>&gt; op)<br><br>Member function of class <b>NLJacobiSolverCPU1</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
prepare
bool
bool prepare (Vector *u)
bool prepare (<a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>NLJacobiSolverCPU1</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
apply
bool
bool apply (Vector *u)
bool apply (<a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>NLJacobiSolverCPU1</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
;
class
AssembledOperator
IOperatorCPU1 
Class <b>AssembledOperatorCPU1</b>, default implementation of classgroup <b>AssembledOperator</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b><br>class has constructor. <br>Inheritance: <a href="IOperatorCPU1.html">IOperatorCPU1</a> <a href="AssembledOperatorCPU1.html">AssembledOperatorCPU1</a> <br><table><tr><td colspan=2><h3>AssembledOperator Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>AssembledOperatorCPU1 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>AssembledOperatorCPU1 (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; AssemblingRoutine)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>AssembledOperatorCPU1 (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; AssemblingRoutine, GridLevel, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>AssembledOperator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_discretization (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; ass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_level (const <a href="GridLevel.html">GridLevel</a> *gridLevel)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>AssembledOperator Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const <a href="GridLevel.html">GridLevel</a> *</td><td class="memItemRight" valign=bottom>level ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns gridLevel<br/></td></tr><tr><td><br></td></tr></table>
constructor
AssembledOperatorCPU1

AssembledOperatorCPU1 ()
AssembledOperatorCPU1 ()<br>Constructor of class <b>AssembledOperatorCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
constructor
AssembledOperatorCPU1

AssembledOperatorCPU1 (SmartPtr<IAssemble> AssemblingRoutine)
AssembledOperatorCPU1 (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; AssemblingRoutine)<br>Constructor of class <b>AssembledOperatorCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
constructor
AssembledOperatorCPU1

AssembledOperatorCPU1 (SmartPtr<IAssemble> AssemblingRoutine, GridLevel, const GridLevel *)
AssembledOperatorCPU1 (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; AssemblingRoutine, GridLevel, const <a href="GridLevel.html">GridLevel</a> *)<br>Constructor of class <b>AssembledOperatorCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_discretization
void
void set_discretization (SmartPtr<IAssemble> ass)
void set_discretization (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; ass)<br><br>Member function of class <b>AssembledOperatorCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_level
void
void set_level (const GridLevel *gridLevel)
void set_level (const <a href="GridLevel.html">GridLevel</a> *gridLevel)<br><br>Member function of class <b>AssembledOperatorCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
init
void
void init ()
void init ()<br><br>Member function of class <b>AssembledOperatorCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
level
const GridLevel*
const GridLevel *level () const
const <a href="GridLevel.html">GridLevel</a> *level ()<br><br>Member function of class <b>AssembledOperatorCPU1</b><br>returns gridLevel<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
;
class
ILocalToGlobalMapper

Class <b>ILocalToGlobalMapperCPU1</b>, default implementation of classgroup <b>ILocalToGlobalMapper</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has no constructor. <br><table></table>
;
class
ILineSearch

Class <b>ILineSearchCPU1</b>, default implementation of classgroup <b>ILineSearch</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b><br>class has no constructor. <br><table></table>
;
class
StandardLineSearch
ILineSearchCPU1 
Class <b>StandardLineSearchCPU1</b>, default implementation of classgroup <b>StandardLineSearch</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b><br>class has constructor. <br>Inheritance: <a href="ILineSearchCPU1.html">ILineSearchCPU1</a> <a href="StandardLineSearchCPU1.html">StandardLineSearchCPU1</a> <br><table><tr><td colspan=2><h3>StandardLineSearch Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>StandardLineSearchCPU1 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>StandardLineSearchCPU1 (integer , number , number , bool )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>StandardLineSearch Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_accept_best (bool bAcceptBest)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_lambda_start (number start)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_maximum_defect (number maxDef)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_maximum_steps (integer steps)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_offset (std_string strOffset)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reduce_factor (number factor)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_verbose (bool verboseLevel)</td></tr><tr><td><br></td></tr></table>
constructor
StandardLineSearchCPU1

StandardLineSearchCPU1 ()
StandardLineSearchCPU1 ()<br>Constructor of class <b>StandardLineSearchCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
constructor
StandardLineSearchCPU1

StandardLineSearchCPU1 (integer , number , number , bool )
StandardLineSearchCPU1 (integer , number , number , bool )<br>Constructor of class <b>StandardLineSearchCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_maximum_steps
void
void set_maximum_steps (integer steps)
void set_maximum_steps (integer steps)<br><br>Member function of class <b>StandardLineSearchCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_lambda_start
void
void set_lambda_start (number start)
void set_lambda_start (number start)<br><br>Member function of class <b>StandardLineSearchCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_reduce_factor
void
void set_reduce_factor (number factor)
void set_reduce_factor (number factor)<br><br>Member function of class <b>StandardLineSearchCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_accept_best
void
void set_accept_best (bool bAcceptBest)
void set_accept_best (bool bAcceptBest)<br><br>Member function of class <b>StandardLineSearchCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_maximum_defect
void
void set_maximum_defect (number maxDef)
void set_maximum_defect (number maxDef)<br><br>Member function of class <b>StandardLineSearchCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_verbose
void
void set_verbose (bool verboseLevel)
void set_verbose (bool verboseLevel)<br><br>Member function of class <b>StandardLineSearchCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_offset
void
void set_offset (std_string strOffset)
void set_offset (std_string strOffset)<br><br>Member function of class <b>StandardLineSearchCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
;
class
SolutionTimeSeries

Class <b>SolutionTimeSeriesCPU1</b>, default implementation of classgroup <b>SolutionTimeSeries</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b><br>class has constructor. <br><table><tr><td colspan=2><h3>SolutionTimeSeries Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>SolutionTimeSeriesCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>SolutionTimeSeries Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; </td><td class="memItemRight" valign=bottom>latest ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns latest solution<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; </td><td class="memItemRight" valign=bottom>oldest ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns oldest solution<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>push (SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; vec, number time)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: adds new time point, not discarding the oldest<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; </td><td class="memItemRight" valign=bottom>push_discard_oldest (SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; vec, number time)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns oldest solution<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: adds new time point, oldest solution is discarded and returned<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>SolutionTimeSeries Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>size ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns number of time steps handled<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; </td><td class="memItemRight" valign=bottom>solution (size_t i)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the local vector for the i'th time point<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>time (size_t i)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns point in time for solution<br/></td></tr><tr><td><br></td></tr></table>
constructor
SolutionTimeSeriesCPU1

SolutionTimeSeriesCPU1 ()
SolutionTimeSeriesCPU1 ()<br>Constructor of class <b>SolutionTimeSeriesCPU1</b><br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
push_discard_oldest
SmartPtr<VectorCPU1>
SmartPtr<Vector> push_discard_oldest (SmartPtr<Vector> vec, number time)
SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; push_discard_oldest (SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; vec, number time)<br><br>Member function of class <b>SolutionTimeSeriesCPU1</b><br>returns oldest solution<br>tooltip: adds new time point, oldest solution is discarded and returned<br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
push
void
void push (SmartPtr<Vector> vec, number time)
void push (SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; vec, number time)<br><br>Member function of class <b>SolutionTimeSeriesCPU1</b><br>tooltip: adds new time point, not discarding the oldest<br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
oldest
SmartPtr<VectorCPU1>
SmartPtr<Vector> oldest ()
SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; oldest ()<br><br>Member function of class <b>SolutionTimeSeriesCPU1</b><br>returns oldest solution<br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
latest
SmartPtr<VectorCPU1>
SmartPtr<Vector> latest ()
SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; latest ()<br><br>Member function of class <b>SolutionTimeSeriesCPU1</b><br>returns latest solution<br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
size
unknown
size_t size () const
size_t size ()<br><br>Member function of class <b>SolutionTimeSeriesCPU1</b><br>returns number of time steps handled<br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
solution
ConstSmartPtr<VectorCPU1>
const SmartPtr<Vector> solution (size_t i) const
const SmartPtr&lt;<a href="VectorCPU1.html">Vector</a>&gt; solution (size_t i)<br><br>Member function of class <b>SolutionTimeSeriesCPU1</b><br>returns the local vector for the i'th time point<br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
memberfunction
time
number
number time (size_t i) const
number time (size_t i)<br><br>Member function of class <b>SolutionTimeSeriesCPU1</b><br>returns point in time for solution<br>Registry Group: <b>/ug4/Discretization/TimeDisc</b>
;
class
CompositeConvCheck
IConvergenceCheckCPU1 
Class <b>CompositeConvCheck2dCPU1</b>, default implementation of classgroup <b>CompositeConvCheck</b><br>Registry Group: <b>/ug4</b><br>class has constructor. <br>Inheritance: <a href="IConvergenceCheckCPU1.html">IConvergenceCheckCPU1</a> <a href="CompositeConvCheck2dCPU1.html">CompositeConvCheck2dCPU1</a> <br><table><tr><td colspan=2><h3>CompositeConvCheck Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>CompositeConvCheck2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>CompositeConvCheck Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>iteration_ended ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_functions (c_string functions to be evaluated individually as comma-separated list)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_level (integer )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns grid level where defect vectors come from<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_maximum_steps (integer Maximum Steps)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_minimum_defect (std::vector&ltnumber &gtminimum defect for defined functions (comma-separated list), number minimum defect for rest)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reduction (std::vector&ltnumber &gtdefect reduction for defined functions (comma-separated list), number defect reduction for rest)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_verbose (bool Verbosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>timeMeasurement (bool )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: whether to perform a time measurement or not<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>CompositeConvCheck Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>avg_rate (size_t function index)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns avg_rate<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the averaged convergence rate for a function<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect (size_t function index)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns defect<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>rate (size_t function index)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns rate<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current convergence rate for a function<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction (size_t function index)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns reduction<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current relative reduction for a function<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns step<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current number of steps<br/></td></tr><tr><td><br></td></tr></table>
constructor
CompositeConvCheck2dCPU1

CompositeConvCheck2dCPU1 (SmartPtr<ApproximationSpace> ApproximationSpace)
CompositeConvCheck2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)<br>Constructor of class <b>CompositeConvCheck2dCPU1</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_level
void
void set_level (integer )
void set_level (integer )<br><br>Member function of class <b>CompositeConvCheck2dCPU1</b><br>returns grid level where defect vectors come from<br>Registry Group: <b>/ug4</b>
memberfunction
set_functions
void
void set_functions (c_string functions to be evaluated individually as comma-separated list)
void set_functions (c_string functions to be evaluated individually as comma-separated list)<br><br>Member function of class <b>CompositeConvCheck2dCPU1</b><br>Registry Group: <b>/ug4</b>
memberfunction
timeMeasurement
void
void timeMeasurement (bool )
void timeMeasurement (bool )<br><br>Member function of class <b>CompositeConvCheck2dCPU1</b><br>tooltip: whether to perform a time measurement or not<br>Registry Group: <b>/ug4</b>
memberfunction
set_maximum_steps
void
void set_maximum_steps (integer Maximum Steps)
void set_maximum_steps (integer Maximum Steps)<br><br>Member function of class <b>CompositeConvCheck2dCPU1</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_minimum_defect
void
void set_minimum_defect (std::vector<number >minimum defect for defined functions (comma-separated list), number minimum defect for rest)
void set_minimum_defect (std::vector&ltnumber &gtminimum defect for defined functions (comma-separated list), number minimum defect for rest)<br><br>Member function of class <b>CompositeConvCheck2dCPU1</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_reduction
void
void set_reduction (std::vector<number >defect reduction for defined functions (comma-separated list), number defect reduction for rest)
void set_reduction (std::vector&ltnumber &gtdefect reduction for defined functions (comma-separated list), number defect reduction for rest)<br><br>Member function of class <b>CompositeConvCheck2dCPU1</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_verbose
void
void set_verbose (bool Verbosity)
void set_verbose (bool Verbosity)<br><br>Member function of class <b>CompositeConvCheck2dCPU1</b><br>Registry Group: <b>/ug4</b>
memberfunction
iteration_ended
bool
bool iteration_ended ()
bool iteration_ended ()<br><br>Member function of class <b>CompositeConvCheck2dCPU1</b><br>Registry Group: <b>/ug4</b>
memberfunction
defect
number
number defect (size_t function index) const
number defect (size_t function index)<br><br>Member function of class <b>CompositeConvCheck2dCPU1</b><br>returns defect<br>tooltip: returns the current defect<br>Registry Group: <b>/ug4</b>
memberfunction
step
integer
integer step () const
integer step ()<br><br>Member function of class <b>CompositeConvCheck2dCPU1</b><br>returns step<br>tooltip: returns the current number of steps<br>Registry Group: <b>/ug4</b>
memberfunction
reduction
number
number reduction (size_t function index) const
number reduction (size_t function index)<br><br>Member function of class <b>CompositeConvCheck2dCPU1</b><br>returns reduction<br>tooltip: returns the current relative reduction for a function<br>Registry Group: <b>/ug4</b>
memberfunction
rate
number
number rate (size_t function index) const
number rate (size_t function index)<br><br>Member function of class <b>CompositeConvCheck2dCPU1</b><br>returns rate<br>tooltip: returns the current convergence rate for a function<br>Registry Group: <b>/ug4</b>
memberfunction
avg_rate
number
number avg_rate (size_t function index) const
number avg_rate (size_t function index)<br><br>Member function of class <b>CompositeConvCheck2dCPU1</b><br>returns avg_rate<br>tooltip: returns the averaged convergence rate for a function<br>Registry Group: <b>/ug4</b>
;
class
NLGaussSeidelSolver
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 IOperatorInverseCPU1 
Class <b>NLGaussSeidelSolver2dCPU1</b>, default implementation of classgroup <b>NLGaussSeidelSolver</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b><br>class has constructor. <br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="IOperatorInverseCPU1.html">IOperatorInverseCPU1</a> <a href="NLGaussSeidelSolver2dCPU1.html">NLGaussSeidelSolver2dCPU1</a> <br><table><tr><td colspan=2><h3>NLGaussSeidelSolver Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NLGaussSeidelSolver2dCPU1 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NLGaussSeidelSolver2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproxSpaceConvCheck, SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NLGaussSeidelSolver Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>apply (<a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="IOperatorCPU1.html">IOperator</a>&gt; op)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>prepare (<a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; approxSpace)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_constraint (const <a href="VectorCPU1.html">Vector</a> *setConstraint)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; convCheck)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number setDampingFactor)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
NLGaussSeidelSolver2dCPU1

NLGaussSeidelSolver2dCPU1 ()
NLGaussSeidelSolver2dCPU1 ()<br>Constructor of class <b>NLGaussSeidelSolver2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
constructor
NLGaussSeidelSolver2dCPU1

NLGaussSeidelSolver2dCPU1 (SmartPtr<ApproximationSpace> ApproxSpaceConvCheck, SmartPtr<IConvergenceCheck> )
NLGaussSeidelSolver2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproxSpaceConvCheck, SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; )<br>Constructor of class <b>NLGaussSeidelSolver2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_approximation_space
void
void set_approximation_space (SmartPtr<ApproximationSpace> approxSpace)
void set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; approxSpace)<br><br>Member function of class <b>NLGaussSeidelSolver2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_convergence_check
void
void set_convergence_check (SmartPtr<IConvergenceCheck> convCheck)
void set_convergence_check (SmartPtr&lt;<a href="IConvergenceCheckCPU1.html">IConvergenceCheck</a>&gt; convCheck)<br><br>Member function of class <b>NLGaussSeidelSolver2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_damp
void
void set_damp (number setDampingFactor)
void set_damp (number setDampingFactor)<br><br>Member function of class <b>NLGaussSeidelSolver2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
set_constraint
void
void set_constraint (const Vector *setConstraint)
void set_constraint (const <a href="VectorCPU1.html">Vector</a> *setConstraint)<br><br>Member function of class <b>NLGaussSeidelSolver2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
init
bool
bool init (SmartPtr<IOperator> op)
bool init (SmartPtr&lt;<a href="IOperatorCPU1.html">IOperator</a>&gt; op)<br><br>Member function of class <b>NLGaussSeidelSolver2dCPU1</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
prepare
bool
bool prepare (Vector *u)
bool prepare (<a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>NLGaussSeidelSolver2dCPU1</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
memberfunction
apply
bool
bool apply (Vector *u)
bool apply (<a href="VectorCPU1.html">Vector</a> *u)<br><br>Member function of class <b>NLGaussSeidelSolver2dCPU1</b><br>returns success<br>Registry Group: <b>/ug4/Discretization/Nonlinear</b>
;
class
DomainDiscretization
IAssembleCPU1 IDomainDiscretizationCPU1 
Class <b>DomainDiscretization2dCPU1</b>, default implementation of classgroup <b>DomainDiscretization</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor. <br>Inheritance: <a href="IAssembleCPU1.html">IAssembleCPU1</a> <a href="IDomainDiscretizationCPU1.html">IDomainDiscretizationCPU1</a> <a href="DomainDiscretization2dCPU1.html">DomainDiscretization2dCPU1</a> <br><table><tr><td colspan=2><h3>DomainDiscretization Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DomainDiscretization2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DomainDiscretization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="IDomainConstraint2dCPU1.html">IDomainConstraint</a>&gt; Post Process)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="IElemDisc2d.html">IElemDisc</a>&gt; Element Discretization)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="IDiscretizationItem2dCPU1.html">IDiscretizationItem</a>&gt; DiscItem)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IDomainDiscretization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *, const SmartPtr&lt;<a href="SolutionTimeSeriesCPU1.html">SolutionTimeSeries</a>&gt; , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IAssemble Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_matrix_rhs (<a href="MatrixCPU1.html">Matrix</a> *, <a href="VectorCPU1.html">Vector</a> *, std::vector&ltSmartPtr&lt;<a href="MultiIndex2.html">MultiIndex2</a>&gt; &gt, const <a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>adjust_solution (<a href="VectorCPU1.html">Vector</a> *, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_defect (<a href="VectorCPU1.html">Vector</a> *d(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Defect on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_jacobian (<a href="MatrixCPU1.html">Matrix</a> *J(u), const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles jacobian on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on surface grid.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *A, <a href="VectorCPU1.html">Vector</a> *b, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Assembles Matrix and rhs on grid level.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_mass_matrix (<a href="MatrixCPU1.html">Matrix</a> *M, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles mass matrix on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="VectorCPU1.html">Vector</a> *u, const <a href="GridLevel.html">GridLevel</a> *GridLevel)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on surface grid for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_rhs (<a href="VectorCPU1.html">Vector</a> *rhs, const <a href="GridLevel.html">GridLevel</a> *)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles right-hand side on grid level for linear case<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assemble_stiffness_matrix (<a href="MatrixCPU1.html">Matrix</a> *A, const <a href="VectorCPU1.html">Vector</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: assembles stiffness matrix on surface grid<br/></td></tr><tr><td><br></td></tr></table>
constructor
DomainDiscretization2dCPU1

DomainDiscretization2dCPU1 (SmartPtr<ApproximationSpace> ApproximationSpace)
DomainDiscretization2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)<br>Constructor of class <b>DomainDiscretization2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<IDomainConstraint> Post Process)
void add (SmartPtr&lt;<a href="IDomainConstraint2dCPU1.html">IDomainConstraint</a>&gt; Post Process)<br><br>Member function of class <b>DomainDiscretization2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<IElemDisc> Element Discretization)
void add (SmartPtr&lt;<a href="IElemDisc2d.html">IElemDisc</a>&gt; Element Discretization)<br><br>Member function of class <b>DomainDiscretization2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<IDiscretizationItem> DiscItem)
void add (SmartPtr&lt;<a href="IDiscretizationItem2dCPU1.html">IDiscretizationItem</a>&gt; DiscItem)<br><br>Member function of class <b>DomainDiscretization2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_linear
void
void assemble_linear (Matrix *, GridFunction *)
void assemble_linear (<a href="MatrixCPU1.html">Matrix</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>DomainDiscretization2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_rhs
void
void assemble_rhs (Vector *, GridFunction *)
void assemble_rhs (<a href="VectorCPU1.html">Vector</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>DomainDiscretization2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
assemble_rhs
void
void assemble_rhs (GridFunction *)
void assemble_rhs (<a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>DomainDiscretization2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
adjust_solution
void
void adjust_solution (GridFunction *)
void adjust_solution (<a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>DomainDiscretization2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
IDiscretizationItem

Class <b>IDiscretizationItem2dCPU1</b>, default implementation of classgroup <b>IDiscretizationItem</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has no constructor. <br><table></table>
;
class
DomainLoadBalancer
LoadBalancer2d 
Class <b>DomainLoadBalancer2dCPU1</b>, default implementation of classgroup <b>DomainLoadBalancer</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor. <br>Inheritance: <a href="LoadBalancer2d.html">LoadBalancer2d</a> <a href="DomainLoadBalancer2dCPU1.html">DomainLoadBalancer2dCPU1</a> <br><table><tr><td colspan=2><h3>DomainLoadBalancer Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DomainLoadBalancer2dCPU1 (SmartPtr&lt;<a href="Domain2d.html">Domain</a>&gt; Domain)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DomainLoadBalancer Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_serializer (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited LoadBalancer Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_distribution_level (size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>rebalance ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_balance_threshold (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_element_threshold (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_partitioner (SmartPtr&lt;<a href="IPartitioner2d.html">IPartitioner</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
DomainLoadBalancer2dCPU1

DomainLoadBalancer2dCPU1 (SmartPtr<Domain> Domain)
DomainLoadBalancer2dCPU1 (SmartPtr&lt;<a href="Domain2d.html">Domain</a>&gt; Domain)<br>Constructor of class <b>DomainLoadBalancer2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add_serializer
void
void add_serializer (SmartPtr<GridFunction> )
void add_serializer (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )<br><br>Member function of class <b>DomainLoadBalancer2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
ApproximationSpace
FunctionPattern DoFDistributionInfo IApproximationSpace 
Class <b>ApproximationSpace2d</b>, default implementation of classgroup <b>ApproximationSpace</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor. <br>Inheritance: <a href="FunctionPattern.html">FunctionPattern</a> <a href="DoFDistributionInfo.html">DoFDistributionInfo</a> <a href="IApproximationSpace.html">IApproximationSpace</a> <a href="ApproximationSpace2d.html">ApproximationSpace2d</a> <br><table><tr><td colspan=2><h3>ApproximationSpace Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ApproximationSpace2d (SmartPtr&lt;<a href="Domain2d.html">Domain</a>&gt; Domain)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ApproximationSpace2d (SmartPtr&lt;<a href="Domain2d.html">Domain</a>&gt; Domain, AlgebraType, const <a href="AlgebraType.html">AlgebraType</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ApproximationSpace Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="Domain2d.html">Domain</a>&gt; </td><td class="memItemRight" valign=bottom>domain ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ApproximationSpace Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="SurfaceView.html">SurfaceView</a>&gt; </td><td class="memItemRight" valign=bottom>surface_view ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IApproximationSpace Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>defragment ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init_levels ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init_surfaces ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init_top_surface ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited IApproximationSpace Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_levels ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print_layout_statistic (integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print_layout_statistic ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print_statistic (integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print_statistic ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DoFDistributionInfo Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print_local_dof_statistic (integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print_local_dof_statistic ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited FunctionPattern Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_fct (c_string Name, c_string Type, integer Order, c_string Subsets)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Adds a function to the Function Pattern<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">help: currently no help available<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_fct (c_string Name, c_string Type, integer Order)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Adds a function to the Function Pattern<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">help: currently no help available<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_fct (c_string Name, c_string Type)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Adds a function to the Function Pattern<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">help: currently no help available<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_fct (std::vector&ltstd_string &gtName, c_string Type, integer Order, std::vector&ltstd_string &gtSubsets)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Adds a function to the Function Pattern<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">help: currently no help available<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_fct (std::vector&ltstd_string &gtName, c_string Type, integer Order)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Adds a function to the Function Pattern<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">help: currently no help available<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_fct (std::vector&ltstd_string &gtName, c_string Type)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: Adds a function to the Function Pattern<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">help: currently no help available<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited FunctionPattern Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>dim (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>c_string </td><td class="memItemRight" valign=bottom>name (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>num_fct ()</td></tr><tr><td><br></td></tr></table>
constructor
ApproximationSpace2d

ApproximationSpace2d (SmartPtr<Domain> Domain)
ApproximationSpace2d (SmartPtr&lt;<a href="Domain2d.html">Domain</a>&gt; Domain)<br>Constructor of class <b>ApproximationSpace2d</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
constructor
ApproximationSpace2d

ApproximationSpace2d (SmartPtr<Domain> Domain, AlgebraType, const AlgebraType *)
ApproximationSpace2d (SmartPtr&lt;<a href="Domain2d.html">Domain</a>&gt; Domain, AlgebraType, const <a href="AlgebraType.html">AlgebraType</a> *)<br>Constructor of class <b>ApproximationSpace2d</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
domain
SmartPtr<Domain2d>
SmartPtr<Domain> domain ()
SmartPtr&lt;<a href="Domain2d.html">Domain</a>&gt; domain ()<br><br>Member function of class <b>ApproximationSpace2d</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
surface_view
ConstSmartPtr<SurfaceView>
const SmartPtr<SurfaceView> surface_view () const
const SmartPtr&lt;<a href="SurfaceView.html">SurfaceView</a>&gt; surface_view ()<br><br>Member function of class <b>ApproximationSpace2d</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunction
VectorCPU1 
Class <b>GridFunction2dCPU1</b>, default implementation of classgroup <b>GridFunction</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor. <br>Inheritance: <a href="VectorCPU1.html">VectorCPU1</a> <a href="GridFunction2dCPU1.html">GridFunction2dCPU1</a> <br><table><tr><td colspan=2><h3>GridFunction Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunction2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunction2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace, Level, integer )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunction Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_transfer (SmartPtr&lt;<a href="ILocalTransferAlgebraCPU1.html">ILocalTransferAlgebra</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_transfer (SmartPtr&lt;<a href="ILocalTransfer.html">ILocalTransfer</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>assign (const <a href="VectorCPU1.html">Vector</a> *Vector)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear_transfers ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const <a href="GridLevel.html">GridLevel</a> *</td><td class="memItemRight" valign=bottom>grid_level ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>remove_transfer (SmartPtr&lt;<a href="ILocalTransfer.html">ILocalTransfer</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunction Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; </td><td class="memItemRight" valign=bottom>clone ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Vector Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>VectorCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited Vector Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>set (number Number)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>set_random (number Number, number )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited Vector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>size ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Size<br/></td></tr><tr><td><br></td></tr></table>
constructor
GridFunction2dCPU1

GridFunction2dCPU1 (SmartPtr<ApproximationSpace> ApproximationSpace)
GridFunction2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)<br>Constructor of class <b>GridFunction2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
constructor
GridFunction2dCPU1

GridFunction2dCPU1 (SmartPtr<ApproximationSpace> ApproximationSpace, Level, integer )
GridFunction2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace, Level, integer )<br>Constructor of class <b>GridFunction2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
assign
void
void assign (const Vector *Vector)
void assign (const <a href="VectorCPU1.html">Vector</a> *Vector)<br><br>Member function of class <b>GridFunction2dCPU1</b><br>returns Success<br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
add_transfer
void
void add_transfer (SmartPtr<ILocalTransferAlgebra> )
void add_transfer (SmartPtr&lt;<a href="ILocalTransferAlgebraCPU1.html">ILocalTransferAlgebra</a>&gt; )<br><br>Member function of class <b>GridFunction2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
add_transfer
void
void add_transfer (SmartPtr<ILocalTransfer> )
void add_transfer (SmartPtr&lt;<a href="ILocalTransfer.html">ILocalTransfer</a>&gt; )<br><br>Member function of class <b>GridFunction2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
remove_transfer
void
void remove_transfer (SmartPtr<ILocalTransfer> )
void remove_transfer (SmartPtr&lt;<a href="ILocalTransfer.html">ILocalTransfer</a>&gt; )<br><br>Member function of class <b>GridFunction2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
clear_transfers
void
void clear_transfers ()
void clear_transfers ()<br><br>Member function of class <b>GridFunction2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
grid_level
const GridLevel*
const GridLevel *grid_level ()
const <a href="GridLevel.html">GridLevel</a> *grid_level ()<br><br>Member function of class <b>GridFunction2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
memberfunction
clone
SmartPtr<GridFunction2dCPU1>
SmartPtr<GridFunction> clone () const
SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; clone ()<br><br>Member function of class <b>GridFunction2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunctionNumberData
ICplUserData2d UserNumber2d 
Class <b>GridFunctionNumberData2dCPU1</b>, default implementation of classgroup <b>GridFunctionNumberData</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor. <br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserNumber2d.html">UserNumber2d</a> <a href="GridFunctionNumberData2dCPU1.html">GridFunctionNumberData2dCPU1</a> <br><table><tr><td colspan=2><h3>GridFunctionNumberData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionNumberData2dCPU1 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionNumberData2dCPU1

GridFunctionNumberData2dCPU1 (SmartPtr<GridFunction> GridFunction, c_string Component)
GridFunctionNumberData2dCPU1 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br>Constructor of class <b>GridFunctionNumberData2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunctionVectorData
ICplUserData2d UserVector2d 
Class <b>GridFunctionVectorData2dCPU1</b>, default implementation of classgroup <b>GridFunctionVectorData</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor. <br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserVector2d.html">UserVector2d</a> <a href="GridFunctionVectorData2dCPU1.html">GridFunctionVectorData2dCPU1</a> <br><table><tr><td colspan=2><h3>GridFunctionVectorData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionVectorData2dCPU1 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Components)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionVectorData2dCPU1

GridFunctionVectorData2dCPU1 (SmartPtr<GridFunction> GridFunction, c_string Components)
GridFunctionVectorData2dCPU1 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Components)<br>Constructor of class <b>GridFunctionVectorData2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunctionGradientData
ICplUserData2d UserVector2d 
Class <b>GridFunctionGradientData2dCPU1</b>, default implementation of classgroup <b>GridFunctionGradientData</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor. <br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserVector2d.html">UserVector2d</a> <a href="GridFunctionGradientData2dCPU1.html">GridFunctionGradientData2dCPU1</a> <br><table><tr><td colspan=2><h3>GridFunctionGradientData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionGradientData2dCPU1 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionGradientData2dCPU1

GridFunctionGradientData2dCPU1 (SmartPtr<GridFunction> GridFunction, c_string Component)
GridFunctionGradientData2dCPU1 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br>Constructor of class <b>GridFunctionGradientData2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
GridFunctionGradientComponentData
ICplUserData2d UserNumber2d 
Class <b>GridFunctionGradientComponentData2dCPU1</b>, default implementation of classgroup <b>GridFunctionGradientComponentData</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b><br>class has constructor. <br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserNumber2d.html">UserNumber2d</a> <a href="GridFunctionGradientComponentData2dCPU1.html">GridFunctionGradientComponentData2dCPU1</a> <br><table><tr><td colspan=2><h3>GridFunctionGradientComponentData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionGradientComponentData2dCPU1 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Components, size_t )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionGradientComponentData2dCPU1

GridFunctionGradientComponentData2dCPU1 (SmartPtr<GridFunction> GridFunction, c_string Components, size_t )
GridFunctionGradientComponentData2dCPU1 (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Components, size_t )<br>Constructor of class <b>GridFunctionGradientComponentData2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
;
class
ICplUserData

Class <b>ICplUserData2d</b>, default implementation of classgroup <b>ICplUserData</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor. <br><table></table>
;
class
UserNumber
ICplUserData2d 
Class <b>UserNumber2d</b>, default implementation of classgroup <b>UserNumber</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor. <br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserNumber2d.html">UserNumber2d</a> <br><table><tr><td colspan=2><h3>UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
memberfunction
get_dim
integer
integer get_dim () const
integer get_dim ()<br><br>Member function of class <b>UserNumber2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
type
string
std_string type () const
std_string type ()<br><br>Member function of class <b>UserNumber2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
CondUserNumber
ICplUserData2d 
Class <b>CondUserNumber2d</b>, default implementation of classgroup <b>CondUserNumber</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor. <br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="CondUserNumber2d.html">CondUserNumber2d</a> <br><table></table>
;
class
DependentUserDataNumber
ICplUserData2d UserNumber2d 
Class <b>DependentUserDataNumber2d</b>, default implementation of classgroup <b>DependentUserDataNumber</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor. <br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserNumber2d.html">UserNumber2d</a> <a href="DependentUserDataNumber2d.html">DependentUserDataNumber2d</a> <br><table><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
;
class
DataLinkerNumber
ICplUserData2d UserNumber2d DependentUserDataNumber2d 
Class <b>DataLinkerNumber2d</b>, default implementation of classgroup <b>DataLinkerNumber</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor. <br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserNumber2d.html">UserNumber2d</a> <a href="DependentUserDataNumber2d.html">DependentUserDataNumber2d</a> <a href="DataLinkerNumber2d.html">DataLinkerNumber2d</a> <br><table><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
;
class
ScaleAddLinkerNumber
ICplUserData2d UserNumber2d DependentUserDataNumber2d DataLinkerNumber2d 
Class <b>ScaleAddLinkerNumber2d</b>, default implementation of classgroup <b>ScaleAddLinkerNumber</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has constructor. <br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserNumber2d.html">UserNumber2d</a> <a href="DependentUserDataNumber2d.html">DependentUserDataNumber2d</a> <a href="DataLinkerNumber2d.html">DataLinkerNumber2d</a> <a href="ScaleAddLinkerNumber2d.html">ScaleAddLinkerNumber2d</a> <br><table><tr><td colspan=2><h3>ScaleAddLinkerNumber Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ScaleAddLinkerNumber2d ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ScaleAddLinkerNumber2d (const <a href="ScaleAddLinkerNumber2d.html">ScaleAddLinkerNumber</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ScaleAddLinkerNumber Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
ScaleAddLinkerNumber2d

ScaleAddLinkerNumber2d ()
ScaleAddLinkerNumber2d ()<br>Constructor of class <b>ScaleAddLinkerNumber2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
constructor
ScaleAddLinkerNumber2d

ScaleAddLinkerNumber2d (const ScaleAddLinkerNumber *)
ScaleAddLinkerNumber2d (const <a href="ScaleAddLinkerNumber2d.html">ScaleAddLinkerNumber</a> *)<br>Constructor of class <b>ScaleAddLinkerNumber2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (SmartPtr<UserNumber> , SmartPtr<UserNumber> )
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>ScaleAddLinkerNumber2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (number , SmartPtr<UserNumber> )
void add (number , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>ScaleAddLinkerNumber2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (SmartPtr<UserNumber> , number )
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , number )<br><br>Member function of class <b>ScaleAddLinkerNumber2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (number , number )
void add (number , number )<br><br>Member function of class <b>ScaleAddLinkerNumber2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
UserVector
ICplUserData2d 
Class <b>UserVector2d</b>, default implementation of classgroup <b>UserVector</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor. <br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserVector2d.html">UserVector2d</a> <br><table><tr><td colspan=2><h3>UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
memberfunction
get_dim
integer
integer get_dim () const
integer get_dim ()<br><br>Member function of class <b>UserVector2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
type
string
std_string type () const
std_string type ()<br><br>Member function of class <b>UserVector2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
CondUserVector
ICplUserData2d 
Class <b>CondUserVector2d</b>, default implementation of classgroup <b>CondUserVector</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor. <br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="CondUserVector2d.html">CondUserVector2d</a> <br><table></table>
;
class
DependentUserDataVector
ICplUserData2d UserVector2d 
Class <b>DependentUserDataVector2d</b>, default implementation of classgroup <b>DependentUserDataVector</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor. <br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserVector2d.html">UserVector2d</a> <a href="DependentUserDataVector2d.html">DependentUserDataVector2d</a> <br><table><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
;
class
DataLinkerVector
ICplUserData2d UserVector2d DependentUserDataVector2d 
Class <b>DataLinkerVector2d</b>, default implementation of classgroup <b>DataLinkerVector</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor. <br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserVector2d.html">UserVector2d</a> <a href="DependentUserDataVector2d.html">DependentUserDataVector2d</a> <a href="DataLinkerVector2d.html">DataLinkerVector2d</a> <br><table><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
;
class
ScaleAddLinkerVector
ICplUserData2d UserVector2d DependentUserDataVector2d DataLinkerVector2d 
Class <b>ScaleAddLinkerVector2d</b>, default implementation of classgroup <b>ScaleAddLinkerVector</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has constructor. <br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserVector2d.html">UserVector2d</a> <a href="DependentUserDataVector2d.html">DependentUserDataVector2d</a> <a href="DataLinkerVector2d.html">DataLinkerVector2d</a> <a href="ScaleAddLinkerVector2d.html">ScaleAddLinkerVector2d</a> <br><table><tr><td colspan=2><h3>ScaleAddLinkerVector Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ScaleAddLinkerVector2d ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ScaleAddLinkerVector2d (const <a href="ScaleAddLinkerVector2d.html">ScaleAddLinkerVector</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ScaleAddLinkerVector Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
ScaleAddLinkerVector2d

ScaleAddLinkerVector2d ()
ScaleAddLinkerVector2d ()<br>Constructor of class <b>ScaleAddLinkerVector2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
constructor
ScaleAddLinkerVector2d

ScaleAddLinkerVector2d (const ScaleAddLinkerVector *)
ScaleAddLinkerVector2d (const <a href="ScaleAddLinkerVector2d.html">ScaleAddLinkerVector</a> *)<br>Constructor of class <b>ScaleAddLinkerVector2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (SmartPtr<UserNumber> , SmartPtr<UserVector> )
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; )<br><br>Member function of class <b>ScaleAddLinkerVector2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (number , SmartPtr<UserVector> )
void add (number , SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; )<br><br>Member function of class <b>ScaleAddLinkerVector2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (SmartPtr<UserNumber> , number )
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , number )<br><br>Member function of class <b>ScaleAddLinkerVector2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (number , number )
void add (number , number )<br><br>Member function of class <b>ScaleAddLinkerVector2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
UserMatrix
ICplUserData2d 
Class <b>UserMatrix2d</b>, default implementation of classgroup <b>UserMatrix</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor. <br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserMatrix2d.html">UserMatrix2d</a> <br><table><tr><td colspan=2><h3>UserMatrix Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
memberfunction
get_dim
integer
integer get_dim () const
integer get_dim ()<br><br>Member function of class <b>UserMatrix2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
type
string
std_string type () const
std_string type ()<br><br>Member function of class <b>UserMatrix2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
CondUserMatrix
ICplUserData2d 
Class <b>CondUserMatrix2d</b>, default implementation of classgroup <b>CondUserMatrix</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor. <br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="CondUserMatrix2d.html">CondUserMatrix2d</a> <br><table></table>
;
class
DependentUserDataMatrix
ICplUserData2d UserMatrix2d 
Class <b>DependentUserDataMatrix2d</b>, default implementation of classgroup <b>DependentUserDataMatrix</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor. <br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserMatrix2d.html">UserMatrix2d</a> <a href="DependentUserDataMatrix2d.html">DependentUserDataMatrix2d</a> <br><table><tr><td colspan=2><h3> Inherited UserMatrix Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
;
class
DataLinkerMatrix
ICplUserData2d UserMatrix2d DependentUserDataMatrix2d 
Class <b>DataLinkerMatrix2d</b>, default implementation of classgroup <b>DataLinkerMatrix</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor. <br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserMatrix2d.html">UserMatrix2d</a> <a href="DependentUserDataMatrix2d.html">DependentUserDataMatrix2d</a> <a href="DataLinkerMatrix2d.html">DataLinkerMatrix2d</a> <br><table><tr><td colspan=2><h3> Inherited UserMatrix Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
;
class
ScaleAddLinkerMatrix
ICplUserData2d UserMatrix2d DependentUserDataMatrix2d DataLinkerMatrix2d 
Class <b>ScaleAddLinkerMatrix2d</b>, default implementation of classgroup <b>ScaleAddLinkerMatrix</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has constructor. <br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserMatrix2d.html">UserMatrix2d</a> <a href="DependentUserDataMatrix2d.html">DependentUserDataMatrix2d</a> <a href="DataLinkerMatrix2d.html">DataLinkerMatrix2d</a> <a href="ScaleAddLinkerMatrix2d.html">ScaleAddLinkerMatrix2d</a> <br><table><tr><td colspan=2><h3>ScaleAddLinkerMatrix Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ScaleAddLinkerMatrix2d ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ScaleAddLinkerMatrix2d (const <a href="ScaleAddLinkerMatrix2d.html">ScaleAddLinkerMatrix</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ScaleAddLinkerMatrix Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserMatrix Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
ScaleAddLinkerMatrix2d

ScaleAddLinkerMatrix2d ()
ScaleAddLinkerMatrix2d ()<br>Constructor of class <b>ScaleAddLinkerMatrix2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
constructor
ScaleAddLinkerMatrix2d

ScaleAddLinkerMatrix2d (const ScaleAddLinkerMatrix *)
ScaleAddLinkerMatrix2d (const <a href="ScaleAddLinkerMatrix2d.html">ScaleAddLinkerMatrix</a> *)<br>Constructor of class <b>ScaleAddLinkerMatrix2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (SmartPtr<UserNumber> , SmartPtr<UserMatrix> )
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; )<br><br>Member function of class <b>ScaleAddLinkerMatrix2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (number , SmartPtr<UserMatrix> )
void add (number , SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; )<br><br>Member function of class <b>ScaleAddLinkerMatrix2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (SmartPtr<UserNumber> , number )
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , number )<br><br>Member function of class <b>ScaleAddLinkerMatrix2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (number , number )
void add (number , number )<br><br>Member function of class <b>ScaleAddLinkerMatrix2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
UserTensor4
ICplUserData2d 
Class <b>UserTensor42d</b>, default implementation of classgroup <b>UserTensor4</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor. <br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserTensor42d.html">UserTensor42d</a> <br><table><tr><td colspan=2><h3>UserTensor4 Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
memberfunction
get_dim
integer
integer get_dim () const
integer get_dim ()<br><br>Member function of class <b>UserTensor42d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
type
string
std_string type () const
std_string type ()<br><br>Member function of class <b>UserTensor42d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
CondUserTensor4
ICplUserData2d 
Class <b>CondUserTensor42d</b>, default implementation of classgroup <b>CondUserTensor4</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor. <br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="CondUserTensor42d.html">CondUserTensor42d</a> <br><table></table>
;
class
DependentUserDataTensor4
ICplUserData2d UserTensor42d 
Class <b>DependentUserDataTensor42d</b>, default implementation of classgroup <b>DependentUserDataTensor4</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor. <br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserTensor42d.html">UserTensor42d</a> <a href="DependentUserDataTensor42d.html">DependentUserDataTensor42d</a> <br><table><tr><td colspan=2><h3> Inherited UserTensor4 Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
;
class
DataLinkerTensor4
ICplUserData2d UserTensor42d DependentUserDataTensor42d 
Class <b>DataLinkerTensor42d</b>, default implementation of classgroup <b>DataLinkerTensor4</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has no constructor. <br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserTensor42d.html">UserTensor42d</a> <a href="DependentUserDataTensor42d.html">DependentUserDataTensor42d</a> <a href="DataLinkerTensor42d.html">DataLinkerTensor42d</a> <br><table><tr><td colspan=2><h3> Inherited UserTensor4 Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
;
class
ScaleAddLinkerTensor4
ICplUserData2d UserTensor42d DependentUserDataTensor42d DataLinkerTensor42d 
Class <b>ScaleAddLinkerTensor42d</b>, default implementation of classgroup <b>ScaleAddLinkerTensor4</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has constructor. <br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserTensor42d.html">UserTensor42d</a> <a href="DependentUserDataTensor42d.html">DependentUserDataTensor42d</a> <a href="DataLinkerTensor42d.html">DataLinkerTensor42d</a> <a href="ScaleAddLinkerTensor42d.html">ScaleAddLinkerTensor42d</a> <br><table><tr><td colspan=2><h3>ScaleAddLinkerTensor4 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ScaleAddLinkerTensor42d ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ScaleAddLinkerTensor42d (const <a href="ScaleAddLinkerTensor42d.html">ScaleAddLinkerTensor4</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ScaleAddLinkerTensor4 Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserTensor42d.html">UserTensor4</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , SmartPtr&lt;<a href="UserTensor42d.html">UserTensor4</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserTensor4 Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
ScaleAddLinkerTensor42d

ScaleAddLinkerTensor42d ()
ScaleAddLinkerTensor42d ()<br>Constructor of class <b>ScaleAddLinkerTensor42d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
constructor
ScaleAddLinkerTensor42d

ScaleAddLinkerTensor42d (const ScaleAddLinkerTensor4 *)
ScaleAddLinkerTensor42d (const <a href="ScaleAddLinkerTensor42d.html">ScaleAddLinkerTensor4</a> *)<br>Constructor of class <b>ScaleAddLinkerTensor42d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (SmartPtr<UserNumber> , SmartPtr<UserTensor4> )
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserTensor42d.html">UserTensor4</a>&gt; )<br><br>Member function of class <b>ScaleAddLinkerTensor42d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (number , SmartPtr<UserTensor4> )
void add (number , SmartPtr&lt;<a href="UserTensor42d.html">UserTensor4</a>&gt; )<br><br>Member function of class <b>ScaleAddLinkerTensor42d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (SmartPtr<UserNumber> , number )
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , number )<br><br>Member function of class <b>ScaleAddLinkerTensor42d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
add
void
void add (number , number )
void add (number , number )<br><br>Member function of class <b>ScaleAddLinkerTensor42d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
ConstUserNumber
ICplUserData2d UserNumber2d 
Class <b>ConstUserNumber2d</b>, default implementation of classgroup <b>ConstUserNumber</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has constructor. <br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserNumber2d.html">UserNumber2d</a> <a href="ConstUserNumber2d.html">ConstUserNumber2d</a> <br><table><tr><td colspan=2><h3>ConstUserNumber Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConstUserNumber2d ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConstUserNumber2d (number Value)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConstUserNumber Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set (number Value)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConstUserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
ConstUserNumber2d

ConstUserNumber2d ()
ConstUserNumber2d ()<br>Constructor of class <b>ConstUserNumber2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
constructor
ConstUserNumber2d

ConstUserNumber2d (number Value)
ConstUserNumber2d (number Value)<br>Constructor of class <b>ConstUserNumber2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set
void
void set (number Value)
void set (number Value)<br><br>Member function of class <b>ConstUserNumber2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
print
void
void print () const
void print ()<br><br>Member function of class <b>ConstUserNumber2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
ConstUserVector
ICplUserData2d UserVector2d 
Class <b>ConstUserVector2d</b>, default implementation of classgroup <b>ConstUserVector</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has constructor. <br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserVector2d.html">UserVector2d</a> <a href="ConstUserVector2d.html">ConstUserVector2d</a> <br><table><tr><td colspan=2><h3>ConstUserVector Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConstUserVector2d ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConstUserVector2d (number Values)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConstUserVector Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_all_entries (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_entry (size_t , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConstUserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
ConstUserVector2d

ConstUserVector2d ()
ConstUserVector2d ()<br>Constructor of class <b>ConstUserVector2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
constructor
ConstUserVector2d

ConstUserVector2d (number Values)
ConstUserVector2d (number Values)<br>Constructor of class <b>ConstUserVector2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_all_entries
void
void set_all_entries (number )
void set_all_entries (number )<br><br>Member function of class <b>ConstUserVector2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_entry
void
void set_entry (size_t , number )
void set_entry (size_t , number )<br><br>Member function of class <b>ConstUserVector2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
print
void
void print () const
void print ()<br><br>Member function of class <b>ConstUserVector2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
ConstUserMatrix
ICplUserData2d UserMatrix2d 
Class <b>ConstUserMatrix2d</b>, default implementation of classgroup <b>ConstUserMatrix</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has constructor. <br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserMatrix2d.html">UserMatrix2d</a> <a href="ConstUserMatrix2d.html">ConstUserMatrix2d</a> <br><table><tr><td colspan=2><h3>ConstUserMatrix Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConstUserMatrix2d ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConstUserMatrix2d (number Diagonal Value)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConstUserMatrix Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_all_entries (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diag_tensor (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_entry (size_t , size_t , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConstUserMatrix Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserMatrix Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
ConstUserMatrix2d

ConstUserMatrix2d ()
ConstUserMatrix2d ()<br>Constructor of class <b>ConstUserMatrix2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
constructor
ConstUserMatrix2d

ConstUserMatrix2d (number Diagonal Value)
ConstUserMatrix2d (number Diagonal Value)<br>Constructor of class <b>ConstUserMatrix2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_diag_tensor
void
void set_diag_tensor (number )
void set_diag_tensor (number )<br><br>Member function of class <b>ConstUserMatrix2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_all_entries
void
void set_all_entries (number )
void set_all_entries (number )<br><br>Member function of class <b>ConstUserMatrix2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_entry
void
void set_entry (size_t , size_t , number )
void set_entry (size_t , size_t , number )<br><br>Member function of class <b>ConstUserMatrix2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
print
void
void print () const
void print ()<br><br>Member function of class <b>ConstUserMatrix2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
DarcyVelocityLinker
ICplUserData2d UserVector2d DependentUserDataVector2d DataLinkerVector2d 
Class <b>DarcyVelocityLinker2d</b>, default implementation of classgroup <b>DarcyVelocityLinker</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has constructor. <br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserVector2d.html">UserVector2d</a> <a href="DependentUserDataVector2d.html">DependentUserDataVector2d</a> <a href="DataLinkerVector2d.html">DataLinkerVector2d</a> <a href="DarcyVelocityLinker2d.html">DarcyVelocityLinker2d</a> <br><table><tr><td colspan=2><h3>DarcyVelocityLinker Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DarcyVelocityLinker2d ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DarcyVelocityLinker Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_pressure_gradient (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
DarcyVelocityLinker2d

DarcyVelocityLinker2d ()
DarcyVelocityLinker2d ()<br>Constructor of class <b>DarcyVelocityLinker2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_density
void
void set_density (SmartPtr<UserNumber> )
void set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>DarcyVelocityLinker2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_gravity
void
void set_gravity (SmartPtr<UserVector> )
void set_gravity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; )<br><br>Member function of class <b>DarcyVelocityLinker2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_permeability
void
void set_permeability (number )
void set_permeability (number )<br><br>Member function of class <b>DarcyVelocityLinker2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_permeability
void
void set_permeability (SmartPtr<UserMatrix> )
void set_permeability (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; )<br><br>Member function of class <b>DarcyVelocityLinker2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_pressure_gradient
void
void set_pressure_gradient (SmartPtr<UserVector> )
void set_pressure_gradient (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; )<br><br>Member function of class <b>DarcyVelocityLinker2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_viscosity
void
void set_viscosity (number )
void set_viscosity (number )<br><br>Member function of class <b>DarcyVelocityLinker2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
set_viscosity
void
void set_viscosity (SmartPtr<UserNumber> )
void set_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>DarcyVelocityLinker2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
InverseLinker
ICplUserData2d UserNumber2d DependentUserDataNumber2d DataLinkerNumber2d 
Class <b>InverseLinker2d</b>, default implementation of classgroup <b>InverseLinker</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b><br>class has constructor. <br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserNumber2d.html">UserNumber2d</a> <a href="DependentUserDataNumber2d.html">DependentUserDataNumber2d</a> <a href="DataLinkerNumber2d.html">DataLinkerNumber2d</a> <a href="InverseLinker2d.html">InverseLinker2d</a> <br><table><tr><td colspan=2><h3>InverseLinker Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>InverseLinker2d ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>InverseLinker2d (const <a href="InverseLinker2d.html">InverseLinker</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>InverseLinker Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>divide (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>divide (number , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>divide (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>divide (number , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
InverseLinker2d

InverseLinker2d ()
InverseLinker2d ()<br>Constructor of class <b>InverseLinker2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
constructor
InverseLinker2d

InverseLinker2d (const InverseLinker *)
InverseLinker2d (const <a href="InverseLinker2d.html">InverseLinker</a> *)<br>Constructor of class <b>InverseLinker2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
divide
void
void divide (SmartPtr<UserNumber> , SmartPtr<UserNumber> )
void divide (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>InverseLinker2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
divide
void
void divide (number , SmartPtr<UserNumber> )
void divide (number , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>InverseLinker2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
divide
void
void divide (SmartPtr<UserNumber> , number )
void divide (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , number )<br><br>Member function of class <b>InverseLinker2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
memberfunction
divide
void
void divide (number , number )
void divide (number , number )<br><br>Member function of class <b>InverseLinker2d</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc/UserData</b>
;
class
IDomainConstraint
IConstraintCPU1 
Class <b>IDomainConstraint2dCPU1</b>, default implementation of classgroup <b>IDomainConstraint</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has no constructor. <br>Inheritance: <a href="IConstraintCPU1.html">IConstraintCPU1</a> <a href="IDomainConstraint2dCPU1.html">IDomainConstraint2dCPU1</a> <br><table></table>
;
class
OneSideP1Constraints
IConstraintCPU1 IDomainConstraint2dCPU1 
Class <b>OneSideP1Constraints2dCPU1</b>, default implementation of classgroup <b>OneSideP1Constraints</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor. <br>Inheritance: <a href="IConstraintCPU1.html">IConstraintCPU1</a> <a href="IDomainConstraint2dCPU1.html">IDomainConstraint2dCPU1</a> <a href="OneSideP1Constraints2dCPU1.html">OneSideP1Constraints2dCPU1</a> <br><table><tr><td colspan=2><h3>OneSideP1Constraints Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>OneSideP1Constraints2dCPU1 ()</td></tr><tr><td><br></td></tr></table>
constructor
OneSideP1Constraints2dCPU1

OneSideP1Constraints2dCPU1 ()
OneSideP1Constraints2dCPU1 ()<br>Constructor of class <b>OneSideP1Constraints2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
SymP1Constraints
IConstraintCPU1 IDomainConstraint2dCPU1 
Class <b>SymP1Constraints2dCPU1</b>, default implementation of classgroup <b>SymP1Constraints</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor. <br>Inheritance: <a href="IConstraintCPU1.html">IConstraintCPU1</a> <a href="IDomainConstraint2dCPU1.html">IDomainConstraint2dCPU1</a> <a href="SymP1Constraints2dCPU1.html">SymP1Constraints2dCPU1</a> <br><table><tr><td colspan=2><h3>SymP1Constraints Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>SymP1Constraints2dCPU1 ()</td></tr><tr><td><br></td></tr></table>
constructor
SymP1Constraints2dCPU1

SymP1Constraints2dCPU1 ()
SymP1Constraints2dCPU1 ()<br>Constructor of class <b>SymP1Constraints2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
DirichletBoundary
IConstraintCPU1 IDomainConstraint2dCPU1 
Class <b>DirichletBoundary2dCPU1</b>, default implementation of classgroup <b>DirichletBoundary</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b><br>class has constructor. <br>Inheritance: <a href="IConstraintCPU1.html">IConstraintCPU1</a> <a href="IDomainConstraint2dCPU1.html">IDomainConstraint2dCPU1</a> <a href="DirichletBoundary2dCPU1.html">DirichletBoundary2dCPU1</a> <br><table><tr><td colspan=2><h3>DirichletBoundary Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DirichletBoundary2dCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DirichletBoundary Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="CondUserNumber2d.html">CondUserNumber</a>&gt; Value, c_string Function, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Value, c_string Function, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Vector, c_string Functions, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number ConstantValue, c_string Function, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string LuaCallback, c_string Function, c_string Subsets)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)</td></tr><tr><td><br></td></tr></table>
constructor
DirichletBoundary2dCPU1

DirichletBoundary2dCPU1 ()
DirichletBoundary2dCPU1 ()<br>Constructor of class <b>DirichletBoundary2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<CondUserNumber> Value, c_string Function, c_string Subsets)
void add (SmartPtr&lt;<a href="CondUserNumber2d.html">CondUserNumber</a>&gt; Value, c_string Function, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<UserNumber> Value, c_string Function, c_string Subsets)
void add (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Value, c_string Function, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (SmartPtr<UserVector> Vector, c_string Functions, c_string Subsets)
void add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Vector, c_string Functions, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (number ConstantValue, c_string Function, c_string Subsets)
void add (number ConstantValue, c_string Function, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
add
void
void add (c_string LuaCallback, c_string Function, c_string Subsets)
void add (c_string LuaCallback, c_string Function, c_string Subsets)<br><br>Member function of class <b>DirichletBoundary2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
set_approximation_space
void
void set_approximation_space (SmartPtr<ApproximationSpace> ApproximationSpace)
void set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; ApproximationSpace)<br><br>Member function of class <b>DirichletBoundary2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
memberfunction
clear
void
void clear ()
void clear ()<br><br>Member function of class <b>DirichletBoundary2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/SpatialDisc</b>
;
class
ITransferOperator

Class <b>ITransferOperatorCPU1</b>, default implementation of classgroup <b>ITransferOperator</b><br>Registry Group: <b>/ug4/Discretization</b><br>class has no constructor. <br><table></table>
;
class
ITransferPostProcess

Class <b>ITransferPostProcessCPU1</b>, default implementation of classgroup <b>ITransferPostProcess</b><br>Registry Group: <b>/ug4/Discretization</b><br>class has no constructor. <br><table></table>
;
class
StdTransfer
ITransferOperatorCPU1 
Class <b>StdTransfer2dCPU1</b>, default implementation of classgroup <b>StdTransfer</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor. <br>Inheritance: <a href="ITransferOperatorCPU1.html">ITransferOperatorCPU1</a> <a href="StdTransfer2dCPU1.html">StdTransfer2dCPU1</a> <br><table><tr><td colspan=2><h3>StdTransfer Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>StdTransfer2dCPU1 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>StdTransfer2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>StdTransfer Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_constraint (SmartPtr&lt;<a href="IConstraintCPU1.html">IConstraint</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_restriction_damping (number )</td></tr><tr><td><br></td></tr></table>
constructor
StdTransfer2dCPU1

StdTransfer2dCPU1 ()
StdTransfer2dCPU1 ()<br>Constructor of class <b>StdTransfer2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
StdTransfer2dCPU1

StdTransfer2dCPU1 (SmartPtr<ApproximationSpace> Approximation Space)
StdTransfer2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>StdTransfer2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_restriction_damping
void
void set_restriction_damping (number )
void set_restriction_damping (number )<br><br>Member function of class <b>StdTransfer2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
add_constraint
void
void add_constraint (SmartPtr<IConstraint> )
void add_constraint (SmartPtr&lt;<a href="IConstraintCPU1.html">IConstraint</a>&gt; )<br><br>Member function of class <b>StdTransfer2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_debug
void
void set_debug (SmartPtr<IDebugWriter> )
void set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )<br><br>Member function of class <b>StdTransfer2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
InjectionTransfer
ITransferOperatorCPU1 
Class <b>InjectionTransfer2dCPU1</b>, default implementation of classgroup <b>InjectionTransfer</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor. <br>Inheritance: <a href="ITransferOperatorCPU1.html">ITransferOperatorCPU1</a> <a href="InjectionTransfer2dCPU1.html">InjectionTransfer2dCPU1</a> <br><table><tr><td colspan=2><h3>InjectionTransfer Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>InjectionTransfer2dCPU1 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>InjectionTransfer2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr></table>
constructor
InjectionTransfer2dCPU1

InjectionTransfer2dCPU1 ()
InjectionTransfer2dCPU1 ()<br>Constructor of class <b>InjectionTransfer2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
InjectionTransfer2dCPU1

InjectionTransfer2dCPU1 (SmartPtr<ApproximationSpace> Approximation Space)
InjectionTransfer2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>InjectionTransfer2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
AverageComponent
ITransferPostProcessCPU1 
Class <b>AverageComponent2dCPU1</b>, default implementation of classgroup <b>AverageComponent</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor. <br>Inheritance: <a href="ITransferPostProcessCPU1.html">ITransferPostProcessCPU1</a> <a href="AverageComponent2dCPU1.html">AverageComponent2dCPU1</a> <br><table><tr><td colspan=2><h3>AverageComponent Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>AverageComponent2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space, c_string Components)</td></tr><tr><td><br></td></tr></table>
constructor
AverageComponent2dCPU1

AverageComponent2dCPU1 (SmartPtr<ApproximationSpace> Approximation Space, c_string Components)
AverageComponent2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space, c_string Components)<br>Constructor of class <b>AverageComponent2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
GeometricMultiGrid
ILinearIteratorCPU1 
Class <b>GeometricMultiGrid2dCPU1</b>, default implementation of classgroup <b>GeometricMultiGrid</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor. <br>Inheritance: <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="GeometricMultiGrid2dCPU1.html">GeometricMultiGrid2dCPU1</a> <br><table><tr><td colspan=2><h3>GeometricMultiGrid Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GeometricMultiGrid2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GeometricMultiGrid Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_prolongation_post_process (SmartPtr&lt;<a href="ITransferPostProcessCPU1.html">ITransferPostProcess</a>&gt; Prolongation Post Process)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_restriction_post_process (SmartPtr&lt;<a href="ITransferPostProcessCPU1.html">ITransferPostProcess</a>&gt; Restriction Post Process)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_base_level (integer Base Level)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_base_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Base Solver)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_cycle_type (integer Cycle Type)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_discretization (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; Discretization)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_postsmooth (integer Number PostSmooth Steps)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_presmooth (integer Number PreSmooth Steps)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_parallel_base_solver (bool Specifies if base solver works in parallel)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_postsmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_presmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_projection (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Projection)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_prolongation (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Prolongation)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_restriction (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Restriction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_smoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_surface_level (integer Surface Level)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_transfer (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Transfer)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
GeometricMultiGrid2dCPU1

GeometricMultiGrid2dCPU1 (SmartPtr<ApproximationSpace> Approximation Space)
GeometricMultiGrid2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation Space)<br>Constructor of class <b>GeometricMultiGrid2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_discretization
void
void set_discretization (SmartPtr<IAssemble> Discretization)
void set_discretization (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; Discretization)<br><br>Member function of class <b>GeometricMultiGrid2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_base_level
void
void set_base_level (integer Base Level)
void set_base_level (integer Base Level)<br><br>Member function of class <b>GeometricMultiGrid2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_surface_level
void
void set_surface_level (integer Surface Level)
void set_surface_level (integer Surface Level)<br><br>Member function of class <b>GeometricMultiGrid2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_parallel_base_solver
void
void set_parallel_base_solver (bool Specifies if base solver works in parallel)
void set_parallel_base_solver (bool Specifies if base solver works in parallel)<br><br>Member function of class <b>GeometricMultiGrid2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_base_solver
void
void set_base_solver (SmartPtr<ILinearOperatorInverse> Base Solver)
void set_base_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; Base Solver)<br><br>Member function of class <b>GeometricMultiGrid2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_smoother
void
void set_smoother (SmartPtr<ILinearIterator> Smoother)
void set_smoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)<br><br>Member function of class <b>GeometricMultiGrid2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_presmoother
void
void set_presmoother (SmartPtr<ILinearIterator> Smoother)
void set_presmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)<br><br>Member function of class <b>GeometricMultiGrid2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_postsmoother
void
void set_postsmoother (SmartPtr<ILinearIterator> Smoother)
void set_postsmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; Smoother)<br><br>Member function of class <b>GeometricMultiGrid2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_cycle_type
void
void set_cycle_type (integer Cycle Type)
void set_cycle_type (integer Cycle Type)<br><br>Member function of class <b>GeometricMultiGrid2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_num_presmooth
void
void set_num_presmooth (integer Number PreSmooth Steps)
void set_num_presmooth (integer Number PreSmooth Steps)<br><br>Member function of class <b>GeometricMultiGrid2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_num_postsmooth
void
void set_num_postsmooth (integer Number PostSmooth Steps)
void set_num_postsmooth (integer Number PostSmooth Steps)<br><br>Member function of class <b>GeometricMultiGrid2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_transfer
void
void set_transfer (SmartPtr<ITransferOperator> Transfer)
void set_transfer (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Transfer)<br><br>Member function of class <b>GeometricMultiGrid2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_prolongation
void
void set_prolongation (SmartPtr<ITransferOperator> Prolongation)
void set_prolongation (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Prolongation)<br><br>Member function of class <b>GeometricMultiGrid2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_restriction
void
void set_restriction (SmartPtr<ITransferOperator> Restriction)
void set_restriction (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Restriction)<br><br>Member function of class <b>GeometricMultiGrid2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_projection
void
void set_projection (SmartPtr<ITransferOperator> Projection)
void set_projection (SmartPtr&lt;<a href="ITransferOperatorCPU1.html">ITransferOperator</a>&gt; Projection)<br><br>Member function of class <b>GeometricMultiGrid2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
add_prolongation_post_process
void
void add_prolongation_post_process (SmartPtr<ITransferPostProcess> Prolongation Post Process)
void add_prolongation_post_process (SmartPtr&lt;<a href="ITransferPostProcessCPU1.html">ITransferPostProcess</a>&gt; Prolongation Post Process)<br><br>Member function of class <b>GeometricMultiGrid2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
add_restriction_post_process
void
void add_restriction_post_process (SmartPtr<ITransferPostProcess> Restriction Post Process)
void add_restriction_post_process (SmartPtr&lt;<a href="ITransferPostProcessCPU1.html">ITransferPostProcess</a>&gt; Restriction Post Process)<br><br>Member function of class <b>GeometricMultiGrid2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_debug
void
void set_debug (SmartPtr<IDebugWriter> )
void set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; )<br><br>Member function of class <b>GeometricMultiGrid2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
ElementGaussSeidel
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 ILinearIteratorCPU1 IPreconditionerCPU1 
Class <b>ElementGaussSeidel2dCPU1</b>, default implementation of classgroup <b>ElementGaussSeidel</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b><br>class has constructor. <br>Vanka Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="IPreconditionerCPU1.html">IPreconditionerCPU1</a> <a href="ElementGaussSeidel2dCPU1.html">ElementGaussSeidel2dCPU1</a> <br><table><tr><td colspan=2><h3>ElementGaussSeidel Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ElementGaussSeidel2dCPU1 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ElementGaussSeidel2dCPU1 (number relax)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ElementGaussSeidel2dCPU1 (std_string patch-type)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ElementGaussSeidel2dCPU1 (number relax, patch-type, std_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ElementGaussSeidel Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_relax (number relax)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
ElementGaussSeidel2dCPU1

ElementGaussSeidel2dCPU1 ()
ElementGaussSeidel2dCPU1 ()<br>Constructor of class <b>ElementGaussSeidel2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
ElementGaussSeidel2dCPU1

ElementGaussSeidel2dCPU1 (number relax)
ElementGaussSeidel2dCPU1 (number relax)<br>Constructor of class <b>ElementGaussSeidel2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
ElementGaussSeidel2dCPU1

ElementGaussSeidel2dCPU1 (std_string patch-type)
ElementGaussSeidel2dCPU1 (std_string patch-type)<br>Constructor of class <b>ElementGaussSeidel2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
constructor
ElementGaussSeidel2dCPU1

ElementGaussSeidel2dCPU1 (number relax, patch-type, std_string )
ElementGaussSeidel2dCPU1 (number relax, patch-type, std_string )<br>Constructor of class <b>ElementGaussSeidel2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
memberfunction
set_relax
void
void set_relax (number relax)
void set_relax (number relax)<br><br>Member function of class <b>ElementGaussSeidel2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/MultiGrid</b>
;
class
VTKOutput

Class <b>VTKOutput2d</b>, default implementation of classgroup <b>VTKOutput</b><br>Registry Group: <b>/ug4/Discretization/Output</b><br>class has constructor. <br><table><tr><td colspan=2><h3>VTKOutput Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>VTKOutput2d ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>VTKOutput Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear_selection ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number , bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number , bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number , bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select (c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select (std::vector&ltstd_string &gt, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select_all (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select_element (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select_element (c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select_element (std::vector&ltstd_string &gt, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select_element (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select_nodal (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select_nodal (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select_nodal (std::vector&ltstd_string &gt, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>select_nodal (c_string , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_binary (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>write_time_pvd (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>write_time_pvd (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>write_time_pvd (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)</td></tr><tr><td><br></td></tr></table>
constructor
VTKOutput2d

VTKOutput2d ()
VTKOutput2d ()<br>Constructor of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
clear_selection
void
void clear_selection ()
void clear_selection ()<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select_all
void
void select_all (bool )
void select_all (bool )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select
void
void select (c_string , c_string )
void select (c_string , c_string )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select
void
void select (std::vector<std_string >, c_string )
void select (std::vector&ltstd_string &gt, c_string )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select
void
void select (SmartPtr<UserNumber> , c_string )
void select (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , c_string )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select
void
void select (SmartPtr<UserVector> , c_string )
void select (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , c_string )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select_nodal
void
void select_nodal (c_string , c_string )
void select_nodal (c_string , c_string )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select_nodal
void
void select_nodal (std::vector<std_string >, c_string )
void select_nodal (std::vector&ltstd_string &gt, c_string )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select_nodal
void
void select_nodal (SmartPtr<UserNumber> , c_string )
void select_nodal (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , c_string )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select_nodal
void
void select_nodal (SmartPtr<UserVector> , c_string )
void select_nodal (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , c_string )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select_element
void
void select_element (c_string , c_string )
void select_element (c_string , c_string )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select_element
void
void select_element (std::vector<std_string >, c_string )
void select_element (std::vector&ltstd_string &gt, c_string )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select_element
void
void select_element (SmartPtr<UserNumber> , c_string )
void select_element (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , c_string )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
select_element
void
void select_element (SmartPtr<UserVector> , c_string )
void select_element (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , c_string )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_binary
void
void set_binary (bool )
void set_binary (bool )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
write_time_pvd
void
void write_time_pvd (c_string , GridFunction *)
void write_time_pvd (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
write_time_pvd
void
void write_time_pvd (c_string , GridFunction *)
void write_time_pvd (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
write_time_pvd
void
void write_time_pvd (c_string , GridFunction *)
void write_time_pvd (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *, integer , number , bool )
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number , bool )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *, integer , number )
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *, bool )
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *)
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *, integer , number , bool )
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number , bool )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *, integer , number )
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *, bool )
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *)
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *, integer , number , bool )
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number , bool )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *, integer , number )
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, integer , number )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *, bool )
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool )<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
print
void
void print (c_string , GridFunction *)
void print (c_string , <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Member function of class <b>VTKOutput2d</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
;
class
GridFunctionDebugWriter
IVectorDebugWriterCPU1 IDebugWriterCPU1 
Class <b>GridFunctionDebugWriter2dCPU1</b>, default implementation of classgroup <b>GridFunctionDebugWriter</b><br>Registry Group: <b>/ug4/Discretization/Output</b><br>class has constructor. <br>Inheritance: <a href="IVectorDebugWriterCPU1.html">IVectorDebugWriterCPU1</a> <a href="IDebugWriterCPU1.html">IDebugWriterCPU1</a> <a href="GridFunctionDebugWriter2dCPU1.html">GridFunctionDebugWriter2dCPU1</a> <br><table><tr><td colspan=2><h3>GridFunctionDebugWriter Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionDebugWriter2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunctionDebugWriter Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>reset ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_base_dir (c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_conn_viewer_output (bool cvOutput)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_print_consistent (bool printConsistent)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vtk_output (bool vtkOutput)</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionDebugWriter2dCPU1

GridFunctionDebugWriter2dCPU1 (SmartPtr<ApproximationSpace> )
GridFunctionDebugWriter2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )<br>Constructor of class <b>GridFunctionDebugWriter2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
reset
void
void reset ()
void reset ()<br><br>Member function of class <b>GridFunctionDebugWriter2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_vtk_output
void
void set_vtk_output (bool vtkOutput)
void set_vtk_output (bool vtkOutput)<br><br>Member function of class <b>GridFunctionDebugWriter2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_conn_viewer_output
void
void set_conn_viewer_output (bool cvOutput)
void set_conn_viewer_output (bool cvOutput)<br><br>Member function of class <b>GridFunctionDebugWriter2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_print_consistent
void
void set_print_consistent (bool printConsistent)
void set_print_consistent (bool printConsistent)<br><br>Member function of class <b>GridFunctionDebugWriter2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_base_dir
void
void set_base_dir (c_string )
void set_base_dir (c_string )<br><br>Member function of class <b>GridFunctionDebugWriter2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
;
class
GridFunctionPositionProvider
IPositionProvider2d 
Class <b>GridFunctionPositionProvider2dCPU1</b>, default implementation of classgroup <b>GridFunctionPositionProvider</b><br>Registry Group: <b>/ug4/Discretization/Output</b><br>class has constructor. <br>Inheritance: <a href="IPositionProvider2d.html">IPositionProvider2d</a> <a href="GridFunctionPositionProvider2dCPU1.html">GridFunctionPositionProvider2dCPU1</a> <br><table><tr><td colspan=2><h3>GridFunctionPositionProvider Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionPositionProvider2dCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunctionPositionProvider Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reference_grid_function (const <a href="GridFunction2dCPU1.html">GridFunction</a> *gridFunction)</td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionPositionProvider2dCPU1

GridFunctionPositionProvider2dCPU1 ()
GridFunctionPositionProvider2dCPU1 ()<br>Constructor of class <b>GridFunctionPositionProvider2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_reference_grid_function
void
void set_reference_grid_function (const GridFunction *gridFunction)
void set_reference_grid_function (const <a href="GridFunction2dCPU1.html">GridFunction</a> *gridFunction)<br><br>Member function of class <b>GridFunctionPositionProvider2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
;
class
GridFunctionVectorWriter
IVectorWriterCPU1 
Class <b>GridFunctionVectorWriter2dCPU1</b>, default implementation of classgroup <b>GridFunctionVectorWriter</b><br>Registry Group: <b>/ug4/Discretization/Output</b><br>class has constructor. <br>Inheritance: <a href="IVectorWriterCPU1.html">IVectorWriterCPU1</a> <a href="GridFunctionVectorWriter2dCPU1.html">GridFunctionVectorWriter2dCPU1</a> <br><table><tr><td colspan=2><h3>GridFunctionVectorWriter Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionVectorWriter2dCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunctionVectorWriter Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reference_grid_function (const <a href="GridFunction2dCPU1.html">GridFunction</a> *gridFunction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_user_data (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; userData)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IVectorWriter Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (<a href="VectorCPU1.html">Vector</a> *v)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: updates the vector v<br/></td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionVectorWriter2dCPU1

GridFunctionVectorWriter2dCPU1 ()
GridFunctionVectorWriter2dCPU1 ()<br>Constructor of class <b>GridFunctionVectorWriter2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_reference_grid_function
void
void set_reference_grid_function (const GridFunction *gridFunction)
void set_reference_grid_function (const <a href="GridFunction2dCPU1.html">GridFunction</a> *gridFunction)<br><br>Member function of class <b>GridFunctionVectorWriter2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_user_data
void
void set_user_data (SmartPtr<UserNumber> userData)
void set_user_data (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; userData)<br><br>Member function of class <b>GridFunctionVectorWriter2dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
;
class
GridFunctionVectorWriterDirichlet0
IVectorWriterCPU1 
Class <b>GridFunctionVectorWriterDirichlet02dCPU1</b>, default implementation of classgroup <b>GridFunctionVectorWriterDirichlet0</b><br>Registry Group: <b>/ug4/Discretization/Output</b><br>class has constructor. <br>Inheritance: <a href="IVectorWriterCPU1.html">IVectorWriterCPU1</a> <a href="GridFunctionVectorWriterDirichlet02dCPU1.html">GridFunctionVectorWriterDirichlet02dCPU1</a> <br><table><tr><td colspan=2><h3>GridFunctionVectorWriterDirichlet0 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>GridFunctionVectorWriterDirichlet02dCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>GridFunctionVectorWriterDirichlet0 Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="IConstraintCPU1.html">IConstraint</a>&gt; postProcess, <a href="ApproximationSpace2d.html">ApproximationSpace</a> *approxSpace)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_level (size_t level)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IVectorWriter Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (<a href="VectorCPU1.html">Vector</a> *v)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: updates the vector v<br/></td></tr><tr><td><br></td></tr></table>
constructor
GridFunctionVectorWriterDirichlet02dCPU1

GridFunctionVectorWriterDirichlet02dCPU1 ()
GridFunctionVectorWriterDirichlet02dCPU1 ()<br>Constructor of class <b>GridFunctionVectorWriterDirichlet02dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
init
void
void init (SmartPtr<IConstraint> postProcess, ApproximationSpace *approxSpace)
void init (SmartPtr&lt;<a href="IConstraintCPU1.html">IConstraint</a>&gt; postProcess, <a href="ApproximationSpace2d.html">ApproximationSpace</a> *approxSpace)<br><br>Member function of class <b>GridFunctionVectorWriterDirichlet02dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
memberfunction
set_level
void
void set_level (size_t level)
void set_level (size_t level)<br><br>Member function of class <b>GridFunctionVectorWriterDirichlet02dCPU1</b><br>Registry Group: <b>/ug4/Discretization/Output</b>
;
class
ILocalTransferAlgebra
ILocalTransfer 
Class <b>ILocalTransferAlgebraCPU1</b>, default implementation of classgroup <b>ILocalTransferAlgebra</b><br>Registry Group: <b></b><br>class has no constructor. <br>Inheritance: <a href="ILocalTransfer.html">ILocalTransfer</a> <a href="ILocalTransferAlgebraCPU1.html">ILocalTransferAlgebraCPU1</a> <br><table></table>
;
class
P1LocalTransfer
ILocalTransfer ILocalTransferAlgebraCPU1 
Class <b>P1LocalTransferCPU1</b>, default implementation of classgroup <b>P1LocalTransfer</b><br>Registry Group: <b></b><br>class has constructor. <br>Inheritance: <a href="ILocalTransfer.html">ILocalTransfer</a> <a href="ILocalTransferAlgebraCPU1.html">ILocalTransferAlgebraCPU1</a> <a href="P1LocalTransferCPU1.html">P1LocalTransferCPU1</a> <br><table><tr><td colspan=2><h3>P1LocalTransfer Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>P1LocalTransferCPU1 (size_t fct)</td></tr><tr><td><br></td></tr></table>
constructor
P1LocalTransferCPU1

P1LocalTransferCPU1 (size_t fct)
P1LocalTransferCPU1 (size_t fct)<br>Constructor of class <b>P1LocalTransferCPU1</b>
;
class
DensityDrivenFlowBase
IElemDisc2d 
Class <b>DensityDrivenFlowBase2d</b>, default implementation of classgroup <b>DensityDrivenFlowBase</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b><br>class has no constructor. <br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="DensityDrivenFlowBase2d.html">DensityDrivenFlowBase2d</a> <br><table><tr><td colspan=2><h3>DensityDrivenFlowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>brine ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>darcy_velocity ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>pressure_grad ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_boussinesq_flow (bool Boussinesq Flow)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_boussinesq_transport (bool Boussinesq Transport)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Gravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (std::vector&ltnumber &gtGravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (c_string Gravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (number MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (c_string MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (number Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (c_string Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (c_string Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (number Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Viscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (number Viscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (c_string Viscosity)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
memberfunction
set_boussinesq_transport
void
void set_boussinesq_transport (bool Boussinesq Transport)
void set_boussinesq_transport (bool Boussinesq Transport)<br><br>Member function of class <b>DensityDrivenFlowBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_boussinesq_flow
void
void set_boussinesq_flow (bool Boussinesq Flow)
void set_boussinesq_flow (bool Boussinesq Flow)<br><br>Member function of class <b>DensityDrivenFlowBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_porosity
void
void set_porosity (SmartPtr<UserNumber> Porosity)
void set_porosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Porosity)<br><br>Member function of class <b>DensityDrivenFlowBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_porosity
void
void set_porosity (number Porosity)
void set_porosity (number Porosity)<br><br>Member function of class <b>DensityDrivenFlowBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_porosity
void
void set_porosity (c_string Porosity)
void set_porosity (c_string Porosity)<br><br>Member function of class <b>DensityDrivenFlowBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_gravity
void
void set_gravity (SmartPtr<UserVector> Gravity)
void set_gravity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Gravity)<br><br>Member function of class <b>DensityDrivenFlowBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_gravity
void
void set_gravity (std::vector<number >Gravity)
void set_gravity (std::vector&ltnumber &gtGravity)<br><br>Member function of class <b>DensityDrivenFlowBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_gravity
void
void set_gravity (c_string Gravity)
void set_gravity (c_string Gravity)<br><br>Member function of class <b>DensityDrivenFlowBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_molecular_diffusion
void
void set_molecular_diffusion (SmartPtr<UserMatrix> MolecularDiffusion)
void set_molecular_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; MolecularDiffusion)<br><br>Member function of class <b>DensityDrivenFlowBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_molecular_diffusion
void
void set_molecular_diffusion (number MolecularDiffusion)
void set_molecular_diffusion (number MolecularDiffusion)<br><br>Member function of class <b>DensityDrivenFlowBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_molecular_diffusion
void
void set_molecular_diffusion (c_string MolecularDiffusion)
void set_molecular_diffusion (c_string MolecularDiffusion)<br><br>Member function of class <b>DensityDrivenFlowBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_permeability
void
void set_permeability (SmartPtr<UserMatrix> Permeability)
void set_permeability (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Permeability)<br><br>Member function of class <b>DensityDrivenFlowBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_permeability
void
void set_permeability (number Permeability)
void set_permeability (number Permeability)<br><br>Member function of class <b>DensityDrivenFlowBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_permeability
void
void set_permeability (c_string Permeability)
void set_permeability (c_string Permeability)<br><br>Member function of class <b>DensityDrivenFlowBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_viscosity
void
void set_viscosity (SmartPtr<UserNumber> Viscosity)
void set_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Viscosity)<br><br>Member function of class <b>DensityDrivenFlowBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_viscosity
void
void set_viscosity (number Viscosity)
void set_viscosity (number Viscosity)<br><br>Member function of class <b>DensityDrivenFlowBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_viscosity
void
void set_viscosity (c_string Viscosity)
void set_viscosity (c_string Viscosity)<br><br>Member function of class <b>DensityDrivenFlowBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_density
void
void set_density (SmartPtr<UserNumber> Density)
void set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Density)<br><br>Member function of class <b>DensityDrivenFlowBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
darcy_velocity
SmartPtr<UserVector2d>
SmartPtr<UserVector> darcy_velocity ()
SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; darcy_velocity ()<br><br>Member function of class <b>DensityDrivenFlowBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
brine
SmartPtr<UserNumber2d>
SmartPtr<UserNumber> brine ()
SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; brine ()<br><br>Member function of class <b>DensityDrivenFlowBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
pressure_grad
SmartPtr<UserVector2d>
SmartPtr<UserVector> pressure_grad ()
SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; pressure_grad ()<br><br>Member function of class <b>DensityDrivenFlowBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
;
class
DensityDrivenFlowFV1
IElemDisc2d DensityDrivenFlowBase2d 
Class <b>DensityDrivenFlowFV12d</b>, default implementation of classgroup <b>DensityDrivenFlowFV1</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b><br>class has constructor. <br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="DensityDrivenFlowBase2d.html">DensityDrivenFlowBase2d</a> <a href="DensityDrivenFlowFV12d.html">DensityDrivenFlowFV12d</a> <br><table><tr><td colspan=2><h3>DensityDrivenFlowFV1 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DensityDrivenFlowFV12d (c_string Function(s), c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DensityDrivenFlowFV1 Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_consistent_gravity (bool Consistent Gravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_upwind (SmartPtr&lt;<a href="IConvectionShapes2d.html">IConvectionShapes</a>&gt; Upwind (no, part, full))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DensityDrivenFlowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>brine ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>darcy_velocity ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>pressure_grad ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_boussinesq_flow (bool Boussinesq Flow)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_boussinesq_transport (bool Boussinesq Transport)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Gravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (std::vector&ltnumber &gtGravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (c_string Gravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (number MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (c_string MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (number Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (c_string Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (c_string Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (number Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Viscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (number Viscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (c_string Viscosity)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
DensityDrivenFlowFV12d

DensityDrivenFlowFV12d (c_string Function(s), c_string Subset(s))
DensityDrivenFlowFV12d (c_string Function(s), c_string Subset(s))<br>Constructor of class <b>DensityDrivenFlowFV12d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_consistent_gravity
void
void set_consistent_gravity (bool Consistent Gravity)
void set_consistent_gravity (bool Consistent Gravity)<br><br>Member function of class <b>DensityDrivenFlowFV12d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_upwind
void
void set_upwind (SmartPtr<IConvectionShapes> Upwind (no, part, full))
void set_upwind (SmartPtr&lt;<a href="IConvectionShapes2d.html">IConvectionShapes</a>&gt; Upwind (no, part, full))<br><br>Member function of class <b>DensityDrivenFlowFV12d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
;
class
DensityDrivenFlowFV
IElemDisc2d DensityDrivenFlowBase2d 
Class <b>DensityDrivenFlowFV2d</b>, default implementation of classgroup <b>DensityDrivenFlowFV</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b><br>class has constructor. <br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="DensityDrivenFlowBase2d.html">DensityDrivenFlowBase2d</a> <a href="DensityDrivenFlowFV2d.html">DensityDrivenFlowFV2d</a> <br><table><tr><td colspan=2><h3>DensityDrivenFlowFV Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DensityDrivenFlowFV2d (c_string Function(s), c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DensityDrivenFlowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>brine ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>darcy_velocity ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>pressure_grad ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_boussinesq_flow (bool Boussinesq Flow)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_boussinesq_transport (bool Boussinesq Transport)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Gravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (std::vector&ltnumber &gtGravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (c_string Gravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (number MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (c_string MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (number Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (c_string Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (c_string Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (number Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Viscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (number Viscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (c_string Viscosity)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
DensityDrivenFlowFV2d

DensityDrivenFlowFV2d (c_string Function(s), c_string Subset(s))
DensityDrivenFlowFV2d (c_string Function(s), c_string Subset(s))<br>Constructor of class <b>DensityDrivenFlowFV2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
;
class
ThermohalineFlow
IElemDisc2d 
Class <b>ThermohalineFlow2d</b>, default implementation of classgroup <b>ThermohalineFlow</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b><br>class has constructor. <br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="ThermohalineFlow2d.html">ThermohalineFlow2d</a> <br><table><tr><td colspan=2><h3>ThermohalineFlow Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ThermohalineFlow2d (c_string Function(s), c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ThermohalineFlow Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>brine ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>darcy_velocity ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>pressure_grad ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_boussinesq_density (number BoussinesqDensity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_boussinesq_flow (bool BoussinesqFlow)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_boussinesq_transport (bool BoussinesqTransport)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_consistent_gravity (bool ConsistentGravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Gravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (number g_x)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (number g_x, g_y, number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (number g_x, g_y, g_z, number , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_gravity (c_string Gravity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_heat_capacity_fluid (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_heat_capacity_solid (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_density_solid (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (number MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (c_string MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_molecular_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; MolecularDiffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (number Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_permeability (c_string Permeability)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (number Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_porosity (c_string Porosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_thermal_conductivity (c_string ThermalConductivity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_thermal_conductivity (number ThermalConductivity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_thermal_conductivity (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; ThermalConductivity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_upwind (SmartPtr&lt;<a href="IConvectionShapes2d.html">IConvectionShapes</a>&gt; Upwind (no, part, full))</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_upwind_energy (SmartPtr&lt;<a href="IConvectionShapes2d.html">IConvectionShapes</a>&gt; Upwind (no, part, full))</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (number Viscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (c_string Viscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Viscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>temperature ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
ThermohalineFlow2d

ThermohalineFlow2d (c_string Function(s), c_string Subset(s))
ThermohalineFlow2d (c_string Function(s), c_string Subset(s))<br>Constructor of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_consistent_gravity
void
void set_consistent_gravity (bool ConsistentGravity)
void set_consistent_gravity (bool ConsistentGravity)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_boussinesq_transport
void
void set_boussinesq_transport (bool BoussinesqTransport)
void set_boussinesq_transport (bool BoussinesqTransport)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_boussinesq_flow
void
void set_boussinesq_flow (bool BoussinesqFlow)
void set_boussinesq_flow (bool BoussinesqFlow)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_boussinesq_density
void
void set_boussinesq_density (number BoussinesqDensity)
void set_boussinesq_density (number BoussinesqDensity)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_upwind
void
void set_upwind (SmartPtr<IConvectionShapes> Upwind (no, part, full))
void set_upwind (SmartPtr&lt;<a href="IConvectionShapes2d.html">IConvectionShapes</a>&gt; Upwind (no, part, full))<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_upwind_energy
void
void set_upwind_energy (SmartPtr<IConvectionShapes> Upwind (no, part, full))
void set_upwind_energy (SmartPtr&lt;<a href="IConvectionShapes2d.html">IConvectionShapes</a>&gt; Upwind (no, part, full))<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_porosity
void
void set_porosity (SmartPtr<UserNumber> Porosity)
void set_porosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Porosity)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_porosity
void
void set_porosity (number Porosity)
void set_porosity (number Porosity)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_porosity
void
void set_porosity (c_string Porosity)
void set_porosity (c_string Porosity)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_gravity
void
void set_gravity (SmartPtr<UserVector> Gravity)
void set_gravity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Gravity)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_gravity
void
void set_gravity (number g_x)
void set_gravity (number g_x)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_gravity
void
void set_gravity (number g_x, g_y, number )
void set_gravity (number g_x, g_y, number )<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_gravity
void
void set_gravity (number g_x, g_y, g_z, number , number )
void set_gravity (number g_x, g_y, g_z, number , number )<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_gravity
void
void set_gravity (c_string Gravity)
void set_gravity (c_string Gravity)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_molecular_diffusion
void
void set_molecular_diffusion (SmartPtr<UserMatrix> MolecularDiffusion)
void set_molecular_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; MolecularDiffusion)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_molecular_diffusion
void
void set_molecular_diffusion (number MolecularDiffusion)
void set_molecular_diffusion (number MolecularDiffusion)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_molecular_diffusion
void
void set_molecular_diffusion (c_string MolecularDiffusion)
void set_molecular_diffusion (c_string MolecularDiffusion)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_thermal_conductivity
void
void set_thermal_conductivity (SmartPtr<UserMatrix> ThermalConductivity)
void set_thermal_conductivity (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; ThermalConductivity)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_thermal_conductivity
void
void set_thermal_conductivity (number ThermalConductivity)
void set_thermal_conductivity (number ThermalConductivity)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_thermal_conductivity
void
void set_thermal_conductivity (c_string ThermalConductivity)
void set_thermal_conductivity (c_string ThermalConductivity)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_permeability
void
void set_permeability (SmartPtr<UserMatrix> Permeability)
void set_permeability (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Permeability)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_permeability
void
void set_permeability (number Permeability)
void set_permeability (number Permeability)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_permeability
void
void set_permeability (c_string Permeability)
void set_permeability (c_string Permeability)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_viscosity
void
void set_viscosity (SmartPtr<UserNumber> Viscosity)
void set_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Viscosity)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_viscosity
void
void set_viscosity (number Viscosity)
void set_viscosity (number Viscosity)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_viscosity
void
void set_viscosity (c_string Viscosity)
void set_viscosity (c_string Viscosity)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_density
void
void set_density (SmartPtr<UserNumber> Density)
void set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Density)<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_heat_capacity_fluid
void
void set_heat_capacity_fluid (number )
void set_heat_capacity_fluid (number )<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_heat_capacity_solid
void
void set_heat_capacity_solid (number )
void set_heat_capacity_solid (number )<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
set_mass_density_solid
void
void set_mass_density_solid (number )
void set_mass_density_solid (number )<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
darcy_velocity
SmartPtr<UserVector2d>
SmartPtr<UserVector> darcy_velocity ()
SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; darcy_velocity ()<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
pressure_grad
SmartPtr<UserVector2d>
SmartPtr<UserVector> pressure_grad ()
SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; pressure_grad ()<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
temperature
SmartPtr<UserNumber2d>
SmartPtr<UserNumber> temperature ()
SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; temperature ()<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
memberfunction
brine
SmartPtr<UserNumber2d>
SmartPtr<UserNumber> brine ()
SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; brine ()<br><br>Member function of class <b>ThermohalineFlow2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/d3f</b>
;
class
ComponentWiseConvergenceCheck
IConvergenceCheckCPU1 
Class <b>ComponentWiseConvergenceCheckCPU1</b>, default implementation of classgroup <b>ComponentWiseConvergenceCheck</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b><br>class has constructor. <br>Inheritance: <a href="IConvergenceCheckCPU1.html">IConvergenceCheckCPU1</a> <a href="ComponentWiseConvergenceCheckCPU1.html">ComponentWiseConvergenceCheckCPU1</a> <br><table><tr><td colspan=2><h3>ComponentWiseConvergenceCheck Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ComponentWiseConvergenceCheckCPU1 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ComponentWiseConvergenceCheckCPU1 (integer Maximum Steps, number Minimum Defect, number Relative Reduction, bool VerbosityNumber of EquationsNumbers of the functions with different convergence ratesSpecial  defects for the functions to be treated different, integer , c_string , c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ComponentWiseConvergenceCheck Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>iteration_ended ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_function_defects (c_string Special  Defects for the functions to be treated different)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_function_numbers (c_string Numbers of the functions with different convergence rates)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_maximum_steps (integer Maximum Steps)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_minimum_defect (number Minimum Defect)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_number_systems (number Number of Equations)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reduction (number Relative Reduction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_verbose (bool Verbosity)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ComponentWiseConvergenceCheck Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>defect ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns defect<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current defect<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>previous_defect ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>reduction ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns reduction<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current relative reduction<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>step ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns step<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: returns the current number of steps<br/></td></tr><tr><td><br></td></tr></table>
constructor
ComponentWiseConvergenceCheckCPU1

ComponentWiseConvergenceCheckCPU1 ()
ComponentWiseConvergenceCheckCPU1 ()<br>Constructor of class <b>ComponentWiseConvergenceCheckCPU1</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
constructor
ComponentWiseConvergenceCheckCPU1

ComponentWiseConvergenceCheckCPU1 (integer Maximum Steps, number Minimum Defect, number Relative Reduction, bool VerbosityNumber of EquationsNumbers of the functions with different convergence ratesSpecial  defects for the functions to be treated different, integer , c_string , c_string )
ComponentWiseConvergenceCheckCPU1 (integer Maximum Steps, number Minimum Defect, number Relative Reduction, bool VerbosityNumber of EquationsNumbers of the functions with different convergence ratesSpecial  defects for the functions to be treated different, integer , c_string , c_string )<br>Constructor of class <b>ComponentWiseConvergenceCheckCPU1</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
set_maximum_steps
void
void set_maximum_steps (integer Maximum Steps)
void set_maximum_steps (integer Maximum Steps)<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU1</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
set_minimum_defect
void
void set_minimum_defect (number Minimum Defect)
void set_minimum_defect (number Minimum Defect)<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU1</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
set_reduction
void
void set_reduction (number Relative Reduction)
void set_reduction (number Relative Reduction)<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU1</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
set_verbose
void
void set_verbose (bool Verbosity)
void set_verbose (bool Verbosity)<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU1</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
set_number_systems
void
void set_number_systems (number Number of Equations)
void set_number_systems (number Number of Equations)<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU1</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
set_function_numbers
void
void set_function_numbers (c_string Numbers of the functions with different convergence rates)
void set_function_numbers (c_string Numbers of the functions with different convergence rates)<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU1</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
set_function_defects
void
void set_function_defects (c_string Special  Defects for the functions to be treated different)
void set_function_defects (c_string Special  Defects for the functions to be treated different)<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU1</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
iteration_ended
bool
bool iteration_ended ()
bool iteration_ended ()<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU1</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
defect
number
number defect () const
number defect ()<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU1</b><br>returns defect<br>tooltip: returns the current defect<br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
step
integer
integer step () const
integer step ()<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU1</b><br>returns step<br>tooltip: returns the current number of steps<br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
reduction
number
number reduction () const
number reduction ()<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU1</b><br>returns reduction<br>tooltip: returns the current relative reduction<br>Registry Group: <b>(Plugin) ug4//Biogas</b>
memberfunction
previous_defect
number
number previous_defect () const
number previous_defect ()<br><br>Member function of class <b>ComponentWiseConvergenceCheckCPU1</b><br>Registry Group: <b>(Plugin) ug4//Biogas</b>
;
class
Particle
ILocalToGlobalMapperCPU1 IConstraintCPU1 IDomainConstraint2dCPU1 
Class <b>Particle2dCPU1</b>, default implementation of classgroup <b>Particle</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b><br>class has constructor. <br>Inheritance: <a href="ILocalToGlobalMapperCPU1.html">ILocalToGlobalMapperCPU1</a> <a href="IConstraintCPU1.html">IConstraintCPU1</a> <a href="IDomainConstraint2dCPU1.html">IDomainConstraint2dCPU1</a> <a href="Particle2dCPU1.html">Particle2dCPU1</a> <br><table><tr><td colspan=2><h3>Particle Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>Particle2dCPU1 (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; domain disc, grid function, c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Particle Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (number , const <a href="Vec1d.html">Vec</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>clear ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>init (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; , SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>setInnerBndCond (const <a href="Vec1d.html">Vec</a> *, const <a href="Vec1d.html">Vec</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_DefectComputationByHand (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_ExtrapolationMode (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_Gravity (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_IntegrationBorder (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_NormalAdaption (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_RotationAssemblingAtIP (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_outputFile (c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>update (const <a href="VectorCPU1.html">Vector</a> *, number )</td></tr><tr><td><br></td></tr></table>
constructor
Particle2dCPU1

Particle2dCPU1 (SmartPtr<NavierStokesBase> domain disc, grid function, c_string )
Particle2dCPU1 (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; domain disc, grid function, c_string )<br>Constructor of class <b>Particle2dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
add
void
void add (number , const Vec *)
void add (number , const <a href="Vec1d.html">Vec</a> *)<br><br>Member function of class <b>Particle2dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
setInnerBndCond
void
void setInnerBndCond (const Vec *, const Vec *)
void setInnerBndCond (const <a href="Vec1d.html">Vec</a> *, const <a href="Vec1d.html">Vec</a> *)<br><br>Member function of class <b>Particle2dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_DefectComputationByHand
void
void set_DefectComputationByHand (bool )
void set_DefectComputationByHand (bool )<br><br>Member function of class <b>Particle2dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_IntegrationBorder
void
void set_IntegrationBorder (bool )
void set_IntegrationBorder (bool )<br><br>Member function of class <b>Particle2dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_ExtrapolationMode
void
void set_ExtrapolationMode (bool )
void set_ExtrapolationMode (bool )<br><br>Member function of class <b>Particle2dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_NormalAdaption
void
void set_NormalAdaption (bool )
void set_NormalAdaption (bool )<br><br>Member function of class <b>Particle2dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_RotationAssemblingAtIP
void
void set_RotationAssemblingAtIP (bool )
void set_RotationAssemblingAtIP (bool )<br><br>Member function of class <b>Particle2dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_Gravity
void
void set_Gravity (bool )
void set_Gravity (bool )<br><br>Member function of class <b>Particle2dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
clear
void
void clear ()
void clear ()<br><br>Member function of class <b>Particle2dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
init
bool
bool init (SmartPtr<ApproximationSpace> , SmartPtr<IAssemble> )
bool init (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; , SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; )<br><br>Member function of class <b>Particle2dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
update
bool
bool update (const Vector *, number )
bool update (const <a href="VectorCPU1.html">Vector</a> *, number )<br><br>Member function of class <b>Particle2dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
memberfunction
set_outputFile
void
void set_outputFile (c_string )
void set_outputFile (c_string )<br><br>Member function of class <b>Particle2dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
;
class
ParticleTransfer
ITransferOperatorCPU1 
Class <b>ParticleTransfer2dCPU1</b>, default implementation of classgroup <b>ParticleTransfer</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b><br>class has constructor. <br>Inheritance: <a href="ITransferOperatorCPU1.html">ITransferOperatorCPU1</a> <a href="ParticleTransfer2dCPU1.html">ParticleTransfer2dCPU1</a> <br><table><tr><td colspan=2><h3>ParticleTransfer Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ParticleTransfer2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; approxSpace, Particle, SmartPtr&lt;<a href="Particle2dCPU1.html">Particle</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
ParticleTransfer2dCPU1

ParticleTransfer2dCPU1 (SmartPtr<ApproximationSpace> approxSpace, Particle, SmartPtr<Particle> )
ParticleTransfer2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; approxSpace, Particle, SmartPtr&lt;<a href="Particle2dCPU1.html">Particle</a>&gt; )<br>Constructor of class <b>ParticleTransfer2dCPU1</b><br>Registry Group: <b>(Plugin) ug4//ParticleLadenFlow</b>
;
class
RSAMGPreconditioner
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 ILinearIteratorCPU1 IPreconditionerCPU1 AMGBaseCPU1 
Class <b>RSAMGPreconditionerCPU1</b>, default implementation of classgroup <b>RSAMGPreconditioner</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b><br>class has constructor. <br>Ruge-Stueben Algebraic Multigrid Preconditioner<br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="IPreconditionerCPU1.html">IPreconditionerCPU1</a> <a href="AMGBaseCPU1.html">AMGBaseCPU1</a> <a href="RSAMGPreconditionerCPU1.html">RSAMGPreconditionerCPU1</a> <br><table><tr><td colspan=2><h3>RSAMGPreconditioner Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>RSAMGPreconditionerCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>RSAMGPreconditioner Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>disable_aggressive_coarsening ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: disables aggressive coarsening<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>enable_aggressive_coarsening_A (integer nrOfPaths)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: enables aggressive coarsening (A1 or A2) on the first level.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_epsilon_strong (number epsilon_str)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets epsilon_strong, a measure for strong connectivity<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_parallel_coarsening (<a href="IParallelCoarsening.html">IParallelCoarsening</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_prolongation_truncation (number prolongation_tr)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets the truncation of interpolation<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>RSAMGPreconditioner Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_epsilon_strong ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns epsilon_strong<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_prolongation_truncation ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns prolongation_tr<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>is_aggressive_coarsening ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>is_aggressive_coarsening_A (integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>tostring ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited AMGBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check (const <a href="VectorCPU1.html">Vector</a> *x, const <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: performs a check of convergence on all levels<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check2 (const <a href="VectorCPU1.html">Vector</a> *x, const <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: performs a check of convergence on all levels<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check_fsmoothing ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_Y_cycle (integer , number , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_base_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; basesmoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_checkLevel_post_iterations (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_cycle_type (size_t gamma)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets cycle type in multigrid cycle (gamma)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_fsmoothing (bool enable)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_matrix_write_path (c_string matrixWritePath)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: set the path where connectionviewer matrices of the levels are written<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_max_fill_before_base (number fillrate)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets maximal fill rate before base solver is used<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_max_levels (size_t max_levels)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets max nr of AMG levels<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_max_nodes_for_base (size_t maxNrOfNodes)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets the maximal nr of nodes for base solver<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_min_nodes_on_one_processor (size_t minNrOfNodes)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: if the node number on one processor falls below this, agglomerate<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_nr_of_preiterations_at_check (size_t i)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: nr of mg cycles performed before checking<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_postsmooth (size_t nu2)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets nr. of postsmoothing steps (nu2)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_presmooth (size_t nu1)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets nr. of presmoothing steps (nu1)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_one_init (bool b)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_position_provider (<a href="IPositionProvider2d.html">IPositionProvider</a> *prov)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: needed for connectionviewer output<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_position_provider (<a href="IPositionProvider2d.html">IPositionProvider</a> *prov)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: needed for connectionviewer output<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_postsmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; postsmoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_preferred_nodes_on_one_processor (size_t preferredNrOfNodes)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: if we need to agglomerate, ensure all nodes have more than this number of unknowns<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_preiterations_mimum_defect_at_check (number d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: minimum defect for preiterations before checking<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_presmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; presmoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>write_interfaces ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited AMGBase Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_cycle_type ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns cycle type in multigrid cycle (gamma)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>get_fsmoothing ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns f smoothing enabled<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_grid_complexity ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns grid complexity c_G<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: c_G = total number of nodes of all levels divided by number of nodes on level 0<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const <a href="AMGLevelInformationCPU1.html">AMGLevelInformation</a> *</td><td class="memItemRight" valign=bottom>get_level_information (size_t L)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns information about the level L<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_max_fill_before_base ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns maximal fill rate before base solver is used<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_max_levels ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns max nr of AMG levels<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_max_nodes_for_base ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns maximal nr of nodes for base solver<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_min_nodes_on_one_processor ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns minNrOfNodes<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: if the node number on one processor falls below this, agglomerate<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_num_postsmooth ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr. of postsmoothing steps (nu2)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_num_presmooth ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr. of presmoothing steps (nu1)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_operator_complexity ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns operator complexity c_A<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: c_A = total nnz of all matrices divided by nnz of matrix A<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_preferred_nodes_on_one_processor ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns preferredNrOfNodes<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: if we need to agglomerate, ensure all nodes have more than this number of unknowns<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_timing_coarse_solver_setup_ms ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the time spent in the coarse solver setup in ms<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_timing_whole_setup_ms ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the time spent on the whole setup in ms<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_used_levels ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns used nr of AMG levels<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
RSAMGPreconditionerCPU1

RSAMGPreconditionerCPU1 ()
RSAMGPreconditionerCPU1 ()<br>Constructor of class <b>RSAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_epsilon_strong
void
void set_epsilon_strong (number epsilon_str)
void set_epsilon_strong (number epsilon_str)<br><br>Member function of class <b>RSAMGPreconditionerCPU1</b><br>tooltip: sets epsilon_strong, a measure for strong connectivity<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_prolongation_truncation
void
void set_prolongation_truncation (number prolongation_tr)
void set_prolongation_truncation (number prolongation_tr)<br><br>Member function of class <b>RSAMGPreconditionerCPU1</b><br>tooltip: sets the truncation of interpolation<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
enable_aggressive_coarsening_A
void
void enable_aggressive_coarsening_A (integer nrOfPaths)
void enable_aggressive_coarsening_A (integer nrOfPaths)<br><br>Member function of class <b>RSAMGPreconditionerCPU1</b><br>tooltip: enables aggressive coarsening (A1 or A2) on the first level.<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
disable_aggressive_coarsening
void
void disable_aggressive_coarsening ()
void disable_aggressive_coarsening ()<br><br>Member function of class <b>RSAMGPreconditionerCPU1</b><br>tooltip: disables aggressive coarsening<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_parallel_coarsening
void
void set_parallel_coarsening (IParallelCoarsening *)
void set_parallel_coarsening (<a href="IParallelCoarsening.html">IParallelCoarsening</a> *)<br><br>Member function of class <b>RSAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_epsilon_strong
number
number get_epsilon_strong () const
number get_epsilon_strong ()<br><br>Member function of class <b>RSAMGPreconditionerCPU1</b><br>returns epsilon_strong<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_prolongation_truncation
number
number get_prolongation_truncation () const
number get_prolongation_truncation ()<br><br>Member function of class <b>RSAMGPreconditionerCPU1</b><br>returns prolongation_tr<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
tostring
void
void tostring () const
void tostring ()<br><br>Member function of class <b>RSAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
is_aggressive_coarsening
bool
bool is_aggressive_coarsening () const
bool is_aggressive_coarsening ()<br><br>Member function of class <b>RSAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
is_aggressive_coarsening_A
bool
bool is_aggressive_coarsening_A (integer ) const
bool is_aggressive_coarsening_A (integer )<br><br>Member function of class <b>RSAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
;
class
FAMGPreconditioner
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 ILinearIteratorCPU1 IPreconditionerCPU1 AMGBaseCPU1 
Class <b>FAMGPreconditionerCPU1</b>, default implementation of classgroup <b>FAMGPreconditioner</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b><br>class has constructor. <br>Filtering Algebraic Multigrid<br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="IPreconditionerCPU1.html">IPreconditionerCPU1</a> <a href="AMGBaseCPU1.html">AMGBaseCPU1</a> <a href="FAMGPreconditionerCPU1.html">FAMGPreconditionerCPU1</a> <br><table><tr><td colspan=2><h3>FAMGPreconditioner Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>FAMGPreconditionerCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>FAMGPreconditioner Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_testvector (<a href="VectorCPU1.html">Vector</a> *adds a testvector with weight, number )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns testVector#weight<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add_testvector (<a href="IVectorWriterCPU1.html">IVectorWriter</a> *adds a testvector with weight by using the IVectorWriter interface, number )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns testVector#weight<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check_testvector (size_t fromlevel, size_t tolevel)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check_testvector (size_t fromlevel)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check_testvector ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_strong_connection_external ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>reset_testvectors ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_H_reduce_interpolation_nodes_parameter (number HreduceParameter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: we can restrict the number of parent nodes by looking at the entries of H(i,j) to prevent high fill in rates (e.g. 1e-3)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_aggressive_coarsening (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damping_for_smoother_in_interpolation_calculation (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_after_communciate_prolongation (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_aggressive_coarsening (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_calculate_parent_pairs (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_coloring (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_communicate_prolongation (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_external_coarsening (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_get_ratings (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_overlap (size_t , size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_phase_3 (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_precalculate_coarsening (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_recv_coarsening (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_send_coarsening (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug_level_testvector_calc (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_delta (number delta)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: "Interpolation quality" F may not be worse than this (F < m_delta). e.g. 0.5<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_external_coarsening (bool You need to set_parallel_coarsening in parallel.)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns bExternalCoarsening<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_galerkin_truncation (number galerkin_tr)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets galerkin truncation, a parameter used to truncate the galerkin product. use with care! (like 1e-9)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_parallel_coarsening (<a href="IParallelCoarsening.html">IParallelCoarsening</a> *parallelCoarsening)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: e.g. GetColorCoarsening()<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_prereduce_A_parameter (number prereduceA)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: by setting this != 0.0, we reduce the matrix A before using it to its strong connections. (e.g. 1e-3)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_prolongation_truncation (number prolongation_tr)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets prolongation_truncation, a parameter used for truncation of interpolation. use with care! (like 1e-5)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_read_coarsening ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_strong_connection_external (number set strong_connection value for coarsening (like set_epsilon_strong in RSAMG))</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns epsilon<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_testvector_from_matrix_rows ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_testvector_smoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; sets the smoother to smooth testvectors)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns smoother<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_testvector_smooths (size_t number of smoothing steps to smooth testvectors)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns n<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_testvectors_LE (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_theta (number theta)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: with multiple parents paris, discard pairs with m_theta * F > min F. e.g. 0.9<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_use_precalculate (bool bUsePrecalculate)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: experimental way of coarsening. beta.<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_write_coarsening ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_write_f_values (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_write_testvectors (bool if true, write testvectors to path specified in set_matrix_write_path)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns bWrite<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>FAMGPreconditioner Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_H_reduce_interpolation_nodes_parameter ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns HreduceParameter<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_delta ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns delta<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_galerkin_truncation ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns galerkin_tr<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_prereduce_A_parameter ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns prereduceA<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_prolongation_truncation ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns prolongation_tr<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_theta ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns theta<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>tostring ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited AMGBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check (const <a href="VectorCPU1.html">Vector</a> *x, const <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: performs a check of convergence on all levels<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check2 (const <a href="VectorCPU1.html">Vector</a> *x, const <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: performs a check of convergence on all levels<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check_fsmoothing ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_Y_cycle (integer , number , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_base_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; basesmoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_checkLevel_post_iterations (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_cycle_type (size_t gamma)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets cycle type in multigrid cycle (gamma)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_fsmoothing (bool enable)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_matrix_write_path (c_string matrixWritePath)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: set the path where connectionviewer matrices of the levels are written<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_max_fill_before_base (number fillrate)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets maximal fill rate before base solver is used<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_max_levels (size_t max_levels)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets max nr of AMG levels<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_max_nodes_for_base (size_t maxNrOfNodes)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets the maximal nr of nodes for base solver<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_min_nodes_on_one_processor (size_t minNrOfNodes)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: if the node number on one processor falls below this, agglomerate<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_nr_of_preiterations_at_check (size_t i)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: nr of mg cycles performed before checking<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_postsmooth (size_t nu2)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets nr. of postsmoothing steps (nu2)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_presmooth (size_t nu1)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets nr. of presmoothing steps (nu1)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_one_init (bool b)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_position_provider (<a href="IPositionProvider2d.html">IPositionProvider</a> *prov)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: needed for connectionviewer output<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_position_provider (<a href="IPositionProvider2d.html">IPositionProvider</a> *prov)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: needed for connectionviewer output<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_postsmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; postsmoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_preferred_nodes_on_one_processor (size_t preferredNrOfNodes)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: if we need to agglomerate, ensure all nodes have more than this number of unknowns<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_preiterations_mimum_defect_at_check (number d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: minimum defect for preiterations before checking<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_presmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; presmoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>write_interfaces ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited AMGBase Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_cycle_type ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns cycle type in multigrid cycle (gamma)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>get_fsmoothing ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns f smoothing enabled<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_grid_complexity ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns grid complexity c_G<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: c_G = total number of nodes of all levels divided by number of nodes on level 0<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const <a href="AMGLevelInformationCPU1.html">AMGLevelInformation</a> *</td><td class="memItemRight" valign=bottom>get_level_information (size_t L)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns information about the level L<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_max_fill_before_base ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns maximal fill rate before base solver is used<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_max_levels ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns max nr of AMG levels<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_max_nodes_for_base ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns maximal nr of nodes for base solver<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_min_nodes_on_one_processor ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns minNrOfNodes<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: if the node number on one processor falls below this, agglomerate<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_num_postsmooth ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr. of postsmoothing steps (nu2)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_num_presmooth ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr. of presmoothing steps (nu1)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_operator_complexity ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns operator complexity c_A<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: c_A = total nnz of all matrices divided by nnz of matrix A<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_preferred_nodes_on_one_processor ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns preferredNrOfNodes<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: if we need to agglomerate, ensure all nodes have more than this number of unknowns<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_timing_coarse_solver_setup_ms ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the time spent in the coarse solver setup in ms<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_timing_whole_setup_ms ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the time spent on the whole setup in ms<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_used_levels ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns used nr of AMG levels<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
FAMGPreconditionerCPU1

FAMGPreconditionerCPU1 ()
FAMGPreconditionerCPU1 ()<br>Constructor of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_aggressive_coarsening
void
void set_aggressive_coarsening (bool )
void set_aggressive_coarsening (bool )<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_delta
void
void set_delta (number delta)
void set_delta (number delta)<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>tooltip: "Interpolation quality" F may not be worse than this (F < m_delta). e.g. 0.5<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_theta
void
void set_theta (number theta)
void set_theta (number theta)<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>tooltip: with multiple parents paris, discard pairs with m_theta * F > min F. e.g. 0.9<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_damping_for_smoother_in_interpolation_calculation
void
void set_damping_for_smoother_in_interpolation_calculation (number )
void set_damping_for_smoother_in_interpolation_calculation (number )<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
add_testvector
void
void add_testvector (Vector *adds a testvector with weight, number )
void add_testvector (<a href="VectorCPU1.html">Vector</a> *adds a testvector with weight, number )<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>returns testVector#weight<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
add_testvector
void
void add_testvector (IVectorWriter *adds a testvector with weight by using the IVectorWriter interface, number )
void add_testvector (<a href="IVectorWriterCPU1.html">IVectorWriter</a> *adds a testvector with weight by using the IVectorWriter interface, number )<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>returns testVector#weight<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_write_testvectors
void
void set_write_testvectors (bool if true, write testvectors to path specified in set_matrix_write_path)
void set_write_testvectors (bool if true, write testvectors to path specified in set_matrix_write_path)<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>returns bWrite<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_testvector_smoother
void
void set_testvector_smoother (SmartPtr<ILinearIterator> sets the smoother to smooth testvectors)
void set_testvector_smoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; sets the smoother to smooth testvectors)<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>returns smoother<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_testvector_smooths
void
void set_testvector_smooths (size_t number of smoothing steps to smooth testvectors)
void set_testvector_smooths (size_t number of smoothing steps to smooth testvectors)<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>returns n<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_testvector_from_matrix_rows
void
void set_testvector_from_matrix_rows ()
void set_testvector_from_matrix_rows ()<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_testvectors_LE
void
void set_testvectors_LE (number )
void set_testvectors_LE (number )<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
reset_testvectors
void
void reset_testvectors ()
void reset_testvectors ()<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_prolongation_truncation
void
void set_prolongation_truncation (number prolongation_tr)
void set_prolongation_truncation (number prolongation_tr)<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>tooltip: sets prolongation_truncation, a parameter used for truncation of interpolation. use with care! (like 1e-5)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_galerkin_truncation
void
void set_galerkin_truncation (number galerkin_tr)
void set_galerkin_truncation (number galerkin_tr)<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>tooltip: sets galerkin truncation, a parameter used to truncate the galerkin product. use with care! (like 1e-9)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_H_reduce_interpolation_nodes_parameter
void
void set_H_reduce_interpolation_nodes_parameter (number HreduceParameter)
void set_H_reduce_interpolation_nodes_parameter (number HreduceParameter)<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>tooltip: we can restrict the number of parent nodes by looking at the entries of H(i,j) to prevent high fill in rates (e.g. 1e-3)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_prereduce_A_parameter
void
void set_prereduce_A_parameter (number prereduceA)
void set_prereduce_A_parameter (number prereduceA)<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>tooltip: by setting this != 0.0, we reduce the matrix A before using it to its strong connections. (e.g. 1e-3)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_external_coarsening
void
void set_external_coarsening (bool You need to set_parallel_coarsening in parallel.)
void set_external_coarsening (bool You need to set_parallel_coarsening in parallel.)<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>returns bExternalCoarsening<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_strong_connection_external
void
void set_strong_connection_external (number set strong_connection value for coarsening (like set_epsilon_strong in RSAMG))
void set_strong_connection_external (number set strong_connection value for coarsening (like set_epsilon_strong in RSAMG))<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>returns epsilon<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_strong_connection_external
number
number get_strong_connection_external ()
number get_strong_connection_external ()<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_write_coarsening
void
void set_write_coarsening ()
void set_write_coarsening ()<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_read_coarsening
void
void set_read_coarsening ()
void set_read_coarsening ()<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_parallel_coarsening
void
void set_parallel_coarsening (IParallelCoarsening *parallelCoarsening)
void set_parallel_coarsening (<a href="IParallelCoarsening.html">IParallelCoarsening</a> *parallelCoarsening)<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>tooltip: e.g. GetColorCoarsening()<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_use_precalculate
void
void set_use_precalculate (bool bUsePrecalculate)
void set_use_precalculate (bool bUsePrecalculate)<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>tooltip: experimental way of coarsening. beta.<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_overlap
void
void set_debug_level_overlap (size_t , size_t )
void set_debug_level_overlap (size_t , size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_testvector_calc
void
void set_debug_level_testvector_calc (size_t )
void set_debug_level_testvector_calc (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_phase_3
void
void set_debug_level_phase_3 (size_t )
void set_debug_level_phase_3 (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_calculate_parent_pairs
void
void set_debug_level_calculate_parent_pairs (size_t )
void set_debug_level_calculate_parent_pairs (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_recv_coarsening
void
void set_debug_level_recv_coarsening (size_t )
void set_debug_level_recv_coarsening (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_coloring
void
void set_debug_level_coloring (size_t )
void set_debug_level_coloring (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_get_ratings
void
void set_debug_level_get_ratings (size_t )
void set_debug_level_get_ratings (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_precalculate_coarsening
void
void set_debug_level_precalculate_coarsening (size_t )
void set_debug_level_precalculate_coarsening (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_aggressive_coarsening
void
void set_debug_level_aggressive_coarsening (size_t )
void set_debug_level_aggressive_coarsening (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_send_coarsening
void
void set_debug_level_send_coarsening (size_t )
void set_debug_level_send_coarsening (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_communicate_prolongation
void
void set_debug_level_communicate_prolongation (size_t )
void set_debug_level_communicate_prolongation (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_after_communciate_prolongation
void
void set_debug_level_after_communciate_prolongation (size_t )
void set_debug_level_after_communciate_prolongation (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_debug_level_external_coarsening
void
void set_debug_level_external_coarsening (size_t )
void set_debug_level_external_coarsening (size_t )<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_write_f_values
void
void set_write_f_values (bool )
void set_write_f_values (bool )<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
check_testvector
bool
bool check_testvector ()
bool check_testvector ()<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
check_testvector
bool
bool check_testvector (size_t fromlevel)
bool check_testvector (size_t fromlevel)<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
check_testvector
bool
bool check_testvector (size_t fromlevel, size_t tolevel)
bool check_testvector (size_t fromlevel, size_t tolevel)<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
tostring
void
void tostring () const
void tostring ()<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_delta
number
number get_delta () const
number get_delta ()<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>returns delta<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_theta
number
number get_theta () const
number get_theta ()<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>returns theta<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_prolongation_truncation
number
number get_prolongation_truncation () const
number get_prolongation_truncation ()<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>returns prolongation_tr<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_galerkin_truncation
number
number get_galerkin_truncation () const
number get_galerkin_truncation ()<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>returns galerkin_tr<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_H_reduce_interpolation_nodes_parameter
number
number get_H_reduce_interpolation_nodes_parameter () const
number get_H_reduce_interpolation_nodes_parameter ()<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>returns HreduceParameter<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_prereduce_A_parameter
number
number get_prereduce_A_parameter () const
number get_prereduce_A_parameter ()<br><br>Member function of class <b>FAMGPreconditionerCPU1</b><br>returns prereduceA<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
;
class
AMGLevelInformation

Class <b>AMGLevelInformationCPU1</b>, default implementation of classgroup <b>AMGLevelInformation</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b><br>class has no constructor. <br><table><tr><td colspan=2><h3>AMGLevelInformation Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_creation_time_ms ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns creation time of this level (in ms)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_fill_in ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr of non-zeros / (nr of nodes)^2<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_nnz ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr of non-zeros, sum over all processors<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_nnz_max ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr of non-zeros, maximum over all processors<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_nnz_min ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr of non-zeros, minimum over all processors<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_nr_of_interface_elements ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr of interface elements (including multiplicites)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_nr_of_nodes ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr of nodes of this level, sum over all processors<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_nr_of_nodes_max ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr of nodes of this level, maximum over all processors<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_nr_of_nodes_min ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr of nodes of this level, minimum over all processors<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>is_valid ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns true if this is a valid level information<br/></td></tr><tr><td><br></td></tr></table>
memberfunction
get_creation_time_ms
number
number get_creation_time_ms () const
number get_creation_time_ms ()<br><br>Member function of class <b>AMGLevelInformationCPU1</b><br>returns creation time of this level (in ms)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_nr_of_nodes
unknown
size_t get_nr_of_nodes () const
size_t get_nr_of_nodes ()<br><br>Member function of class <b>AMGLevelInformationCPU1</b><br>returns nr of nodes of this level, sum over all processors<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_nr_of_nodes_min
unknown
size_t get_nr_of_nodes_min () const
size_t get_nr_of_nodes_min ()<br><br>Member function of class <b>AMGLevelInformationCPU1</b><br>returns nr of nodes of this level, minimum over all processors<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_nr_of_nodes_max
unknown
size_t get_nr_of_nodes_max () const
size_t get_nr_of_nodes_max ()<br><br>Member function of class <b>AMGLevelInformationCPU1</b><br>returns nr of nodes of this level, maximum over all processors<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_nnz
unknown
size_t get_nnz () const
size_t get_nnz ()<br><br>Member function of class <b>AMGLevelInformationCPU1</b><br>returns nr of non-zeros, sum over all processors<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_nnz_min
unknown
size_t get_nnz_min () const
size_t get_nnz_min ()<br><br>Member function of class <b>AMGLevelInformationCPU1</b><br>returns nr of non-zeros, minimum over all processors<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_nnz_max
unknown
size_t get_nnz_max () const
size_t get_nnz_max ()<br><br>Member function of class <b>AMGLevelInformationCPU1</b><br>returns nr of non-zeros, maximum over all processors<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_fill_in
number
number get_fill_in () const
number get_fill_in ()<br><br>Member function of class <b>AMGLevelInformationCPU1</b><br>returns nr of non-zeros / (nr of nodes)^2<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
is_valid
bool
bool is_valid () const
bool is_valid ()<br><br>Member function of class <b>AMGLevelInformationCPU1</b><br>returns true if this is a valid level information<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_nr_of_interface_elements
unknown
size_t get_nr_of_interface_elements () const
size_t get_nr_of_interface_elements ()<br><br>Member function of class <b>AMGLevelInformationCPU1</b><br>returns nr of interface elements (including multiplicites)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
;
class
AMGBase
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 ILinearIteratorCPU1 IPreconditionerCPU1 
Class <b>AMGBaseCPU1</b>, default implementation of classgroup <b>AMGBase</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b><br>class has no constructor. <br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="IPreconditionerCPU1.html">IPreconditionerCPU1</a> <a href="AMGBaseCPU1.html">AMGBaseCPU1</a> <br><table><tr><td colspan=2><h3>AMGBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check (const <a href="VectorCPU1.html">Vector</a> *x, const <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: performs a check of convergence on all levels<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check2 (const <a href="VectorCPU1.html">Vector</a> *x, const <a href="VectorCPU1.html">Vector</a> *b)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: performs a check of convergence on all levels<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>check_fsmoothing ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_Y_cycle (integer , number , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_base_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; basesmoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_checkLevel_post_iterations (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_cycle_type (size_t gamma)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets cycle type in multigrid cycle (gamma)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_fsmoothing (bool enable)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_matrix_write_path (c_string matrixWritePath)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: set the path where connectionviewer matrices of the levels are written<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_max_fill_before_base (number fillrate)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets maximal fill rate before base solver is used<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_max_levels (size_t max_levels)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets max nr of AMG levels<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_max_nodes_for_base (size_t maxNrOfNodes)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets the maximal nr of nodes for base solver<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_min_nodes_on_one_processor (size_t minNrOfNodes)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: if the node number on one processor falls below this, agglomerate<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_nr_of_preiterations_at_check (size_t i)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: nr of mg cycles performed before checking<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_postsmooth (size_t nu2)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets nr. of postsmoothing steps (nu2)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_num_presmooth (size_t nu1)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets nr. of presmoothing steps (nu1)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_one_init (bool b)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_position_provider (<a href="IPositionProvider2d.html">IPositionProvider</a> *prov)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: needed for connectionviewer output<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_position_provider (<a href="IPositionProvider2d.html">IPositionProvider</a> *prov)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: needed for connectionviewer output<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_postsmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; postsmoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_preferred_nodes_on_one_processor (size_t preferredNrOfNodes)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: if we need to agglomerate, ensure all nodes have more than this number of unknowns<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_preiterations_mimum_defect_at_check (number d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: minimum defect for preiterations before checking<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_presmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; presmoother)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>write_interfaces ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>AMGBase Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_cycle_type ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns cycle type in multigrid cycle (gamma)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>get_fsmoothing ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns f smoothing enabled<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_grid_complexity ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns grid complexity c_G<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: c_G = total number of nodes of all levels divided by number of nodes on level 0<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const <a href="AMGLevelInformationCPU1.html">AMGLevelInformation</a> *</td><td class="memItemRight" valign=bottom>get_level_information (size_t L)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns information about the level L<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_max_fill_before_base ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns maximal fill rate before base solver is used<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_max_levels ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns max nr of AMG levels<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_max_nodes_for_base ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns maximal nr of nodes for base solver<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_min_nodes_on_one_processor ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns minNrOfNodes<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: if the node number on one processor falls below this, agglomerate<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_num_postsmooth ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr. of postsmoothing steps (nu2)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_num_presmooth ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns nr. of presmoothing steps (nu1)<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_operator_complexity ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns operator complexity c_A<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: c_A = total nnz of all matrices divided by nnz of matrix A<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_preferred_nodes_on_one_processor ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns preferredNrOfNodes<br/></td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: if we need to agglomerate, ensure all nodes have more than this number of unknowns<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_timing_coarse_solver_setup_ms ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the time spent in the coarse solver setup in ms<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>number </td><td class="memItemRight" valign=bottom>get_timing_whole_setup_ms ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the time spent on the whole setup in ms<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>size_t </td><td class="memItemRight" valign=bottom>get_used_levels ()</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns used nr of AMG levels<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
memberfunction
set_num_presmooth
void
void set_num_presmooth (size_t nu1)
void set_num_presmooth (size_t nu1)<br><br>Member function of class <b>AMGBaseCPU1</b><br>tooltip: sets nr. of presmoothing steps (nu1)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_num_postsmooth
void
void set_num_postsmooth (size_t nu2)
void set_num_postsmooth (size_t nu2)<br><br>Member function of class <b>AMGBaseCPU1</b><br>tooltip: sets nr. of postsmoothing steps (nu2)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_cycle_type
void
void set_cycle_type (size_t gamma)
void set_cycle_type (size_t gamma)<br><br>Member function of class <b>AMGBaseCPU1</b><br>tooltip: sets cycle type in multigrid cycle (gamma)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_max_levels
void
void set_max_levels (size_t max_levels)
void set_max_levels (size_t max_levels)<br><br>Member function of class <b>AMGBaseCPU1</b><br>tooltip: sets max nr of AMG levels<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_max_nodes_for_base
void
void set_max_nodes_for_base (size_t maxNrOfNodes)
void set_max_nodes_for_base (size_t maxNrOfNodes)<br><br>Member function of class <b>AMGBaseCPU1</b><br>tooltip: sets the maximal nr of nodes for base solver<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_min_nodes_on_one_processor
void
void set_min_nodes_on_one_processor (size_t minNrOfNodes)
void set_min_nodes_on_one_processor (size_t minNrOfNodes)<br><br>Member function of class <b>AMGBaseCPU1</b><br>tooltip: if the node number on one processor falls below this, agglomerate<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_preferred_nodes_on_one_processor
void
void set_preferred_nodes_on_one_processor (size_t preferredNrOfNodes)
void set_preferred_nodes_on_one_processor (size_t preferredNrOfNodes)<br><br>Member function of class <b>AMGBaseCPU1</b><br>tooltip: if we need to agglomerate, ensure all nodes have more than this number of unknowns<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_max_fill_before_base
void
void set_max_fill_before_base (number fillrate)
void set_max_fill_before_base (number fillrate)<br><br>Member function of class <b>AMGBaseCPU1</b><br>tooltip: sets maximal fill rate before base solver is used<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_presmoother
void
void set_presmoother (SmartPtr<ILinearIterator> presmoother)
void set_presmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; presmoother)<br><br>Member function of class <b>AMGBaseCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_postsmoother
void
void set_postsmoother (SmartPtr<ILinearIterator> postsmoother)
void set_postsmoother (SmartPtr&lt;<a href="ILinearIteratorCPU1.html">ILinearIterator</a>&gt; postsmoother)<br><br>Member function of class <b>AMGBaseCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_base_solver
void
void set_base_solver (SmartPtr<ILinearOperatorInverse> basesmoother)
void set_base_solver (SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; basesmoother)<br><br>Member function of class <b>AMGBaseCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
check
bool
bool check (const Vector *x, const Vector *b)
bool check (const <a href="VectorCPU1.html">Vector</a> *x, const <a href="VectorCPU1.html">Vector</a> *b)<br><br>Member function of class <b>AMGBaseCPU1</b><br>tooltip: performs a check of convergence on all levels<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
check2
bool
bool check2 (const Vector *x, const Vector *b)
bool check2 (const <a href="VectorCPU1.html">Vector</a> *x, const <a href="VectorCPU1.html">Vector</a> *b)<br><br>Member function of class <b>AMGBaseCPU1</b><br>tooltip: performs a check of convergence on all levels<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
check_fsmoothing
bool
bool check_fsmoothing ()
bool check_fsmoothing ()<br><br>Member function of class <b>AMGBaseCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_nr_of_preiterations_at_check
void
void set_nr_of_preiterations_at_check (size_t i)
void set_nr_of_preiterations_at_check (size_t i)<br><br>Member function of class <b>AMGBaseCPU1</b><br>tooltip: nr of mg cycles performed before checking<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_preiterations_mimum_defect_at_check
void
void set_preiterations_mimum_defect_at_check (number d)
void set_preiterations_mimum_defect_at_check (number d)<br><br>Member function of class <b>AMGBaseCPU1</b><br>tooltip: minimum defect for preiterations before checking<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_matrix_write_path
void
void set_matrix_write_path (c_string matrixWritePath)
void set_matrix_write_path (c_string matrixWritePath)<br><br>Member function of class <b>AMGBaseCPU1</b><br>tooltip: set the path where connectionviewer matrices of the levels are written<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_fsmoothing
void
void set_fsmoothing (bool enable)
void set_fsmoothing (bool enable)<br><br>Member function of class <b>AMGBaseCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_one_init
void
void set_one_init (bool b)
void set_one_init (bool b)<br><br>Member function of class <b>AMGBaseCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_position_provider
void
void set_position_provider (IPositionProvider *prov)
void set_position_provider (<a href="IPositionProvider2d.html">IPositionProvider</a> *prov)<br><br>Member function of class <b>AMGBaseCPU1</b><br>tooltip: needed for connectionviewer output<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_position_provider
void
void set_position_provider (IPositionProvider *prov)
void set_position_provider (<a href="IPositionProvider2d.html">IPositionProvider</a> *prov)<br><br>Member function of class <b>AMGBaseCPU1</b><br>tooltip: needed for connectionviewer output<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
write_interfaces
void
void write_interfaces ()
void write_interfaces ()<br><br>Member function of class <b>AMGBaseCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_checkLevel_post_iterations
void
void set_checkLevel_post_iterations (size_t )
void set_checkLevel_post_iterations (size_t )<br><br>Member function of class <b>AMGBaseCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
set_Y_cycle
void
void set_Y_cycle (integer , number , number )
void set_Y_cycle (integer , number , number )<br><br>Member function of class <b>AMGBaseCPU1</b><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_num_presmooth
unknown
size_t get_num_presmooth () const
size_t get_num_presmooth ()<br><br>Member function of class <b>AMGBaseCPU1</b><br>returns nr. of presmoothing steps (nu1)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_num_postsmooth
unknown
size_t get_num_postsmooth () const
size_t get_num_postsmooth ()<br><br>Member function of class <b>AMGBaseCPU1</b><br>returns nr. of postsmoothing steps (nu2)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_cycle_type
unknown
size_t get_cycle_type () const
size_t get_cycle_type ()<br><br>Member function of class <b>AMGBaseCPU1</b><br>returns cycle type in multigrid cycle (gamma)<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_max_levels
unknown
size_t get_max_levels () const
size_t get_max_levels ()<br><br>Member function of class <b>AMGBaseCPU1</b><br>returns max nr of AMG levels<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_used_levels
unknown
size_t get_used_levels () const
size_t get_used_levels ()<br><br>Member function of class <b>AMGBaseCPU1</b><br>returns used nr of AMG levels<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_max_nodes_for_base
unknown
size_t get_max_nodes_for_base () const
size_t get_max_nodes_for_base ()<br><br>Member function of class <b>AMGBaseCPU1</b><br>returns maximal nr of nodes for base solver<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_min_nodes_on_one_processor
unknown
size_t get_min_nodes_on_one_processor () const
size_t get_min_nodes_on_one_processor ()<br><br>Member function of class <b>AMGBaseCPU1</b><br>returns minNrOfNodes<br>tooltip: if the node number on one processor falls below this, agglomerate<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_preferred_nodes_on_one_processor
unknown
size_t get_preferred_nodes_on_one_processor () const
size_t get_preferred_nodes_on_one_processor ()<br><br>Member function of class <b>AMGBaseCPU1</b><br>returns preferredNrOfNodes<br>tooltip: if we need to agglomerate, ensure all nodes have more than this number of unknowns<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_max_fill_before_base
number
number get_max_fill_before_base () const
number get_max_fill_before_base ()<br><br>Member function of class <b>AMGBaseCPU1</b><br>returns maximal fill rate before base solver is used<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_operator_complexity
number
number get_operator_complexity () const
number get_operator_complexity ()<br><br>Member function of class <b>AMGBaseCPU1</b><br>returns operator complexity c_A<br>tooltip: c_A = total nnz of all matrices divided by nnz of matrix A<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_grid_complexity
number
number get_grid_complexity () const
number get_grid_complexity ()<br><br>Member function of class <b>AMGBaseCPU1</b><br>returns grid complexity c_G<br>tooltip: c_G = total number of nodes of all levels divided by number of nodes on level 0<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_timing_whole_setup_ms
number
number get_timing_whole_setup_ms () const
number get_timing_whole_setup_ms ()<br><br>Member function of class <b>AMGBaseCPU1</b><br>returns the time spent on the whole setup in ms<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_timing_coarse_solver_setup_ms
number
number get_timing_coarse_solver_setup_ms () const
number get_timing_coarse_solver_setup_ms ()<br><br>Member function of class <b>AMGBaseCPU1</b><br>returns the time spent in the coarse solver setup in ms<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_level_information
const AMGLevelInformationCPU1*
const AMGLevelInformation *get_level_information (size_t L) const
const <a href="AMGLevelInformationCPU1.html">AMGLevelInformation</a> *get_level_information (size_t L)<br><br>Member function of class <b>AMGBaseCPU1</b><br>returns information about the level L<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
memberfunction
get_fsmoothing
bool
bool get_fsmoothing () const
bool get_fsmoothing ()<br><br>Member function of class <b>AMGBaseCPU1</b><br>returns f smoothing enabled<br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
;
class
ConvectionDiffusionBase
IElemDisc2d 
Class <b>ConvectionDiffusionBase2d</b>, default implementation of classgroup <b>ConvectionDiffusionBase</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b><br>class has no constructor. <br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="ConvectionDiffusionBase2d.html">ConvectionDiffusionBase2d</a> <br><table><tr><td colspan=2><h3>ConvectionDiffusionBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>gradient ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (c_string Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (number Diagonal Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (c_string Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (number Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (number Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (c_string Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (number Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (c_string Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (c_string Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (number Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (c_string Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (number Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (c_string Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (number Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (c_string Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (number Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vector_source (c_string Vector Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vector_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Vector Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (std::vector&ltnumber &gtVelocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (c_string Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>value ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
memberfunction
set_diffusion
void
void set_diffusion (SmartPtr<UserMatrix> Diffusion)
void set_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Diffusion)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_diffusion
void
void set_diffusion (number Diagonal Diffusion)
void set_diffusion (number Diagonal Diffusion)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_diffusion
void
void set_diffusion (c_string Diffusion)
void set_diffusion (c_string Diffusion)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_velocity
void
void set_velocity (SmartPtr<UserVector> Velocity Field)
void set_velocity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity Field)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_velocity
void
void set_velocity (std::vector<number >Velocity Field)
void set_velocity (std::vector&ltnumber &gtVelocity Field)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_velocity
void
void set_velocity (c_string Velocity Field)
void set_velocity (c_string Velocity Field)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction_rate
void
void set_reaction_rate (SmartPtr<UserNumber> Reaction Rate)
void set_reaction_rate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction_rate
void
void set_reaction_rate (number Reaction Rate)
void set_reaction_rate (number Reaction Rate)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction_rate
void
void set_reaction_rate (c_string Reaction Rate)
void set_reaction_rate (c_string Reaction Rate)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction
void
void set_reaction (SmartPtr<UserNumber> Reaction)
void set_reaction (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction
void
void set_reaction (number Reaction)
void set_reaction (number Reaction)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction
void
void set_reaction (c_string Reaction)
void set_reaction (c_string Reaction)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction_rate_explicit
void
void set_reaction_rate_explicit (SmartPtr<UserNumber> Reaction Rate Explicit)
void set_reaction_rate_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate Explicit)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction_rate_explicit
void
void set_reaction_rate_explicit (number Reaction Rate Explicit)
void set_reaction_rate_explicit (number Reaction Rate Explicit)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction_rate_explicit
void
void set_reaction_rate_explicit (c_string Reaction Rate Explicit)
void set_reaction_rate_explicit (c_string Reaction Rate Explicit)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction_explicit
void
void set_reaction_explicit (SmartPtr<UserNumber> Reaction Explicit)
void set_reaction_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Explicit)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction_explicit
void
void set_reaction_explicit (number Reaction Explicit)
void set_reaction_explicit (number Reaction Explicit)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_reaction_explicit
void
void set_reaction_explicit (c_string Reaction Explicit)
void set_reaction_explicit (c_string Reaction Explicit)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source_explicit
void
void set_source_explicit (SmartPtr<UserNumber> Source Explicit)
void set_source_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source Explicit)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source_explicit
void
void set_source_explicit (number Source Explicit)
void set_source_explicit (number Source Explicit)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source_explicit
void
void set_source_explicit (c_string Source Explicit)
void set_source_explicit (c_string Source Explicit)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source
void
void set_source (SmartPtr<UserNumber> Source)
void set_source (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source
void
void set_source (number Source)
void set_source (number Source)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source
void
void set_source (c_string Source)
void set_source (c_string Source)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_vector_source
void
void set_vector_source (SmartPtr<UserVector> Vector Source)
void set_vector_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Vector Source)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_vector_source
void
void set_vector_source (c_string Vector Source)
void set_vector_source (c_string Vector Source)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_mass_scale
void
void set_mass_scale (SmartPtr<UserNumber> Mass Scale)
void set_mass_scale (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass Scale)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_mass_scale
void
void set_mass_scale (number Mass Scale)
void set_mass_scale (number Mass Scale)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_mass_scale
void
void set_mass_scale (c_string Mass Scale)
void set_mass_scale (c_string Mass Scale)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_mass
void
void set_mass (SmartPtr<UserNumber> Mass)
void set_mass (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_mass
void
void set_mass (number Mass)
void set_mass (number Mass)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_mass
void
void set_mass (c_string Mass)
void set_mass (c_string Mass)<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
value
SmartPtr<UserNumber2d>
SmartPtr<UserNumber> value ()
SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; value ()<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
gradient
SmartPtr<UserVector2d>
SmartPtr<UserVector> gradient ()
SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; gradient ()<br><br>Member function of class <b>ConvectionDiffusionBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
;
class
ConvectionDiffusionFV1
IElemDisc2d ConvectionDiffusionBase2d 
Class <b>ConvectionDiffusionFV12d</b>, default implementation of classgroup <b>ConvectionDiffusionFV1</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b><br>class has constructor. <br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="ConvectionDiffusionBase2d.html">ConvectionDiffusionBase2d</a> <a href="ConvectionDiffusionFV12d.html">ConvectionDiffusionFV12d</a> <br><table><tr><td colspan=2><h3>ConvectionDiffusionFV1 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConvectionDiffusionFV12d (c_string Function(s), c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConvectionDiffusionFV1 Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_upwind (SmartPtr&lt;<a href="IConvectionShapes2d.html">IConvectionShapes</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ConvectionDiffusionBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>gradient ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (c_string Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (number Diagonal Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (c_string Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (number Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (number Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (c_string Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (number Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (c_string Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (c_string Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (number Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (c_string Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (number Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (c_string Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (number Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (c_string Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (number Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vector_source (c_string Vector Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vector_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Vector Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (std::vector&ltnumber &gtVelocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (c_string Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>value ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
ConvectionDiffusionFV12d

ConvectionDiffusionFV12d (c_string Function(s), c_string Subset(s))
ConvectionDiffusionFV12d (c_string Function(s), c_string Subset(s))<br>Constructor of class <b>ConvectionDiffusionFV12d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_upwind
void
void set_upwind (SmartPtr<IConvectionShapes> )
void set_upwind (SmartPtr&lt;<a href="IConvectionShapes2d.html">IConvectionShapes</a>&gt; )<br><br>Member function of class <b>ConvectionDiffusionFV12d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
;
class
ConvectionDiffusionFE
IElemDisc2d ConvectionDiffusionBase2d 
Class <b>ConvectionDiffusionFE2d</b>, default implementation of classgroup <b>ConvectionDiffusionFE</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b><br>class has constructor. <br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="ConvectionDiffusionBase2d.html">ConvectionDiffusionBase2d</a> <a href="ConvectionDiffusionFE2d.html">ConvectionDiffusionFE2d</a> <br><table><tr><td colspan=2><h3>ConvectionDiffusionFE Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConvectionDiffusionFE2d (c_string Function(s), c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConvectionDiffusionFE Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_quad_order (size_t )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ConvectionDiffusionBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>gradient ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (c_string Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (number Diagonal Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (c_string Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (number Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (number Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (c_string Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (number Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (c_string Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (c_string Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (number Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (c_string Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (number Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (c_string Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (number Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (c_string Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (number Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vector_source (c_string Vector Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vector_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Vector Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (std::vector&ltnumber &gtVelocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (c_string Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>value ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
ConvectionDiffusionFE2d

ConvectionDiffusionFE2d (c_string Function(s), c_string Subset(s))
ConvectionDiffusionFE2d (c_string Function(s), c_string Subset(s))<br>Constructor of class <b>ConvectionDiffusionFE2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_quad_order
void
void set_quad_order (size_t )
void set_quad_order (size_t )<br><br>Member function of class <b>ConvectionDiffusionFE2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
;
class
ConvectionDiffusionFVCR
IElemDisc2d ConvectionDiffusionBase2d 
Class <b>ConvectionDiffusionFVCR2d</b>, default implementation of classgroup <b>ConvectionDiffusionFVCR</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b><br>class has constructor. <br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="ConvectionDiffusionBase2d.html">ConvectionDiffusionBase2d</a> <a href="ConvectionDiffusionFVCR2d.html">ConvectionDiffusionFVCR2d</a> <br><table><tr><td colspan=2><h3>ConvectionDiffusionFVCR Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConvectionDiffusionFVCR2d (c_string Function(s), c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConvectionDiffusionFVCR Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_upwind (SmartPtr&lt;<a href="IConvectionShapes2d.html">IConvectionShapes</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ConvectionDiffusionBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>gradient ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (c_string Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (number Diagonal Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (c_string Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (number Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (number Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (c_string Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (number Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (c_string Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (c_string Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (number Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (c_string Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (number Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (c_string Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (number Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (c_string Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (number Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vector_source (c_string Vector Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vector_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Vector Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (std::vector&ltnumber &gtVelocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (c_string Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>value ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
ConvectionDiffusionFVCR2d

ConvectionDiffusionFVCR2d (c_string Function(s), c_string Subset(s))
ConvectionDiffusionFVCR2d (c_string Function(s), c_string Subset(s))<br>Constructor of class <b>ConvectionDiffusionFVCR2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_upwind
void
void set_upwind (SmartPtr<IConvectionShapes> )
void set_upwind (SmartPtr&lt;<a href="IConvectionShapes2d.html">IConvectionShapes</a>&gt; )<br><br>Member function of class <b>ConvectionDiffusionFVCR2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
;
class
ConvectionDiffusionFV
IElemDisc2d ConvectionDiffusionBase2d 
Class <b>ConvectionDiffusionFV2d</b>, default implementation of classgroup <b>ConvectionDiffusionFV</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b><br>class has constructor. <br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="ConvectionDiffusionBase2d.html">ConvectionDiffusionBase2d</a> <a href="ConvectionDiffusionFV2d.html">ConvectionDiffusionFV2d</a> <br><table><tr><td colspan=2><h3>ConvectionDiffusionFV Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConvectionDiffusionFV2d (c_string Function(s), c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConvectionDiffusionFV Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_quad_order (size_t )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ConvectionDiffusionBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>gradient ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (SmartPtr&lt;<a href="UserMatrix2d.html">UserMatrix</a>&gt; Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (c_string Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (number Diagonal Diffusion)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (c_string Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (number Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (number Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass_scale (c_string Mass Scale)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (number Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction (c_string Reaction)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (c_string Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_explicit (number Reaction Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (c_string Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (number Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (c_string Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (number Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_reaction_rate_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Reaction Rate Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (c_string Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (number Source Explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vector_source (c_string Vector Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_vector_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Vector Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (std::vector&ltnumber &gtVelocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (c_string Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>value ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
ConvectionDiffusionFV2d

ConvectionDiffusionFV2d (c_string Function(s), c_string Subset(s))
ConvectionDiffusionFV2d (c_string Function(s), c_string Subset(s))<br>Constructor of class <b>ConvectionDiffusionFV2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_quad_order
void
void set_quad_order (size_t )
void set_quad_order (size_t )<br><br>Member function of class <b>ConvectionDiffusionFV2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
;
class
ConstantEquationBase
IElemDisc2d 
Class <b>ConstantEquationBase2d</b>, default implementation of classgroup <b>ConstantEquationBase</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b><br>class has no constructor. <br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="ConstantEquationBase2d.html">ConstantEquationBase2d</a> <br><table><tr><td colspan=2><h3>ConstantEquationBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>gradient ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (number Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (c_string Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (number Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (c_string Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (std::vector&ltnumber &gtVelocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (c_string Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>value ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
memberfunction
set_velocity
void
void set_velocity (SmartPtr<UserVector> Velocity Field)
void set_velocity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity Field)<br><br>Member function of class <b>ConstantEquationBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_velocity
void
void set_velocity (std::vector<number >Velocity Field)
void set_velocity (std::vector&ltnumber &gtVelocity Field)<br><br>Member function of class <b>ConstantEquationBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_velocity
void
void set_velocity (c_string Velocity Field)
void set_velocity (c_string Velocity Field)<br><br>Member function of class <b>ConstantEquationBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source
void
void set_source (SmartPtr<UserNumber> Source)
void set_source (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source)<br><br>Member function of class <b>ConstantEquationBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source
void
void set_source (number Source)
void set_source (number Source)<br><br>Member function of class <b>ConstantEquationBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source
void
void set_source (c_string Source)
void set_source (c_string Source)<br><br>Member function of class <b>ConstantEquationBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source_explicit
void
void set_source_explicit (SmartPtr<UserNumber> Source_explicit)
void set_source_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source_explicit)<br><br>Member function of class <b>ConstantEquationBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source_explicit
void
void set_source_explicit (number Source_explicit)
void set_source_explicit (number Source_explicit)<br><br>Member function of class <b>ConstantEquationBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_source_explicit
void
void set_source_explicit (c_string Source_explicit)
void set_source_explicit (c_string Source_explicit)<br><br>Member function of class <b>ConstantEquationBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_mass
void
void set_mass (SmartPtr<UserNumber> Mass)
void set_mass (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass)<br><br>Member function of class <b>ConstantEquationBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_mass
void
void set_mass (number Mass)
void set_mass (number Mass)<br><br>Member function of class <b>ConstantEquationBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_mass
void
void set_mass (c_string Mass)
void set_mass (c_string Mass)<br><br>Member function of class <b>ConstantEquationBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
value
SmartPtr<UserNumber2d>
SmartPtr<UserNumber> value ()
SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; value ()<br><br>Member function of class <b>ConstantEquationBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
gradient
SmartPtr<UserVector2d>
SmartPtr<UserVector> gradient ()
SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; gradient ()<br><br>Member function of class <b>ConstantEquationBase2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
;
class
ConstantEquationFV1
IElemDisc2d ConstantEquationBase2d 
Class <b>ConstantEquationFV12d</b>, default implementation of classgroup <b>ConstantEquationFV1</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b><br>class has constructor. <br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="ConstantEquationBase2d.html">ConstantEquationBase2d</a> <a href="ConstantEquationFV12d.html">ConstantEquationFV12d</a> <br><table><tr><td colspan=2><h3>ConstantEquationFV1 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConstantEquationFV12d (c_string Function(s), c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ConstantEquationBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>gradient ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (number Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (c_string Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (number Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (c_string Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (std::vector&ltnumber &gtVelocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (c_string Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>value ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
ConstantEquationFV12d

ConstantEquationFV12d (c_string Function(s), c_string Subset(s))
ConstantEquationFV12d (c_string Function(s), c_string Subset(s))<br>Constructor of class <b>ConstantEquationFV12d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
;
class
ConstantEquationFV
IElemDisc2d ConstantEquationBase2d 
Class <b>ConstantEquationFV2d</b>, default implementation of classgroup <b>ConstantEquationFV</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b><br>class has constructor. <br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="ConstantEquationBase2d.html">ConstantEquationBase2d</a> <a href="ConstantEquationFV2d.html">ConstantEquationFV2d</a> <br><table><tr><td colspan=2><h3>ConstantEquationFV Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConstantEquationFV2d (c_string Function(s), c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConstantEquationFV Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_quad_order (size_t )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ConstantEquationBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>gradient ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (number Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (c_string Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (number Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (c_string Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (std::vector&ltnumber &gtVelocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (c_string Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>value ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
ConstantEquationFV2d

ConstantEquationFV2d (c_string Function(s), c_string Subset(s))
ConstantEquationFV2d (c_string Function(s), c_string Subset(s))<br>Constructor of class <b>ConstantEquationFV2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_quad_order
void
void set_quad_order (size_t )
void set_quad_order (size_t )<br><br>Member function of class <b>ConstantEquationFV2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
;
class
ConstantEquationFE
IElemDisc2d ConstantEquationBase2d 
Class <b>ConstantEquationFE2d</b>, default implementation of classgroup <b>ConstantEquationFE</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b><br>class has constructor. <br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="ConstantEquationBase2d.html">ConstantEquationBase2d</a> <a href="ConstantEquationFE2d.html">ConstantEquationFE2d</a> <br><table><tr><td colspan=2><h3>ConstantEquationFE Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>ConstantEquationFE2d (c_string Function(s), c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>ConstantEquationFE Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_quad_order (size_t )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ConstantEquationBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; </td><td class="memItemRight" valign=bottom>gradient ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (number Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mass (c_string Mass)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (number Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source_explicit (c_string Source_explicit)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (std::vector&ltnumber &gtVelocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_velocity (c_string Velocity Field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; </td><td class="memItemRight" valign=bottom>value ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
ConstantEquationFE2d

ConstantEquationFE2d (c_string Function(s), c_string Subset(s))
ConstantEquationFE2d (c_string Function(s), c_string Subset(s))<br>Constructor of class <b>ConstantEquationFE2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
memberfunction
set_quad_order
void
void set_quad_order (size_t )
void set_quad_order (size_t )<br><br>Member function of class <b>ConstantEquationFE2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/ElemDisc</b>
;
class
LinearElastoPlasticity
IElemDisc2d 
Class <b>LinearElastoPlasticity2d</b>, default implementation of classgroup <b>LinearElastoPlasticity</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b><br>class has constructor. <br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="LinearElastoPlasticity2d.html">LinearElastoPlasticity2d</a> <br><table><tr><td colspan=2><h3>LinearElastoPlasticity Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LinearElastoPlasticity2d (c_string Function, c_string Subsets)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LinearElastoPlasticity Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>close_gnuplot_file ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init_state_variables (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_elasticity_tensor_orthotropic (number C11, number C12, number C13, number C22, number C23, number C33, number C44, number C55, number C66)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_hardening_behavior (integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_hooke_elasticity_tensor (number lambda, number mu)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_hooke_plane_strain_tensor (number lambda, number mu)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_hooke_plane_stress_tensor (number lambda, number mu)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_pressure (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Pressure)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_pressure (number Pressure)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_pressure (c_string Pressure)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_quad_order (size_t order)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_volume_forces (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Force field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_volume_forces (number F)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_volume_forces (number F_x, F_y, number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_volume_forces (number F_x, F_y, F_z, number , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_volume_forces (c_string Force field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>stress_eigenvalues_at (number , number , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>use_approx_tangent (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>use_elastoplast_mat_behavior (bool )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
LinearElastoPlasticity2d

LinearElastoPlasticity2d (c_string Function, c_string Subsets)
LinearElastoPlasticity2d (c_string Function, c_string Subsets)<br>Constructor of class <b>LinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_elasticity_tensor_orthotropic
void
void set_elasticity_tensor_orthotropic (number C11, number C12, number C13, number C22, number C23, number C33, number C44, number C55, number C66)
void set_elasticity_tensor_orthotropic (number C11, number C12, number C13, number C22, number C23, number C33, number C44, number C55, number C66)<br><br>Member function of class <b>LinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_hooke_elasticity_tensor
void
void set_hooke_elasticity_tensor (number lambda, number mu)
void set_hooke_elasticity_tensor (number lambda, number mu)<br><br>Member function of class <b>LinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_hooke_plane_strain_tensor
void
void set_hooke_plane_strain_tensor (number lambda, number mu)
void set_hooke_plane_strain_tensor (number lambda, number mu)<br><br>Member function of class <b>LinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_hooke_plane_stress_tensor
void
void set_hooke_plane_stress_tensor (number lambda, number mu)
void set_hooke_plane_stress_tensor (number lambda, number mu)<br><br>Member function of class <b>LinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_quad_order
void
void set_quad_order (size_t order)
void set_quad_order (size_t order)<br><br>Member function of class <b>LinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_volume_forces
void
void set_volume_forces (SmartPtr<UserVector> Force field)
void set_volume_forces (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Force field)<br><br>Member function of class <b>LinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_volume_forces
void
void set_volume_forces (number F)
void set_volume_forces (number F)<br><br>Member function of class <b>LinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_volume_forces
void
void set_volume_forces (number F_x, F_y, number )
void set_volume_forces (number F_x, F_y, number )<br><br>Member function of class <b>LinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_volume_forces
void
void set_volume_forces (number F_x, F_y, F_z, number , number )
void set_volume_forces (number F_x, F_y, F_z, number , number )<br><br>Member function of class <b>LinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_volume_forces
void
void set_volume_forces (c_string Force field)
void set_volume_forces (c_string Force field)<br><br>Member function of class <b>LinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_pressure
void
void set_pressure (SmartPtr<UserNumber> Pressure)
void set_pressure (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Pressure)<br><br>Member function of class <b>LinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_pressure
void
void set_pressure (number Pressure)
void set_pressure (number Pressure)<br><br>Member function of class <b>LinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_pressure
void
void set_pressure (c_string Pressure)
void set_pressure (c_string Pressure)<br><br>Member function of class <b>LinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
use_elastoplast_mat_behavior
void
void use_elastoplast_mat_behavior (bool )
void use_elastoplast_mat_behavior (bool )<br><br>Member function of class <b>LinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
set_hardening_behavior
void
void set_hardening_behavior (integer )
void set_hardening_behavior (integer )<br><br>Member function of class <b>LinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
use_approx_tangent
void
void use_approx_tangent (number )
void use_approx_tangent (number )<br><br>Member function of class <b>LinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
init_state_variables
void
void init_state_variables (size_t )
void init_state_variables (size_t )<br><br>Member function of class <b>LinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
stress_eigenvalues_at
void
void stress_eigenvalues_at (number , number , number )
void stress_eigenvalues_at (number , number , number )<br><br>Member function of class <b>LinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
close_gnuplot_file
void
void close_gnuplot_file ()
void close_gnuplot_file ()<br><br>Member function of class <b>LinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
;
class
LinearElastPlastOutput

Class <b>LinearElastPlastOutput2dCPU1</b>, default implementation of classgroup <b>LinearElastPlastOutput</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b><br>class has constructor. <br><table><tr><td colspan=2><h3>LinearElastPlastOutput Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LinearElastPlastOutput2dCPU1 (SmartPtr&lt;<a href="LinearElastoPlasticity2d.html">LinearElastoPlasticity</a>&gt; domain disc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LinearElastPlastOutput Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>normal_stresses_strains (<a href="GridFunction2dCPU1.html">GridFunction</a> *sigma, <a href="GridFunction2dCPU1.html">GridFunction</a> *epsilon, const <a href="GridFunction2dCPU1.html">GridFunction</a> *u)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: computes stress tensor sigma and linearized strain tensor epsilon<br/></td></tr><tr><td><br></td></tr></table>
constructor
LinearElastPlastOutput2dCPU1

LinearElastPlastOutput2dCPU1 (SmartPtr<LinearElastoPlasticity> domain disc)
LinearElastPlastOutput2dCPU1 (SmartPtr&lt;<a href="LinearElastoPlasticity2d.html">LinearElastoPlasticity</a>&gt; domain disc)<br>Constructor of class <b>LinearElastPlastOutput2dCPU1</b><br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
memberfunction
normal_stresses_strains
void
void normal_stresses_strains (GridFunction *sigma, GridFunction *epsilon, const GridFunction *u)
void normal_stresses_strains (<a href="GridFunction2dCPU1.html">GridFunction</a> *sigma, <a href="GridFunction2dCPU1.html">GridFunction</a> *epsilon, const <a href="GridFunction2dCPU1.html">GridFunction</a> *u)<br><br>Member function of class <b>LinearElastPlastOutput2dCPU1</b><br>tooltip: computes stress tensor sigma and linearized strain tensor epsilon<br>Registry Group: <b>(Plugin) ug4//SpatialDisc/LinearElastoPlasticity</b>
;
class
INavierStokesUpwind

Class <b>INavierStokesUpwind2d</b>, default implementation of classgroup <b>INavierStokesUpwind</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b><br>class has no constructor. <br><table></table>
;
class
NavierStokesNoUpwind
INavierStokesUpwind2d 
Class <b>NavierStokesNoUpwind2d</b>, default implementation of classgroup <b>NavierStokesNoUpwind</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b><br>class has constructor. <br>Inheritance: <a href="INavierStokesUpwind2d.html">INavierStokesUpwind2d</a> <a href="NavierStokesNoUpwind2d.html">NavierStokesNoUpwind2d</a> <br><table><tr><td colspan=2><h3>NavierStokesNoUpwind Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesNoUpwind2d ()</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesNoUpwind2d

NavierStokesNoUpwind2d ()
NavierStokesNoUpwind2d ()<br>Constructor of class <b>NavierStokesNoUpwind2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesFullUpwind
INavierStokesUpwind2d 
Class <b>NavierStokesFullUpwind2d</b>, default implementation of classgroup <b>NavierStokesFullUpwind</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b><br>class has constructor. <br>Inheritance: <a href="INavierStokesUpwind2d.html">INavierStokesUpwind2d</a> <a href="NavierStokesFullUpwind2d.html">NavierStokesFullUpwind2d</a> <br><table><tr><td colspan=2><h3>NavierStokesFullUpwind Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesFullUpwind2d ()</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesFullUpwind2d

NavierStokesFullUpwind2d ()
NavierStokesFullUpwind2d ()<br>Constructor of class <b>NavierStokesFullUpwind2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesSkewedUpwind
INavierStokesUpwind2d 
Class <b>NavierStokesSkewedUpwind2d</b>, default implementation of classgroup <b>NavierStokesSkewedUpwind</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b><br>class has constructor. <br>Inheritance: <a href="INavierStokesUpwind2d.html">INavierStokesUpwind2d</a> <a href="NavierStokesSkewedUpwind2d.html">NavierStokesSkewedUpwind2d</a> <br><table><tr><td colspan=2><h3>NavierStokesSkewedUpwind Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesSkewedUpwind2d ()</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesSkewedUpwind2d

NavierStokesSkewedUpwind2d ()
NavierStokesSkewedUpwind2d ()<br>Constructor of class <b>NavierStokesSkewedUpwind2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesLinearProfileSkewedUpwind
INavierStokesUpwind2d 
Class <b>NavierStokesLinearProfileSkewedUpwind2d</b>, default implementation of classgroup <b>NavierStokesLinearProfileSkewedUpwind</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b><br>class has constructor. <br>Inheritance: <a href="INavierStokesUpwind2d.html">INavierStokesUpwind2d</a> <a href="NavierStokesLinearProfileSkewedUpwind2d.html">NavierStokesLinearProfileSkewedUpwind2d</a> <br><table><tr><td colspan=2><h3>NavierStokesLinearProfileSkewedUpwind Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesLinearProfileSkewedUpwind2d ()</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesLinearProfileSkewedUpwind2d

NavierStokesLinearProfileSkewedUpwind2d ()
NavierStokesLinearProfileSkewedUpwind2d ()<br>Constructor of class <b>NavierStokesLinearProfileSkewedUpwind2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesPositiveUpwind
INavierStokesUpwind2d 
Class <b>NavierStokesPositiveUpwind2d</b>, default implementation of classgroup <b>NavierStokesPositiveUpwind</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b><br>class has constructor. <br>Inheritance: <a href="INavierStokesUpwind2d.html">INavierStokesUpwind2d</a> <a href="NavierStokesPositiveUpwind2d.html">NavierStokesPositiveUpwind2d</a> <br><table><tr><td colspan=2><h3>NavierStokesPositiveUpwind Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesPositiveUpwind2d ()</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesPositiveUpwind2d

NavierStokesPositiveUpwind2d ()
NavierStokesPositiveUpwind2d ()<br>Constructor of class <b>NavierStokesPositiveUpwind2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesRegularUpwind
INavierStokesUpwind2d 
Class <b>NavierStokesRegularUpwind2d</b>, default implementation of classgroup <b>NavierStokesRegularUpwind</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b><br>class has constructor. <br>Inheritance: <a href="INavierStokesUpwind2d.html">INavierStokesUpwind2d</a> <a href="NavierStokesRegularUpwind2d.html">NavierStokesRegularUpwind2d</a> <br><table><tr><td colspan=2><h3>NavierStokesRegularUpwind Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesRegularUpwind2d ()</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesRegularUpwind2d

NavierStokesRegularUpwind2d ()
NavierStokesRegularUpwind2d ()<br>Constructor of class <b>NavierStokesRegularUpwind2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesWeightedUpwind
INavierStokesUpwind2d 
Class <b>NavierStokesWeightedUpwind2d</b>, default implementation of classgroup <b>NavierStokesWeightedUpwind</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b><br>class has constructor. <br>Inheritance: <a href="INavierStokesUpwind2d.html">INavierStokesUpwind2d</a> <a href="NavierStokesWeightedUpwind2d.html">NavierStokesWeightedUpwind2d</a> <br><table><tr><td colspan=2><h3>NavierStokesWeightedUpwind Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesWeightedUpwind2d (number Weight factor)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NavierStokesWeightedUpwind Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_weight (number )</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesWeightedUpwind2d

NavierStokesWeightedUpwind2d (number Weight factor)
NavierStokesWeightedUpwind2d (number Weight factor)<br>Constructor of class <b>NavierStokesWeightedUpwind2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
set_weight
void
void set_weight (number )
void set_weight (number )<br><br>Member function of class <b>NavierStokesWeightedUpwind2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesBase
IElemDisc2d 
Class <b>NavierStokesBase2d</b>, default implementation of classgroup <b>NavierStokesBase</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b><br>class has no constructor. <br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="NavierStokesBase2d.html">NavierStokesBase2d</a> <br><table><tr><td colspan=2><h3>NavierStokesBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (number Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (c_string Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_exact_jacobian (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (number KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (c_string KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_laplace (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_peclet_blend (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (std::vector&ltnumber &gtSource)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stokes (bool )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NavierStokesBase Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>disc_type ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (SmartPtr<UserNumber> KinematicViscosity)
void set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)<br><br>Member function of class <b>NavierStokesBase2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (number KinematicViscosity)
void set_kinematic_viscosity (number KinematicViscosity)<br><br>Member function of class <b>NavierStokesBase2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (c_string KinematicViscosity)
void set_kinematic_viscosity (c_string KinematicViscosity)<br><br>Member function of class <b>NavierStokesBase2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
set_density
void
void set_density (SmartPtr<UserNumber> Density)
void set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Density)<br><br>Member function of class <b>NavierStokesBase2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
set_density
void
void set_density (number Density)
void set_density (number Density)<br><br>Member function of class <b>NavierStokesBase2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
set_density
void
void set_density (c_string Density)
void set_density (c_string Density)<br><br>Member function of class <b>NavierStokesBase2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
set_source
void
void set_source (SmartPtr<UserVector> Source)
void set_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Source)<br><br>Member function of class <b>NavierStokesBase2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
set_source
void
void set_source (std::vector<number >Source)
void set_source (std::vector&ltnumber &gtSource)<br><br>Member function of class <b>NavierStokesBase2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
set_source
void
void set_source (c_string Source)
void set_source (c_string Source)<br><br>Member function of class <b>NavierStokesBase2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
set_peclet_blend
void
void set_peclet_blend (bool )
void set_peclet_blend (bool )<br><br>Member function of class <b>NavierStokesBase2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
set_exact_jacobian
void
void set_exact_jacobian (bool )
void set_exact_jacobian (bool )<br><br>Member function of class <b>NavierStokesBase2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
set_laplace
void
void set_laplace (bool )
void set_laplace (bool )<br><br>Member function of class <b>NavierStokesBase2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
set_stokes
void
void set_stokes (bool )
void set_stokes (bool )<br><br>Member function of class <b>NavierStokesBase2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
disc_type
string
std_string disc_type () const
std_string disc_type ()<br><br>Member function of class <b>NavierStokesBase2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesNoNormalStressOutflowBase
IElemDisc2d 
Class <b>NavierStokesNoNormalStressOutflowBase2d</b>, default implementation of classgroup <b>NavierStokesNoNormalStressOutflowBase</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b><br>class has no constructor. <br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="NavierStokesNoNormalStressOutflowBase2d.html">NavierStokesNoNormalStressOutflowBase2d</a> <br><table><tr><td colspan=2><h3>NavierStokesNoNormalStressOutflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
memberfunction
add
void
void add (c_string Subset(s))
void add (c_string Subset(s))<br><br>Member function of class <b>NavierStokesNoNormalStressOutflowBase2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesInflowBase
IDiscretizationItem2dCPU1 
Class <b>NavierStokesInflowBase2dCPU1</b>, default implementation of classgroup <b>NavierStokesInflowBase</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b><br>class has no constructor. <br>Inheritance: <a href="IDiscretizationItem2dCPU1.html">IDiscretizationItem2dCPU1</a> <a href="NavierStokesInflowBase2dCPU1.html">NavierStokesInflowBase2dCPU1</a> <br><table><tr><td colspan=2><h3>NavierStokesInflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Velocity, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity, Subset, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gtVelocity, Subset, c_string )</td></tr><tr><td><br></td></tr></table>
memberfunction
add
void
void add (c_string Velocity, c_string )
void add (c_string Velocity, c_string )<br><br>Member function of class <b>NavierStokesInflowBase2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
add
void
void add (SmartPtr<UserVector> Velocity, Subset, c_string )
void add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity, Subset, c_string )<br><br>Member function of class <b>NavierStokesInflowBase2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
add
void
void add (std::vector<number >Velocity, Subset, c_string )
void add (std::vector&ltnumber &gtVelocity, Subset, c_string )<br><br>Member function of class <b>NavierStokesInflowBase2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesWall
IDiscretizationItem2dCPU1 
Class <b>NavierStokesWall2dCPU1</b>, default implementation of classgroup <b>NavierStokesWall</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b><br>class has constructor. <br>Inheritance: <a href="IDiscretizationItem2dCPU1.html">IDiscretizationItem2dCPU1</a> <a href="NavierStokesWall2dCPU1.html">NavierStokesWall2dCPU1</a> <br><table><tr><td colspan=2><h3>NavierStokesWall Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesWall2dCPU1 (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; MasterElemDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NavierStokesWall Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string )</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesWall2dCPU1

NavierStokesWall2dCPU1 (SmartPtr<NavierStokesBase> MasterElemDisc)
NavierStokesWall2dCPU1 (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; MasterElemDisc)<br>Constructor of class <b>NavierStokesWall2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
memberfunction
add
void
void add (c_string )
void add (c_string )<br><br>Member function of class <b>NavierStokesWall2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
;
class
INavierStokesFV1Stabilization

Class <b>INavierStokesFV1Stabilization2d</b>, default implementation of classgroup <b>INavierStokesFV1Stabilization</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has no constructor. <br><table><tr><td colspan=2><h3>INavierStokesFV1Stabilization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion_length (std_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_upwind (SmartPtr&lt;<a href="INavierStokesUpwind2d.html">INavierStokesUpwind</a>&gt; )</td></tr><tr><td><br></td></tr></table>
memberfunction
set_upwind
void
void set_upwind (SmartPtr<INavierStokesUpwind> )
void set_upwind (SmartPtr&lt;<a href="INavierStokesUpwind2d.html">INavierStokesUpwind</a>&gt; )<br><br>Member function of class <b>INavierStokesFV1Stabilization2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_diffusion_length
void
void set_diffusion_length (std_string )
void set_diffusion_length (std_string )<br><br>Member function of class <b>INavierStokesFV1Stabilization2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesFIELDSStabilization
INavierStokesFV1Stabilization2d 
Class <b>NavierStokesFIELDSStabilization2d</b>, default implementation of classgroup <b>NavierStokesFIELDSStabilization</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor. <br>Inheritance: <a href="INavierStokesFV1Stabilization2d.html">INavierStokesFV1Stabilization2d</a> <a href="NavierStokesFIELDSStabilization2d.html">NavierStokesFIELDSStabilization2d</a> <br><table><tr><td colspan=2><h3>NavierStokesFIELDSStabilization Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesFIELDSStabilization2d ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited INavierStokesFV1Stabilization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion_length (std_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_upwind (SmartPtr&lt;<a href="INavierStokesUpwind2d.html">INavierStokesUpwind</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesFIELDSStabilization2d

NavierStokesFIELDSStabilization2d ()
NavierStokesFIELDSStabilization2d ()<br>Constructor of class <b>NavierStokesFIELDSStabilization2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesFLOWStabilization
INavierStokesFV1Stabilization2d 
Class <b>NavierStokesFLOWStabilization2d</b>, default implementation of classgroup <b>NavierStokesFLOWStabilization</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor. <br>Inheritance: <a href="INavierStokesFV1Stabilization2d.html">INavierStokesFV1Stabilization2d</a> <a href="NavierStokesFLOWStabilization2d.html">NavierStokesFLOWStabilization2d</a> <br><table><tr><td colspan=2><h3>NavierStokesFLOWStabilization Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesFLOWStabilization2d ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited INavierStokesFV1Stabilization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion_length (std_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_upwind (SmartPtr&lt;<a href="INavierStokesUpwind2d.html">INavierStokesUpwind</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesFLOWStabilization2d

NavierStokesFLOWStabilization2d ()
NavierStokesFLOWStabilization2d ()<br>Constructor of class <b>NavierStokesFLOWStabilization2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesFV1
IElemDisc2d NavierStokesBase2d 
Class <b>NavierStokesFV12d</b>, default implementation of classgroup <b>NavierStokesFV1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor. <br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="NavierStokesBase2d.html">NavierStokesBase2d</a> <a href="NavierStokesFV12d.html">NavierStokesFV12d</a> <br><table><tr><td colspan=2><h3>NavierStokesFV1 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesFV12d (c_string Functions, c_string Subset(s))</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesFV12d (std::vector&ltstd_string &gtFunctions, std::vector&ltstd_string &gtSubset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NavierStokesFV1 Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_pac_upwind (bool Set pac upwind)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stabilization (SmartPtr&lt;<a href="INavierStokesFV1Stabilization2d.html">INavierStokesFV1Stabilization</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stabilization (std_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stabilization (std_string , std_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_upwind (SmartPtr&lt;<a href="INavierStokesFV1Stabilization2d.html">INavierStokesFV1Stabilization</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_upwind (SmartPtr&lt;<a href="INavierStokesUpwind2d.html">INavierStokesUpwind</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_upwind (std_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (number Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (c_string Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_exact_jacobian (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (number KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (c_string KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_laplace (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_peclet_blend (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (std::vector&ltnumber &gtSource)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stokes (bool )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited NavierStokesBase Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>disc_type ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesFV12d

NavierStokesFV12d (c_string Functions, c_string Subset(s))
NavierStokesFV12d (c_string Functions, c_string Subset(s))<br>Constructor of class <b>NavierStokesFV12d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
constructor
NavierStokesFV12d

NavierStokesFV12d (std::vector<std_string >Functions, std::vector<std_string >Subset(s))
NavierStokesFV12d (std::vector&ltstd_string &gtFunctions, std::vector&ltstd_string &gtSubset(s))<br>Constructor of class <b>NavierStokesFV12d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_stabilization
void
void set_stabilization (SmartPtr<INavierStokesFV1Stabilization> )
void set_stabilization (SmartPtr&lt;<a href="INavierStokesFV1Stabilization2d.html">INavierStokesFV1Stabilization</a>&gt; )<br><br>Member function of class <b>NavierStokesFV12d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_stabilization
void
void set_stabilization (std_string )
void set_stabilization (std_string )<br><br>Member function of class <b>NavierStokesFV12d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_stabilization
void
void set_stabilization (std_string , std_string )
void set_stabilization (std_string , std_string )<br><br>Member function of class <b>NavierStokesFV12d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_upwind
void
void set_upwind (SmartPtr<INavierStokesFV1Stabilization> )
void set_upwind (SmartPtr&lt;<a href="INavierStokesFV1Stabilization2d.html">INavierStokesFV1Stabilization</a>&gt; )<br><br>Member function of class <b>NavierStokesFV12d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_upwind
void
void set_upwind (SmartPtr<INavierStokesUpwind> )
void set_upwind (SmartPtr&lt;<a href="INavierStokesUpwind2d.html">INavierStokesUpwind</a>&gt; )<br><br>Member function of class <b>NavierStokesFV12d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_upwind
void
void set_upwind (std_string )
void set_upwind (std_string )<br><br>Member function of class <b>NavierStokesFV12d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_pac_upwind
void
void set_pac_upwind (bool Set pac upwind)
void set_pac_upwind (bool Set pac upwind)<br><br>Member function of class <b>NavierStokesFV12d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesNoNormalStressOutflowFV1
IElemDisc2d NavierStokesNoNormalStressOutflowBase2d 
Class <b>NavierStokesNoNormalStressOutflowFV12d</b>, default implementation of classgroup <b>NavierStokesNoNormalStressOutflowFV1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor. <br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="NavierStokesNoNormalStressOutflowBase2d.html">NavierStokesNoNormalStressOutflowBase2d</a> <a href="NavierStokesNoNormalStressOutflowFV12d.html">NavierStokesNoNormalStressOutflowFV12d</a> <br><table><tr><td colspan=2><h3>NavierStokesNoNormalStressOutflowFV1 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesNoNormalStressOutflowFV12d (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; MasterDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesNoNormalStressOutflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesNoNormalStressOutflowFV12d

NavierStokesNoNormalStressOutflowFV12d (SmartPtr<NavierStokesBase> MasterDisc)
NavierStokesNoNormalStressOutflowFV12d (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; MasterDisc)<br>Constructor of class <b>NavierStokesNoNormalStressOutflowFV12d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesSymBCFV1
IElemDisc2d 
Class <b>NavierStokesSymBCFV12d</b>, default implementation of classgroup <b>NavierStokesSymBCFV1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor. <br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="NavierStokesSymBCFV12d.html">NavierStokesSymBCFV12d</a> <br><table><tr><td colspan=2><h3>NavierStokesSymBCFV1 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesSymBCFV12d (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; MasterDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NavierStokesSymBCFV1 Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesSymBCFV12d

NavierStokesSymBCFV12d (SmartPtr<NavierStokesBase> MasterDisc)
NavierStokesSymBCFV12d (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; MasterDisc)<br>Constructor of class <b>NavierStokesSymBCFV12d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
add
void
void add (c_string Subset(s))
void add (c_string Subset(s))<br><br>Member function of class <b>NavierStokesSymBCFV12d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesInflowFV1
IDiscretizationItem2dCPU1 NavierStokesInflowBase2dCPU1 
Class <b>NavierStokesInflowFV12dCPU1</b>, default implementation of classgroup <b>NavierStokesInflowFV1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor. <br>Inheritance: <a href="IDiscretizationItem2dCPU1.html">IDiscretizationItem2dCPU1</a> <a href="NavierStokesInflowBase2dCPU1.html">NavierStokesInflowBase2dCPU1</a> <a href="NavierStokesInflowFV12dCPU1.html">NavierStokesInflowFV12dCPU1</a> <br><table><tr><td colspan=2><h3>NavierStokesInflowFV1 Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesInflowFV12dCPU1 (SmartPtr&lt;<a href="NavierStokesFV12d.html">NavierStokesFV1</a>&gt; MasterElemDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesInflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Velocity, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity, Subset, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gtVelocity, Subset, c_string )</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesInflowFV12dCPU1

NavierStokesInflowFV12dCPU1 (SmartPtr<NavierStokesFV1> MasterElemDisc)
NavierStokesInflowFV12dCPU1 (SmartPtr&lt;<a href="NavierStokesFV12d.html">NavierStokesFV1</a>&gt; MasterElemDisc)<br>Constructor of class <b>NavierStokesInflowFV12dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
FV1SmagorinskyTurbViscData
INewtonUpdate ICplUserData2d UserNumber2d 
Class <b>FV1SmagorinskyTurbViscData2dCPU1</b>, default implementation of classgroup <b>FV1SmagorinskyTurbViscData</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor. <br>Inheritance: <a href="INewtonUpdate.html">INewtonUpdate</a> <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserNumber2d.html">UserNumber2d</a> <a href="FV1SmagorinskyTurbViscData2dCPU1.html">FV1SmagorinskyTurbViscData2dCPU1</a> <br><table><tr><td colspan=2><h3>FV1SmagorinskyTurbViscData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>FV1SmagorinskyTurbViscData2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, model parameter, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>FV1SmagorinskyTurbViscData Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (number KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (c_string KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_model_parameter (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_turbulence_zero_bnd (c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
FV1SmagorinskyTurbViscData2dCPU1

FV1SmagorinskyTurbViscData2dCPU1 (SmartPtr<ApproximationSpace> Approximation space, grid function, model parameter, SmartPtr<GridFunction> , number )
FV1SmagorinskyTurbViscData2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, model parameter, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , number )<br>Constructor of class <b>FV1SmagorinskyTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_model_parameter
void
void set_model_parameter (number )
void set_model_parameter (number )<br><br>Member function of class <b>FV1SmagorinskyTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (SmartPtr<UserNumber> KinematicViscosity)
void set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)<br><br>Member function of class <b>FV1SmagorinskyTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (number KinematicViscosity)
void set_kinematic_viscosity (number KinematicViscosity)<br><br>Member function of class <b>FV1SmagorinskyTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (c_string KinematicViscosity)
void set_kinematic_viscosity (c_string KinematicViscosity)<br><br>Member function of class <b>FV1SmagorinskyTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_turbulence_zero_bnd
void
void set_turbulence_zero_bnd (c_string )
void set_turbulence_zero_bnd (c_string )<br><br>Member function of class <b>FV1SmagorinskyTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
FV1DynamicTurbViscData
INewtonUpdate ICplUserData2d UserNumber2d 
Class <b>FV1DynamicTurbViscData2dCPU1</b>, default implementation of classgroup <b>FV1DynamicTurbViscData</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor. <br>Inheritance: <a href="INewtonUpdate.html">INewtonUpdate</a> <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserNumber2d.html">UserNumber2d</a> <a href="FV1DynamicTurbViscData2dCPU1.html">FV1DynamicTurbViscData2dCPU1</a> <br><table><tr><td colspan=2><h3>FV1DynamicTurbViscData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>FV1DynamicTurbViscData2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>FV1DynamicTurbViscData Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (number KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (c_string KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_space_filter (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_time_filter (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_time_filter_eps (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_turbulence_zero_bnd (c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
FV1DynamicTurbViscData2dCPU1

FV1DynamicTurbViscData2dCPU1 (SmartPtr<ApproximationSpace> Approximation space, grid function, SmartPtr<GridFunction> )
FV1DynamicTurbViscData2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )<br>Constructor of class <b>FV1DynamicTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (SmartPtr<UserNumber> KinematicViscosity)
void set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)<br><br>Member function of class <b>FV1DynamicTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (number KinematicViscosity)
void set_kinematic_viscosity (number KinematicViscosity)<br><br>Member function of class <b>FV1DynamicTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (c_string KinematicViscosity)
void set_kinematic_viscosity (c_string KinematicViscosity)<br><br>Member function of class <b>FV1DynamicTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_turbulence_zero_bnd
void
void set_turbulence_zero_bnd (c_string )
void set_turbulence_zero_bnd (c_string )<br><br>Member function of class <b>FV1DynamicTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_time_filter
void
void set_time_filter (bool )
void set_time_filter (bool )<br><br>Member function of class <b>FV1DynamicTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_time_filter_eps
void
void set_time_filter_eps (number )
void set_time_filter_eps (number )<br><br>Member function of class <b>FV1DynamicTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_space_filter
void
void set_space_filter (bool )
void set_space_filter (bool )<br><br>Member function of class <b>FV1DynamicTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesFVCR
IElemDisc2d NavierStokesBase2d 
Class <b>NavierStokesFVCR2d</b>, default implementation of classgroup <b>NavierStokesFVCR</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor. <br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="NavierStokesBase2d.html">NavierStokesBase2d</a> <a href="NavierStokesFVCR2d.html">NavierStokesFVCR2d</a> <br><table><tr><td colspan=2><h3>NavierStokesFVCR Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesFVCR2d (c_string Functions, c_string Subset(s))</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesFVCR2d (std::vector&ltstd_string &gtFunctions, std::vector&ltstd_string &gtSubset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NavierStokesFVCR Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_defect_upwind (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_upwind (SmartPtr&lt;<a href="INavierStokesUpwind2d.html">INavierStokesUpwind</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_upwind (std_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (number Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (c_string Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_exact_jacobian (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (number KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (c_string KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_laplace (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_peclet_blend (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (std::vector&ltnumber &gtSource)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stokes (bool )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited NavierStokesBase Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>disc_type ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesFVCR2d

NavierStokesFVCR2d (c_string Functions, c_string Subset(s))
NavierStokesFVCR2d (c_string Functions, c_string Subset(s))<br>Constructor of class <b>NavierStokesFVCR2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
constructor
NavierStokesFVCR2d

NavierStokesFVCR2d (std::vector<std_string >Functions, std::vector<std_string >Subset(s))
NavierStokesFVCR2d (std::vector&ltstd_string &gtFunctions, std::vector&ltstd_string &gtSubset(s))<br>Constructor of class <b>NavierStokesFVCR2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_upwind
void
void set_upwind (SmartPtr<INavierStokesUpwind> )
void set_upwind (SmartPtr&lt;<a href="INavierStokesUpwind2d.html">INavierStokesUpwind</a>&gt; )<br><br>Member function of class <b>NavierStokesFVCR2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_upwind
void
void set_upwind (std_string )
void set_upwind (std_string )<br><br>Member function of class <b>NavierStokesFVCR2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_defect_upwind
void
void set_defect_upwind (bool )
void set_defect_upwind (bool )<br><br>Member function of class <b>NavierStokesFVCR2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesNoNormalStressOutflowFVCR
IElemDisc2d NavierStokesNoNormalStressOutflowBase2d 
Class <b>NavierStokesNoNormalStressOutflowFVCR2d</b>, default implementation of classgroup <b>NavierStokesNoNormalStressOutflowFVCR</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor. <br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="NavierStokesNoNormalStressOutflowBase2d.html">NavierStokesNoNormalStressOutflowBase2d</a> <a href="NavierStokesNoNormalStressOutflowFVCR2d.html">NavierStokesNoNormalStressOutflowFVCR2d</a> <br><table><tr><td colspan=2><h3>NavierStokesNoNormalStressOutflowFVCR Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesNoNormalStressOutflowFVCR2d (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; MasterDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesNoNormalStressOutflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesNoNormalStressOutflowFVCR2d

NavierStokesNoNormalStressOutflowFVCR2d (SmartPtr<NavierStokesBase> MasterDisc)
NavierStokesNoNormalStressOutflowFVCR2d (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; MasterDisc)<br>Constructor of class <b>NavierStokesNoNormalStressOutflowFVCR2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
CRNavierStokesSymBC
IElemDisc2d 
Class <b>CRNavierStokesSymBC2d</b>, default implementation of classgroup <b>CRNavierStokesSymBC</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor. <br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="CRNavierStokesSymBC2d.html">CRNavierStokesSymBC2d</a> <br><table><tr><td colspan=2><h3>CRNavierStokesSymBC Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>CRNavierStokesSymBC2d (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; MasterDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>CRNavierStokesSymBC Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
CRNavierStokesSymBC2d

CRNavierStokesSymBC2d (SmartPtr<NavierStokesBase> MasterDisc)
CRNavierStokesSymBC2d (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; MasterDisc)<br>Constructor of class <b>CRNavierStokesSymBC2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
add
void
void add (c_string Subset(s))
void add (c_string Subset(s))<br><br>Member function of class <b>CRNavierStokesSymBC2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
CRILUT
VectorDebugWritingObjectCPU1 DebugWritingObjectCPU1 ILinearIteratorCPU1 IPreconditionerCPU1 
Class <b>CRILUTCPU1</b>, default implementation of classgroup <b>CRILUT</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor. <br>Incomplete LU Decomposition with threshold<br>Inheritance: <a href="VectorDebugWritingObjectCPU1.html">VectorDebugWritingObjectCPU1</a> <a href="DebugWritingObjectCPU1.html">DebugWritingObjectCPU1</a> <a href="ILinearIteratorCPU1.html">ILinearIteratorCPU1</a> <a href="IPreconditionerCPU1.html">IPreconditionerCPU1</a> <a href="CRILUTCPU1.html">CRILUTCPU1</a> <br><table><tr><td colspan=2><h3>CRILUT Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>CRILUTCPU1 ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>CRILUTCPU1 (number threshold parameter)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>CRILUTCPU1 (number threshold parameters, number , number , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>CRILUT Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_info (bool info)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets storage information output<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_threshold (number threshold, number , number , number )</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets threshold of incomplete LU factorisation<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_threshold (number threshold)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">tooltip: sets threshold of incomplete LU factorisation<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited ILinearIterator Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_damp (SmartPtr&lt;<a href="IDampingCPU1.html">IDamping</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited DebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; d)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited DebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IDebugWriterCPU1.html">IDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited VectorDebugWritingObject Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_debug (SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; debugWriter)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns sets a debug writer<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited VectorDebugWritingObject Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>const SmartPtr&lt;<a href="IVectorDebugWriterCPU1.html">IVectorDebugWriter</a>&gt; </td><td class="memItemRight" valign=bottom>vector_debug_writer ()</td></tr><tr><td><br></td></tr></table>
constructor
CRILUTCPU1

CRILUTCPU1 ()
CRILUTCPU1 ()<br>Constructor of class <b>CRILUTCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
constructor
CRILUTCPU1

CRILUTCPU1 (number threshold parameter)
CRILUTCPU1 (number threshold parameter)<br>Constructor of class <b>CRILUTCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
constructor
CRILUTCPU1

CRILUTCPU1 (number threshold parameters, number , number , number )
CRILUTCPU1 (number threshold parameters, number , number , number )<br>Constructor of class <b>CRILUTCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_threshold
void
void set_threshold (number threshold, number , number , number )
void set_threshold (number threshold, number , number , number )<br><br>Member function of class <b>CRILUTCPU1</b><br>tooltip: sets threshold of incomplete LU factorisation<br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_threshold
void
void set_threshold (number threshold)
void set_threshold (number threshold)<br><br>Member function of class <b>CRILUTCPU1</b><br>tooltip: sets threshold of incomplete LU factorisation<br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_info
void
void set_info (bool info)
void set_info (bool info)<br><br>Member function of class <b>CRILUTCPU1</b><br>tooltip: sets storage information output<br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesInflowFVCR
IDiscretizationItem2dCPU1 NavierStokesInflowBase2dCPU1 
Class <b>NavierStokesInflowFVCR2dCPU1</b>, default implementation of classgroup <b>NavierStokesInflowFVCR</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor. <br>Inheritance: <a href="IDiscretizationItem2dCPU1.html">IDiscretizationItem2dCPU1</a> <a href="NavierStokesInflowBase2dCPU1.html">NavierStokesInflowBase2dCPU1</a> <a href="NavierStokesInflowFVCR2dCPU1.html">NavierStokesInflowFVCR2dCPU1</a> <br><table><tr><td colspan=2><h3>NavierStokesInflowFVCR Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesInflowFVCR2dCPU1 (SmartPtr&lt;<a href="NavierStokesFVCR2d.html">NavierStokesFVCR</a>&gt; MasterElemDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesInflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Velocity, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity, Subset, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gtVelocity, Subset, c_string )</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesInflowFVCR2dCPU1

NavierStokesInflowFVCR2dCPU1 (SmartPtr<NavierStokesFVCR> MasterElemDisc)
NavierStokesInflowFVCR2dCPU1 (SmartPtr&lt;<a href="NavierStokesFVCR2d.html">NavierStokesFVCR</a>&gt; MasterElemDisc)<br>Constructor of class <b>NavierStokesInflowFVCR2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
CRSmagorinskyTurbViscData
INewtonUpdate ICplUserData2d UserNumber2d 
Class <b>CRSmagorinskyTurbViscData2dCPU1</b>, default implementation of classgroup <b>CRSmagorinskyTurbViscData</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor. <br>Inheritance: <a href="INewtonUpdate.html">INewtonUpdate</a> <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserNumber2d.html">UserNumber2d</a> <a href="CRSmagorinskyTurbViscData2dCPU1.html">CRSmagorinskyTurbViscData2dCPU1</a> <br><table><tr><td colspan=2><h3>CRSmagorinskyTurbViscData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>CRSmagorinskyTurbViscData2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, model parameter, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>CRSmagorinskyTurbViscData Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (number KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (c_string KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_model_parameter (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_turbulence_zero_bnd (c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
CRSmagorinskyTurbViscData2dCPU1

CRSmagorinskyTurbViscData2dCPU1 (SmartPtr<ApproximationSpace> Approximation space, grid function, model parameter, SmartPtr<GridFunction> , number )
CRSmagorinskyTurbViscData2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, model parameter, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , number )<br>Constructor of class <b>CRSmagorinskyTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_model_parameter
void
void set_model_parameter (number )
void set_model_parameter (number )<br><br>Member function of class <b>CRSmagorinskyTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (SmartPtr<UserNumber> KinematicViscosity)
void set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)<br><br>Member function of class <b>CRSmagorinskyTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (number KinematicViscosity)
void set_kinematic_viscosity (number KinematicViscosity)<br><br>Member function of class <b>CRSmagorinskyTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (c_string KinematicViscosity)
void set_kinematic_viscosity (c_string KinematicViscosity)<br><br>Member function of class <b>CRSmagorinskyTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_turbulence_zero_bnd
void
void set_turbulence_zero_bnd (c_string )
void set_turbulence_zero_bnd (c_string )<br><br>Member function of class <b>CRSmagorinskyTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
CRDynamicTurbViscData
INewtonUpdate ICplUserData2d UserNumber2d 
Class <b>CRDynamicTurbViscData2dCPU1</b>, default implementation of classgroup <b>CRDynamicTurbViscData</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor. <br>Inheritance: <a href="INewtonUpdate.html">INewtonUpdate</a> <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserNumber2d.html">UserNumber2d</a> <a href="CRDynamicTurbViscData2dCPU1.html">CRDynamicTurbViscData2dCPU1</a> <br><table><tr><td colspan=2><h3>CRDynamicTurbViscData Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>CRDynamicTurbViscData2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>CRDynamicTurbViscData Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (number KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (c_string KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_space_filter (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_time_filter (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_time_filter_eps (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_turbulence_zero_bnd (c_string )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
CRDynamicTurbViscData2dCPU1

CRDynamicTurbViscData2dCPU1 (SmartPtr<ApproximationSpace> Approximation space, grid function, SmartPtr<GridFunction> )
CRDynamicTurbViscData2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )<br>Constructor of class <b>CRDynamicTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (SmartPtr<UserNumber> KinematicViscosity)
void set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)<br><br>Member function of class <b>CRDynamicTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (number KinematicViscosity)
void set_kinematic_viscosity (number KinematicViscosity)<br><br>Member function of class <b>CRDynamicTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_kinematic_viscosity
void
void set_kinematic_viscosity (c_string KinematicViscosity)
void set_kinematic_viscosity (c_string KinematicViscosity)<br><br>Member function of class <b>CRDynamicTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_turbulence_zero_bnd
void
void set_turbulence_zero_bnd (c_string )
void set_turbulence_zero_bnd (c_string )<br><br>Member function of class <b>CRDynamicTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_time_filter
void
void set_time_filter (bool )
void set_time_filter (bool )<br><br>Member function of class <b>CRDynamicTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_time_filter_eps
void
void set_time_filter_eps (number )
void set_time_filter_eps (number )<br><br>Member function of class <b>CRDynamicTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_space_filter
void
void set_space_filter (bool )
void set_space_filter (bool )<br><br>Member function of class <b>CRDynamicTurbViscData2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
SeparatedPressureSource
INewtonUpdate ICplUserData2d UserVector2d 
Class <b>SeparatedPressureSource2dCPU1</b>, default implementation of classgroup <b>SeparatedPressureSource</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor. <br>Inheritance: <a href="INewtonUpdate.html">INewtonUpdate</a> <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserVector2d.html">UserVector2d</a> <a href="SeparatedPressureSource2dCPU1.html">SeparatedPressureSource2dCPU1</a> <br><table><tr><td colspan=2><h3>SeparatedPressureSource Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>SeparatedPressureSource2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>SeparatedPressureSource Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number F_x)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number F_x, F_y, number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (number F_x, F_y, F_z, number , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source Vector)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>update ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
SeparatedPressureSource2dCPU1

SeparatedPressureSource2dCPU1 (SmartPtr<ApproximationSpace> Approximation space, grid function, SmartPtr<GridFunction> )
SeparatedPressureSource2dCPU1 (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; Approximation space, grid function, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; )<br>Constructor of class <b>SeparatedPressureSource2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_source
void
void set_source (SmartPtr<UserVector> Source)
void set_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Source)<br><br>Member function of class <b>SeparatedPressureSource2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_source
void
void set_source (number F_x)
void set_source (number F_x)<br><br>Member function of class <b>SeparatedPressureSource2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_source
void
void set_source (number F_x, F_y, number )
void set_source (number F_x, F_y, number )<br><br>Member function of class <b>SeparatedPressureSource2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_source
void
void set_source (number F_x, F_y, F_z, number , number )
void set_source (number F_x, F_y, F_z, number , number )<br><br>Member function of class <b>SeparatedPressureSource2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_source
void
void set_source (c_string Source Vector)
void set_source (c_string Source Vector)<br><br>Member function of class <b>SeparatedPressureSource2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
update
void
void update ()
void update ()<br><br>Member function of class <b>SeparatedPressureSource2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesFV
IElemDisc2d NavierStokesBase2d 
Class <b>NavierStokesFV2d</b>, default implementation of classgroup <b>NavierStokesFV</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor. <br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="NavierStokesBase2d.html">NavierStokesBase2d</a> <a href="NavierStokesFV2d.html">NavierStokesFV2d</a> <br><table><tr><td colspan=2><h3>NavierStokesFV Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesFV2d (c_string Functions, c_string Subset(s))</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesFV2d (std::vector&ltstd_string &gtFunctions, std::vector&ltstd_string &gtSubset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (number Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (c_string Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_exact_jacobian (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (number KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (c_string KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_laplace (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_peclet_blend (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (std::vector&ltnumber &gtSource)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stokes (bool )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited NavierStokesBase Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>disc_type ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesFV2d

NavierStokesFV2d (c_string Functions, c_string Subset(s))
NavierStokesFV2d (c_string Functions, c_string Subset(s))<br>Constructor of class <b>NavierStokesFV2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
constructor
NavierStokesFV2d

NavierStokesFV2d (std::vector<std_string >Functions, std::vector<std_string >Subset(s))
NavierStokesFV2d (std::vector&ltstd_string &gtFunctions, std::vector&ltstd_string &gtSubset(s))<br>Constructor of class <b>NavierStokesFV2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesNoNormalStressOutflowFV
IElemDisc2d NavierStokesNoNormalStressOutflowBase2d 
Class <b>NavierStokesNoNormalStressOutflowFV2d</b>, default implementation of classgroup <b>NavierStokesNoNormalStressOutflowFV</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor. <br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="NavierStokesNoNormalStressOutflowBase2d.html">NavierStokesNoNormalStressOutflowBase2d</a> <a href="NavierStokesNoNormalStressOutflowFV2d.html">NavierStokesNoNormalStressOutflowFV2d</a> <br><table><tr><td colspan=2><h3>NavierStokesNoNormalStressOutflowFV Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesNoNormalStressOutflowFV2d (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; MasterDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesNoNormalStressOutflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesNoNormalStressOutflowFV2d

NavierStokesNoNormalStressOutflowFV2d (SmartPtr<NavierStokesBase> MasterDisc)
NavierStokesNoNormalStressOutflowFV2d (SmartPtr&lt;<a href="NavierStokesBase2d.html">NavierStokesBase</a>&gt; MasterDisc)<br>Constructor of class <b>NavierStokesNoNormalStressOutflowFV2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesInflowFV
IDiscretizationItem2dCPU1 NavierStokesInflowBase2dCPU1 
Class <b>NavierStokesInflowFV2dCPU1</b>, default implementation of classgroup <b>NavierStokesInflowFV</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor. <br>Inheritance: <a href="IDiscretizationItem2dCPU1.html">IDiscretizationItem2dCPU1</a> <a href="NavierStokesInflowBase2dCPU1.html">NavierStokesInflowBase2dCPU1</a> <a href="NavierStokesInflowFV2dCPU1.html">NavierStokesInflowFV2dCPU1</a> <br><table><tr><td colspan=2><h3>NavierStokesInflowFV Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesInflowFV2dCPU1 (SmartPtr&lt;<a href="NavierStokesFV2d.html">NavierStokesFV</a>&gt; MasterElemDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesInflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Velocity, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity, Subset, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gtVelocity, Subset, c_string )</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesInflowFV2dCPU1

NavierStokesInflowFV2dCPU1 (SmartPtr<NavierStokesFV> MasterElemDisc)
NavierStokesInflowFV2dCPU1 (SmartPtr&lt;<a href="NavierStokesFV2d.html">NavierStokesFV</a>&gt; MasterElemDisc)<br>Constructor of class <b>NavierStokesInflowFV2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesFE
IElemDisc2d NavierStokesBase2d 
Class <b>NavierStokesFE2d</b>, default implementation of classgroup <b>NavierStokesFE</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor. <br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="NavierStokesBase2d.html">NavierStokesBase2d</a> <a href="NavierStokesFE2d.html">NavierStokesFE2d</a> <br><table><tr><td colspan=2><h3>NavierStokesFE Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesFE2d (c_string Functions, c_string Subset(s))</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesFE2d (std::vector&ltstd_string &gtFunctions, std::vector&ltstd_string &gtSubset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NavierStokesFE Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stabilization (number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (number Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_density (c_string Density)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_exact_jacobian (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (number KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_kinematic_viscosity (c_string KinematicViscosity)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_laplace (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_peclet_blend (bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (std::vector&ltnumber &gtSource)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_source (c_string Source)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stokes (bool )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited NavierStokesBase Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>disc_type ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesFE2d

NavierStokesFE2d (c_string Functions, c_string Subset(s))
NavierStokesFE2d (c_string Functions, c_string Subset(s))<br>Constructor of class <b>NavierStokesFE2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
constructor
NavierStokesFE2d

NavierStokesFE2d (std::vector<std_string >Functions, std::vector<std_string >Subset(s))
NavierStokesFE2d (std::vector&ltstd_string &gtFunctions, std::vector&ltstd_string &gtSubset(s))<br>Constructor of class <b>NavierStokesFE2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
memberfunction
set_stabilization
void
void set_stabilization (number )
void set_stabilization (number )<br><br>Member function of class <b>NavierStokesFE2d</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
NavierStokesInflowFE
IDiscretizationItem2dCPU1 NavierStokesInflowBase2dCPU1 
Class <b>NavierStokesInflowFE2dCPU1</b>, default implementation of classgroup <b>NavierStokesInflowFE</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b><br>class has constructor. <br>Inheritance: <a href="IDiscretizationItem2dCPU1.html">IDiscretizationItem2dCPU1</a> <a href="NavierStokesInflowBase2dCPU1.html">NavierStokesInflowBase2dCPU1</a> <a href="NavierStokesInflowFE2dCPU1.html">NavierStokesInflowFE2dCPU1</a> <br><table><tr><td colspan=2><h3>NavierStokesInflowFE Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NavierStokesInflowFE2dCPU1 (SmartPtr&lt;<a href="NavierStokesFE2d.html">NavierStokesFE</a>&gt; MasterElemDisc)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited NavierStokesInflowBase Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (c_string Velocity, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Velocity, Subset, c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>add (std::vector&ltnumber &gtVelocity, Subset, c_string )</td></tr><tr><td><br></td></tr></table>
constructor
NavierStokesInflowFE2dCPU1

NavierStokesInflowFE2dCPU1 (SmartPtr<NavierStokesFE> MasterElemDisc)
NavierStokesInflowFE2dCPU1 (SmartPtr&lt;<a href="NavierStokesFE2d.html">NavierStokesFE</a>&gt; MasterElemDisc)<br>Constructor of class <b>NavierStokesInflowFE2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
;
class
TensorMatUtilFuncs

Class <b>TensorMatUtilFuncs2d</b>, default implementation of classgroup <b>TensorMatUtilFuncs</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b><br>class has no constructor. <br><table></table>
;
class
IStressMaterialResponse

Class <b>IStressMaterialResponse2d</b>, default implementation of classgroup <b>IStressMaterialResponse</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b><br>class has no constructor. <br><table></table>
;
class
SimoMaterialResponse
IStressMaterialResponse2d 
Class <b>SimoMaterialResponse2d</b>, default implementation of classgroup <b>SimoMaterialResponse</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b><br>class has constructor. <br>Inheritance: <a href="IStressMaterialResponse2d.html">IStressMaterialResponse2d</a> <a href="SimoMaterialResponse2d.html">SimoMaterialResponse2d</a> <br><table><tr><td colspan=2><h3>SimoMaterialResponse Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>SimoMaterialResponse2d ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>SimoMaterialResponse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_hardening_behavior (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>write_data_to_console (number )</td></tr><tr><td><br></td></tr></table>
constructor
SimoMaterialResponse2d

SimoMaterialResponse2d ()
SimoMaterialResponse2d ()<br>Constructor of class <b>SimoMaterialResponse2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_hardening_behavior
void
void set_hardening_behavior (size_t )
void set_hardening_behavior (size_t )<br><br>Member function of class <b>SimoMaterialResponse2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
write_data_to_console
void
void write_data_to_console (number )
void write_data_to_console (number )<br><br>Member function of class <b>SimoMaterialResponse2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
;
class
SimoMaterialResponseLin
IStressMaterialResponse2d SimoMaterialResponse2d 
Class <b>SimoMaterialResponseLin2d</b>, default implementation of classgroup <b>SimoMaterialResponseLin</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b><br>class has constructor. <br>Inheritance: <a href="IStressMaterialResponse2d.html">IStressMaterialResponse2d</a> <a href="SimoMaterialResponse2d.html">SimoMaterialResponse2d</a> <a href="SimoMaterialResponseLin2d.html">SimoMaterialResponseLin2d</a> <br><table><tr><td colspan=2><h3>SimoMaterialResponseLin Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>SimoMaterialResponseLin2d ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>SimoMaterialResponseLin Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_hardening_behavior (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>write_data_to_console (number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>SimoMaterialResponse Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>SimoMaterialResponse2d ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited SimoMaterialResponse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_hardening_behavior (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>write_data_to_console (number )</td></tr><tr><td><br></td></tr></table>
constructor
SimoMaterialResponseLin2d

SimoMaterialResponseLin2d ()
SimoMaterialResponseLin2d ()<br>Constructor of class <b>SimoMaterialResponseLin2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_hardening_behavior
void
void set_hardening_behavior (size_t )
void set_hardening_behavior (size_t )<br><br>Member function of class <b>SimoMaterialResponseLin2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
write_data_to_console
void
void write_data_to_console (number )
void write_data_to_console (number )<br><br>Member function of class <b>SimoMaterialResponseLin2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
;
class
NeoHookeMaterialResponse
IStressMaterialResponse2d 
Class <b>NeoHookeMaterialResponse2d</b>, default implementation of classgroup <b>NeoHookeMaterialResponse</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b><br>class has constructor. <br>Inheritance: <a href="IStressMaterialResponse2d.html">IStressMaterialResponse2d</a> <a href="NeoHookeMaterialResponse2d.html">NeoHookeMaterialResponse2d</a> <br><table><tr><td colspan=2><h3>NeoHookeMaterialResponse Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NeoHookeMaterialResponse2d ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NeoHookeMaterialResponse Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_hardening_behavior (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>write_data_to_console (number )</td></tr><tr><td><br></td></tr></table>
constructor
NeoHookeMaterialResponse2d

NeoHookeMaterialResponse2d ()
NeoHookeMaterialResponse2d ()<br>Constructor of class <b>NeoHookeMaterialResponse2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_hardening_behavior
void
void set_hardening_behavior (size_t )
void set_hardening_behavior (size_t )<br><br>Member function of class <b>NeoHookeMaterialResponse2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
write_data_to_console
void
void write_data_to_console (number )
void write_data_to_console (number )<br><br>Member function of class <b>NeoHookeMaterialResponse2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
;
class
LinProjElementEvaluator

Class <b>LinProjElementEvaluator2d</b>, default implementation of classgroup <b>LinProjElementEvaluator</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b><br>class has no constructor. <br><table></table>
;
class
NonlinearElastoPlasticity
LinProjElementEvaluator2d IElemDisc2d 
Class <b>NonlinearElastoPlasticity2d</b>, default implementation of classgroup <b>NonlinearElastoPlasticity</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b><br>class has constructor. <br>Inheritance: <a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator2d</a> <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="NonlinearElastoPlasticity2d.html">NonlinearElastoPlasticity2d</a> <br><table><tr><td colspan=2><h3>NonlinearElastoPlasticity Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>NonlinearElastoPlasticity2d (c_string Function, c_string Subsets)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>NonlinearElastoPlasticity Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>close_gnuplot_file ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>init_state_variables (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>necking_radius (bool , bool )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>open_gnuplot_file ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_elasticity_tensor_formulation (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_mat_response (SmartPtr&lt;<a href="IStressMaterialResponse2d.html">IStressMaterialResponse</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_quad_order (size_t )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_tangent_accuracy (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_volume_forces (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Force field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_volume_forces (number F)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_volume_forces (number F_x, F_y, number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_volume_forces (number F_x, F_y, F_z, number , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_volume_forces (c_string Force field)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>stress_eigenvalues_at (number , number , number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>write_gnuplot_output (number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
NonlinearElastoPlasticity2d

NonlinearElastoPlasticity2d (c_string Function, c_string Subsets)
NonlinearElastoPlasticity2d (c_string Function, c_string Subsets)<br>Constructor of class <b>NonlinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_quad_order
void
void set_quad_order (size_t )
void set_quad_order (size_t )<br><br>Member function of class <b>NonlinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_volume_forces
void
void set_volume_forces (SmartPtr<UserVector> Force field)
void set_volume_forces (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Force field)<br><br>Member function of class <b>NonlinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_volume_forces
void
void set_volume_forces (number F)
void set_volume_forces (number F)<br><br>Member function of class <b>NonlinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_volume_forces
void
void set_volume_forces (number F_x, F_y, number )
void set_volume_forces (number F_x, F_y, number )<br><br>Member function of class <b>NonlinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_volume_forces
void
void set_volume_forces (number F_x, F_y, F_z, number , number )
void set_volume_forces (number F_x, F_y, F_z, number , number )<br><br>Member function of class <b>NonlinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_volume_forces
void
void set_volume_forces (c_string Force field)
void set_volume_forces (c_string Force field)<br><br>Member function of class <b>NonlinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_mat_response
void
void set_mat_response (SmartPtr<IStressMaterialResponse> )
void set_mat_response (SmartPtr&lt;<a href="IStressMaterialResponse2d.html">IStressMaterialResponse</a>&gt; )<br><br>Member function of class <b>NonlinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_elasticity_tensor_formulation
void
void set_elasticity_tensor_formulation (size_t )
void set_elasticity_tensor_formulation (size_t )<br><br>Member function of class <b>NonlinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
set_tangent_accuracy
void
void set_tangent_accuracy (number )
void set_tangent_accuracy (number )<br><br>Member function of class <b>NonlinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
init_state_variables
void
void init_state_variables (size_t )
void init_state_variables (size_t )<br><br>Member function of class <b>NonlinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
stress_eigenvalues_at
void
void stress_eigenvalues_at (number , number , number )
void stress_eigenvalues_at (number , number , number )<br><br>Member function of class <b>NonlinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
necking_radius
void
void necking_radius (bool , bool )
void necking_radius (bool , bool )<br><br>Member function of class <b>NonlinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
write_gnuplot_output
void
void write_gnuplot_output (number )
void write_gnuplot_output (number )<br><br>Member function of class <b>NonlinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
open_gnuplot_file
void
void open_gnuplot_file ()
void open_gnuplot_file ()<br><br>Member function of class <b>NonlinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
memberfunction
close_gnuplot_file
void
void close_gnuplot_file ()
void close_gnuplot_file ()<br><br>Member function of class <b>NonlinearElastoPlasticity2d</b><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
;
class
LagrangeDifferenceBoundary
IConstraintCPU1 IDomainConstraint2dCPU1 
Class <b>LagrangeDifferenceBoundary2dCPU1</b>, default implementation of classgroup <b>LagrangeDifferenceBoundary</b><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/2d</b><br>class has constructor. <br>Inheritance: <a href="IConstraintCPU1.html">IConstraintCPU1</a> <a href="IDomainConstraint2dCPU1.html">IDomainConstraint2dCPU1</a> <a href="LagrangeDifferenceBoundary2dCPU1.html">LagrangeDifferenceBoundary2dCPU1</a> <br><table><tr><td colspan=2><h3>LagrangeDifferenceBoundary Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LagrangeDifferenceBoundary2dCPU1 ()</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LagrangeDifferenceBoundary Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>bool </td><td class="memItemRight" valign=bottom>set (c_string Value, c_string Function, c_string Subsets)</td></tr><tr><td class="mdescLeft">&#160;</td><td class="mdescRight">returns Success<br/></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )</td></tr><tr><td><br></td></tr></table>
constructor
LagrangeDifferenceBoundary2dCPU1

LagrangeDifferenceBoundary2dCPU1 ()
LagrangeDifferenceBoundary2dCPU1 ()<br>Constructor of class <b>LagrangeDifferenceBoundary2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/2d</b>
memberfunction
set
bool
bool set (c_string Value, c_string Function, c_string Subsets)
bool set (c_string Value, c_string Function, c_string Subsets)<br><br>Member function of class <b>LagrangeDifferenceBoundary2dCPU1</b><br>returns Success<br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/2d</b>
memberfunction
set_approximation_space
void
void set_approximation_space (SmartPtr<ApproximationSpace> )
void set_approximation_space (SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )<br><br>Member function of class <b>LagrangeDifferenceBoundary2dCPU1</b><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/2d</b>
;
class
FV1TimeNeumannBoundary
IElemDisc2d 
Class <b>FV1TimeNeumannBoundary2d</b>, default implementation of classgroup <b>FV1TimeNeumannBoundary</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b><br>class has constructor. <br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="FV1TimeNeumannBoundary2d.html">FV1TimeNeumannBoundary2d</a> <br><table><tr><td colspan=2><h3>FV1TimeNeumannBoundary Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>FV1TimeNeumannBoundary2d (c_string Functions, c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>FV1TimeNeumannBoundary Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_activemembrane (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_capacity (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_dendrite (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_ifInjection (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_injection (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_myelin (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_psc (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_sign (number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
FV1TimeNeumannBoundary2d

FV1TimeNeumannBoundary2d (c_string Functions, c_string Subset(s))
FV1TimeNeumannBoundary2d (c_string Functions, c_string Subset(s))<br>Constructor of class <b>FV1TimeNeumannBoundary2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_capacity
void
void set_capacity (number )
void set_capacity (number )<br><br>Member function of class <b>FV1TimeNeumannBoundary2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_sign
void
void set_sign (number )
void set_sign (number )<br><br>Member function of class <b>FV1TimeNeumannBoundary2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_injection
void
void set_injection (SmartPtr<UserNumber> )
void set_injection (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>FV1TimeNeumannBoundary2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_myelin
void
void set_myelin (number )
void set_myelin (number )<br><br>Member function of class <b>FV1TimeNeumannBoundary2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_activemembrane
void
void set_activemembrane (number )
void set_activemembrane (number )<br><br>Member function of class <b>FV1TimeNeumannBoundary2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_dendrite
void
void set_dendrite (number )
void set_dendrite (number )<br><br>Member function of class <b>FV1TimeNeumannBoundary2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_psc
void
void set_psc (number )
void set_psc (number )<br><br>Member function of class <b>FV1TimeNeumannBoundary2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_ifInjection
void
void set_ifInjection (number )
void set_ifInjection (number )<br><br>Member function of class <b>FV1TimeNeumannBoundary2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
;
class
transmembrane_current
IElemDisc2d 
Class <b>transmembrane_current2d</b>, default implementation of classgroup <b>transmembrane_current</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b><br>class has constructor. <br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="transmembrane_current2d.html">transmembrane_current2d</a> <br><table><tr><td colspan=2><h3>transmembrane_current Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>transmembrane_current2d (c_string Functions, c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>transmembrane_current Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_activemembrane (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_capacity (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_dendrite (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_injection (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_measure_capacitive_current (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_measure_injection_current (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_measure_leakage_current (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_measure_postsynaptic_current (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_measure_potassium_current (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_measure_sodium_current (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_measure_transmembrane_net_current (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_myelin (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_psc (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_sign (number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
transmembrane_current2d

transmembrane_current2d (c_string Functions, c_string Subset(s))
transmembrane_current2d (c_string Functions, c_string Subset(s))<br>Constructor of class <b>transmembrane_current2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_capacity
void
void set_capacity (number )
void set_capacity (number )<br><br>Member function of class <b>transmembrane_current2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_sign
void
void set_sign (number )
void set_sign (number )<br><br>Member function of class <b>transmembrane_current2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_injection
void
void set_injection (SmartPtr<UserNumber> )
void set_injection (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>transmembrane_current2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_myelin
void
void set_myelin (number )
void set_myelin (number )<br><br>Member function of class <b>transmembrane_current2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_activemembrane
void
void set_activemembrane (number )
void set_activemembrane (number )<br><br>Member function of class <b>transmembrane_current2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_dendrite
void
void set_dendrite (number )
void set_dendrite (number )<br><br>Member function of class <b>transmembrane_current2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_psc
void
void set_psc (number )
void set_psc (number )<br><br>Member function of class <b>transmembrane_current2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_measure_sodium_current
void
void set_measure_sodium_current (number )
void set_measure_sodium_current (number )<br><br>Member function of class <b>transmembrane_current2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_measure_potassium_current
void
void set_measure_potassium_current (number )
void set_measure_potassium_current (number )<br><br>Member function of class <b>transmembrane_current2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_measure_leakage_current
void
void set_measure_leakage_current (number )
void set_measure_leakage_current (number )<br><br>Member function of class <b>transmembrane_current2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_measure_capacitive_current
void
void set_measure_capacitive_current (number )
void set_measure_capacitive_current (number )<br><br>Member function of class <b>transmembrane_current2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_measure_transmembrane_net_current
void
void set_measure_transmembrane_net_current (number )
void set_measure_transmembrane_net_current (number )<br><br>Member function of class <b>transmembrane_current2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_measure_injection_current
void
void set_measure_injection_current (number )
void set_measure_injection_current (number )<br><br>Member function of class <b>transmembrane_current2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_measure_postsynaptic_current
void
void set_measure_postsynaptic_current (number )
void set_measure_postsynaptic_current (number )<br><br>Member function of class <b>transmembrane_current2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
;
class
MembranePotentialDiscretization
IElemDisc2d 
Class <b>MembranePotentialDiscretization2d</b>, default implementation of classgroup <b>MembranePotentialDiscretization</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b><br>class has constructor. <br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="MembranePotentialDiscretization2d.html">MembranePotentialDiscretization2d</a> <br><table><tr><td colspan=2><h3>MembranePotentialDiscretization Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>MembranePotentialDiscretization2d (c_string Functions, c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>MembranePotentialDiscretization Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_capacity (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_hhDynamics (<a href="IFunctionNumber.html">IFunctionNumber</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_injection (<a href="IFunctionNumber.html">IFunctionNumber</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
MembranePotentialDiscretization2d

MembranePotentialDiscretization2d (c_string Functions, c_string Subset(s))
MembranePotentialDiscretization2d (c_string Functions, c_string Subset(s))<br>Constructor of class <b>MembranePotentialDiscretization2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_capacity
void
void set_capacity (number )
void set_capacity (number )<br><br>Member function of class <b>MembranePotentialDiscretization2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_hhDynamics
void
void set_hhDynamics (IFunctionNumber *)
void set_hhDynamics (<a href="IFunctionNumber.html">IFunctionNumber</a> *)<br><br>Member function of class <b>MembranePotentialDiscretization2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_injection
void
void set_injection (IFunctionNumber *)
void set_injection (<a href="IFunctionNumber.html">IFunctionNumber</a> *)<br><br>Member function of class <b>MembranePotentialDiscretization2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
;
class
MembraneNeumannBoundaryElemDisc
IElemDisc2d 
Class <b>MembraneNeumannBoundaryElemDisc2d</b>, default implementation of classgroup <b>MembraneNeumannBoundaryElemDisc</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b><br>class has constructor. <br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="MembraneNeumannBoundaryElemDisc2d.html">MembraneNeumannBoundaryElemDisc2d</a> <br><table><tr><td colspan=2><h3>MembraneNeumannBoundaryElemDisc Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>MembraneNeumannBoundaryElemDisc2d (c_string Functions, c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>MembraneNeumannBoundaryElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_boundary (c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_capacity (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_diffusion (number )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_injection (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
MembraneNeumannBoundaryElemDisc2d

MembraneNeumannBoundaryElemDisc2d (c_string Functions, c_string Subset(s))
MembraneNeumannBoundaryElemDisc2d (c_string Functions, c_string Subset(s))<br>Constructor of class <b>MembraneNeumannBoundaryElemDisc2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_capacity
void
void set_capacity (number )
void set_capacity (number )<br><br>Member function of class <b>MembraneNeumannBoundaryElemDisc2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_injection
void
void set_injection (SmartPtr<UserNumber> )
void set_injection (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>MembraneNeumannBoundaryElemDisc2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_boundary
void
void set_boundary (c_string )
void set_boundary (c_string )<br><br>Member function of class <b>MembraneNeumannBoundaryElemDisc2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_diffusion
void
void set_diffusion (number )
void set_diffusion (number )<br><br>Member function of class <b>MembraneNeumannBoundaryElemDisc2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
;
class
odes
IElemDisc2d 
Class <b>odes2d</b>, default implementation of classgroup <b>odes</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b><br>class has constructor. <br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="odes2d.html">odes2d</a> <br><table><tr><td colspan=2><h3>odes Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>odes2d (c_string Functions, c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>odes Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_D1rhs (<a href="IFunctionNumber.html">IFunctionNumber</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_D2rhs (<a href="IFunctionNumber.html">IFunctionNumber</a> *)</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_name (c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_rhs (<a href="IFunctionNumber.html">IFunctionNumber</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
odes2d

odes2d (c_string Functions, c_string Subset(s))
odes2d (c_string Functions, c_string Subset(s))<br>Constructor of class <b>odes2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_rhs
void
void set_rhs (IFunctionNumber *)
void set_rhs (<a href="IFunctionNumber.html">IFunctionNumber</a> *)<br><br>Member function of class <b>odes2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_D1rhs
void
void set_D1rhs (IFunctionNumber *)
void set_D1rhs (<a href="IFunctionNumber.html">IFunctionNumber</a> *)<br><br>Member function of class <b>odes2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_D2rhs
void
void set_D2rhs (IFunctionNumber *)
void set_D2rhs (<a href="IFunctionNumber.html">IFunctionNumber</a> *)<br><br>Member function of class <b>odes2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_name
void
void set_name (c_string )
void set_name (c_string )<br><br>Member function of class <b>odes2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
;
class
DirichletTimeDependent
IElemDisc2d 
Class <b>DirichletTimeDependent2d</b>, default implementation of classgroup <b>DirichletTimeDependent</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b><br>class has constructor. <br>Inheritance: <a href="IElemDisc2d.html">IElemDisc2d</a> <a href="DirichletTimeDependent2d.html">DirichletTimeDependent2d</a> <br><table><tr><td colspan=2><h3>DirichletTimeDependent Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>DirichletTimeDependent2d (c_string Functions, c_string Subset(s))</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>DirichletTimeDependent Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_name (c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_rhs (<a href="IFunctionNumber.html">IFunctionNumber</a> *)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>Inherited IElemDisc Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_stationary ()</td></tr><tr><td><br></td></tr></table>
constructor
DirichletTimeDependent2d

DirichletTimeDependent2d (c_string Functions, c_string Subset(s))
DirichletTimeDependent2d (c_string Functions, c_string Subset(s))<br>Constructor of class <b>DirichletTimeDependent2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_rhs
void
void set_rhs (IFunctionNumber *)
void set_rhs (<a href="IFunctionNumber.html">IFunctionNumber</a> *)<br><br>Member function of class <b>DirichletTimeDependent2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
memberfunction
set_name
void
void set_name (c_string )
void set_name (c_string )<br><br>Member function of class <b>DirichletTimeDependent2d</b><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
;
class
LuaUserNumber
ICplUserData2d UserNumber2d 
Class <b>LuaUserNumber2d</b>, default implementation of classgroup <b>LuaUserNumber</b><br>Registry Group: <b>/ug4</b><br>class has constructor. <br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserNumber2d.html">UserNumber2d</a> <a href="LuaUserNumber2d.html">LuaUserNumber2d</a> <br><table><tr><td colspan=2><h3>LuaUserNumber Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaUserNumber2d (c_string Callback)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
LuaUserNumber2d

LuaUserNumber2d (c_string Callback)
LuaUserNumber2d (c_string Callback)<br>Constructor of class <b>LuaUserNumber2d</b><br>Registry Group: <b>/ug4</b>
;
class
LuaCondUserNumber
ICplUserData2d CondUserNumber2d 
Class <b>LuaCondUserNumber2d</b>, default implementation of classgroup <b>LuaCondUserNumber</b><br>Registry Group: <b>/ug4</b><br>class has constructor. <br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="CondUserNumber2d.html">CondUserNumber2d</a> <a href="LuaCondUserNumber2d.html">LuaCondUserNumber2d</a> <br><table><tr><td colspan=2><h3>LuaCondUserNumber Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaCondUserNumber2d (c_string Callback)</td></tr><tr><td><br></td></tr></table>
constructor
LuaCondUserNumber2d

LuaCondUserNumber2d (c_string Callback)
LuaCondUserNumber2d (c_string Callback)<br>Constructor of class <b>LuaCondUserNumber2d</b><br>Registry Group: <b>/ug4</b>
;
class
LuaUserVector
ICplUserData2d UserVector2d 
Class <b>LuaUserVector2d</b>, default implementation of classgroup <b>LuaUserVector</b><br>Registry Group: <b>/ug4</b><br>class has constructor. <br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserVector2d.html">UserVector2d</a> <a href="LuaUserVector2d.html">LuaUserVector2d</a> <br><table><tr><td colspan=2><h3>LuaUserVector Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaUserVector2d (c_string Callback)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
LuaUserVector2d

LuaUserVector2d (c_string Callback)
LuaUserVector2d (c_string Callback)<br>Constructor of class <b>LuaUserVector2d</b><br>Registry Group: <b>/ug4</b>
;
class
LuaCondUserVector
ICplUserData2d CondUserVector2d 
Class <b>LuaCondUserVector2d</b>, default implementation of classgroup <b>LuaCondUserVector</b><br>Registry Group: <b>/ug4</b><br>class has constructor. <br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="CondUserVector2d.html">CondUserVector2d</a> <a href="LuaCondUserVector2d.html">LuaCondUserVector2d</a> <br><table><tr><td colspan=2><h3>LuaCondUserVector Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaCondUserVector2d (c_string Callback)</td></tr><tr><td><br></td></tr></table>
constructor
LuaCondUserVector2d

LuaCondUserVector2d (c_string Callback)
LuaCondUserVector2d (c_string Callback)<br>Constructor of class <b>LuaCondUserVector2d</b><br>Registry Group: <b>/ug4</b>
;
class
LuaUserMatrix
ICplUserData2d UserMatrix2d 
Class <b>LuaUserMatrix2d</b>, default implementation of classgroup <b>LuaUserMatrix</b><br>Registry Group: <b>/ug4</b><br>class has constructor. <br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserMatrix2d.html">UserMatrix2d</a> <a href="LuaUserMatrix2d.html">LuaUserMatrix2d</a> <br><table><tr><td colspan=2><h3>LuaUserMatrix Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaUserMatrix2d (c_string Callback)</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserMatrix Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
LuaUserMatrix2d

LuaUserMatrix2d (c_string Callback)
LuaUserMatrix2d (c_string Callback)<br>Constructor of class <b>LuaUserMatrix2d</b><br>Registry Group: <b>/ug4</b>
;
class
LuaCondUserMatrix
ICplUserData2d CondUserMatrix2d 
Class <b>LuaCondUserMatrix2d</b>, default implementation of classgroup <b>LuaCondUserMatrix</b><br>Registry Group: <b>/ug4</b><br>class has constructor. <br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="CondUserMatrix2d.html">CondUserMatrix2d</a> <a href="LuaCondUserMatrix2d.html">LuaCondUserMatrix2d</a> <br><table><tr><td colspan=2><h3>LuaCondUserMatrix Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaCondUserMatrix2d (c_string Callback)</td></tr><tr><td><br></td></tr></table>
constructor
LuaCondUserMatrix2d

LuaCondUserMatrix2d (c_string Callback)
LuaCondUserMatrix2d (c_string Callback)<br>Constructor of class <b>LuaCondUserMatrix2d</b><br>Registry Group: <b>/ug4</b>
;
class
LuaUserFunctionNumber
ICplUserData2d UserNumber2d DependentUserDataNumber2d DataLinkerNumber2d 
Class <b>LuaUserFunctionNumber2d</b>, default implementation of classgroup <b>LuaUserFunctionNumber</b><br>Registry Group: <b>/ug4</b><br>class has constructor. <br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserNumber2d.html">UserNumber2d</a> <a href="DependentUserDataNumber2d.html">DependentUserDataNumber2d</a> <a href="DataLinkerNumber2d.html">DataLinkerNumber2d</a> <a href="LuaUserFunctionNumber2d.html">LuaUserFunctionNumber2d</a> <br><table><tr><td colspan=2><h3>LuaUserFunctionNumber Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaUserFunctionNumber2d (c_string LuaCallbackName, NumberOfArguments, integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaUserFunctionNumber2d (c_string LuaCallbackName, NumberOfArguments, PosTimeFlag, integer , bool )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LuaUserFunctionNumber Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_deriv (size_t , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_input (size_t , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_input (size_t , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserNumber Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
LuaUserFunctionNumber2d

LuaUserFunctionNumber2d (c_string LuaCallbackName, NumberOfArguments, integer )
LuaUserFunctionNumber2d (c_string LuaCallbackName, NumberOfArguments, integer )<br>Constructor of class <b>LuaUserFunctionNumber2d</b><br>Registry Group: <b>/ug4</b>
constructor
LuaUserFunctionNumber2d

LuaUserFunctionNumber2d (c_string LuaCallbackName, NumberOfArguments, PosTimeFlag, integer , bool )
LuaUserFunctionNumber2d (c_string LuaCallbackName, NumberOfArguments, PosTimeFlag, integer , bool )<br>Constructor of class <b>LuaUserFunctionNumber2d</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_deriv
void
void set_deriv (size_t , c_string )
void set_deriv (size_t , c_string )<br><br>Member function of class <b>LuaUserFunctionNumber2d</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_input
void
void set_input (size_t , SmartPtr<UserNumber> )
void set_input (size_t , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>LuaUserFunctionNumber2d</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_input
void
void set_input (size_t , number )
void set_input (size_t , number )<br><br>Member function of class <b>LuaUserFunctionNumber2d</b><br>Registry Group: <b>/ug4</b>
;
class
LuaUserFunctionMatrixNumber
ICplUserData2d UserMatrix2d DependentUserDataMatrix2d DataLinkerMatrix2d 
Class <b>LuaUserFunctionMatrixNumber2d</b>, default implementation of classgroup <b>LuaUserFunctionMatrixNumber</b><br>Registry Group: <b>/ug4</b><br>class has constructor. <br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserMatrix2d.html">UserMatrix2d</a> <a href="DependentUserDataMatrix2d.html">DependentUserDataMatrix2d</a> <a href="DataLinkerMatrix2d.html">DataLinkerMatrix2d</a> <a href="LuaUserFunctionMatrixNumber2d.html">LuaUserFunctionMatrixNumber2d</a> <br><table><tr><td colspan=2><h3>LuaUserFunctionMatrixNumber Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaUserFunctionMatrixNumber2d (c_string LuaCallbackName, NumberOfArguments, integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaUserFunctionMatrixNumber2d (c_string LuaCallbackName, NumberOfArguments, PosTimeFlag, integer , bool )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LuaUserFunctionMatrixNumber Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_deriv (size_t , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_input (size_t , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_input (size_t , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserMatrix Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
LuaUserFunctionMatrixNumber2d

LuaUserFunctionMatrixNumber2d (c_string LuaCallbackName, NumberOfArguments, integer )
LuaUserFunctionMatrixNumber2d (c_string LuaCallbackName, NumberOfArguments, integer )<br>Constructor of class <b>LuaUserFunctionMatrixNumber2d</b><br>Registry Group: <b>/ug4</b>
constructor
LuaUserFunctionMatrixNumber2d

LuaUserFunctionMatrixNumber2d (c_string LuaCallbackName, NumberOfArguments, PosTimeFlag, integer , bool )
LuaUserFunctionMatrixNumber2d (c_string LuaCallbackName, NumberOfArguments, PosTimeFlag, integer , bool )<br>Constructor of class <b>LuaUserFunctionMatrixNumber2d</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_deriv
void
void set_deriv (size_t , c_string )
void set_deriv (size_t , c_string )<br><br>Member function of class <b>LuaUserFunctionMatrixNumber2d</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_input
void
void set_input (size_t , SmartPtr<UserNumber> )
void set_input (size_t , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>LuaUserFunctionMatrixNumber2d</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_input
void
void set_input (size_t , number )
void set_input (size_t , number )<br><br>Member function of class <b>LuaUserFunctionMatrixNumber2d</b><br>Registry Group: <b>/ug4</b>
;
class
LuaUserFunctionVectorNumber
ICplUserData2d UserVector2d DependentUserDataVector2d DataLinkerVector2d 
Class <b>LuaUserFunctionVectorNumber2d</b>, default implementation of classgroup <b>LuaUserFunctionVectorNumber</b><br>Registry Group: <b>/ug4</b><br>class has constructor. <br>Inheritance: <a href="ICplUserData2d.html">ICplUserData2d</a> <a href="UserVector2d.html">UserVector2d</a> <a href="DependentUserDataVector2d.html">DependentUserDataVector2d</a> <a href="DataLinkerVector2d.html">DataLinkerVector2d</a> <a href="LuaUserFunctionVectorNumber2d.html">LuaUserFunctionVectorNumber2d</a> <br><table><tr><td colspan=2><h3>LuaUserFunctionVectorNumber Constructors</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaUserFunctionVectorNumber2d (c_string LuaCallbackName, NumberOfArguments, integer )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top></td><td class="memItemRight" valign=bottom>LuaUserFunctionVectorNumber2d (c_string LuaCallbackName, NumberOfArguments, PosTimeFlag, integer , bool )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3>LuaUserFunctionVectorNumber Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_deriv (size_t , c_string )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_input (size_t , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>void </td><td class="memItemRight" valign=bottom>set_input (size_t , number )</td></tr><tr><td><br></td></tr><tr><td colspan=2><h3> Inherited UserVector Const Member Functions</h3></td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>integer </td><td class="memItemRight" valign=bottom>get_dim ()</td></tr><tr><td class="memItemLeft" nowrap align=right valign=top>std_string </td><td class="memItemRight" valign=bottom>type ()</td></tr><tr><td><br></td></tr></table>
constructor
LuaUserFunctionVectorNumber2d

LuaUserFunctionVectorNumber2d (c_string LuaCallbackName, NumberOfArguments, integer )
LuaUserFunctionVectorNumber2d (c_string LuaCallbackName, NumberOfArguments, integer )<br>Constructor of class <b>LuaUserFunctionVectorNumber2d</b><br>Registry Group: <b>/ug4</b>
constructor
LuaUserFunctionVectorNumber2d

LuaUserFunctionVectorNumber2d (c_string LuaCallbackName, NumberOfArguments, PosTimeFlag, integer , bool )
LuaUserFunctionVectorNumber2d (c_string LuaCallbackName, NumberOfArguments, PosTimeFlag, integer , bool )<br>Constructor of class <b>LuaUserFunctionVectorNumber2d</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_deriv
void
void set_deriv (size_t , c_string )
void set_deriv (size_t , c_string )<br><br>Member function of class <b>LuaUserFunctionVectorNumber2d</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_input
void
void set_input (size_t , SmartPtr<UserNumber> )
void set_input (size_t , SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; )<br><br>Member function of class <b>LuaUserFunctionVectorNumber2d</b><br>Registry Group: <b>/ug4</b>
memberfunction
set_input
void
void set_input (size_t , number )
void set_input (size_t , number )<br><br>Member function of class <b>LuaUserFunctionVectorNumber2d</b><br>Registry Group: <b>/ug4</b>
;
function
MakeVec
SmartPtr<Vec1d>
SmartPtr<Vec> MakeVec (number )
SmartPtr&lt;<a href="Vec1d.html">Vec</a>&gt; MakeVec (number )<br><br>Registry Group: <b>/ug4/Util/VecMath</b>
function
MakeVec
SmartPtr<Vec2d>
SmartPtr<Vec> MakeVec (number , number )
SmartPtr&lt;<a href="Vec1d.html">Vec</a>&gt; MakeVec (number , number )<br><br>Registry Group: <b>/ug4/Util/VecMath</b>
function
MakeVec
SmartPtr<Vec3d>
SmartPtr<Vec> MakeVec (number , number , number )
SmartPtr&lt;<a href="Vec1d.html">Vec</a>&gt; MakeVec (number , number , number )<br><br>Registry Group: <b>/ug4/Util/VecMath</b>
function
MakeVec
SmartPtr<Vec4d>
SmartPtr<Vec> MakeVec (number , number , number , number )
SmartPtr&lt;<a href="Vec1d.html">Vec</a>&gt; MakeVec (number , number , number , number )<br><br>Registry Group: <b>/ug4/Util/VecMath</b>
function
ug_get_app_path
string
std_string ug_get_app_path ()
std_string ug_get_app_path ()<br><br>returns pathName<br>tooltip: Returns the application path<br>Registry Group: <b>/ug4/Util</b>
function
ug_get_data_path
string
std_string ug_get_data_path ()
std_string ug_get_data_path ()<br><br>returns pathName<br>tooltip: Returns the data path<br>Registry Group: <b>/ug4/Util</b>
function
ug_get_script_path
string
std_string ug_get_script_path ()
std_string ug_get_script_path ()<br><br>returns pathName<br>tooltip: Returns the script path<br>Registry Group: <b>/ug4/Util</b>
function
ug_get_current_path
string
std_string ug_get_current_path ()
std_string ug_get_current_path ()<br><br>returns pathName<br>tooltip: Returns the current path<br>Registry Group: <b>/ug4/Util</b>
function
ExecuteSystemCommand
integer
integer ExecuteSystemCommand (c_string command)
integer ExecuteSystemCommand (c_string command)<br><br>returns success<br>tooltip: Executes a command in the system shell<br>Registry Group: <b>/ug4/Util</b>
function
srand
void
void srand (integer The pseudo-random number generator is initialized using the argument passed as seed.)
void srand (integer The pseudo-random number generator is initialized using the argument passed as seed.)<br><br>returns seed<br>Registry Group: <b>/ug4/Util</b>
function
ug_file_exists
bool
bool ug_file_exists (c_string )
bool ug_file_exists (c_string )<br><br>returns exists<br>tooltip: Returns true if a path exists, false if not.<br>Registry Group: <b>/ug4/Util</b>
function
exit
void
void exit ()
void exit ()<br><br>tooltip: Immediatly terminates the application.<br>Registry Group: <b>/ug4/Util</b>
function
quit
void
void quit ()
void quit ()<br><br>tooltip: Immediatly terminates the application.<br>Registry Group: <b>/ug4/Util</b>
function
CreateFractal
bool
bool CreateFractal (Grid *, HangingNodeRefiner_Grid *, number , size_t )
bool CreateFractal (<a href="Grid.html">Grid</a> *, <a href="HangingNodeRefiner_Grid.html">HangingNodeRefiner_Grid</a> *, number , size_t )<br><br>Registry Group: <b>/ug4/Grid</b>
function
PrintAttachmentInfo
void
void PrintAttachmentInfo (Grid *)
void PrintAttachmentInfo (<a href="Grid.html">Grid</a> *)<br><br>Registry Group: <b>/ug4/Grid</b>
function
LoadGrid
bool
bool LoadGrid (Grid *grid, ISubsetHandler *sh, c_string filename)
bool LoadGrid (<a href="Grid.html">Grid</a> *grid, <a href="ISubsetHandler.html">ISubsetHandler</a> *sh, c_string filename)<br><br>Registry Group: <b>/ug4/Grid</b>
function
LoadGrid
bool
bool LoadGrid (Grid *grid, c_string filename)
bool LoadGrid (<a href="Grid.html">Grid</a> *grid, c_string filename)<br><br>Registry Group: <b>/ug4/Grid</b>
function
SaveGrid
bool
bool SaveGrid (Grid *grid, const ISubsetHandler *sh, c_string filename)
bool SaveGrid (<a href="Grid.html">Grid</a> *grid, const <a href="ISubsetHandler.html">ISubsetHandler</a> *sh, c_string filename)<br><br>Registry Group: <b>/ug4/Grid</b>
function
SaveGrid
bool
bool SaveGrid (Grid *grid, ISubsetHandler *sh, c_string filename)
bool SaveGrid (<a href="Grid.html">Grid</a> *grid, <a href="ISubsetHandler.html">ISubsetHandler</a> *sh, c_string filename)<br><br>Registry Group: <b>/ug4/Grid</b>
function
SaveGrid
bool
bool SaveGrid (Grid *grid, c_string filename)
bool SaveGrid (<a href="Grid.html">Grid</a> *grid, c_string filename)<br><br>Registry Group: <b>/ug4/Grid</b>
function
LoadGridObject
bool
bool LoadGridObject (GridObject *go, c_string filename)
bool LoadGridObject (<a href="GridObject.html">GridObject</a> *go, c_string filename)<br><br>Registry Group: <b>/ug4/Grid</b>
function
SaveGridObject
bool
bool SaveGridObject (GridObject *go, c_string filename)
bool SaveGridObject (<a href="GridObject.html">GridObject</a> *go, c_string filename)<br><br>Registry Group: <b>/ug4/Grid</b>
function
SaveGridHierarchy
bool
bool SaveGridHierarchy (MultiGrid *mg, c_string filename)
bool SaveGridHierarchy (<a href="MultiGrid.html">MultiGrid</a> *mg, c_string filename)<br><br>Registry Group: <b>/ug4/Grid</b>
function
SaveGridHierarchyTransformed
bool
bool SaveGridHierarchyTransformed (MultiGrid *mg, ISubsetHandler *sh, c_string filename, number offset)
bool SaveGridHierarchyTransformed (<a href="MultiGrid.html">MultiGrid</a> *mg, <a href="ISubsetHandler.html">ISubsetHandler</a> *sh, c_string filename, number offset)<br><br>Registry Group: <b>/ug4/Grid</b>
function
SaveGridHierarchyTransformed
bool
bool SaveGridHierarchyTransformed (MultiGrid *mg, c_string filename, number offset)
bool SaveGridHierarchyTransformed (<a href="MultiGrid.html">MultiGrid</a> *mg, c_string filename, number offset)<br><br>Registry Group: <b>/ug4/Grid</b>
function
SaveParallelGridLayout
bool
bool SaveParallelGridLayout (MultiGrid *mg, c_string filename, number offset)
bool SaveParallelGridLayout (<a href="MultiGrid.html">MultiGrid</a> *mg, c_string filename, number offset)<br><br>Registry Group: <b>/ug4/Grid</b>
function
SaveSurfaceViewTransformed
bool
bool SaveSurfaceViewTransformed (MultiGrid *, const SurfaceView *, c_string , number )
bool SaveSurfaceViewTransformed (<a href="MultiGrid.html">MultiGrid</a> *, const <a href="SurfaceView.html">SurfaceView</a> *, c_string , number )<br><br>Registry Group: <b></b>
function
CreateGridObject
GridObject*
GridObject *CreateGridObject (c_string )
<a href="GridObject.html">GridObject</a> *CreateGridObject (c_string )<br><br>Registry Group: <b>/ug4/Grid</b>
function
PrintGridElementNumbers
void
void PrintGridElementNumbers (MultiGrid *)
void PrintGridElementNumbers (<a href="MultiGrid.html">MultiGrid</a> *)<br><br>Registry Group: <b>/ug4/Grid</b>
function
PrintGridElementNumbers
void
void PrintGridElementNumbers (Grid *)
void PrintGridElementNumbers (<a href="Grid.html">Grid</a> *)<br><br>Registry Group: <b>/ug4/Grid</b>
function
TestSubdivision
void
void TestSubdivision (c_string , c_string , integer )
void TestSubdivision (c_string , c_string , integer )<br><br>Registry Group: <b>/ug4/Grid</b>
function
TestHangingNodeRefiner_MultiGrid
bool
bool TestHangingNodeRefiner_MultiGrid (c_string , c_string , integer , number )
bool TestHangingNodeRefiner_MultiGrid (c_string , c_string , integer , number )<br><br>Registry Group: <b>/ug4/Grid</b>
function
CreateHierarchy
bool
bool CreateHierarchy (MultiGrid *, size_t )
bool CreateHierarchy (<a href="MultiGrid.html">MultiGrid</a> *, size_t )<br><br>Registry Group: <b>/ug4/Grid</b>
function
CreateSmoothHierarchy
bool
bool CreateSmoothHierarchy (MultiGrid *, size_t )
bool CreateSmoothHierarchy (<a href="MultiGrid.html">MultiGrid</a> *, size_t )<br><br>Registry Group: <b>/ug4/Grid</b>
function
CreateSemiSmoothHierarchy
bool
bool CreateSemiSmoothHierarchy (MultiGrid *, size_t )
bool CreateSemiSmoothHierarchy (<a href="MultiGrid.html">MultiGrid</a> *, size_t )<br><br>Registry Group: <b>/ug4/Grid</b>
function
AdjustSubsetsForSimulation
void
void AdjustSubsetsForSimulation (SubsetHandler *, bool )
void AdjustSubsetsForSimulation (<a href="SubsetHandler.html">SubsetHandler</a> *, bool )<br><br>Registry Group: <b>/ug4/Grid</b>
function
AdjustSubsetsForSimulation
void
void AdjustSubsetsForSimulation (MGSubsetHandler *, bool )
void AdjustSubsetsForSimulation (<a href="MGSubsetHandler.html">MGSubsetHandler</a> *, bool )<br><br>Registry Group: <b>/ug4/Grid</b>
function
AssignSubsetsByElementType
void
void AssignSubsetsByElementType (ISubsetHandler *)
void AssignSubsetsByElementType (<a href="ISubsetHandler.html">ISubsetHandler</a> *)<br><br>Registry Group: <b></b>
function
AssignSubsetColors
void
void AssignSubsetColors (ISubsetHandler *)
void AssignSubsetColors (<a href="ISubsetHandler.html">ISubsetHandler</a> *)<br><br>Registry Group: <b></b>
function
CheckHangingNodeConsistency
bool
bool CheckHangingNodeConsistency (MultiGrid *)
bool CheckHangingNodeConsistency (<a href="MultiGrid.html">MultiGrid</a> *)<br><br>Registry Group: <b>/ug4/Grid</b>
function
CheckDistributedObjectConstraintTypes
bool
bool CheckDistributedObjectConstraintTypes (MultiGrid *)
bool CheckDistributedObjectConstraintTypes (<a href="MultiGrid.html">MultiGrid</a> *)<br><br>Registry Group: <b>/ug4/Grid</b>
function
PclDebugBarrierEnabled
bool
bool PclDebugBarrierEnabled ()
bool PclDebugBarrierEnabled ()<br><br>returns Enabled<br>tooltip: Returns the whether debug barriers are enabled.<br>Registry Group: <b>/ug4/pcl</b>
function
GetNumProcesses
integer
integer GetNumProcesses ()
integer GetNumProcesses ()<br><br>returns NumProcs<br>tooltip: Returns the number of active processes.<br>Registry Group: <b>/ug4/pcl</b>
function
GetProcessRank
integer
integer GetProcessRank ()
integer GetProcessRank ()<br><br>returns ProcRank<br>tooltip: Returns the rank of the current process.<br>Registry Group: <b>/ug4/pcl</b>
function
SynchronizeProcesses
void
void SynchronizeProcesses ()
void SynchronizeProcesses ()<br><br>tooltip: Waits until all active processes reached this point.<br>Registry Group: <b>/ug4/pcl</b>
function
AllProcsTrue
bool
bool AllProcsTrue (bool boolean)
bool AllProcsTrue (bool boolean)<br><br>returns boolean<br>tooltip: Returns true if all processes call the method with true.<br>Registry Group: <b>/ug4/pcl</b>
function
ParallelMin
number
number ParallelMin (number t)
number ParallelMin (number t)<br><br>returns tmax<br>tooltip: returns the maximum of t over all processes. note: you have to assure that all processes call this function.<br>Registry Group: <b>/ug4/pcl</b>
function
ParallelMax
number
number ParallelMax (number t)
number ParallelMax (number t)<br><br>returns tmin<br>tooltip: returns the minimum of t over all processes. note: you have to assure that all processes call this function.<br>Registry Group: <b>/ug4/pcl</b>
function
ParallelSum
number
number ParallelSum (number t)
number ParallelSum (number t)<br><br>returns tsum<br>tooltip: returns the sum of t over all processes. note: you have to assure that all processes call this function.<br>Registry Group: <b>/ug4/pcl</b>
function
MaxElementDiameter
number
number MaxElementDiameter (Domain *, integer )
number MaxElementDiameter (<a href="Domain2d.html">Domain</a> *, integer )<br><br>Registry Group: <b>/ug4/Domain</b>
function
MaxElementDiameter
number
number MaxElementDiameter (Domain *, integer )
number MaxElementDiameter (<a href="Domain2d.html">Domain</a> *, integer )<br><br>Registry Group: <b>/ug4/Domain</b>
function
MaxElementDiameter
number
number MaxElementDiameter (Domain *, integer )
number MaxElementDiameter (<a href="Domain2d.html">Domain</a> *, integer )<br><br>Registry Group: <b>/ug4/Domain</b>
function
LoadDomain
void
void LoadDomain (Domain *Domain, c_string Filename)
void LoadDomain (<a href="Domain2d.html">Domain</a> *Domain, c_string Filename)<br><br>tooltip: Loads a domain<br>Registry Group: <b>/ug4/Domain</b>
function
LoadDomain
void
void LoadDomain (Domain *Domain, c_string Filename)
void LoadDomain (<a href="Domain2d.html">Domain</a> *Domain, c_string Filename)<br><br>tooltip: Loads a domain<br>Registry Group: <b>/ug4/Domain</b>
function
LoadDomain
void
void LoadDomain (Domain *Domain, c_string Filename)
void LoadDomain (<a href="Domain2d.html">Domain</a> *Domain, c_string Filename)<br><br>tooltip: Loads a domain<br>Registry Group: <b>/ug4/Domain</b>
function
LoadAndRefineDomain
void
void LoadAndRefineDomain (Domain *Domain, c_string Filename, integer NumRefines)
void LoadAndRefineDomain (<a href="Domain2d.html">Domain</a> *Domain, c_string Filename, integer NumRefines)<br><br>tooltip: Loads a domain and performs global refinement<br>Registry Group: <b>/ug4/Domain</b>
function
LoadAndRefineDomain
void
void LoadAndRefineDomain (Domain *Domain, c_string Filename, integer NumRefines)
void LoadAndRefineDomain (<a href="Domain2d.html">Domain</a> *Domain, c_string Filename, integer NumRefines)<br><br>tooltip: Loads a domain and performs global refinement<br>Registry Group: <b>/ug4/Domain</b>
function
LoadAndRefineDomain
void
void LoadAndRefineDomain (Domain *Domain, c_string Filename, integer NumRefines)
void LoadAndRefineDomain (<a href="Domain2d.html">Domain</a> *Domain, c_string Filename, integer NumRefines)<br><br>tooltip: Loads a domain and performs global refinement<br>Registry Group: <b>/ug4/Domain</b>
function
SaveDomain
void
void SaveDomain (Domain *Domain, c_string Filename)
void SaveDomain (<a href="Domain2d.html">Domain</a> *Domain, c_string Filename)<br><br>tooltip: Saves a domain<br>Registry Group: <b>/ug4/Domain</b>
function
SaveDomain
void
void SaveDomain (Domain *Domain, c_string Filename)
void SaveDomain (<a href="Domain2d.html">Domain</a> *Domain, c_string Filename)<br><br>tooltip: Saves a domain<br>Registry Group: <b>/ug4/Domain</b>
function
SaveDomain
void
void SaveDomain (Domain *Domain, c_string Filename)
void SaveDomain (<a href="Domain2d.html">Domain</a> *Domain, c_string Filename)<br><br>tooltip: Saves a domain<br>Registry Group: <b>/ug4/Domain</b>
function
SavePartitionMap
bool
bool SavePartitionMap (PartitionMap *PartitionMap, Domain *Domain, c_string Filename)
bool SavePartitionMap (<a href="PartitionMap.html">PartitionMap</a> *PartitionMap, <a href="Domain2d.html">Domain</a> *Domain, c_string Filename)<br><br>returns Success<br>tooltip: Saves a partition map<br>Registry Group: <b>/ug4/Domain</b>
function
SavePartitionMap
bool
bool SavePartitionMap (PartitionMap *PartitionMap, Domain *Domain, c_string Filename)
bool SavePartitionMap (<a href="PartitionMap.html">PartitionMap</a> *PartitionMap, <a href="Domain2d.html">Domain</a> *Domain, c_string Filename)<br><br>returns Success<br>tooltip: Saves a partition map<br>Registry Group: <b>/ug4/Domain</b>
function
SavePartitionMap
bool
bool SavePartitionMap (PartitionMap *PartitionMap, Domain *Domain, c_string Filename)
bool SavePartitionMap (<a href="PartitionMap.html">PartitionMap</a> *PartitionMap, <a href="Domain2d.html">Domain</a> *Domain, c_string Filename)<br><br>returns Success<br>tooltip: Saves a partition map<br>Registry Group: <b>/ug4/Domain</b>
function
DistributeDomain
bool
bool DistributeDomain (Domain *, PartitionMap *, bool )
bool DistributeDomain (<a href="Domain2d.html">Domain</a> *, <a href="PartitionMap.html">PartitionMap</a> *, bool )<br><br>Registry Group: <b>/ug4/Domain</b>
function
DistributeDomain
bool
bool DistributeDomain (Domain *, PartitionMap *, bool )
bool DistributeDomain (<a href="Domain2d.html">Domain</a> *, <a href="PartitionMap.html">PartitionMap</a> *, bool )<br><br>Registry Group: <b>/ug4/Domain</b>
function
DistributeDomain
bool
bool DistributeDomain (Domain *, PartitionMap *, bool )
bool DistributeDomain (<a href="Domain2d.html">Domain</a> *, <a href="PartitionMap.html">PartitionMap</a> *, bool )<br><br>Registry Group: <b>/ug4/Domain</b>
function
DistributeDomain
bool
bool DistributeDomain (Domain *, PartitionMap *, bool , std::vector<SmartPtr<GridFunction> >)
bool DistributeDomain (<a href="Domain2d.html">Domain</a> *, <a href="PartitionMap.html">PartitionMap</a> *, bool , std::vector&ltSmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; &gt)<br><br>Registry Group: <b>/ug4/Discretization</b>
function
DistributeDomain
bool
bool DistributeDomain (Domain *, PartitionMap *, bool , std::vector<SmartPtr<GridFunction> >)
bool DistributeDomain (<a href="Domain2d.html">Domain</a> *, <a href="PartitionMap.html">PartitionMap</a> *, bool , std::vector&ltSmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; &gt)<br><br>Registry Group: <b>/ug4/Discretization</b>
function
DistributeDomain
bool
bool DistributeDomain (Domain *, PartitionMap *, bool , std::vector<SmartPtr<GridFunction> >)
bool DistributeDomain (<a href="Domain2d.html">Domain</a> *, <a href="PartitionMap.html">PartitionMap</a> *, bool , std::vector&ltSmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; &gt)<br><br>Registry Group: <b>/ug4/Discretization</b>
function
DistributeDomain
bool
bool DistributeDomain (Domain *, PartitionMap *, bool , std::vector<SmartPtr<GridFunction> >)
bool DistributeDomain (<a href="Domain2d.html">Domain</a> *, <a href="PartitionMap.html">PartitionMap</a> *, bool , std::vector&ltSmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; &gt)<br><br>Registry Group: <b>/ug4/Discretization</b>
function
DistributeDomain
bool
bool DistributeDomain (Domain *, PartitionMap *, bool , std::vector<SmartPtr<GridFunction> >)
bool DistributeDomain (<a href="Domain2d.html">Domain</a> *, <a href="PartitionMap.html">PartitionMap</a> *, bool , std::vector&ltSmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; &gt)<br><br>Registry Group: <b>/ug4/Discretization</b>
function
DistributeDomain
bool
bool DistributeDomain (Domain *, PartitionMap *, bool , std::vector<SmartPtr<GridFunction> >)
bool DistributeDomain (<a href="Domain2d.html">Domain</a> *, <a href="PartitionMap.html">PartitionMap</a> *, bool , std::vector&ltSmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; &gt)<br><br>Registry Group: <b>/ug4/Discretization</b>
function
DistributeDomain
bool
bool DistributeDomain (Domain *, PartitionMap *, bool , std::vector<SmartPtr<GridFunction> >)
bool DistributeDomain (<a href="Domain2d.html">Domain</a> *, <a href="PartitionMap.html">PartitionMap</a> *, bool , std::vector&ltSmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; &gt)<br><br>Registry Group: <b>/ug4/Discretization</b>
function
DistributeDomain
bool
bool DistributeDomain (Domain *, PartitionMap *, bool , std::vector<SmartPtr<GridFunction> >)
bool DistributeDomain (<a href="Domain2d.html">Domain</a> *, <a href="PartitionMap.html">PartitionMap</a> *, bool , std::vector&ltSmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; &gt)<br><br>Registry Group: <b>/ug4/Discretization</b>
function
DistributeDomain
bool
bool DistributeDomain (Domain *, PartitionMap *, bool , std::vector<SmartPtr<GridFunction> >)
bool DistributeDomain (<a href="Domain2d.html">Domain</a> *, <a href="PartitionMap.html">PartitionMap</a> *, bool , std::vector&ltSmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; &gt)<br><br>Registry Group: <b>/ug4/Discretization</b>
function
PartitionDomain_Bisection
bool
bool PartitionDomain_Bisection (Domain *dom, PartitionMap *partitionMap, integer firstAxisToCut)
bool PartitionDomain_Bisection (<a href="Domain2d.html">Domain</a> *dom, <a href="PartitionMap.html">PartitionMap</a> *partitionMap, integer firstAxisToCut)<br><br>tooltip: partitions a domain by repeatedly cutting it along the different axis<br>Registry Group: <b>/ug4/Domain</b>
function
PartitionDomain_Bisection
bool
bool PartitionDomain_Bisection (Domain *dom, PartitionMap *partitionMap, integer firstAxisToCut)
bool PartitionDomain_Bisection (<a href="Domain2d.html">Domain</a> *dom, <a href="PartitionMap.html">PartitionMap</a> *partitionMap, integer firstAxisToCut)<br><br>tooltip: partitions a domain by repeatedly cutting it along the different axis<br>Registry Group: <b>/ug4/Domain</b>
function
PartitionDomain_Bisection
bool
bool PartitionDomain_Bisection (Domain *dom, PartitionMap *partitionMap, integer firstAxisToCut)
bool PartitionDomain_Bisection (<a href="Domain2d.html">Domain</a> *dom, <a href="PartitionMap.html">PartitionMap</a> *partitionMap, integer firstAxisToCut)<br><br>tooltip: partitions a domain by repeatedly cutting it along the different axis<br>Registry Group: <b>/ug4/Domain</b>
function
PartitionDomain_MetisKWay
bool
bool PartitionDomain_MetisKWay (Domain *, PartitionMap *, integer , size_t , integer , integer )
bool PartitionDomain_MetisKWay (<a href="Domain2d.html">Domain</a> *, <a href="PartitionMap.html">PartitionMap</a> *, integer , size_t , integer , integer )<br><br>Registry Group: <b>/ug4/Domain</b>
function
PartitionDomain_MetisKWay
bool
bool PartitionDomain_MetisKWay (Domain *, PartitionMap *, integer , size_t , SmartPtr<PartitionWeighting> )
bool PartitionDomain_MetisKWay (<a href="Domain2d.html">Domain</a> *, <a href="PartitionMap.html">PartitionMap</a> *, integer , size_t , SmartPtr&lt;<a href="PartitionWeighting.html">PartitionWeighting</a>&gt; )<br><br>Registry Group: <b>/ug4/Domain</b>
function
PartitionDomain_MetisKWay
bool
bool PartitionDomain_MetisKWay (Domain *, PartitionMap *, integer , size_t , integer , integer )
bool PartitionDomain_MetisKWay (<a href="Domain2d.html">Domain</a> *, <a href="PartitionMap.html">PartitionMap</a> *, integer , size_t , integer , integer )<br><br>Registry Group: <b>/ug4/Domain</b>
function
PartitionDomain_MetisKWay
bool
bool PartitionDomain_MetisKWay (Domain *, PartitionMap *, integer , size_t , SmartPtr<PartitionWeighting> )
bool PartitionDomain_MetisKWay (<a href="Domain2d.html">Domain</a> *, <a href="PartitionMap.html">PartitionMap</a> *, integer , size_t , SmartPtr&lt;<a href="PartitionWeighting.html">PartitionWeighting</a>&gt; )<br><br>Registry Group: <b>/ug4/Domain</b>
function
PartitionDomain_MetisKWay
bool
bool PartitionDomain_MetisKWay (Domain *, PartitionMap *, integer , size_t , integer , integer )
bool PartitionDomain_MetisKWay (<a href="Domain2d.html">Domain</a> *, <a href="PartitionMap.html">PartitionMap</a> *, integer , size_t , integer , integer )<br><br>Registry Group: <b>/ug4/Domain</b>
function
PartitionDomain_MetisKWay
bool
bool PartitionDomain_MetisKWay (Domain *, PartitionMap *, integer , size_t , SmartPtr<PartitionWeighting> )
bool PartitionDomain_MetisKWay (<a href="Domain2d.html">Domain</a> *, <a href="PartitionMap.html">PartitionMap</a> *, integer , size_t , SmartPtr&lt;<a href="PartitionWeighting.html">PartitionWeighting</a>&gt; )<br><br>Registry Group: <b>/ug4/Domain</b>
function
PartitionDomain_LevelBased
bool
bool PartitionDomain_LevelBased (Domain *domain, PartitionMap *partitionMap, integer numPartitions, size_t level)
bool PartitionDomain_LevelBased (<a href="Domain2d.html">Domain</a> *domain, <a href="PartitionMap.html">PartitionMap</a> *partitionMap, integer numPartitions, size_t level)<br><br>Registry Group: <b>/ug4/Domain</b>
function
PartitionDomain_LevelBased
bool
bool PartitionDomain_LevelBased (Domain *domain, PartitionMap *partitionMap, integer numPartitions, size_t level)
bool PartitionDomain_LevelBased (<a href="Domain2d.html">Domain</a> *domain, <a href="PartitionMap.html">PartitionMap</a> *partitionMap, integer numPartitions, size_t level)<br><br>Registry Group: <b>/ug4/Domain</b>
function
PartitionDomain_LevelBased
bool
bool PartitionDomain_LevelBased (Domain *domain, PartitionMap *partitionMap, integer numPartitions, size_t level)
bool PartitionDomain_LevelBased (<a href="Domain2d.html">Domain</a> *domain, <a href="PartitionMap.html">PartitionMap</a> *partitionMap, integer numPartitions, size_t level)<br><br>Registry Group: <b>/ug4/Domain</b>
function
PartitionDistributedDomain_LevelBased
bool
bool PartitionDistributedDomain_LevelBased (Domain *domain, PartitionMap *partitionMap, integer numPartitions, size_t level)
bool PartitionDistributedDomain_LevelBased (<a href="Domain2d.html">Domain</a> *domain, <a href="PartitionMap.html">PartitionMap</a> *partitionMap, integer numPartitions, size_t level)<br><br>Registry Group: <b>/ug4/Domain</b>
function
PartitionDistributedDomain_LevelBased
bool
bool PartitionDistributedDomain_LevelBased (Domain *domain, PartitionMap *partitionMap, integer numPartitions, size_t level)
bool PartitionDistributedDomain_LevelBased (<a href="Domain2d.html">Domain</a> *domain, <a href="PartitionMap.html">PartitionMap</a> *partitionMap, integer numPartitions, size_t level)<br><br>Registry Group: <b>/ug4/Domain</b>
function
PartitionDistributedDomain_LevelBased
bool
bool PartitionDistributedDomain_LevelBased (Domain *domain, PartitionMap *partitionMap, integer numPartitions, size_t level)
bool PartitionDistributedDomain_LevelBased (<a href="Domain2d.html">Domain</a> *domain, <a href="PartitionMap.html">PartitionMap</a> *partitionMap, integer numPartitions, size_t level)<br><br>Registry Group: <b>/ug4/Domain</b>
function
ScaleDomain
void
void ScaleDomain (Domain *dom, number sx, number sy, number sz)
void ScaleDomain (<a href="Domain2d.html">Domain</a> *dom, number sx, number sy, number sz)<br><br>Registry Group: <b>/ug4/Domain</b>
function
ScaleDomain
void
void ScaleDomain (Domain *dom, number sx, number sy, number sz)
void ScaleDomain (<a href="Domain2d.html">Domain</a> *dom, number sx, number sy, number sz)<br><br>Registry Group: <b>/ug4/Domain</b>
function
ScaleDomain
void
void ScaleDomain (Domain *dom, number sx, number sy, number sz)
void ScaleDomain (<a href="Domain2d.html">Domain</a> *dom, number sx, number sy, number sz)<br><br>Registry Group: <b>/ug4/Domain</b>
function
ScaleDomain
void
void ScaleDomain (Domain *dom, ISelector *sel, const Vec *center, const Vec *scale)
void ScaleDomain (<a href="Domain2d.html">Domain</a> *dom, <a href="ISelector.html">ISelector</a> *sel, const <a href="Vec1d.html">Vec</a> *center, const <a href="Vec1d.html">Vec</a> *scale)<br><br>Registry Group: <b>/ug4/Transform</b>
function
ScaleDomain
void
void ScaleDomain (Domain *dom, ISelector *sel, const Vec *center, const Vec *scale)
void ScaleDomain (<a href="Domain2d.html">Domain</a> *dom, <a href="ISelector.html">ISelector</a> *sel, const <a href="Vec1d.html">Vec</a> *center, const <a href="Vec1d.html">Vec</a> *scale)<br><br>Registry Group: <b>/ug4/Transform</b>
function
ScaleDomain
void
void ScaleDomain (Domain *dom, ISelector *sel, const Vec *center, const Vec *scale)
void ScaleDomain (<a href="Domain2d.html">Domain</a> *dom, <a href="ISelector.html">ISelector</a> *sel, const <a href="Vec1d.html">Vec</a> *center, const <a href="Vec1d.html">Vec</a> *scale)<br><br>Registry Group: <b>/ug4/Transform</b>
function
TranslateDomain
void
void TranslateDomain (Domain *dom, number tx, number ty, number tz)
void TranslateDomain (<a href="Domain2d.html">Domain</a> *dom, number tx, number ty, number tz)<br><br>Registry Group: <b>/ug4/Domain</b>
function
TranslateDomain
void
void TranslateDomain (Domain *dom, number tx, number ty, number tz)
void TranslateDomain (<a href="Domain2d.html">Domain</a> *dom, number tx, number ty, number tz)<br><br>Registry Group: <b>/ug4/Domain</b>
function
TranslateDomain
void
void TranslateDomain (Domain *dom, number tx, number ty, number tz)
void TranslateDomain (<a href="Domain2d.html">Domain</a> *dom, number tx, number ty, number tz)<br><br>Registry Group: <b>/ug4/Domain</b>
function
TranslateDomain
void
void TranslateDomain (Domain *dom, ISelector *sel, const Vec *offset)
void TranslateDomain (<a href="Domain2d.html">Domain</a> *dom, <a href="ISelector.html">ISelector</a> *sel, const <a href="Vec1d.html">Vec</a> *offset)<br><br>Registry Group: <b>/ug4/Transform</b>
function
TranslateDomain
void
void TranslateDomain (Domain *dom, ISelector *sel, const Vec *offset)
void TranslateDomain (<a href="Domain2d.html">Domain</a> *dom, <a href="ISelector.html">ISelector</a> *sel, const <a href="Vec1d.html">Vec</a> *offset)<br><br>Registry Group: <b>/ug4/Transform</b>
function
TranslateDomain
void
void TranslateDomain (Domain *dom, ISelector *sel, const Vec *offset)
void TranslateDomain (<a href="Domain2d.html">Domain</a> *dom, <a href="ISelector.html">ISelector</a> *sel, const <a href="Vec1d.html">Vec</a> *offset)<br><br>Registry Group: <b>/ug4/Transform</b>
function
FaceArea
number
number FaceArea (Domain *Domain, ISubsetHandler *Subset handler, integer Subset index, size_t Grid level)
number FaceArea (<a href="Domain2d.html">Domain</a> *Domain, <a href="ISubsetHandler.html">ISubsetHandler</a> *Subset handler, integer Subset index, size_t Grid level)<br><br>returns Area sum<br>Registry Group: <b>/ug4/Domain</b>
function
FaceArea
number
number FaceArea (Domain *Domaim, integer Subset index, size_t Grid level)
number FaceArea (<a href="Domain2d.html">Domain</a> *Domaim, integer Subset index, size_t Grid level)<br><br>returns Area sum<br>Registry Group: <b>/ug4/Domain</b>
function
FaceArea
number
number FaceArea (Domain *Domain, integer Subset index)
number FaceArea (<a href="Domain2d.html">Domain</a> *Domain, integer Subset index)<br><br>returns Area sum<br>Registry Group: <b>/ug4/Domain</b>
function
FaceArea
number
number FaceArea (Domain *Domain, ISelector *Selector)
number FaceArea (<a href="Domain2d.html">Domain</a> *Domain, <a href="ISelector.html">ISelector</a> *Selector)<br><br>returns Area sum<br>Registry Group: <b>/ug4/Domain</b>
function
FaceArea
number
number FaceArea (Domain *Domain, ISubsetHandler *Subset handler, integer Subset index, size_t Grid level)
number FaceArea (<a href="Domain2d.html">Domain</a> *Domain, <a href="ISubsetHandler.html">ISubsetHandler</a> *Subset handler, integer Subset index, size_t Grid level)<br><br>returns Area sum<br>Registry Group: <b>/ug4/Domain</b>
function
FaceArea
number
number FaceArea (Domain *Domaim, integer Subset index, size_t Grid level)
number FaceArea (<a href="Domain2d.html">Domain</a> *Domaim, integer Subset index, size_t Grid level)<br><br>returns Area sum<br>Registry Group: <b>/ug4/Domain</b>
function
FaceArea
number
number FaceArea (Domain *Domain, integer Subset index)
number FaceArea (<a href="Domain2d.html">Domain</a> *Domain, integer Subset index)<br><br>returns Area sum<br>Registry Group: <b>/ug4/Domain</b>
function
FaceArea
number
number FaceArea (Domain *Domain, ISelector *Selector)
number FaceArea (<a href="Domain2d.html">Domain</a> *Domain, <a href="ISelector.html">ISelector</a> *Selector)<br><br>returns Area sum<br>Registry Group: <b>/ug4/Domain</b>
function
FaceArea
number
number FaceArea (Domain *Domain, ISubsetHandler *Subset handler, integer Subset index, size_t Grid level)
number FaceArea (<a href="Domain2d.html">Domain</a> *Domain, <a href="ISubsetHandler.html">ISubsetHandler</a> *Subset handler, integer Subset index, size_t Grid level)<br><br>returns Area sum<br>Registry Group: <b>/ug4/Domain</b>
function
FaceArea
number
number FaceArea (Domain *Domaim, integer Subset index, size_t Grid level)
number FaceArea (<a href="Domain2d.html">Domain</a> *Domaim, integer Subset index, size_t Grid level)<br><br>returns Area sum<br>Registry Group: <b>/ug4/Domain</b>
function
FaceArea
number
number FaceArea (Domain *Domain, integer Subset index)
number FaceArea (<a href="Domain2d.html">Domain</a> *Domain, integer Subset index)<br><br>returns Area sum<br>Registry Group: <b>/ug4/Domain</b>
function
FaceArea
number
number FaceArea (Domain *Domain, ISelector *Selector)
number FaceArea (<a href="Domain2d.html">Domain</a> *Domain, <a href="ISelector.html">ISelector</a> *Selector)<br><br>returns Area sum<br>Registry Group: <b>/ug4/Domain</b>
function
TestDomainInterfaces
bool
bool TestDomainInterfaces (Domain *)
bool TestDomainInterfaces (<a href="Domain2d.html">Domain</a> *)<br><br>Registry Group: <b>/ug4/Domain</b>
function
TestDomainInterfaces
bool
bool TestDomainInterfaces (Domain *)
bool TestDomainInterfaces (<a href="Domain2d.html">Domain</a> *)<br><br>Registry Group: <b>/ug4/Domain</b>
function
TestDomainInterfaces
bool
bool TestDomainInterfaces (Domain *)
bool TestDomainInterfaces (<a href="Domain2d.html">Domain</a> *)<br><br>Registry Group: <b>/ug4/Domain</b>
function
MinimizeMemoryFootprint
void
void MinimizeMemoryFootprint (Domain *)
void MinimizeMemoryFootprint (<a href="Domain2d.html">Domain</a> *)<br><br>Registry Group: <b>/ug4/Domain</b>
function
MinimizeMemoryFootprint
void
void MinimizeMemoryFootprint (Domain *)
void MinimizeMemoryFootprint (<a href="Domain2d.html">Domain</a> *)<br><br>Registry Group: <b>/ug4/Domain</b>
function
MinimizeMemoryFootprint
void
void MinimizeMemoryFootprint (Domain *)
void MinimizeMemoryFootprint (<a href="Domain2d.html">Domain</a> *)<br><br>Registry Group: <b>/ug4/Domain</b>
function
PartitionDomain_RegularGrid
bool
bool PartitionDomain_RegularGrid (Domain *, PartitionMap *, integer , integer , bool )
bool PartitionDomain_RegularGrid (<a href="Domain2d.html">Domain</a> *, <a href="PartitionMap.html">PartitionMap</a> *, integer , integer , bool )<br><br>Registry Group: <b>/ug4/Domain</b>
function
PartitionDomain_RegularGrid
bool
bool PartitionDomain_RegularGrid (Domain *, PartitionMap *, integer , integer , bool )
bool PartitionDomain_RegularGrid (<a href="Domain2d.html">Domain</a> *, <a href="PartitionMap.html">PartitionMap</a> *, integer , integer , bool )<br><br>Registry Group: <b>/ug4/Domain</b>
function
PrintIdentification
void
void PrintIdentification (Grid *)
void PrintIdentification (<a href="Grid.html">Grid</a> *)<br><br>Registry Group: <b>/ug4/Periodic</b>
function
IdentifySubsets
void
void IdentifySubsets (Domain *, integer , integer )
void IdentifySubsets (<a href="Domain2d.html">Domain</a> *, integer , integer )<br><br>Registry Group: <b>/ug4/Periodic</b>
function
IdentifySubsets
void
void IdentifySubsets (Domain *, c_string , c_string )
void IdentifySubsets (<a href="Domain2d.html">Domain</a> *, c_string , c_string )<br><br>Registry Group: <b>/ug4/Periodic</b>
function
IdentifySubsets
void
void IdentifySubsets (Domain *, integer , integer )
void IdentifySubsets (<a href="Domain2d.html">Domain</a> *, integer , integer )<br><br>Registry Group: <b>/ug4/Periodic</b>
function
IdentifySubsets
void
void IdentifySubsets (Domain *, c_string , c_string )
void IdentifySubsets (<a href="Domain2d.html">Domain</a> *, c_string , c_string )<br><br>Registry Group: <b>/ug4/Periodic</b>
function
IdentifySubsets
void
void IdentifySubsets (Domain *, integer , integer )
void IdentifySubsets (<a href="Domain2d.html">Domain</a> *, integer , integer )<br><br>Registry Group: <b>/ug4/Periodic</b>
function
IdentifySubsets
void
void IdentifySubsets (Domain *, c_string , c_string )
void IdentifySubsets (<a href="Domain2d.html">Domain</a> *, c_string , c_string )<br><br>Registry Group: <b>/ug4/Periodic</b>
function
MarkForRefinement_All
void
void MarkForRefinement_All (SmartPtr<IRefiner> ref)
void MarkForRefinement_All (SmartPtr&lt;<a href="IRefiner.html">IRefiner</a>&gt; ref)<br><br>Registry Group: <b>/ug4/Refinement</b>
function
GlobalDomainRefiner
SmartPtr<IRefiner>
SmartPtr<IRefiner> GlobalDomainRefiner (Domain *dom)
SmartPtr&lt;<a href="IRefiner.html">IRefiner</a>&gt; GlobalDomainRefiner (<a href="Domain2d.html">Domain</a> *dom)<br><br>returns new GlobalDomainRefiner<br>Registry Group: <b>/ug4/Refinement</b>
function
GlobalDomainRefiner
SmartPtr<IRefiner>
SmartPtr<IRefiner> GlobalDomainRefiner (Domain *dom)
SmartPtr&lt;<a href="IRefiner.html">IRefiner</a>&gt; GlobalDomainRefiner (<a href="Domain2d.html">Domain</a> *dom)<br><br>returns new GlobalDomainRefiner<br>Registry Group: <b>/ug4/Refinement</b>
function
GlobalDomainRefiner
SmartPtr<IRefiner>
SmartPtr<IRefiner> GlobalDomainRefiner (Domain *dom)
SmartPtr&lt;<a href="IRefiner.html">IRefiner</a>&gt; GlobalDomainRefiner (<a href="Domain2d.html">Domain</a> *dom)<br><br>returns new GlobalDomainRefiner<br>Registry Group: <b>/ug4/Refinement</b>
function
HangingNodeDomainRefiner
SmartPtr<IRefiner>
SmartPtr<IRefiner> HangingNodeDomainRefiner (Domain *dom)
SmartPtr&lt;<a href="IRefiner.html">IRefiner</a>&gt; HangingNodeDomainRefiner (<a href="Domain2d.html">Domain</a> *dom)<br><br>returns new HangingNodeDomainRefiner<br>Registry Group: <b>/ug4/Refinement</b>
function
HangingNodeDomainRefiner
SmartPtr<IRefiner>
SmartPtr<IRefiner> HangingNodeDomainRefiner (Domain *dom)
SmartPtr&lt;<a href="IRefiner.html">IRefiner</a>&gt; HangingNodeDomainRefiner (<a href="Domain2d.html">Domain</a> *dom)<br><br>returns new HangingNodeDomainRefiner<br>Registry Group: <b>/ug4/Refinement</b>
function
HangingNodeDomainRefiner
SmartPtr<IRefiner>
SmartPtr<IRefiner> HangingNodeDomainRefiner (Domain *dom)
SmartPtr&lt;<a href="IRefiner.html">IRefiner</a>&gt; HangingNodeDomainRefiner (<a href="Domain2d.html">Domain</a> *dom)<br><br>returns new HangingNodeDomainRefiner<br>Registry Group: <b>/ug4/Refinement</b>
function
GlobalFracturedDomainRefiner
SmartPtr<GlobalFracturedMediumRefiner>
SmartPtr<GlobalFracturedMediumRefiner> GlobalFracturedDomainRefiner (Domain *dom)
SmartPtr&lt;<a href="GlobalFracturedMediumRefiner.html">GlobalFracturedMediumRefiner</a>&gt; GlobalFracturedDomainRefiner (<a href="Domain2d.html">Domain</a> *dom)<br><br>returns new GlobalFracturedDomainRefiner<br>Registry Group: <b>/ug4/Refinement</b>
function
GlobalFracturedDomainRefiner
SmartPtr<GlobalFracturedMediumRefiner>
SmartPtr<GlobalFracturedMediumRefiner> GlobalFracturedDomainRefiner (Domain *dom)
SmartPtr&lt;<a href="GlobalFracturedMediumRefiner.html">GlobalFracturedMediumRefiner</a>&gt; GlobalFracturedDomainRefiner (<a href="Domain2d.html">Domain</a> *dom)<br><br>returns new GlobalFracturedDomainRefiner<br>Registry Group: <b>/ug4/Refinement</b>
function
GlobalFracturedDomainRefiner
SmartPtr<GlobalFracturedMediumRefiner>
SmartPtr<GlobalFracturedMediumRefiner> GlobalFracturedDomainRefiner (Domain *dom)
SmartPtr&lt;<a href="GlobalFracturedMediumRefiner.html">GlobalFracturedMediumRefiner</a>&gt; GlobalFracturedDomainRefiner (<a href="Domain2d.html">Domain</a> *dom)<br><br>returns new GlobalFracturedDomainRefiner<br>Registry Group: <b>/ug4/Refinement</b>
function
AdaptiveRegularDomainRefiner
SmartPtr<IRefiner>
SmartPtr<IRefiner> AdaptiveRegularDomainRefiner (Domain *dom)
SmartPtr&lt;<a href="IRefiner.html">IRefiner</a>&gt; AdaptiveRegularDomainRefiner (<a href="Domain2d.html">Domain</a> *dom)<br><br>returns new AdaptiveRegularDomainRefiner<br>Registry Group: <b>/ug4/Refinement</b>
function
AdaptiveRegularDomainRefiner
SmartPtr<IRefiner>
SmartPtr<IRefiner> AdaptiveRegularDomainRefiner (Domain *dom)
SmartPtr&lt;<a href="IRefiner.html">IRefiner</a>&gt; AdaptiveRegularDomainRefiner (<a href="Domain2d.html">Domain</a> *dom)<br><br>returns new AdaptiveRegularDomainRefiner<br>Registry Group: <b>/ug4/Refinement</b>
function
AdaptiveRegularDomainRefiner
SmartPtr<IRefiner>
SmartPtr<IRefiner> AdaptiveRegularDomainRefiner (Domain *dom)
SmartPtr&lt;<a href="IRefiner.html">IRefiner</a>&gt; AdaptiveRegularDomainRefiner (<a href="Domain2d.html">Domain</a> *dom)<br><br>returns new AdaptiveRegularDomainRefiner<br>Registry Group: <b>/ug4/Refinement</b>
function
MarkForRefinement_VerticesInSphere
void
void MarkForRefinement_VerticesInSphere (Domain *dom, SmartPtr<IRefiner> refiner, const Vec *center, number radius)
void MarkForRefinement_VerticesInSphere (<a href="Domain2d.html">Domain</a> *dom, SmartPtr&lt;<a href="IRefiner.html">IRefiner</a>&gt; refiner, const <a href="Vec1d.html">Vec</a> *center, number radius)<br><br>Registry Group: <b>/ug4/Refinement</b>
function
MarkForRefinement_VerticesInSphere
void
void MarkForRefinement_VerticesInSphere (Domain *dom, SmartPtr<IRefiner> refiner, const Vec *center, number radius)
void MarkForRefinement_VerticesInSphere (<a href="Domain2d.html">Domain</a> *dom, SmartPtr&lt;<a href="IRefiner.html">IRefiner</a>&gt; refiner, const <a href="Vec1d.html">Vec</a> *center, number radius)<br><br>Registry Group: <b>/ug4/Refinement</b>
function
MarkForRefinement_VerticesInSphere
void
void MarkForRefinement_VerticesInSphere (Domain *dom, SmartPtr<IRefiner> refiner, const Vec *center, number radius)
void MarkForRefinement_VerticesInSphere (<a href="Domain2d.html">Domain</a> *dom, SmartPtr&lt;<a href="IRefiner.html">IRefiner</a>&gt; refiner, const <a href="Vec1d.html">Vec</a> *center, number radius)<br><br>Registry Group: <b>/ug4/Refinement</b>
function
MarkForRefinement_EdgesInSphere
void
void MarkForRefinement_EdgesInSphere (Domain *dom, SmartPtr<IRefiner> refiner, const Vec *center, number radius)
void MarkForRefinement_EdgesInSphere (<a href="Domain2d.html">Domain</a> *dom, SmartPtr&lt;<a href="IRefiner.html">IRefiner</a>&gt; refiner, const <a href="Vec1d.html">Vec</a> *center, number radius)<br><br>Registry Group: <b>/ug4/Refinement</b>
function
MarkForRefinement_EdgesInSphere
void
void MarkForRefinement_EdgesInSphere (Domain *dom, SmartPtr<IRefiner> refiner, const Vec *center, number radius)
void MarkForRefinement_EdgesInSphere (<a href="Domain2d.html">Domain</a> *dom, SmartPtr&lt;<a href="IRefiner.html">IRefiner</a>&gt; refiner, const <a href="Vec1d.html">Vec</a> *center, number radius)<br><br>Registry Group: <b>/ug4/Refinement</b>
function
MarkForRefinement_EdgesInSphere
void
void MarkForRefinement_EdgesInSphere (Domain *dom, SmartPtr<IRefiner> refiner, const Vec *center, number radius)
void MarkForRefinement_EdgesInSphere (<a href="Domain2d.html">Domain</a> *dom, SmartPtr&lt;<a href="IRefiner.html">IRefiner</a>&gt; refiner, const <a href="Vec1d.html">Vec</a> *center, number radius)<br><br>Registry Group: <b>/ug4/Refinement</b>
function
MarkForRefinement_FacesInSphere
void
void MarkForRefinement_FacesInSphere (Domain *dom, SmartPtr<IRefiner> refiner, const Vec *center, number radius)
void MarkForRefinement_FacesInSphere (<a href="Domain2d.html">Domain</a> *dom, SmartPtr&lt;<a href="IRefiner.html">IRefiner</a>&gt; refiner, const <a href="Vec1d.html">Vec</a> *center, number radius)<br><br>Registry Group: <b>/ug4/Refinement</b>
function
MarkForRefinement_FacesInSphere
void
void MarkForRefinement_FacesInSphere (Domain *dom, SmartPtr<IRefiner> refiner, const Vec *center, number radius)
void MarkForRefinement_FacesInSphere (<a href="Domain2d.html">Domain</a> *dom, SmartPtr&lt;<a href="IRefiner.html">IRefiner</a>&gt; refiner, const <a href="Vec1d.html">Vec</a> *center, number radius)<br><br>Registry Group: <b>/ug4/Refinement</b>
function
MarkForRefinement_FacesInSphere
void
void MarkForRefinement_FacesInSphere (Domain *dom, SmartPtr<IRefiner> refiner, const Vec *center, number radius)
void MarkForRefinement_FacesInSphere (<a href="Domain2d.html">Domain</a> *dom, SmartPtr&lt;<a href="IRefiner.html">IRefiner</a>&gt; refiner, const <a href="Vec1d.html">Vec</a> *center, number radius)<br><br>Registry Group: <b>/ug4/Refinement</b>
function
MarkForRefinement_VolumesInSphere
void
void MarkForRefinement_VolumesInSphere (Domain *dom, SmartPtr<IRefiner> refiner, const Vec *center, number radius)
void MarkForRefinement_VolumesInSphere (<a href="Domain2d.html">Domain</a> *dom, SmartPtr&lt;<a href="IRefiner.html">IRefiner</a>&gt; refiner, const <a href="Vec1d.html">Vec</a> *center, number radius)<br><br>Registry Group: <b>/ug4/Refinement</b>
function
MarkForRefinement_VolumesInSphere
void
void MarkForRefinement_VolumesInSphere (Domain *dom, SmartPtr<IRefiner> refiner, const Vec *center, number radius)
void MarkForRefinement_VolumesInSphere (<a href="Domain2d.html">Domain</a> *dom, SmartPtr&lt;<a href="IRefiner.html">IRefiner</a>&gt; refiner, const <a href="Vec1d.html">Vec</a> *center, number radius)<br><br>Registry Group: <b>/ug4/Refinement</b>
function
MarkForRefinement_VolumesInSphere
void
void MarkForRefinement_VolumesInSphere (Domain *dom, SmartPtr<IRefiner> refiner, const Vec *center, number radius)
void MarkForRefinement_VolumesInSphere (<a href="Domain2d.html">Domain</a> *dom, SmartPtr&lt;<a href="IRefiner.html">IRefiner</a>&gt; refiner, const <a href="Vec1d.html">Vec</a> *center, number radius)<br><br>Registry Group: <b>/ug4/Refinement</b>
function
MarkForRefinement_VerticesInCube
void
void MarkForRefinement_VerticesInCube (Domain *dom, SmartPtr<IRefiner> refiner, const Vec *min, const Vec *max)
void MarkForRefinement_VerticesInCube (<a href="Domain2d.html">Domain</a> *dom, SmartPtr&lt;<a href="IRefiner.html">IRefiner</a>&gt; refiner, const <a href="Vec1d.html">Vec</a> *min, const <a href="Vec1d.html">Vec</a> *max)<br><br>Registry Group: <b>/ug4/Refinement</b>
function
MarkForRefinement_VerticesInCube
void
void MarkForRefinement_VerticesInCube (Domain *dom, SmartPtr<IRefiner> refiner, const Vec *min, const Vec *max)
void MarkForRefinement_VerticesInCube (<a href="Domain2d.html">Domain</a> *dom, SmartPtr&lt;<a href="IRefiner.html">IRefiner</a>&gt; refiner, const <a href="Vec1d.html">Vec</a> *min, const <a href="Vec1d.html">Vec</a> *max)<br><br>Registry Group: <b>/ug4/Refinement</b>
function
MarkForRefinement_VerticesInCube
void
void MarkForRefinement_VerticesInCube (Domain *dom, SmartPtr<IRefiner> refiner, const Vec *min, const Vec *max)
void MarkForRefinement_VerticesInCube (<a href="Domain2d.html">Domain</a> *dom, SmartPtr&lt;<a href="IRefiner.html">IRefiner</a>&gt; refiner, const <a href="Vec1d.html">Vec</a> *min, const <a href="Vec1d.html">Vec</a> *max)<br><br>Registry Group: <b>/ug4/Refinement</b>
function
MarkForRefinement_AnisotropicElements
void
void MarkForRefinement_AnisotropicElements (Domain *dom, SmartPtr<IRefiner> refiner, number sizeRatio)
void MarkForRefinement_AnisotropicElements (<a href="Domain2d.html">Domain</a> *dom, SmartPtr&lt;<a href="IRefiner.html">IRefiner</a>&gt; refiner, number sizeRatio)<br><br>Registry Group: <b>/ug4/Refinement</b>
function
MarkForRefinement_AnisotropicElements
void
void MarkForRefinement_AnisotropicElements (Domain *dom, SmartPtr<IRefiner> refiner, number sizeRatio)
void MarkForRefinement_AnisotropicElements (<a href="Domain2d.html">Domain</a> *dom, SmartPtr&lt;<a href="IRefiner.html">IRefiner</a>&gt; refiner, number sizeRatio)<br><br>Registry Group: <b>/ug4/Refinement</b>
function
MarkForRefinement_AnisotropicElements
void
void MarkForRefinement_AnisotropicElements (Domain *dom, SmartPtr<IRefiner> refiner, number sizeRatio)
void MarkForRefinement_AnisotropicElements (<a href="Domain2d.html">Domain</a> *dom, SmartPtr&lt;<a href="IRefiner.html">IRefiner</a>&gt; refiner, number sizeRatio)<br><br>Registry Group: <b>/ug4/Refinement</b>
function
MarkForRefinement_AnisotropicElements2
void
void MarkForRefinement_AnisotropicElements2 (Domain *dom, SmartPtr<IRefiner> refiner, number sizeRatio)
void MarkForRefinement_AnisotropicElements2 (<a href="Domain2d.html">Domain</a> *dom, SmartPtr&lt;<a href="IRefiner.html">IRefiner</a>&gt; refiner, number sizeRatio)<br><br>Registry Group: <b>/ug4/Refinement</b>
function
MarkForRefinement_AnisotropicElements2
void
void MarkForRefinement_AnisotropicElements2 (Domain *dom, SmartPtr<IRefiner> refiner, number sizeRatio)
void MarkForRefinement_AnisotropicElements2 (<a href="Domain2d.html">Domain</a> *dom, SmartPtr&lt;<a href="IRefiner.html">IRefiner</a>&gt; refiner, number sizeRatio)<br><br>Registry Group: <b>/ug4/Refinement</b>
function
MarkForRefinement_AnisotropicElements2
void
void MarkForRefinement_AnisotropicElements2 (Domain *dom, SmartPtr<IRefiner> refiner, number sizeRatio)
void MarkForRefinement_AnisotropicElements2 (<a href="Domain2d.html">Domain</a> *dom, SmartPtr&lt;<a href="IRefiner.html">IRefiner</a>&gt; refiner, number sizeRatio)<br><br>Registry Group: <b>/ug4/Refinement</b>
function
SelectDomainElements
void
void SelectDomainElements (ISelector *sel, bool bSelect, bool selectVrts, bool selectEdges, bool selectFaces, bool selectVolumes)
void SelectDomainElements (<a href="ISelector.html">ISelector</a> *sel, bool bSelect, bool selectVrts, bool selectEdges, bool selectFaces, bool selectVolumes)<br><br>Registry Group: <b>/ug4/Selection</b>
function
SelectAssociatedElements
void
void SelectAssociatedElements (ISelector *sel, bool bSelect, bool selectVrts, bool selectEdges, bool selectFaces)
void SelectAssociatedElements (<a href="ISelector.html">ISelector</a> *sel, bool bSelect, bool selectVrts, bool selectEdges, bool selectFaces)<br><br>Registry Group: <b>/ug4/Selection</b>
function
SelectDomainSubset
void
void SelectDomainSubset (ISelector *sel, Domain *dom, integer subsetIndex, bool bSelect, bool selectVrts, bool selectEdges, bool selectFaces, bool selectVolumes)
void SelectDomainSubset (<a href="ISelector.html">ISelector</a> *sel, <a href="Domain2d.html">Domain</a> *dom, integer subsetIndex, bool bSelect, bool selectVrts, bool selectEdges, bool selectFaces, bool selectVolumes)<br><br>Registry Group: <b>/ug4/Selection</b>
function
SelectDomainSubset
void
void SelectDomainSubset (ISelector *sel, Domain *dom, integer subsetIndex, bool bSelect, bool selectVrts, bool selectEdges, bool selectFaces, bool selectVolumes)
void SelectDomainSubset (<a href="ISelector.html">ISelector</a> *sel, <a href="Domain2d.html">Domain</a> *dom, integer subsetIndex, bool bSelect, bool selectVrts, bool selectEdges, bool selectFaces, bool selectVolumes)<br><br>Registry Group: <b>/ug4/Selection</b>
function
SelectDomainSubset
void
void SelectDomainSubset (ISelector *sel, Domain *dom, integer subsetIndex, bool bSelect, bool selectVrts, bool selectEdges, bool selectFaces, bool selectVolumes)
void SelectDomainSubset (<a href="ISelector.html">ISelector</a> *sel, <a href="Domain2d.html">Domain</a> *dom, integer subsetIndex, bool bSelect, bool selectVrts, bool selectEdges, bool selectFaces, bool selectVolumes)<br><br>Registry Group: <b>/ug4/Selection</b>
function
ScaleDomainSqrtWeighting
void
void ScaleDomainSqrtWeighting (Domain *dom, ISelector *sel, const Vec *center, const Vec *scale)
void ScaleDomainSqrtWeighting (<a href="Domain2d.html">Domain</a> *dom, <a href="ISelector.html">ISelector</a> *sel, const <a href="Vec1d.html">Vec</a> *center, const <a href="Vec1d.html">Vec</a> *scale)<br><br>Registry Group: <b>/ug4/Transform</b>
function
ScaleDomainSqrtWeighting
void
void ScaleDomainSqrtWeighting (Domain *dom, ISelector *sel, const Vec *center, const Vec *scale)
void ScaleDomainSqrtWeighting (<a href="Domain2d.html">Domain</a> *dom, <a href="ISelector.html">ISelector</a> *sel, const <a href="Vec1d.html">Vec</a> *center, const <a href="Vec1d.html">Vec</a> *scale)<br><br>Registry Group: <b>/ug4/Transform</b>
function
ScaleDomainSqrtWeighting
void
void ScaleDomainSqrtWeighting (Domain *dom, ISelector *sel, const Vec *center, const Vec *scale)
void ScaleDomainSqrtWeighting (<a href="Domain2d.html">Domain</a> *dom, <a href="ISelector.html">ISelector</a> *sel, const <a href="Vec1d.html">Vec</a> *center, const <a href="Vec1d.html">Vec</a> *scale)<br><br>Registry Group: <b>/ug4/Transform</b>
function
ScaleDomainWeighting
void
void ScaleDomainWeighting (Domain *dom, ISelector *sel, const Vec *center, const Vec *scale)
void ScaleDomainWeighting (<a href="Domain2d.html">Domain</a> *dom, <a href="ISelector.html">ISelector</a> *sel, const <a href="Vec1d.html">Vec</a> *center, const <a href="Vec1d.html">Vec</a> *scale)<br><br>Registry Group: <b>/ug4/Transform</b>
function
ScaleDomainWeighting
void
void ScaleDomainWeighting (Domain *dom, ISelector *sel, const Vec *center, const Vec *scale)
void ScaleDomainWeighting (<a href="Domain2d.html">Domain</a> *dom, <a href="ISelector.html">ISelector</a> *sel, const <a href="Vec1d.html">Vec</a> *center, const <a href="Vec1d.html">Vec</a> *scale)<br><br>Registry Group: <b>/ug4/Transform</b>
function
ScaleDomainWeighting
void
void ScaleDomainWeighting (Domain *dom, ISelector *sel, const Vec *center, const Vec *scale)
void ScaleDomainWeighting (<a href="Domain2d.html">Domain</a> *dom, <a href="ISelector.html">ISelector</a> *sel, const <a href="Vec1d.html">Vec</a> *center, const <a href="Vec1d.html">Vec</a> *scale)<br><br>Registry Group: <b>/ug4/Transform</b>
function
ScaleDomainSquaredWeighting
void
void ScaleDomainSquaredWeighting (Domain *dom, ISelector *sel, const Vec *center, const Vec *scale)
void ScaleDomainSquaredWeighting (<a href="Domain2d.html">Domain</a> *dom, <a href="ISelector.html">ISelector</a> *sel, const <a href="Vec1d.html">Vec</a> *center, const <a href="Vec1d.html">Vec</a> *scale)<br><br>Registry Group: <b>/ug4/Transform</b>
function
ScaleDomainSquaredWeighting
void
void ScaleDomainSquaredWeighting (Domain *dom, ISelector *sel, const Vec *center, const Vec *scale)
void ScaleDomainSquaredWeighting (<a href="Domain2d.html">Domain</a> *dom, <a href="ISelector.html">ISelector</a> *sel, const <a href="Vec1d.html">Vec</a> *center, const <a href="Vec1d.html">Vec</a> *scale)<br><br>Registry Group: <b>/ug4/Transform</b>
function
ScaleDomainSquaredWeighting
void
void ScaleDomainSquaredWeighting (Domain *dom, ISelector *sel, const Vec *center, const Vec *scale)
void ScaleDomainSquaredWeighting (<a href="Domain2d.html">Domain</a> *dom, <a href="ISelector.html">ISelector</a> *sel, const <a href="Vec1d.html">Vec</a> *center, const <a href="Vec1d.html">Vec</a> *scale)<br><br>Registry Group: <b>/ug4/Transform</b>
function
MetisIsAvailable
bool
bool MetisIsAvailable ()
bool MetisIsAvailable ()<br><br>Registry Group: <b>/ug4/LoadBalancing</b>
function
ParmetisIsAvailable
bool
bool ParmetisIsAvailable ()
bool ParmetisIsAvailable ()<br><br>Registry Group: <b>/ug4/LoadBalancing</b>
function
GetProfileNode
const UGProfileNode*
const UGProfileNode *GetProfileNode (c_string )
const <a href="UGProfileNode.html">UGProfileNode</a> *GetProfileNode (c_string )<br><br>returns a profile node<br>Registry Group: <b>/ug4/Util/Profiler</b>
function
GetProfilerAvailable
bool
bool GetProfilerAvailable ()
bool GetProfilerAvailable ()<br><br>returns true if profiler available<br>Registry Group: <b>/ug4/Util/Profiler</b>
function
SetOutputProfileStats
void
void SetOutputProfileStats (bool bOutput)
void SetOutputProfileStats (bool bOutput)<br><br>tooltip: if set to true and profiler available, profile stats are printed at the end of the program. true is default<br>Registry Group: <b>/ug4/Util/Profiler</b>
function
WriteProfileData
void
void WriteProfileData (c_string filename.pdxml)
void WriteProfileData (c_string filename.pdxml)<br><br>tooltip: writes a XML-file with profile data viewable with the ShinyProfileViewer. Pick a filename ending with .pdxml<br>Registry Group: <b>/ug4/Util/Profiler</b>
function
GetLogAssistant
LogAssistant*
LogAssistant *GetLogAssistant ()
<a href="LogAssistant.html">LogAssistant</a> *GetLogAssistant ()<br><br>returns the log assistant<br>Registry Group: <b>/ug4/Util/Log</b>
function
GetClockS
number
number GetClockS ()
number GetClockS ()<br><br>Registry Group: <b>/ug4/Util/Log</b>
function
PrintLUA
void
void PrintLUA ()
void PrintLUA ()<br><br>Registry Group: <b>/ug4/Util/Log</b>
function
DefinedUG_DEBUG
bool
bool DefinedUG_DEBUG ()
bool DefinedUG_DEBUG ()<br><br>Registry Group: <b>/ug4/Util/Internal</b>
function
DefinedUG_ENABLE_DEBUG_LOGS
bool
bool DefinedUG_ENABLE_DEBUG_LOGS ()
bool DefinedUG_ENABLE_DEBUG_LOGS ()<br><br>Registry Group: <b>/ug4/Util/Internal</b>
function
IsDefinedUG_DEBUG
bool
bool IsDefinedUG_DEBUG ()
bool IsDefinedUG_DEBUG ()<br><br>Registry Group: <b>/ug4/Util/Internal</b>
function
IsDefinedUG_PARALLEL
bool
bool IsDefinedUG_PARALLEL ()
bool IsDefinedUG_PARALLEL ()<br><br>Registry Group: <b>/ug4/Util/Internal</b>
function
IsDefinedUG_DIM_1
bool
bool IsDefinedUG_DIM_1 ()
bool IsDefinedUG_DIM_1 ()<br><br>Registry Group: <b>/ug4/Util/Internal</b>
function
IsDefinedUG_DIM_2
bool
bool IsDefinedUG_DIM_2 ()
bool IsDefinedUG_DIM_2 ()<br><br>Registry Group: <b>/ug4/Util/Internal</b>
function
IsDefinedUG_DIM_3
bool
bool IsDefinedUG_DIM_3 ()
bool IsDefinedUG_DIM_3 ()<br><br>Registry Group: <b>/ug4/Util/Internal</b>
function
IsDefinedUG_CPU_1
bool
bool IsDefinedUG_CPU_1 ()
bool IsDefinedUG_CPU_1 ()<br><br>Registry Group: <b>/ug4/Util/Internal</b>
function
IsDefinedUG_CPU_2
bool
bool IsDefinedUG_CPU_2 ()
bool IsDefinedUG_CPU_2 ()<br><br>Registry Group: <b>/ug4/Util/Internal</b>
function
IsDefinedUG_CPU_3
bool
bool IsDefinedUG_CPU_3 ()
bool IsDefinedUG_CPU_3 ()<br><br>Registry Group: <b>/ug4/Util/Internal</b>
function
IsDefinedUG_ENABLE_DEBUG_LOGS
bool
bool IsDefinedUG_ENABLE_DEBUG_LOGS ()
bool IsDefinedUG_ENABLE_DEBUG_LOGS ()<br><br>Registry Group: <b>/ug4/Util/Internal</b>
function
IsDefinedLAPACK_AVAILABLE
bool
bool IsDefinedLAPACK_AVAILABLE ()
bool IsDefinedLAPACK_AVAILABLE ()<br><br>Registry Group: <b>/ug4/Util/Internal</b>
function
IsDefinedBLAS_AVAILABLE
bool
bool IsDefinedBLAS_AVAILABLE ()
bool IsDefinedBLAS_AVAILABLE ()<br><br>Registry Group: <b>/ug4/Util/Internal</b>
function
IsDefinedUG_METIS
bool
bool IsDefinedUG_METIS ()
bool IsDefinedUG_METIS ()<br><br>Registry Group: <b>/ug4/Util/Internal</b>
function
IsDefinedUG_HYPRE
bool
bool IsDefinedUG_HYPRE ()
bool IsDefinedUG_HYPRE ()<br><br>Registry Group: <b>/ug4/Util/Internal</b>
function
IsDefinedUG_HLIBPRO
bool
bool IsDefinedUG_HLIBPRO ()
bool IsDefinedUG_HLIBPRO ()<br><br>Registry Group: <b>/ug4/Util/Internal</b>
function
PrintBuildConfiguration
void
void PrintBuildConfiguration ()
void PrintBuildConfiguration ()<br><br>Registry Group: <b>/ug4/Util/Internal</b>
function
PrintBuildConfigurationExtended
void
void PrintBuildConfigurationExtended ()
void PrintBuildConfigurationExtended ()<br><br>Registry Group: <b>/ug4/Util/Internal</b>
function
GetSVNRevision
string
std_string GetSVNRevision ()
std_string GetSVNRevision ()<br><br>Registry Group: <b>/ug4/Util/Internal</b>
function
GetCompileDate
string
std_string GetCompileDate ()
std_string GetCompileDate ()<br><br>Registry Group: <b>/ug4/Util/Internal</b>
function
GetBuildHostname
string
std_string GetBuildHostname ()
std_string GetBuildHostname ()<br><br>Registry Group: <b>/ug4/Util/Internal</b>
function
LevenshteinDistance
unknown
size_t LevenshteinDistance (std_string , std_string )
size_t LevenshteinDistance (std_string , std_string )<br><br>Registry Group: <b>/ug4/Util/Internal</b>
function
ug_backtrace
void
void ug_backtrace ()
void ug_backtrace ()<br><br>Registry Group: <b>/ug4/Util/Internal</b>
function
VecScaleAssign
void
void VecScaleAssign (Vector *, number , const Vector *)
void VecScaleAssign (<a href="VectorCPU1.html">Vector</a> *, number , const <a href="VectorCPU1.html">Vector</a> *)<br><br>Registry Group: <b>/ug4/Algebra</b>
function
VecScaleAssign
void
void VecScaleAssign (Vector *, number , const Vector *)
void VecScaleAssign (<a href="VectorCPU1.html">Vector</a> *, number , const <a href="VectorCPU1.html">Vector</a> *)<br><br>Registry Group: <b>/ug4/Algebra</b>
function
VecScaleAssign
void
void VecScaleAssign (Vector *, number , const Vector *)
void VecScaleAssign (<a href="VectorCPU1.html">Vector</a> *, number , const <a href="VectorCPU1.html">Vector</a> *)<br><br>Registry Group: <b>/ug4/Algebra</b>
function
VecAssign
void
void VecAssign (Vector *, const Vector *)
void VecAssign (<a href="VectorCPU1.html">Vector</a> *, const <a href="VectorCPU1.html">Vector</a> *)<br><br>Registry Group: <b>/ug4/Algebra</b>
function
VecAssign
void
void VecAssign (Vector *, const Vector *)
void VecAssign (<a href="VectorCPU1.html">Vector</a> *, const <a href="VectorCPU1.html">Vector</a> *)<br><br>Registry Group: <b>/ug4/Algebra</b>
function
VecAssign
void
void VecAssign (Vector *, const Vector *)
void VecAssign (<a href="VectorCPU1.html">Vector</a> *, const <a href="VectorCPU1.html">Vector</a> *)<br><br>Registry Group: <b>/ug4/Algebra</b>
function
VecScaleAdd2
void
void VecScaleAdd2 (Vector *dest, number alpha1, const Vector *vec1, number alpha2, const Vector *vec2)
void VecScaleAdd2 (<a href="VectorCPU1.html">Vector</a> *dest, number alpha1, const <a href="VectorCPU1.html">Vector</a> *vec1, number alpha2, const <a href="VectorCPU1.html">Vector</a> *vec2)<br><br>returns alpha1*vec1 + alpha2*vec2<br>Registry Group: <b>/ug4/Algebra</b>
function
VecScaleAdd2
void
void VecScaleAdd2 (Vector *dest, number alpha1, const Vector *vec1, number alpha2, const Vector *vec2)
void VecScaleAdd2 (<a href="VectorCPU1.html">Vector</a> *dest, number alpha1, const <a href="VectorCPU1.html">Vector</a> *vec1, number alpha2, const <a href="VectorCPU1.html">Vector</a> *vec2)<br><br>returns alpha1*vec1 + alpha2*vec2<br>Registry Group: <b>/ug4/Algebra</b>
function
VecScaleAdd2
void
void VecScaleAdd2 (Vector *dest, number alpha1, const Vector *vec1, number alpha2, const Vector *vec2)
void VecScaleAdd2 (<a href="VectorCPU1.html">Vector</a> *dest, number alpha1, const <a href="VectorCPU1.html">Vector</a> *vec1, number alpha2, const <a href="VectorCPU1.html">Vector</a> *vec2)<br><br>returns alpha1*vec1 + alpha2*vec2<br>Registry Group: <b>/ug4/Algebra</b>
function
VecScaleAdd3
void
void VecScaleAdd3 (Vector *dest, number alpha1, const Vector *vec1, number alpha2, const Vector *vec2, number alpha3, const Vector *vec3)
void VecScaleAdd3 (<a href="VectorCPU1.html">Vector</a> *dest, number alpha1, const <a href="VectorCPU1.html">Vector</a> *vec1, number alpha2, const <a href="VectorCPU1.html">Vector</a> *vec2, number alpha3, const <a href="VectorCPU1.html">Vector</a> *vec3)<br><br>returns alpha1*vec1 + alpha2*vec2 + alpha3*vec3<br>Registry Group: <b>/ug4/Algebra</b>
function
VecScaleAdd3
void
void VecScaleAdd3 (Vector *dest, number alpha1, const Vector *vec1, number alpha2, const Vector *vec2, number alpha3, const Vector *vec3)
void VecScaleAdd3 (<a href="VectorCPU1.html">Vector</a> *dest, number alpha1, const <a href="VectorCPU1.html">Vector</a> *vec1, number alpha2, const <a href="VectorCPU1.html">Vector</a> *vec2, number alpha3, const <a href="VectorCPU1.html">Vector</a> *vec3)<br><br>returns alpha1*vec1 + alpha2*vec2 + alpha3*vec3<br>Registry Group: <b>/ug4/Algebra</b>
function
VecScaleAdd3
void
void VecScaleAdd3 (Vector *dest, number alpha1, const Vector *vec1, number alpha2, const Vector *vec2, number alpha3, const Vector *vec3)
void VecScaleAdd3 (<a href="VectorCPU1.html">Vector</a> *dest, number alpha1, const <a href="VectorCPU1.html">Vector</a> *vec1, number alpha2, const <a href="VectorCPU1.html">Vector</a> *vec2, number alpha3, const <a href="VectorCPU1.html">Vector</a> *vec3)<br><br>returns alpha1*vec1 + alpha2*vec2 + alpha3*vec3<br>Registry Group: <b>/ug4/Algebra</b>
function
ApplyLinearSolver
bool
bool ApplyLinearSolver (SmartPtr<ILinearOperator> , Vector *, Vector *, SmartPtr<ILinearOperatorInverse> )
bool ApplyLinearSolver (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; , <a href="VectorCPU1.html">Vector</a> *, <a href="VectorCPU1.html">Vector</a> *, SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; )<br><br>Registry Group: <b>/ug4/Algebra</b>
function
ApplyLinearSolver
bool
bool ApplyLinearSolver (SmartPtr<ILinearOperator> , Vector *, Vector *, SmartPtr<ILinearOperatorInverse> )
bool ApplyLinearSolver (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; , <a href="VectorCPU1.html">Vector</a> *, <a href="VectorCPU1.html">Vector</a> *, SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; )<br><br>Registry Group: <b>/ug4/Algebra</b>
function
ApplyLinearSolver
bool
bool ApplyLinearSolver (SmartPtr<ILinearOperator> , Vector *, Vector *, SmartPtr<ILinearOperatorInverse> )
bool ApplyLinearSolver (SmartPtr&lt;<a href="ILinearOperatorCPU1.html">ILinearOperator</a>&gt; , <a href="VectorCPU1.html">Vector</a> *, <a href="VectorCPU1.html">Vector</a> *, SmartPtr&lt;<a href="ILinearOperatorInverseCPU1.html">ILinearOperatorInverse</a>&gt; )<br><br>Registry Group: <b>/ug4/Algebra</b>
function
AssembleLinearOperatorRhsAndSolution
void
void AssembleLinearOperatorRhsAndSolution (AssembledLinearOperator *, Vector *, Vector *)
void AssembleLinearOperatorRhsAndSolution (<a href="AssembledLinearOperatorCPU1.html">AssembledLinearOperator</a> *, <a href="VectorCPU1.html">Vector</a> *, <a href="VectorCPU1.html">Vector</a> *)<br><br>Registry Group: <b>/ug4/Discretization</b>
function
AssembleLinearOperatorRhsAndSolution
void
void AssembleLinearOperatorRhsAndSolution (AssembledLinearOperator *, Vector *, Vector *)
void AssembleLinearOperatorRhsAndSolution (<a href="AssembledLinearOperatorCPU1.html">AssembledLinearOperator</a> *, <a href="VectorCPU1.html">Vector</a> *, <a href="VectorCPU1.html">Vector</a> *)<br><br>Registry Group: <b>/ug4/Discretization</b>
function
AssembleLinearOperatorRhsAndSolution
void
void AssembleLinearOperatorRhsAndSolution (AssembledLinearOperator *, Vector *, Vector *)
void AssembleLinearOperatorRhsAndSolution (<a href="AssembledLinearOperatorCPU1.html">AssembledLinearOperator</a> *, <a href="VectorCPU1.html">Vector</a> *, <a href="VectorCPU1.html">Vector</a> *)<br><br>Registry Group: <b>/ug4/Discretization</b>
function
MatIdentity
void
void MatIdentity (MatrixOperator *opOut)
void MatIdentity (<a href="MatrixOperatorCPU1.html">MatrixOperator</a> *opOut)<br><br>tooltip: sets matrix to identity<br>Registry Group: <b>/ug4/Algebra/Operation</b>
function
MatIdentity
void
void MatIdentity (MatrixOperator *opOut)
void MatIdentity (<a href="MatrixOperatorCPU1.html">MatrixOperator</a> *opOut)<br><br>tooltip: sets matrix to identity<br>Registry Group: <b>/ug4/Algebra/Operation</b>
function
MatIdentity
void
void MatIdentity (MatrixOperator *opOut)
void MatIdentity (<a href="MatrixOperatorCPU1.html">MatrixOperator</a> *opOut)<br><br>tooltip: sets matrix to identity<br>Registry Group: <b>/ug4/Algebra/Operation</b>
function
MatAdd
void
void MatAdd (MatrixOperator *res, number alpha1, MatrixOperator *A1, number alpha2, MatrixOperator *A2)
void MatAdd (<a href="MatrixOperatorCPU1.html">MatrixOperator</a> *res, number alpha1, <a href="MatrixOperatorCPU1.html">MatrixOperator</a> *A1, number alpha2, <a href="MatrixOperatorCPU1.html">MatrixOperator</a> *A2)<br><br>tooltip: calculates res = alpha1*A1 + alpha2*A2<br>Registry Group: <b>/ug4/Algebra/Operation</b>
function
MatAdd
void
void MatAdd (MatrixOperator *res, number alpha1, MatrixOperator *A1, number alpha2, MatrixOperator *A2)
void MatAdd (<a href="MatrixOperatorCPU1.html">MatrixOperator</a> *res, number alpha1, <a href="MatrixOperatorCPU1.html">MatrixOperator</a> *A1, number alpha2, <a href="MatrixOperatorCPU1.html">MatrixOperator</a> *A2)<br><br>tooltip: calculates res = alpha1*A1 + alpha2*A2<br>Registry Group: <b>/ug4/Algebra/Operation</b>
function
MatAdd
void
void MatAdd (MatrixOperator *res, number alpha1, MatrixOperator *A1, number alpha2, MatrixOperator *A2)
void MatAdd (<a href="MatrixOperatorCPU1.html">MatrixOperator</a> *res, number alpha1, <a href="MatrixOperatorCPU1.html">MatrixOperator</a> *A1, number alpha2, <a href="MatrixOperatorCPU1.html">MatrixOperator</a> *A2)<br><br>tooltip: calculates res = alpha1*A1 + alpha2*A2<br>Registry Group: <b>/ug4/Algebra/Operation</b>
function
MatScale
void
void MatScale (MatrixOperator *mat, number alpha)
void MatScale (<a href="MatrixOperatorCPU1.html">MatrixOperator</a> *mat, number alpha)<br><br>tooltip: calculates mat = mat*alpha<br>Registry Group: <b>/ug4/Algebra/Operation</b>
function
MatScale
void
void MatScale (MatrixOperator *mat, number alpha)
void MatScale (<a href="MatrixOperatorCPU1.html">MatrixOperator</a> *mat, number alpha)<br><br>tooltip: calculates mat = mat*alpha<br>Registry Group: <b>/ug4/Algebra/Operation</b>
function
MatScale
void
void MatScale (MatrixOperator *mat, number alpha)
void MatScale (<a href="MatrixOperatorCPU1.html">MatrixOperator</a> *mat, number alpha)<br><br>tooltip: calculates mat = mat*alpha<br>Registry Group: <b>/ug4/Algebra/Operation</b>
function
AverageFunctionDifference
number
number AverageFunctionDifference (SmartPtr<GridFunction> , std_string , std_string , std_string )
number AverageFunctionDifference (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , std_string , std_string , std_string )<br><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
function
AverageFunctionDifference
number
number AverageFunctionDifference (SmartPtr<GridFunction> , std_string , std_string , std_string )
number AverageFunctionDifference (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , std_string , std_string , std_string )<br><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
function
AverageFunctionDifference
number
number AverageFunctionDifference (SmartPtr<GridFunction> , std_string , std_string , std_string )
number AverageFunctionDifference (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , std_string , std_string , std_string )<br><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
function
AverageFunctionDifference
number
number AverageFunctionDifference (SmartPtr<GridFunction> , std_string , std_string , std_string )
number AverageFunctionDifference (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , std_string , std_string , std_string )<br><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
function
AverageFunctionDifference
number
number AverageFunctionDifference (SmartPtr<GridFunction> , std_string , std_string , std_string )
number AverageFunctionDifference (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , std_string , std_string , std_string )<br><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
function
AverageFunctionDifference
number
number AverageFunctionDifference (SmartPtr<GridFunction> , std_string , std_string , std_string )
number AverageFunctionDifference (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , std_string , std_string , std_string )<br><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
function
AverageFunctionDifference
number
number AverageFunctionDifference (SmartPtr<GridFunction> , std_string , std_string , std_string )
number AverageFunctionDifference (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , std_string , std_string , std_string )<br><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
function
AverageFunctionDifference
number
number AverageFunctionDifference (SmartPtr<GridFunction> , std_string , std_string , std_string )
number AverageFunctionDifference (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , std_string , std_string , std_string )<br><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
function
AverageFunctionDifference
number
number AverageFunctionDifference (SmartPtr<GridFunction> , std_string , std_string , std_string )
number AverageFunctionDifference (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , std_string , std_string , std_string )<br><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
function
Interpolate
void
void Interpolate (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets, number Time)
void Interpolate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Component, number Time)
void Interpolate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets)
void Interpolate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Component)
void Interpolate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets, number Time)
void Interpolate (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Component, number Time)
void Interpolate (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets)
void Interpolate (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Component)
void Interpolate (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets, number Time)
void Interpolate (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Component, number Time)
void Interpolate (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets)
void Interpolate (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Component)
void Interpolate (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets, number Time)
void Interpolate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Component, number Time)
void Interpolate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets)
void Interpolate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Component)
void Interpolate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets, number Time)
void Interpolate (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Component, number Time)
void Interpolate (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets)
void Interpolate (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Component)
void Interpolate (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets, number Time)
void Interpolate (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Component, number Time)
void Interpolate (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets)
void Interpolate (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Component)
void Interpolate (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets, number Time)
void Interpolate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Component, number Time)
void Interpolate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets)
void Interpolate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Component)
void Interpolate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets, number Time)
void Interpolate (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Component, number Time)
void Interpolate (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets)
void Interpolate (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Component)
void Interpolate (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets, number Time)
void Interpolate (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Component, number Time)
void Interpolate (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets)
void Interpolate (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Component)
void Interpolate (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets, number Time)
void Interpolate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Component, number Time)
void Interpolate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets)
void Interpolate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Component)
void Interpolate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets, number Time)
void Interpolate (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Component, number Time)
void Interpolate (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets)
void Interpolate (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Component)
void Interpolate (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets, number Time)
void Interpolate (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Component, number Time)
void Interpolate (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets)
void Interpolate (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Component)
void Interpolate (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets, number Time)
void Interpolate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Component, number Time)
void Interpolate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets)
void Interpolate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Component)
void Interpolate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets, number Time)
void Interpolate (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Component, number Time)
void Interpolate (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets)
void Interpolate (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Component)
void Interpolate (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets, number Time)
void Interpolate (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Component, number Time)
void Interpolate (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets)
void Interpolate (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Component)
void Interpolate (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets, number Time)
void Interpolate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Component, number Time)
void Interpolate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets)
void Interpolate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Component)
void Interpolate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets, number Time)
void Interpolate (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Component, number Time)
void Interpolate (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets)
void Interpolate (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Component)
void Interpolate (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets, number Time)
void Interpolate (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Component, number Time)
void Interpolate (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets)
void Interpolate (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Component)
void Interpolate (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets, number Time)
void Interpolate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Component, number Time)
void Interpolate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets)
void Interpolate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Component)
void Interpolate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets, number Time)
void Interpolate (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Component, number Time)
void Interpolate (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets)
void Interpolate (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Component)
void Interpolate (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets, number Time)
void Interpolate (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Component, number Time)
void Interpolate (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets)
void Interpolate (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Component)
void Interpolate (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets, number Time)
void Interpolate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Component, number Time)
void Interpolate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets)
void Interpolate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Component)
void Interpolate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets, number Time)
void Interpolate (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Component, number Time)
void Interpolate (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets)
void Interpolate (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Component)
void Interpolate (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets, number Time)
void Interpolate (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Component, number Time)
void Interpolate (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets)
void Interpolate (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Component)
void Interpolate (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets, number Time)
void Interpolate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Component, number Time)
void Interpolate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets)
void Interpolate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Component)
void Interpolate (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets, number Time)
void Interpolate (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Component, number Time)
void Interpolate (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets)
void Interpolate (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Component)
void Interpolate (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets, number Time)
void Interpolate (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Component, number Time)
void Interpolate (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets)
void Interpolate (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Interpolate
void
void Interpolate (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Component)
void Interpolate (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
OrderCuthillMcKee
void
void OrderCuthillMcKee (ApproximationSpace *, bool )
void OrderCuthillMcKee (<a href="ApproximationSpace2d.html">ApproximationSpace</a> *, bool )<br><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
function
OrderCuthillMcKee
void
void OrderCuthillMcKee (ApproximationSpace *, bool )
void OrderCuthillMcKee (<a href="ApproximationSpace2d.html">ApproximationSpace</a> *, bool )<br><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
function
OrderCuthillMcKee
void
void OrderCuthillMcKee (ApproximationSpace *, bool )
void OrderCuthillMcKee (<a href="ApproximationSpace2d.html">ApproximationSpace</a> *, bool )<br><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
function
OrderLex
void
void OrderLex (ApproximationSpace *, c_string )
void OrderLex (<a href="ApproximationSpace2d.html">ApproximationSpace</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
function
OrderLex
void
void OrderLex (ApproximationSpace *, c_string )
void OrderLex (<a href="ApproximationSpace2d.html">ApproximationSpace</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
function
OrderLex
void
void OrderLex (ApproximationSpace *, c_string )
void OrderLex (<a href="ApproximationSpace2d.html">ApproximationSpace</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/ApproximationSpace</b>
function
SaveMatrixToMTX
void
void SaveMatrixToMTX (c_string , MatrixOperator *, std_string )
void SaveMatrixToMTX (c_string , <a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, std_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveDomainToVTK
void
void SaveDomainToVTK (c_string , Domain *)
void SaveDomainToVTK (c_string , <a href="Domain2d.html">Domain</a> *)<br><br>Registry Group: <b></b>
function
SaveDomainToVTK
void
void SaveDomainToVTK (c_string , Domain *)
void SaveDomainToVTK (c_string , <a href="Domain2d.html">Domain</a> *)<br><br>Registry Group: <b></b>
function
SaveDomainToVTK
void
void SaveDomainToVTK (c_string , Domain *)
void SaveDomainToVTK (c_string , <a href="Domain2d.html">Domain</a> *)<br><br>Registry Group: <b></b>
function
WriteGridFunctionToVTK
void
void WriteGridFunctionToVTK (GridFunction *GridFunction, c_string Filename)
void WriteGridFunctionToVTK (<a href="GridFunction2dCPU1.html">GridFunction</a> *GridFunction, c_string Filename)<br><br>tooltip: Saves GridFunction to *.vtk file<br>Registry Group: <b>/ug4/Discretization/Output</b>
function
WriteGridFunctionToVTK
void
void WriteGridFunctionToVTK (GridFunction *GridFunction, c_string Filename)
void WriteGridFunctionToVTK (<a href="GridFunction2dCPU1.html">GridFunction</a> *GridFunction, c_string Filename)<br><br>tooltip: Saves GridFunction to *.vtk file<br>Registry Group: <b>/ug4/Discretization/Output</b>
function
WriteGridFunctionToVTK
void
void WriteGridFunctionToVTK (GridFunction *GridFunction, c_string Filename)
void WriteGridFunctionToVTK (<a href="GridFunction2dCPU1.html">GridFunction</a> *GridFunction, c_string Filename)<br><br>tooltip: Saves GridFunction to *.vtk file<br>Registry Group: <b>/ug4/Discretization/Output</b>
function
WriteGridFunctionToVTK
void
void WriteGridFunctionToVTK (GridFunction *GridFunction, c_string Filename)
void WriteGridFunctionToVTK (<a href="GridFunction2dCPU1.html">GridFunction</a> *GridFunction, c_string Filename)<br><br>tooltip: Saves GridFunction to *.vtk file<br>Registry Group: <b>/ug4/Discretization/Output</b>
function
WriteGridFunctionToVTK
void
void WriteGridFunctionToVTK (GridFunction *GridFunction, c_string Filename)
void WriteGridFunctionToVTK (<a href="GridFunction2dCPU1.html">GridFunction</a> *GridFunction, c_string Filename)<br><br>tooltip: Saves GridFunction to *.vtk file<br>Registry Group: <b>/ug4/Discretization/Output</b>
function
WriteGridFunctionToVTK
void
void WriteGridFunctionToVTK (GridFunction *GridFunction, c_string Filename)
void WriteGridFunctionToVTK (<a href="GridFunction2dCPU1.html">GridFunction</a> *GridFunction, c_string Filename)<br><br>tooltip: Saves GridFunction to *.vtk file<br>Registry Group: <b>/ug4/Discretization/Output</b>
function
WriteGridFunctionToVTK
void
void WriteGridFunctionToVTK (GridFunction *GridFunction, c_string Filename)
void WriteGridFunctionToVTK (<a href="GridFunction2dCPU1.html">GridFunction</a> *GridFunction, c_string Filename)<br><br>tooltip: Saves GridFunction to *.vtk file<br>Registry Group: <b>/ug4/Discretization/Output</b>
function
WriteGridFunctionToVTK
void
void WriteGridFunctionToVTK (GridFunction *GridFunction, c_string Filename)
void WriteGridFunctionToVTK (<a href="GridFunction2dCPU1.html">GridFunction</a> *GridFunction, c_string Filename)<br><br>tooltip: Saves GridFunction to *.vtk file<br>Registry Group: <b>/ug4/Discretization/Output</b>
function
WriteGridFunctionToVTK
void
void WriteGridFunctionToVTK (GridFunction *GridFunction, c_string Filename)
void WriteGridFunctionToVTK (<a href="GridFunction2dCPU1.html">GridFunction</a> *GridFunction, c_string Filename)<br><br>tooltip: Saves GridFunction to *.vtk file<br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveMatrixForConnectionViewer
void
void SaveMatrixForConnectionViewer (GridFunction *, MatrixOperator *, c_string )
void SaveMatrixForConnectionViewer (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveMatrixForConnectionViewer
void
void SaveMatrixForConnectionViewer (GridFunction *, MatrixOperator *, c_string )
void SaveMatrixForConnectionViewer (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveMatrixForConnectionViewer
void
void SaveMatrixForConnectionViewer (GridFunction *, MatrixOperator *, c_string )
void SaveMatrixForConnectionViewer (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveMatrixForConnectionViewer
void
void SaveMatrixForConnectionViewer (GridFunction *, MatrixOperator *, c_string )
void SaveMatrixForConnectionViewer (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveMatrixForConnectionViewer
void
void SaveMatrixForConnectionViewer (GridFunction *, MatrixOperator *, c_string )
void SaveMatrixForConnectionViewer (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveMatrixForConnectionViewer
void
void SaveMatrixForConnectionViewer (GridFunction *, MatrixOperator *, c_string )
void SaveMatrixForConnectionViewer (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveMatrixForConnectionViewer
void
void SaveMatrixForConnectionViewer (GridFunction *, MatrixOperator *, c_string )
void SaveMatrixForConnectionViewer (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveMatrixForConnectionViewer
void
void SaveMatrixForConnectionViewer (GridFunction *, MatrixOperator *, c_string )
void SaveMatrixForConnectionViewer (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveMatrixForConnectionViewer
void
void SaveMatrixForConnectionViewer (GridFunction *, MatrixOperator *, c_string )
void SaveMatrixForConnectionViewer (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveVectorForConnectionViewer
void
void SaveVectorForConnectionViewer (GridFunction *, c_string )
void SaveVectorForConnectionViewer (<a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveVectorForConnectionViewer
void
void SaveVectorForConnectionViewer (GridFunction *, MatrixOperator *, c_string )
void SaveVectorForConnectionViewer (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveVectorForConnectionViewer
void
void SaveVectorForConnectionViewer (GridFunction *, GridFunction *, MatrixOperator *, c_string )
void SaveVectorForConnectionViewer (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveVectorForConnectionViewer
void
void SaveVectorForConnectionViewer (GridFunction *, c_string )
void SaveVectorForConnectionViewer (<a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveVectorForConnectionViewer
void
void SaveVectorForConnectionViewer (GridFunction *, MatrixOperator *, c_string )
void SaveVectorForConnectionViewer (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveVectorForConnectionViewer
void
void SaveVectorForConnectionViewer (GridFunction *, GridFunction *, MatrixOperator *, c_string )
void SaveVectorForConnectionViewer (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveVectorForConnectionViewer
void
void SaveVectorForConnectionViewer (GridFunction *, c_string )
void SaveVectorForConnectionViewer (<a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveVectorForConnectionViewer
void
void SaveVectorForConnectionViewer (GridFunction *, MatrixOperator *, c_string )
void SaveVectorForConnectionViewer (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveVectorForConnectionViewer
void
void SaveVectorForConnectionViewer (GridFunction *, GridFunction *, MatrixOperator *, c_string )
void SaveVectorForConnectionViewer (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveVectorForConnectionViewer
void
void SaveVectorForConnectionViewer (GridFunction *, c_string )
void SaveVectorForConnectionViewer (<a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveVectorForConnectionViewer
void
void SaveVectorForConnectionViewer (GridFunction *, MatrixOperator *, c_string )
void SaveVectorForConnectionViewer (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveVectorForConnectionViewer
void
void SaveVectorForConnectionViewer (GridFunction *, GridFunction *, MatrixOperator *, c_string )
void SaveVectorForConnectionViewer (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveVectorForConnectionViewer
void
void SaveVectorForConnectionViewer (GridFunction *, c_string )
void SaveVectorForConnectionViewer (<a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveVectorForConnectionViewer
void
void SaveVectorForConnectionViewer (GridFunction *, MatrixOperator *, c_string )
void SaveVectorForConnectionViewer (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveVectorForConnectionViewer
void
void SaveVectorForConnectionViewer (GridFunction *, GridFunction *, MatrixOperator *, c_string )
void SaveVectorForConnectionViewer (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveVectorForConnectionViewer
void
void SaveVectorForConnectionViewer (GridFunction *, c_string )
void SaveVectorForConnectionViewer (<a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveVectorForConnectionViewer
void
void SaveVectorForConnectionViewer (GridFunction *, MatrixOperator *, c_string )
void SaveVectorForConnectionViewer (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveVectorForConnectionViewer
void
void SaveVectorForConnectionViewer (GridFunction *, GridFunction *, MatrixOperator *, c_string )
void SaveVectorForConnectionViewer (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveVectorForConnectionViewer
void
void SaveVectorForConnectionViewer (GridFunction *, c_string )
void SaveVectorForConnectionViewer (<a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveVectorForConnectionViewer
void
void SaveVectorForConnectionViewer (GridFunction *, MatrixOperator *, c_string )
void SaveVectorForConnectionViewer (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveVectorForConnectionViewer
void
void SaveVectorForConnectionViewer (GridFunction *, GridFunction *, MatrixOperator *, c_string )
void SaveVectorForConnectionViewer (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveVectorForConnectionViewer
void
void SaveVectorForConnectionViewer (GridFunction *, c_string )
void SaveVectorForConnectionViewer (<a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveVectorForConnectionViewer
void
void SaveVectorForConnectionViewer (GridFunction *, MatrixOperator *, c_string )
void SaveVectorForConnectionViewer (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveVectorForConnectionViewer
void
void SaveVectorForConnectionViewer (GridFunction *, GridFunction *, MatrixOperator *, c_string )
void SaveVectorForConnectionViewer (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveVectorForConnectionViewer
void
void SaveVectorForConnectionViewer (GridFunction *, c_string )
void SaveVectorForConnectionViewer (<a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveVectorForConnectionViewer
void
void SaveVectorForConnectionViewer (GridFunction *, MatrixOperator *, c_string )
void SaveVectorForConnectionViewer (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveVectorForConnectionViewer
void
void SaveVectorForConnectionViewer (GridFunction *, GridFunction *, MatrixOperator *, c_string )
void SaveVectorForConnectionViewer (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveVectorCSV
void
void SaveVectorCSV (GridFunction *, c_string )
void SaveVectorCSV (<a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveVectorCSV
void
void SaveVectorCSV (GridFunction *, c_string )
void SaveVectorCSV (<a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveVectorCSV
void
void SaveVectorCSV (GridFunction *, c_string )
void SaveVectorCSV (<a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveVectorCSV
void
void SaveVectorCSV (GridFunction *, c_string )
void SaveVectorCSV (<a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveVectorCSV
void
void SaveVectorCSV (GridFunction *, c_string )
void SaveVectorCSV (<a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveVectorCSV
void
void SaveVectorCSV (GridFunction *, c_string )
void SaveVectorCSV (<a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveVectorCSV
void
void SaveVectorCSV (GridFunction *, c_string )
void SaveVectorCSV (<a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveVectorCSV
void
void SaveVectorCSV (GridFunction *, c_string )
void SaveVectorCSV (<a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
SaveVectorCSV
void
void SaveVectorCSV (GridFunction *, c_string )
void SaveVectorCSV (<a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string )<br><br>Registry Group: <b>/ug4/Discretization/Output</b>
function
MarkForAdaption_GradientIndicator
void
void MarkForAdaption_GradientIndicator (IRefiner *, GridFunction *, c_string , number , number , number , integer )
void MarkForAdaption_GradientIndicator (<a href="IRefiner.html">IRefiner</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string , number , number , number , integer )<br><br>Registry Group: <b>ug4/Refinement/</b>
function
MarkForAdaption_GradientIndicator
void
void MarkForAdaption_GradientIndicator (IRefiner *, GridFunction *, c_string , number , number , number , integer )
void MarkForAdaption_GradientIndicator (<a href="IRefiner.html">IRefiner</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string , number , number , number , integer )<br><br>Registry Group: <b>ug4/Refinement/</b>
function
MarkForAdaption_GradientIndicator
void
void MarkForAdaption_GradientIndicator (IRefiner *, GridFunction *, c_string , number , number , number , integer )
void MarkForAdaption_GradientIndicator (<a href="IRefiner.html">IRefiner</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string , number , number , number , integer )<br><br>Registry Group: <b>ug4/Refinement/</b>
function
MarkForAdaption_GradientIndicator
void
void MarkForAdaption_GradientIndicator (IRefiner *, GridFunction *, c_string , number , number , number , integer )
void MarkForAdaption_GradientIndicator (<a href="IRefiner.html">IRefiner</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string , number , number , number , integer )<br><br>Registry Group: <b>ug4/Refinement/</b>
function
MarkForAdaption_GradientIndicator
void
void MarkForAdaption_GradientIndicator (IRefiner *, GridFunction *, c_string , number , number , number , integer )
void MarkForAdaption_GradientIndicator (<a href="IRefiner.html">IRefiner</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string , number , number , number , integer )<br><br>Registry Group: <b>ug4/Refinement/</b>
function
MarkForAdaption_GradientIndicator
void
void MarkForAdaption_GradientIndicator (IRefiner *, GridFunction *, c_string , number , number , number , integer )
void MarkForAdaption_GradientIndicator (<a href="IRefiner.html">IRefiner</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string , number , number , number , integer )<br><br>Registry Group: <b>ug4/Refinement/</b>
function
MarkForAdaption_GradientIndicator
void
void MarkForAdaption_GradientIndicator (IRefiner *, GridFunction *, c_string , number , number , number , integer )
void MarkForAdaption_GradientIndicator (<a href="IRefiner.html">IRefiner</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string , number , number , number , integer )<br><br>Registry Group: <b>ug4/Refinement/</b>
function
MarkForAdaption_GradientIndicator
void
void MarkForAdaption_GradientIndicator (IRefiner *, GridFunction *, c_string , number , number , number , integer )
void MarkForAdaption_GradientIndicator (<a href="IRefiner.html">IRefiner</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string , number , number , number , integer )<br><br>Registry Group: <b>ug4/Refinement/</b>
function
MarkForAdaption_GradientIndicator
void
void MarkForAdaption_GradientIndicator (IRefiner *, GridFunction *, c_string , number , number , number , integer )
void MarkForAdaption_GradientIndicator (<a href="IRefiner.html">IRefiner</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string , number , number , number , integer )<br><br>Registry Group: <b>ug4/Refinement/</b>
function
Prolongate
void
void Prolongate (GridFunction *, GridFunction *)
void Prolongate (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>/ug4/Discretization</b>
function
Prolongate
void
void Prolongate (GridFunction *, GridFunction *)
void Prolongate (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>/ug4/Discretization</b>
function
Prolongate
void
void Prolongate (GridFunction *, GridFunction *)
void Prolongate (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>/ug4/Discretization</b>
function
Prolongate
void
void Prolongate (GridFunction *, GridFunction *)
void Prolongate (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>/ug4/Discretization</b>
function
Prolongate
void
void Prolongate (GridFunction *, GridFunction *)
void Prolongate (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>/ug4/Discretization</b>
function
Prolongate
void
void Prolongate (GridFunction *, GridFunction *)
void Prolongate (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>/ug4/Discretization</b>
function
Prolongate
void
void Prolongate (GridFunction *, GridFunction *)
void Prolongate (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>/ug4/Discretization</b>
function
Prolongate
void
void Prolongate (GridFunction *, GridFunction *)
void Prolongate (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>/ug4/Discretization</b>
function
Prolongate
void
void Prolongate (GridFunction *, GridFunction *)
void Prolongate (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>/ug4/Discretization</b>
function
Restrict
void
void Restrict (GridFunction *, GridFunction *)
void Restrict (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>/ug4/Discretization</b>
function
Restrict
void
void Restrict (GridFunction *, GridFunction *)
void Restrict (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>/ug4/Discretization</b>
function
Restrict
void
void Restrict (GridFunction *, GridFunction *)
void Restrict (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>/ug4/Discretization</b>
function
Restrict
void
void Restrict (GridFunction *, GridFunction *)
void Restrict (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>/ug4/Discretization</b>
function
Restrict
void
void Restrict (GridFunction *, GridFunction *)
void Restrict (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>/ug4/Discretization</b>
function
Restrict
void
void Restrict (GridFunction *, GridFunction *)
void Restrict (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>/ug4/Discretization</b>
function
Restrict
void
void Restrict (GridFunction *, GridFunction *)
void Restrict (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>/ug4/Discretization</b>
function
Restrict
void
void Restrict (GridFunction *, GridFunction *)
void Restrict (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>/ug4/Discretization</b>
function
Restrict
void
void Restrict (GridFunction *, GridFunction *)
void Restrict (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>/ug4/Discretization</b>
function
CreateSubControlVolumeFaceDomain_FV1
void
void CreateSubControlVolumeFaceDomain_FV1 (Domain *, const Domain *, const SurfaceView *, integer )
void CreateSubControlVolumeFaceDomain_FV1 (<a href="Domain2d.html">Domain</a> *, const <a href="Domain2d.html">Domain</a> *, const <a href="SurfaceView.html">SurfaceView</a> *, integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
CreateSubControlVolumeFaceDomain_FV1
void
void CreateSubControlVolumeFaceDomain_FV1 (Domain *, const Domain *, const SurfaceView *, integer )
void CreateSubControlVolumeFaceDomain_FV1 (<a href="Domain2d.html">Domain</a> *, const <a href="Domain2d.html">Domain</a> *, const <a href="SurfaceView.html">SurfaceView</a> *, integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
CreateSubControlVolumeFaceDomain_FV1
void
void CreateSubControlVolumeFaceDomain_FV1 (Domain *, const Domain *, const SurfaceView *, integer )
void CreateSubControlVolumeFaceDomain_FV1 (<a href="Domain2d.html">Domain</a> *, const <a href="Domain2d.html">Domain</a> *, const <a href="SurfaceView.html">SurfaceView</a> *, integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
CreateSubControlVolumeDomain_FV1
void
void CreateSubControlVolumeDomain_FV1 (Domain *, const Domain *, const SurfaceView *, integer )
void CreateSubControlVolumeDomain_FV1 (<a href="Domain2d.html">Domain</a> *, const <a href="Domain2d.html">Domain</a> *, const <a href="SurfaceView.html">SurfaceView</a> *, integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
CreateSubControlVolumeDomain_FV1
void
void CreateSubControlVolumeDomain_FV1 (Domain *, const Domain *, const SurfaceView *, integer )
void CreateSubControlVolumeDomain_FV1 (<a href="Domain2d.html">Domain</a> *, const <a href="Domain2d.html">Domain</a> *, const <a href="SurfaceView.html">SurfaceView</a> *, integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
CreateSubControlVolumeDomain_FV1
void
void CreateSubControlVolumeDomain_FV1 (Domain *, const Domain *, const SurfaceView *, integer )
void CreateSubControlVolumeDomain_FV1 (<a href="Domain2d.html">Domain</a> *, const <a href="Domain2d.html">Domain</a> *, const <a href="SurfaceView.html">SurfaceView</a> *, integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
CreateControlVolumeDomain_FV1
void
void CreateControlVolumeDomain_FV1 (Domain *, const Domain *, const SurfaceView *, integer )
void CreateControlVolumeDomain_FV1 (<a href="Domain2d.html">Domain</a> *, const <a href="Domain2d.html">Domain</a> *, const <a href="SurfaceView.html">SurfaceView</a> *, integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
CreateControlVolumeDomain_FV1
void
void CreateControlVolumeDomain_FV1 (Domain *, const Domain *, const SurfaceView *, integer )
void CreateControlVolumeDomain_FV1 (<a href="Domain2d.html">Domain</a> *, const <a href="Domain2d.html">Domain</a> *, const <a href="SurfaceView.html">SurfaceView</a> *, integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
CreateControlVolumeDomain_FV1
void
void CreateControlVolumeDomain_FV1 (Domain *, const Domain *, const SurfaceView *, integer )
void CreateControlVolumeDomain_FV1 (<a href="Domain2d.html">Domain</a> *, const <a href="Domain2d.html">Domain</a> *, const <a href="SurfaceView.html">SurfaceView</a> *, integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
CreateSubControlVolumeFaceDomain_HFV1
void
void CreateSubControlVolumeFaceDomain_HFV1 (Domain *, const Domain *, const SurfaceView *, integer )
void CreateSubControlVolumeFaceDomain_HFV1 (<a href="Domain2d.html">Domain</a> *, const <a href="Domain2d.html">Domain</a> *, const <a href="SurfaceView.html">SurfaceView</a> *, integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
CreateSubControlVolumeFaceDomain_HFV1
void
void CreateSubControlVolumeFaceDomain_HFV1 (Domain *, const Domain *, const SurfaceView *, integer )
void CreateSubControlVolumeFaceDomain_HFV1 (<a href="Domain2d.html">Domain</a> *, const <a href="Domain2d.html">Domain</a> *, const <a href="SurfaceView.html">SurfaceView</a> *, integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
CreateSubControlVolumeFaceDomain_HFV1
void
void CreateSubControlVolumeFaceDomain_HFV1 (Domain *, const Domain *, const SurfaceView *, integer )
void CreateSubControlVolumeFaceDomain_HFV1 (<a href="Domain2d.html">Domain</a> *, const <a href="Domain2d.html">Domain</a> *, const <a href="SurfaceView.html">SurfaceView</a> *, integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
CreateSubControlVolumeDomain_HFV1
void
void CreateSubControlVolumeDomain_HFV1 (Domain *, const Domain *, const SurfaceView *, integer )
void CreateSubControlVolumeDomain_HFV1 (<a href="Domain2d.html">Domain</a> *, const <a href="Domain2d.html">Domain</a> *, const <a href="SurfaceView.html">SurfaceView</a> *, integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
CreateSubControlVolumeDomain_HFV1
void
void CreateSubControlVolumeDomain_HFV1 (Domain *, const Domain *, const SurfaceView *, integer )
void CreateSubControlVolumeDomain_HFV1 (<a href="Domain2d.html">Domain</a> *, const <a href="Domain2d.html">Domain</a> *, const <a href="SurfaceView.html">SurfaceView</a> *, integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
CreateSubControlVolumeDomain_HFV1
void
void CreateSubControlVolumeDomain_HFV1 (Domain *, const Domain *, const SurfaceView *, integer )
void CreateSubControlVolumeDomain_HFV1 (<a href="Domain2d.html">Domain</a> *, const <a href="Domain2d.html">Domain</a> *, const <a href="SurfaceView.html">SurfaceView</a> *, integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
CreateControlVolumeDomain_HFV1
void
void CreateControlVolumeDomain_HFV1 (Domain *, const Domain *, const SurfaceView *, integer )
void CreateControlVolumeDomain_HFV1 (<a href="Domain2d.html">Domain</a> *, const <a href="Domain2d.html">Domain</a> *, const <a href="SurfaceView.html">SurfaceView</a> *, integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
CreateControlVolumeDomain_HFV1
void
void CreateControlVolumeDomain_HFV1 (Domain *, const Domain *, const SurfaceView *, integer )
void CreateControlVolumeDomain_HFV1 (<a href="Domain2d.html">Domain</a> *, const <a href="Domain2d.html">Domain</a> *, const <a href="SurfaceView.html">SurfaceView</a> *, integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
CreateControlVolumeDomain_HFV1
void
void CreateControlVolumeDomain_HFV1 (Domain *, const Domain *, const SurfaceView *, integer )
void CreateControlVolumeDomain_HFV1 (<a href="Domain2d.html">Domain</a> *, const <a href="Domain2d.html">Domain</a> *, const <a href="SurfaceView.html">SurfaceView</a> *, integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
TestQuadRule
void
void TestQuadRule ()
void TestQuadRule ()<br><br>Registry Group: <b></b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time, integer QuadOrder)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, number Time)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Subsets)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time, integer QuadOrder)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction, number Time)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Subsets)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time, integer QuadOrder, std_string QuadType)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time, integer QuadOrder, std_string QuadType)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time, integer QuadOrder)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, number Time)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Subsets)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets, integer QuadOrder)
number Integral (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets)
number Integral (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<GridFunction> GridFunction, c_string Component)
number Integral (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time, integer QuadOrder)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, number Time)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Subsets)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time, integer QuadOrder)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction, number Time)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Subsets)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time, integer QuadOrder, std_string QuadType)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time, integer QuadOrder, std_string QuadType)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time, integer QuadOrder)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, number Time)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Subsets)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets, integer QuadOrder)
number Integral (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets)
number Integral (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<GridFunction> GridFunction, c_string Component)
number Integral (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time, integer QuadOrder)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, number Time)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Subsets)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time, integer QuadOrder)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction, number Time)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Subsets)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time, integer QuadOrder, std_string QuadType)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time, integer QuadOrder, std_string QuadType)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time, integer QuadOrder)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, number Time)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Subsets)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets, integer QuadOrder)
number Integral (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets)
number Integral (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<GridFunction> GridFunction, c_string Component)
number Integral (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time, integer QuadOrder)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, number Time)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Subsets)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time, integer QuadOrder)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction, number Time)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Subsets)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time, integer QuadOrder, std_string QuadType)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time, integer QuadOrder, std_string QuadType)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time, integer QuadOrder)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, number Time)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Subsets)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets, integer QuadOrder)
number Integral (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets)
number Integral (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<GridFunction> GridFunction, c_string Component)
number Integral (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time, integer QuadOrder)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, number Time)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Subsets)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time, integer QuadOrder)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction, number Time)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Subsets)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time, integer QuadOrder, std_string QuadType)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time, integer QuadOrder, std_string QuadType)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time, integer QuadOrder)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, number Time)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Subsets)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets, integer QuadOrder)
number Integral (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets)
number Integral (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<GridFunction> GridFunction, c_string Component)
number Integral (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time, integer QuadOrder)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, number Time)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Subsets)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time, integer QuadOrder)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction, number Time)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Subsets)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time, integer QuadOrder, std_string QuadType)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time, integer QuadOrder, std_string QuadType)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time, integer QuadOrder)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, number Time)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Subsets)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets, integer QuadOrder)
number Integral (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets)
number Integral (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<GridFunction> GridFunction, c_string Component)
number Integral (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time, integer QuadOrder)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, number Time)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Subsets)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time, integer QuadOrder)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction, number Time)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Subsets)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time, integer QuadOrder, std_string QuadType)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time, integer QuadOrder, std_string QuadType)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time, integer QuadOrder)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, number Time)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Subsets)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets, integer QuadOrder)
number Integral (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets)
number Integral (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<GridFunction> GridFunction, c_string Component)
number Integral (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time, integer QuadOrder)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, number Time)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Subsets)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time, integer QuadOrder)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction, number Time)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Subsets)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time, integer QuadOrder, std_string QuadType)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time, integer QuadOrder, std_string QuadType)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time, integer QuadOrder)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, number Time)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Subsets)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets, integer QuadOrder)
number Integral (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets)
number Integral (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<GridFunction> GridFunction, c_string Component)
number Integral (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time, integer QuadOrder)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, number Time)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction, c_string Subsets)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<UserNumber> Data, SmartPtr<GridFunction> GridFunction)
number Integral (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time, integer QuadOrder)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction, number Time)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction, c_string Subsets)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (number ConstantValue, SmartPtr<GridFunction> GridFunction)
number Integral (number ConstantValue, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time, integer QuadOrder, std_string QuadType)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time, integer QuadOrder, std_string QuadType)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time, integer QuadOrder)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Subsets, number Time)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, number Time)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string Subsets)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (c_string LuaFunction, SmartPtr<GridFunction> GridFunction)
number Integral (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets, integer QuadOrder)
number Integral (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<GridFunction> GridFunction, c_string Component, c_string Subsets)
number Integral (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component, c_string Subsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
Integral
number
number Integral (SmartPtr<GridFunction> GridFunction, c_string Component)
number Integral (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string Component)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (SmartPtr<GridFunction> , c_string , SmartPtr<GridFunction> , c_string , integer , c_string )
number L2Error (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (SmartPtr<GridFunction> , c_string , SmartPtr<GridFunction> , c_string , integer )
number L2Error (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (SmartPtr<UserNumber> , SmartPtr<GridFunction> , c_string , number , integer , c_string )
number L2Error (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (SmartPtr<UserNumber> , SmartPtr<GridFunction> , c_string , number , integer )
number L2Error (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (c_string , SmartPtr<GridFunction> , c_string , number , integer , c_string )
number L2Error (c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (c_string , SmartPtr<GridFunction> , c_string , number , integer )
number L2Error (c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (SmartPtr<GridFunction> , c_string , SmartPtr<GridFunction> , c_string , integer , c_string )
number L2Error (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (SmartPtr<GridFunction> , c_string , SmartPtr<GridFunction> , c_string , integer )
number L2Error (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (SmartPtr<UserNumber> , SmartPtr<GridFunction> , c_string , number , integer , c_string )
number L2Error (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (SmartPtr<UserNumber> , SmartPtr<GridFunction> , c_string , number , integer )
number L2Error (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (c_string , SmartPtr<GridFunction> , c_string , number , integer , c_string )
number L2Error (c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (c_string , SmartPtr<GridFunction> , c_string , number , integer )
number L2Error (c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (SmartPtr<GridFunction> , c_string , SmartPtr<GridFunction> , c_string , integer , c_string )
number L2Error (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (SmartPtr<GridFunction> , c_string , SmartPtr<GridFunction> , c_string , integer )
number L2Error (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (SmartPtr<UserNumber> , SmartPtr<GridFunction> , c_string , number , integer , c_string )
number L2Error (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (SmartPtr<UserNumber> , SmartPtr<GridFunction> , c_string , number , integer )
number L2Error (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (c_string , SmartPtr<GridFunction> , c_string , number , integer , c_string )
number L2Error (c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (c_string , SmartPtr<GridFunction> , c_string , number , integer )
number L2Error (c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (SmartPtr<GridFunction> , c_string , SmartPtr<GridFunction> , c_string , integer , c_string )
number L2Error (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (SmartPtr<GridFunction> , c_string , SmartPtr<GridFunction> , c_string , integer )
number L2Error (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (SmartPtr<UserNumber> , SmartPtr<GridFunction> , c_string , number , integer , c_string )
number L2Error (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (SmartPtr<UserNumber> , SmartPtr<GridFunction> , c_string , number , integer )
number L2Error (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (c_string , SmartPtr<GridFunction> , c_string , number , integer , c_string )
number L2Error (c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (c_string , SmartPtr<GridFunction> , c_string , number , integer )
number L2Error (c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (SmartPtr<GridFunction> , c_string , SmartPtr<GridFunction> , c_string , integer , c_string )
number L2Error (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (SmartPtr<GridFunction> , c_string , SmartPtr<GridFunction> , c_string , integer )
number L2Error (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (SmartPtr<UserNumber> , SmartPtr<GridFunction> , c_string , number , integer , c_string )
number L2Error (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (SmartPtr<UserNumber> , SmartPtr<GridFunction> , c_string , number , integer )
number L2Error (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (c_string , SmartPtr<GridFunction> , c_string , number , integer , c_string )
number L2Error (c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (c_string , SmartPtr<GridFunction> , c_string , number , integer )
number L2Error (c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (SmartPtr<GridFunction> , c_string , SmartPtr<GridFunction> , c_string , integer , c_string )
number L2Error (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (SmartPtr<GridFunction> , c_string , SmartPtr<GridFunction> , c_string , integer )
number L2Error (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (SmartPtr<UserNumber> , SmartPtr<GridFunction> , c_string , number , integer , c_string )
number L2Error (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (SmartPtr<UserNumber> , SmartPtr<GridFunction> , c_string , number , integer )
number L2Error (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (c_string , SmartPtr<GridFunction> , c_string , number , integer , c_string )
number L2Error (c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (c_string , SmartPtr<GridFunction> , c_string , number , integer )
number L2Error (c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (SmartPtr<GridFunction> , c_string , SmartPtr<GridFunction> , c_string , integer , c_string )
number L2Error (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (SmartPtr<GridFunction> , c_string , SmartPtr<GridFunction> , c_string , integer )
number L2Error (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (SmartPtr<UserNumber> , SmartPtr<GridFunction> , c_string , number , integer , c_string )
number L2Error (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (SmartPtr<UserNumber> , SmartPtr<GridFunction> , c_string , number , integer )
number L2Error (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (c_string , SmartPtr<GridFunction> , c_string , number , integer , c_string )
number L2Error (c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (c_string , SmartPtr<GridFunction> , c_string , number , integer )
number L2Error (c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (SmartPtr<GridFunction> , c_string , SmartPtr<GridFunction> , c_string , integer , c_string )
number L2Error (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (SmartPtr<GridFunction> , c_string , SmartPtr<GridFunction> , c_string , integer )
number L2Error (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (SmartPtr<UserNumber> , SmartPtr<GridFunction> , c_string , number , integer , c_string )
number L2Error (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (SmartPtr<UserNumber> , SmartPtr<GridFunction> , c_string , number , integer )
number L2Error (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (c_string , SmartPtr<GridFunction> , c_string , number , integer , c_string )
number L2Error (c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (c_string , SmartPtr<GridFunction> , c_string , number , integer )
number L2Error (c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (SmartPtr<GridFunction> , c_string , SmartPtr<GridFunction> , c_string , integer , c_string )
number L2Error (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (SmartPtr<GridFunction> , c_string , SmartPtr<GridFunction> , c_string , integer )
number L2Error (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (SmartPtr<UserNumber> , SmartPtr<GridFunction> , c_string , number , integer , c_string )
number L2Error (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (SmartPtr<UserNumber> , SmartPtr<GridFunction> , c_string , number , integer )
number L2Error (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (c_string , SmartPtr<GridFunction> , c_string , number , integer , c_string )
number L2Error (c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Error
number
number L2Error (c_string , SmartPtr<GridFunction> , c_string , number , integer )
number L2Error (c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (SmartPtr<GridFunction> , c_string , SmartPtr<GridFunction> , c_string , integer , c_string )
number H1Error (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (SmartPtr<GridFunction> , c_string , SmartPtr<GridFunction> , c_string , integer )
number H1Error (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (SmartPtr<UserNumber> , SmartPtr<UserVector> , SmartPtr<GridFunction> , c_string , number , integer , c_string )
number H1Error (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (SmartPtr<UserNumber> , SmartPtr<UserVector> , SmartPtr<GridFunction> , c_string , number , integer )
number H1Error (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (c_string , c_string , SmartPtr<GridFunction> , c_string , number , integer , c_string )
number H1Error (c_string , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (c_string , c_string , SmartPtr<GridFunction> , c_string , number , integer )
number H1Error (c_string , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (SmartPtr<GridFunction> , c_string , SmartPtr<GridFunction> , c_string , integer , c_string )
number H1Error (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (SmartPtr<GridFunction> , c_string , SmartPtr<GridFunction> , c_string , integer )
number H1Error (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (SmartPtr<UserNumber> , SmartPtr<UserVector> , SmartPtr<GridFunction> , c_string , number , integer , c_string )
number H1Error (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (SmartPtr<UserNumber> , SmartPtr<UserVector> , SmartPtr<GridFunction> , c_string , number , integer )
number H1Error (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (c_string , c_string , SmartPtr<GridFunction> , c_string , number , integer , c_string )
number H1Error (c_string , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (c_string , c_string , SmartPtr<GridFunction> , c_string , number , integer )
number H1Error (c_string , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (SmartPtr<GridFunction> , c_string , SmartPtr<GridFunction> , c_string , integer , c_string )
number H1Error (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (SmartPtr<GridFunction> , c_string , SmartPtr<GridFunction> , c_string , integer )
number H1Error (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (SmartPtr<UserNumber> , SmartPtr<UserVector> , SmartPtr<GridFunction> , c_string , number , integer , c_string )
number H1Error (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (SmartPtr<UserNumber> , SmartPtr<UserVector> , SmartPtr<GridFunction> , c_string , number , integer )
number H1Error (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (c_string , c_string , SmartPtr<GridFunction> , c_string , number , integer , c_string )
number H1Error (c_string , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (c_string , c_string , SmartPtr<GridFunction> , c_string , number , integer )
number H1Error (c_string , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (SmartPtr<GridFunction> , c_string , SmartPtr<GridFunction> , c_string , integer , c_string )
number H1Error (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (SmartPtr<GridFunction> , c_string , SmartPtr<GridFunction> , c_string , integer )
number H1Error (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (SmartPtr<UserNumber> , SmartPtr<UserVector> , SmartPtr<GridFunction> , c_string , number , integer , c_string )
number H1Error (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (SmartPtr<UserNumber> , SmartPtr<UserVector> , SmartPtr<GridFunction> , c_string , number , integer )
number H1Error (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (c_string , c_string , SmartPtr<GridFunction> , c_string , number , integer , c_string )
number H1Error (c_string , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (c_string , c_string , SmartPtr<GridFunction> , c_string , number , integer )
number H1Error (c_string , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (SmartPtr<GridFunction> , c_string , SmartPtr<GridFunction> , c_string , integer , c_string )
number H1Error (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (SmartPtr<GridFunction> , c_string , SmartPtr<GridFunction> , c_string , integer )
number H1Error (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (SmartPtr<UserNumber> , SmartPtr<UserVector> , SmartPtr<GridFunction> , c_string , number , integer , c_string )
number H1Error (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (SmartPtr<UserNumber> , SmartPtr<UserVector> , SmartPtr<GridFunction> , c_string , number , integer )
number H1Error (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (c_string , c_string , SmartPtr<GridFunction> , c_string , number , integer , c_string )
number H1Error (c_string , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (c_string , c_string , SmartPtr<GridFunction> , c_string , number , integer )
number H1Error (c_string , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (SmartPtr<GridFunction> , c_string , SmartPtr<GridFunction> , c_string , integer , c_string )
number H1Error (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (SmartPtr<GridFunction> , c_string , SmartPtr<GridFunction> , c_string , integer )
number H1Error (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (SmartPtr<UserNumber> , SmartPtr<UserVector> , SmartPtr<GridFunction> , c_string , number , integer , c_string )
number H1Error (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (SmartPtr<UserNumber> , SmartPtr<UserVector> , SmartPtr<GridFunction> , c_string , number , integer )
number H1Error (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (c_string , c_string , SmartPtr<GridFunction> , c_string , number , integer , c_string )
number H1Error (c_string , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (c_string , c_string , SmartPtr<GridFunction> , c_string , number , integer )
number H1Error (c_string , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (SmartPtr<GridFunction> , c_string , SmartPtr<GridFunction> , c_string , integer , c_string )
number H1Error (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (SmartPtr<GridFunction> , c_string , SmartPtr<GridFunction> , c_string , integer )
number H1Error (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (SmartPtr<UserNumber> , SmartPtr<UserVector> , SmartPtr<GridFunction> , c_string , number , integer , c_string )
number H1Error (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (SmartPtr<UserNumber> , SmartPtr<UserVector> , SmartPtr<GridFunction> , c_string , number , integer )
number H1Error (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (c_string , c_string , SmartPtr<GridFunction> , c_string , number , integer , c_string )
number H1Error (c_string , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (c_string , c_string , SmartPtr<GridFunction> , c_string , number , integer )
number H1Error (c_string , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (SmartPtr<GridFunction> , c_string , SmartPtr<GridFunction> , c_string , integer , c_string )
number H1Error (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (SmartPtr<GridFunction> , c_string , SmartPtr<GridFunction> , c_string , integer )
number H1Error (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (SmartPtr<UserNumber> , SmartPtr<UserVector> , SmartPtr<GridFunction> , c_string , number , integer , c_string )
number H1Error (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (SmartPtr<UserNumber> , SmartPtr<UserVector> , SmartPtr<GridFunction> , c_string , number , integer )
number H1Error (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (c_string , c_string , SmartPtr<GridFunction> , c_string , number , integer , c_string )
number H1Error (c_string , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (c_string , c_string , SmartPtr<GridFunction> , c_string , number , integer )
number H1Error (c_string , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (SmartPtr<GridFunction> , c_string , SmartPtr<GridFunction> , c_string , integer , c_string )
number H1Error (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (SmartPtr<GridFunction> , c_string , SmartPtr<GridFunction> , c_string , integer )
number H1Error (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (SmartPtr<UserNumber> , SmartPtr<UserVector> , SmartPtr<GridFunction> , c_string , number , integer , c_string )
number H1Error (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (SmartPtr<UserNumber> , SmartPtr<UserVector> , SmartPtr<GridFunction> , c_string , number , integer )
number H1Error (SmartPtr&lt;<a href="UserNumber2d.html">UserNumber</a>&gt; , SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (c_string , c_string , SmartPtr<GridFunction> , c_string , number , integer , c_string )
number H1Error (c_string , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
H1Error
number
number H1Error (c_string , c_string , SmartPtr<GridFunction> , c_string , number , integer )
number H1Error (c_string , c_string , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , number , integer )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Norm
number
number L2Norm (SmartPtr<GridFunction> , c_string , integer , c_string )
number L2Norm (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Norm
number
number L2Norm (SmartPtr<GridFunction> , c_string , integer , c_string )
number L2Norm (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Norm
number
number L2Norm (SmartPtr<GridFunction> , c_string , integer , c_string )
number L2Norm (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Norm
number
number L2Norm (SmartPtr<GridFunction> , c_string , integer , c_string )
number L2Norm (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Norm
number
number L2Norm (SmartPtr<GridFunction> , c_string , integer , c_string )
number L2Norm (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Norm
number
number L2Norm (SmartPtr<GridFunction> , c_string , integer , c_string )
number L2Norm (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Norm
number
number L2Norm (SmartPtr<GridFunction> , c_string , integer , c_string )
number L2Norm (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Norm
number
number L2Norm (SmartPtr<GridFunction> , c_string , integer , c_string )
number L2Norm (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
L2Norm
number
number L2Norm (SmartPtr<GridFunction> , c_string , integer , c_string )
number L2Norm (SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , integer , c_string )<br><br>Registry Group: <b>/ug4/Discretization</b>
function
IntegrateNormalGradientOnManifold
number
number IntegrateNormalGradientOnManifold (GridFunction *GridFunction, c_string Component, c_string BoundarySubset, c_string InnerSubset)
number IntegrateNormalGradientOnManifold (<a href="GridFunction2dCPU1.html">GridFunction</a> *GridFunction, c_string Component, c_string BoundarySubset, c_string InnerSubset)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegrateNormalGradientOnManifold
number
number IntegrateNormalGradientOnManifold (GridFunction *GridFunction, c_string Component, c_string BoundarySubset, c_string InnerSubset)
number IntegrateNormalGradientOnManifold (<a href="GridFunction2dCPU1.html">GridFunction</a> *GridFunction, c_string Component, c_string BoundarySubset, c_string InnerSubset)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegrateNormalGradientOnManifold
number
number IntegrateNormalGradientOnManifold (GridFunction *GridFunction, c_string Component, c_string BoundarySubset, c_string InnerSubset)
number IntegrateNormalGradientOnManifold (<a href="GridFunction2dCPU1.html">GridFunction</a> *GridFunction, c_string Component, c_string BoundarySubset, c_string InnerSubset)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegrateNormalGradientOnManifold
number
number IntegrateNormalGradientOnManifold (GridFunction *GridFunction, c_string Component, c_string BoundarySubset, c_string InnerSubset)
number IntegrateNormalGradientOnManifold (<a href="GridFunction2dCPU1.html">GridFunction</a> *GridFunction, c_string Component, c_string BoundarySubset, c_string InnerSubset)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegrateNormalGradientOnManifold
number
number IntegrateNormalGradientOnManifold (GridFunction *GridFunction, c_string Component, c_string BoundarySubset, c_string InnerSubset)
number IntegrateNormalGradientOnManifold (<a href="GridFunction2dCPU1.html">GridFunction</a> *GridFunction, c_string Component, c_string BoundarySubset, c_string InnerSubset)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegrateNormalGradientOnManifold
number
number IntegrateNormalGradientOnManifold (GridFunction *GridFunction, c_string Component, c_string BoundarySubset, c_string InnerSubset)
number IntegrateNormalGradientOnManifold (<a href="GridFunction2dCPU1.html">GridFunction</a> *GridFunction, c_string Component, c_string BoundarySubset, c_string InnerSubset)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegrateNormalGradientOnManifold
number
number IntegrateNormalGradientOnManifold (GridFunction *GridFunction, c_string Component, c_string BoundarySubset, c_string InnerSubset)
number IntegrateNormalGradientOnManifold (<a href="GridFunction2dCPU1.html">GridFunction</a> *GridFunction, c_string Component, c_string BoundarySubset, c_string InnerSubset)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegrateNormalGradientOnManifold
number
number IntegrateNormalGradientOnManifold (GridFunction *GridFunction, c_string Component, c_string BoundarySubset, c_string InnerSubset)
number IntegrateNormalGradientOnManifold (<a href="GridFunction2dCPU1.html">GridFunction</a> *GridFunction, c_string Component, c_string BoundarySubset, c_string InnerSubset)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegrateNormalGradientOnManifold
number
number IntegrateNormalGradientOnManifold (GridFunction *GridFunction, c_string Component, c_string BoundarySubset, c_string InnerSubset)
number IntegrateNormalGradientOnManifold (<a href="GridFunction2dCPU1.html">GridFunction</a> *GridFunction, c_string Component, c_string BoundarySubset, c_string InnerSubset)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time, integer QuadOrder)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, number Time)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaData, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time, integer QuadOrder)
number IntegralNormalComponentOnManifold (c_string LuaData, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time)
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, number Time)
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets)
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets)
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time, integer QuadOrder)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, number Time)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaData, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time, integer QuadOrder)
number IntegralNormalComponentOnManifold (c_string LuaData, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time)
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, number Time)
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets)
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets)
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time, integer QuadOrder)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, number Time)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaData, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time, integer QuadOrder)
number IntegralNormalComponentOnManifold (c_string LuaData, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time)
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, number Time)
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets)
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets)
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time, integer QuadOrder)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, number Time)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaData, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time, integer QuadOrder)
number IntegralNormalComponentOnManifold (c_string LuaData, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time)
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, number Time)
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets)
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets)
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time, integer QuadOrder)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, number Time)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaData, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time, integer QuadOrder)
number IntegralNormalComponentOnManifold (c_string LuaData, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time)
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, number Time)
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets)
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets)
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time, integer QuadOrder)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, number Time)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaData, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time, integer QuadOrder)
number IntegralNormalComponentOnManifold (c_string LuaData, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time)
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, number Time)
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets)
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets)
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time, integer QuadOrder)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, number Time)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaData, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time, integer QuadOrder)
number IntegralNormalComponentOnManifold (c_string LuaData, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time)
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, number Time)
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets)
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets)
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time, integer QuadOrder)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, number Time)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaData, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time, integer QuadOrder)
number IntegralNormalComponentOnManifold (c_string LuaData, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time)
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, number Time)
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets)
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets)
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time, integer QuadOrder)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, number Time)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (SmartPtr<UserVector> Data, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets)
number IntegralNormalComponentOnManifold (SmartPtr&lt;<a href="UserVector2d.html">UserVector</a>&gt; Data, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaData, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time, integer QuadOrder)
number IntegralNormalComponentOnManifold (c_string LuaData, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time, integer QuadOrder)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time)
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, number Time)
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, number Time)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets, c_string InnerSubsets)
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets, c_string InnerSubsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegralNormalComponentOnManifold
number
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr<GridFunction> GridFunction, c_string BoundarySubsets)
number IntegralNormalComponentOnManifold (c_string LuaFunction, SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; GridFunction, c_string BoundarySubsets)<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegrateDiscFlux
number
number IntegrateDiscFlux (SmartPtr<IAssemble> , SmartPtr<GridFunction> , c_string , c_string )
number IntegrateDiscFlux (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , c_string )<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegrateDiscFlux
number
number IntegrateDiscFlux (SmartPtr<IAssemble> , SmartPtr<GridFunction> , c_string , c_string )
number IntegrateDiscFlux (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , c_string )<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegrateDiscFlux
number
number IntegrateDiscFlux (SmartPtr<IAssemble> , SmartPtr<GridFunction> , c_string , c_string )
number IntegrateDiscFlux (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , c_string )<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegrateDiscFlux
number
number IntegrateDiscFlux (SmartPtr<IAssemble> , SmartPtr<GridFunction> , c_string , c_string )
number IntegrateDiscFlux (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , c_string )<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegrateDiscFlux
number
number IntegrateDiscFlux (SmartPtr<IAssemble> , SmartPtr<GridFunction> , c_string , c_string )
number IntegrateDiscFlux (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , c_string )<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegrateDiscFlux
number
number IntegrateDiscFlux (SmartPtr<IAssemble> , SmartPtr<GridFunction> , c_string , c_string )
number IntegrateDiscFlux (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , c_string )<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegrateDiscFlux
number
number IntegrateDiscFlux (SmartPtr<IAssemble> , SmartPtr<GridFunction> , c_string , c_string )
number IntegrateDiscFlux (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , c_string )<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegrateDiscFlux
number
number IntegrateDiscFlux (SmartPtr<IAssemble> , SmartPtr<GridFunction> , c_string , c_string )
number IntegrateDiscFlux (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , c_string )<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
IntegrateDiscFlux
number
number IntegrateDiscFlux (SmartPtr<IAssemble> , SmartPtr<GridFunction> , c_string , c_string )
number IntegrateDiscFlux (SmartPtr&lt;<a href="IAssembleCPU1.html">IAssemble</a>&gt; , SmartPtr&lt;<a href="GridFunction2dCPU1.html">GridFunction</a>&gt; , c_string , c_string )<br><br>returns Integral<br>Registry Group: <b>/ug4/Discretization</b>
function
InitUG
void
void InitUG (integer Dimension, const AlgebraType *AlgebraType, bool verbose)
void InitUG (integer Dimension, const <a href="AlgebraType.html">AlgebraType</a> *AlgebraType, bool verbose)<br><br>Registry Group: <b>/ug4/Init</b>
function
InitUG
void
void InitUG (integer Dimension, const AlgebraType *AlgebraType)
void InitUG (integer Dimension, const <a href="AlgebraType.html">AlgebraType</a> *AlgebraType)<br><br>Registry Group: <b>/ug4/Init</b>
function
GetVolume
number
number GetVolume (number , number , number )
number GetVolume (number , number , number )<br><br>returns calculate Volume for given geometrical parameters<br>Registry Group: <b>(Plugin) ug4/tkd_generator/</b>
function
GetSurface
number
number GetSurface (number , number , number )
number GetSurface (number , number , number )<br><br>returns calculate Surface for given geometrical parameters<br>Registry Group: <b>(Plugin) ug4/tkd_generator/</b>
function
CorneocyteIndex
integer
integer CorneocyteIndex ()
integer CorneocyteIndex ()<br><br>returns Get subset index for corneocytes<br>Registry Group: <b>(Plugin) ug4/tkd_generator/</b>
function
LipidIndex
integer
integer LipidIndex ()
integer LipidIndex ()<br><br>returns Get subset index for lipid matrix<br>Registry Group: <b>(Plugin) ug4/tkd_generator/</b>
function
GetFullSubdomainBlockingCoarsening
IParallelCoarsening*
IParallelCoarsening *GetFullSubdomainBlockingCoarsening ()
<a href="IParallelCoarsening.html">IParallelCoarsening</a> *GetFullSubdomainBlockingCoarsening ()<br><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
function
GetColorCoarsening
IParallelCoarsening*
IParallelCoarsening *GetColorCoarsening ()
<a href="IParallelCoarsening.html">IParallelCoarsening</a> *GetColorCoarsening ()<br><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
function
GetRS3Coarsening
IParallelCoarsening*
IParallelCoarsening *GetRS3Coarsening ()
<a href="IParallelCoarsening.html">IParallelCoarsening</a> *GetRS3Coarsening ()<br><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
function
GetCLJPCoarsening
IParallelCoarsening*
IParallelCoarsening *GetCLJPCoarsening ()
<a href="IParallelCoarsening.html">IParallelCoarsening</a> *GetCLJPCoarsening ()<br><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
function
GetFalgoutCoarsening
IParallelCoarsening*
IParallelCoarsening *GetFalgoutCoarsening ()
<a href="IParallelCoarsening.html">IParallelCoarsening</a> *GetFalgoutCoarsening ()<br><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
function
GetMinimumSubdomainBlockingCoarsening
IParallelCoarsening*
IParallelCoarsening *GetMinimumSubdomainBlockingCoarsening ()
<a href="IParallelCoarsening.html">IParallelCoarsening</a> *GetMinimumSubdomainBlockingCoarsening ()<br><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
function
GetCoarseGridClassificationCoarsening
IParallelCoarsening*
IParallelCoarsening *GetCoarseGridClassificationCoarsening ()
<a href="IParallelCoarsening.html">IParallelCoarsening</a> *GetCoarseGridClassificationCoarsening ()<br><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
function
GetSimpleParallelCoarsening
IParallelCoarsening*
IParallelCoarsening *GetSimpleParallelCoarsening ()
<a href="IParallelCoarsening.html">IParallelCoarsening</a> *GetSimpleParallelCoarsening ()<br><br>Registry Group: <b>(Plugin) ug4//Algebra/Preconditioner</b>
function
SGridTest_CreateElements
void
void SGridTest_CreateElements ()
void SGridTest_CreateElements ()<br><br>tooltip: Performs element tests for structured grids<br>Registry Group: <b>(Plugin) ug4//Template</b>
function
ElementQualityStatistics
void
void ElementQualityStatistics (Grid *grid)
void ElementQualityStatistics (<a href="Grid.html">Grid</a> *grid)<br><br>Registry Group: <b>(Plugin) ug4/ElementQualityStatistics/</b>
function
ElementQualityStatistics
void
void ElementQualityStatistics (MultiGrid *mg)
void ElementQualityStatistics (<a href="MultiGrid.html">MultiGrid</a> *mg)<br><br>Registry Group: <b>(Plugin) ug4/ElementQualityStatistics/</b>
function
get_subset_surface_area
number
number get_subset_surface_area (MultiGrid *mg, integer subsetIndex, MGSubsetHandler *sh)
number get_subset_surface_area (<a href="MultiGrid.html">MultiGrid</a> *mg, integer subsetIndex, <a href="MGSubsetHandler.html">MGSubsetHandler</a> *sh)<br><br>Registry Group: <b>(Plugin) ug4/ElementQualityStatistics/</b>
function
get_subset_volume
number
number get_subset_volume (MultiGrid *mg, integer subsetIndex, MGSubsetHandler *sh)
number get_subset_volume (<a href="MultiGrid.html">MultiGrid</a> *mg, integer subsetIndex, <a href="MGSubsetHandler.html">MGSubsetHandler</a> *sh)<br><br>Registry Group: <b>(Plugin) ug4/ElementQualityStatistics/</b>
function
BuildBouton
void
void BuildBouton (number radius, integer numRefinements, integer numReleaseSites, number a)
void BuildBouton (number radius, integer numRefinements, integer numReleaseSites, number a)<br><br>Registry Group: <b>(Plugin) ug4/ElementQualityStatistics/</b>
function
cflNumber
void
void cflNumber (GridFunction *, number )
void cflNumber (<a href="GridFunction2dCPU1.html">GridFunction</a> *, number )<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
function
cflNumber
void
void cflNumber (GridFunction *, number )
void cflNumber (<a href="GridFunction2dCPU1.html">GridFunction</a> *, number )<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
function
cflNumber
void
void cflNumber (GridFunction *, number )
void cflNumber (<a href="GridFunction2dCPU1.html">GridFunction</a> *, number )<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
function
cflNumber
void
void cflNumber (GridFunction *, number )
void cflNumber (<a href="GridFunction2dCPU1.html">GridFunction</a> *, number )<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
function
cflNumber
void
void cflNumber (GridFunction *, number )
void cflNumber (<a href="GridFunction2dCPU1.html">GridFunction</a> *, number )<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
function
cflNumber
void
void cflNumber (GridFunction *, number )
void cflNumber (<a href="GridFunction2dCPU1.html">GridFunction</a> *, number )<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
function
vorticity
void
void vorticity (GridFunction *, GridFunction *)
void vorticity (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
function
vorticity
void
void vorticity (GridFunction *, GridFunction *)
void vorticity (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
function
vorticity
void
void vorticity (GridFunction *, GridFunction *)
void vorticity (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
function
vorticity
void
void vorticity (GridFunction *, GridFunction *)
void vorticity (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
function
vorticity
void
void vorticity (GridFunction *, GridFunction *)
void vorticity (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
function
vorticity
void
void vorticity (GridFunction *, GridFunction *)
void vorticity (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
function
kineticEnergy
void
void kineticEnergy (GridFunction *)
void kineticEnergy (<a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
function
kineticEnergy
void
void kineticEnergy (GridFunction *)
void kineticEnergy (<a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
function
kineticEnergy
void
void kineticEnergy (GridFunction *)
void kineticEnergy (<a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
function
kineticEnergy
void
void kineticEnergy (GridFunction *)
void kineticEnergy (<a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
function
kineticEnergy
void
void kineticEnergy (GridFunction *)
void kineticEnergy (<a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
function
kineticEnergy
void
void kineticEnergy (GridFunction *)
void kineticEnergy (<a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
function
dcevaluation
void
void dcevaluation (GridFunction *, size_t )
void dcevaluation (<a href="GridFunction2dCPU1.html">GridFunction</a> *, size_t )<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
function
dcevaluation
void
void dcevaluation (GridFunction *, size_t )
void dcevaluation (<a href="GridFunction2dCPU1.html">GridFunction</a> *, size_t )<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
function
dcevaluation
void
void dcevaluation (GridFunction *, size_t )
void dcevaluation (<a href="GridFunction2dCPU1.html">GridFunction</a> *, size_t )<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
function
dcevaluation
void
void dcevaluation (GridFunction *, size_t )
void dcevaluation (<a href="GridFunction2dCPU1.html">GridFunction</a> *, size_t )<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
function
dcevaluation
void
void dcevaluation (GridFunction *, size_t )
void dcevaluation (<a href="GridFunction2dCPU1.html">GridFunction</a> *, size_t )<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
function
dcevaluation
void
void dcevaluation (GridFunction *, size_t )
void dcevaluation (<a href="GridFunction2dCPU1.html">GridFunction</a> *, size_t )<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/</b>
function
OrderCRCuthillMcKee
void
void OrderCRCuthillMcKee (ApproximationSpace *, GridFunction *, bool )
void OrderCRCuthillMcKee (<a href="ApproximationSpace2d.html">ApproximationSpace</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool )<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
function
OrderCRCuthillMcKee
void
void OrderCRCuthillMcKee (ApproximationSpace *, GridFunction *, bool )
void OrderCRCuthillMcKee (<a href="ApproximationSpace2d.html">ApproximationSpace</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool )<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
function
OrderCRCuthillMcKee
void
void OrderCRCuthillMcKee (ApproximationSpace *, GridFunction *, bool )
void OrderCRCuthillMcKee (<a href="ApproximationSpace2d.html">ApproximationSpace</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool )<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
function
OrderCRCuthillMcKee
void
void OrderCRCuthillMcKee (ApproximationSpace *, GridFunction *, bool )
void OrderCRCuthillMcKee (<a href="ApproximationSpace2d.html">ApproximationSpace</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool )<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
function
OrderCRCuthillMcKee
void
void OrderCRCuthillMcKee (ApproximationSpace *, GridFunction *, bool )
void OrderCRCuthillMcKee (<a href="ApproximationSpace2d.html">ApproximationSpace</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool )<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
function
OrderCRCuthillMcKee
void
void OrderCRCuthillMcKee (ApproximationSpace *, GridFunction *, bool )
void OrderCRCuthillMcKee (<a href="ApproximationSpace2d.html">ApproximationSpace</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool )<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
function
CROrderCuthillMcKee
void
void CROrderCuthillMcKee (ApproximationSpace *, GridFunction *, bool , bool , bool , bool )
void CROrderCuthillMcKee (<a href="ApproximationSpace2d.html">ApproximationSpace</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool , bool , bool , bool )<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
function
CROrderCuthillMcKee
void
void CROrderCuthillMcKee (ApproximationSpace *, GridFunction *, bool , bool , bool , bool )
void CROrderCuthillMcKee (<a href="ApproximationSpace2d.html">ApproximationSpace</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool , bool , bool , bool )<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
function
CROrderCuthillMcKee
void
void CROrderCuthillMcKee (ApproximationSpace *, GridFunction *, bool , bool , bool , bool )
void CROrderCuthillMcKee (<a href="ApproximationSpace2d.html">ApproximationSpace</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool , bool , bool , bool )<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
function
CROrderCuthillMcKee
void
void CROrderCuthillMcKee (ApproximationSpace *, GridFunction *, bool , bool , bool , bool )
void CROrderCuthillMcKee (<a href="ApproximationSpace2d.html">ApproximationSpace</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool , bool , bool , bool )<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
function
CROrderCuthillMcKee
void
void CROrderCuthillMcKee (ApproximationSpace *, GridFunction *, bool , bool , bool , bool )
void CROrderCuthillMcKee (<a href="ApproximationSpace2d.html">ApproximationSpace</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool , bool , bool , bool )<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
function
CROrderCuthillMcKee
void
void CROrderCuthillMcKee (ApproximationSpace *, GridFunction *, bool , bool , bool , bool )
void CROrderCuthillMcKee (<a href="ApproximationSpace2d.html">ApproximationSpace</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool , bool , bool , bool )<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
function
CROrderSloan
void
void CROrderSloan (ApproximationSpace *, GridFunction *, bool , bool , bool )
void CROrderSloan (<a href="ApproximationSpace2d.html">ApproximationSpace</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool , bool , bool )<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
function
CROrderSloan
void
void CROrderSloan (ApproximationSpace *, GridFunction *, bool , bool , bool )
void CROrderSloan (<a href="ApproximationSpace2d.html">ApproximationSpace</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool , bool , bool )<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
function
CROrderSloan
void
void CROrderSloan (ApproximationSpace *, GridFunction *, bool , bool , bool )
void CROrderSloan (<a href="ApproximationSpace2d.html">ApproximationSpace</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool , bool , bool )<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
function
CROrderSloan
void
void CROrderSloan (ApproximationSpace *, GridFunction *, bool , bool , bool )
void CROrderSloan (<a href="ApproximationSpace2d.html">ApproximationSpace</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool , bool , bool )<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
function
CROrderSloan
void
void CROrderSloan (ApproximationSpace *, GridFunction *, bool , bool , bool )
void CROrderSloan (<a href="ApproximationSpace2d.html">ApproximationSpace</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool , bool , bool )<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
function
CROrderSloan
void
void CROrderSloan (ApproximationSpace *, GridFunction *, bool , bool , bool )
void CROrderSloan (<a href="ApproximationSpace2d.html">ApproximationSpace</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool , bool , bool )<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
function
CROrderKing
void
void CROrderKing (ApproximationSpace *, GridFunction *, bool , bool , bool , bool )
void CROrderKing (<a href="ApproximationSpace2d.html">ApproximationSpace</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool , bool , bool , bool )<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
function
CROrderKing
void
void CROrderKing (ApproximationSpace *, GridFunction *, bool , bool , bool , bool )
void CROrderKing (<a href="ApproximationSpace2d.html">ApproximationSpace</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool , bool , bool , bool )<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
function
CROrderKing
void
void CROrderKing (ApproximationSpace *, GridFunction *, bool , bool , bool , bool )
void CROrderKing (<a href="ApproximationSpace2d.html">ApproximationSpace</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool , bool , bool , bool )<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
function
CROrderKing
void
void CROrderKing (ApproximationSpace *, GridFunction *, bool , bool , bool , bool )
void CROrderKing (<a href="ApproximationSpace2d.html">ApproximationSpace</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool , bool , bool , bool )<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
function
CROrderKing
void
void CROrderKing (ApproximationSpace *, GridFunction *, bool , bool , bool , bool )
void CROrderKing (<a href="ApproximationSpace2d.html">ApproximationSpace</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool , bool , bool , bool )<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
function
CROrderKing
void
void CROrderKing (ApproximationSpace *, GridFunction *, bool , bool , bool , bool )
void CROrderKing (<a href="ApproximationSpace2d.html">ApproximationSpace</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool , bool , bool , bool )<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
function
CROrderMinimumDegree
void
void CROrderMinimumDegree (ApproximationSpace *, GridFunction *, bool , bool , bool )
void CROrderMinimumDegree (<a href="ApproximationSpace2d.html">ApproximationSpace</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool , bool , bool )<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
function
CROrderMinimumDegree
void
void CROrderMinimumDegree (ApproximationSpace *, GridFunction *, bool , bool , bool )
void CROrderMinimumDegree (<a href="ApproximationSpace2d.html">ApproximationSpace</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool , bool , bool )<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
function
CROrderMinimumDegree
void
void CROrderMinimumDegree (ApproximationSpace *, GridFunction *, bool , bool , bool )
void CROrderMinimumDegree (<a href="ApproximationSpace2d.html">ApproximationSpace</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool , bool , bool )<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
function
CROrderMinimumDegree
void
void CROrderMinimumDegree (ApproximationSpace *, GridFunction *, bool , bool , bool )
void CROrderMinimumDegree (<a href="ApproximationSpace2d.html">ApproximationSpace</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool , bool , bool )<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
function
CROrderMinimumDegree
void
void CROrderMinimumDegree (ApproximationSpace *, GridFunction *, bool , bool , bool )
void CROrderMinimumDegree (<a href="ApproximationSpace2d.html">ApproximationSpace</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool , bool , bool )<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
function
CROrderMinimumDegree
void
void CROrderMinimumDegree (ApproximationSpace *, GridFunction *, bool , bool , bool )
void CROrderMinimumDegree (<a href="ApproximationSpace2d.html">ApproximationSpace</a> *, <a href="GridFunction2dCPU1.html">GridFunction</a> *, bool , bool , bool )<br><br>Registry Group: <b>(Plugin) ug4/SpatialDisc/NavierStokes/SpatialDisc/NavierStokes/</b>
function
LinProj_init
bool
bool LinProj_init (LinProjElementEvaluator *, const GridFunction *)
bool LinProj_init (<a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
LinProj_init
bool
bool LinProj_init (LinProjElementEvaluator *, const GridFunction *)
bool LinProj_init (<a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
LinProj_init
bool
bool LinProj_init (LinProjElementEvaluator *, const GridFunction *)
bool LinProj_init (<a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
LinProj_init
bool
bool LinProj_init (LinProjElementEvaluator *, const GridFunction *)
bool LinProj_init (<a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
LinProj_init
bool
bool LinProj_init (LinProjElementEvaluator *, const GridFunction *)
bool LinProj_init (<a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
LinProj_init
bool
bool LinProj_init (LinProjElementEvaluator *, const GridFunction *)
bool LinProj_init (<a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
LinProj_init
bool
bool LinProj_init (LinProjElementEvaluator *, const GridFunction *)
bool LinProj_init (<a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
LinProj_init
bool
bool LinProj_init (LinProjElementEvaluator *, const GridFunction *)
bool LinProj_init (<a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
LinProj_init
bool
bool LinProj_init (LinProjElementEvaluator *, const GridFunction *)
bool LinProj_init (<a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
LinProj_check_tolerance
number
number LinProj_check_tolerance (LinProjElementEvaluator *, const GridFunction *)
number LinProj_check_tolerance (<a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
LinProj_check_tolerance
number
number LinProj_check_tolerance (LinProjElementEvaluator *, const GridFunction *)
number LinProj_check_tolerance (<a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
LinProj_check_tolerance
number
number LinProj_check_tolerance (LinProjElementEvaluator *, const GridFunction *)
number LinProj_check_tolerance (<a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
LinProj_check_tolerance
number
number LinProj_check_tolerance (LinProjElementEvaluator *, const GridFunction *)
number LinProj_check_tolerance (<a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
LinProj_check_tolerance
number
number LinProj_check_tolerance (LinProjElementEvaluator *, const GridFunction *)
number LinProj_check_tolerance (<a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
LinProj_check_tolerance
number
number LinProj_check_tolerance (LinProjElementEvaluator *, const GridFunction *)
number LinProj_check_tolerance (<a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
LinProj_check_tolerance
number
number LinProj_check_tolerance (LinProjElementEvaluator *, const GridFunction *)
number LinProj_check_tolerance (<a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
LinProj_check_tolerance
number
number LinProj_check_tolerance (LinProjElementEvaluator *, const GridFunction *)
number LinProj_check_tolerance (<a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
LinProj_check_tolerance
number
number LinProj_check_tolerance (LinProjElementEvaluator *, const GridFunction *)
number LinProj_check_tolerance (<a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
linProj_error
void
void linProj_error (number , GridFunction *, LinProjElementEvaluator *, const GridFunction *)
void linProj_error (number , <a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
linProj_error
void
void linProj_error (number , GridFunction *, LinProjElementEvaluator *, const GridFunction *)
void linProj_error (number , <a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
linProj_error
void
void linProj_error (number , GridFunction *, LinProjElementEvaluator *, const GridFunction *)
void linProj_error (number , <a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
linProj_error
void
void linProj_error (number , GridFunction *, LinProjElementEvaluator *, const GridFunction *)
void linProj_error (number , <a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
linProj_error
void
void linProj_error (number , GridFunction *, LinProjElementEvaluator *, const GridFunction *)
void linProj_error (number , <a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
linProj_error
void
void linProj_error (number , GridFunction *, LinProjElementEvaluator *, const GridFunction *)
void linProj_error (number , <a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
linProj_error
void
void linProj_error (number , GridFunction *, LinProjElementEvaluator *, const GridFunction *)
void linProj_error (number , <a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
linProj_error
void
void linProj_error (number , GridFunction *, LinProjElementEvaluator *, const GridFunction *)
void linProj_error (number , <a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
linProj_error
void
void linProj_error (number , GridFunction *, LinProjElementEvaluator *, const GridFunction *)
void linProj_error (number , <a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
equiv_plastic_strain
void
void equiv_plastic_strain (number , GridFunction *, LinProjElementEvaluator *, const GridFunction *)
void equiv_plastic_strain (number , <a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
equiv_plastic_strain
void
void equiv_plastic_strain (number , GridFunction *, LinProjElementEvaluator *, const GridFunction *)
void equiv_plastic_strain (number , <a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
equiv_plastic_strain
void
void equiv_plastic_strain (number , GridFunction *, LinProjElementEvaluator *, const GridFunction *)
void equiv_plastic_strain (number , <a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
equiv_plastic_strain
void
void equiv_plastic_strain (number , GridFunction *, LinProjElementEvaluator *, const GridFunction *)
void equiv_plastic_strain (number , <a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
equiv_plastic_strain
void
void equiv_plastic_strain (number , GridFunction *, LinProjElementEvaluator *, const GridFunction *)
void equiv_plastic_strain (number , <a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
equiv_plastic_strain
void
void equiv_plastic_strain (number , GridFunction *, LinProjElementEvaluator *, const GridFunction *)
void equiv_plastic_strain (number , <a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
equiv_plastic_strain
void
void equiv_plastic_strain (number , GridFunction *, LinProjElementEvaluator *, const GridFunction *)
void equiv_plastic_strain (number , <a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
equiv_plastic_strain
void
void equiv_plastic_strain (number , GridFunction *, LinProjElementEvaluator *, const GridFunction *)
void equiv_plastic_strain (number , <a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
equiv_plastic_strain
void
void equiv_plastic_strain (number , GridFunction *, LinProjElementEvaluator *, const GridFunction *)
void equiv_plastic_strain (number , <a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
plastic_ip
void
void plastic_ip (GridFunction *, LinProjElementEvaluator *, const GridFunction *)
void plastic_ip (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
plastic_ip
void
void plastic_ip (GridFunction *, LinProjElementEvaluator *, const GridFunction *)
void plastic_ip (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
plastic_ip
void
void plastic_ip (GridFunction *, LinProjElementEvaluator *, const GridFunction *)
void plastic_ip (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
plastic_ip
void
void plastic_ip (GridFunction *, LinProjElementEvaluator *, const GridFunction *)
void plastic_ip (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
plastic_ip
void
void plastic_ip (GridFunction *, LinProjElementEvaluator *, const GridFunction *)
void plastic_ip (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
plastic_ip
void
void plastic_ip (GridFunction *, LinProjElementEvaluator *, const GridFunction *)
void plastic_ip (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
plastic_ip
void
void plastic_ip (GridFunction *, LinProjElementEvaluator *, const GridFunction *)
void plastic_ip (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
plastic_ip
void
void plastic_ip (GridFunction *, LinProjElementEvaluator *, const GridFunction *)
void plastic_ip (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
plastic_ip
void
void plastic_ip (GridFunction *, LinProjElementEvaluator *, const GridFunction *)
void plastic_ip (<a href="GridFunction2dCPU1.html">GridFunction</a> *, <a href="LinProjElementEvaluator2d.html">LinProjElementEvaluator</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *)<br><br>Registry Group: <b>(Plugin) ug4//Discretization</b>
function
AssembleDirichletRows
void
void AssembleDirichletRows (MatrixOperator *, DirichletBoundary *, const SmartPtr<ApproximationSpace> )
void AssembleDirichletRows (<a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, <a href="DirichletBoundary2dCPU1.html">DirichletBoundary</a> *, const SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )<br><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/1d</b>
function
AssembleDirichletRows
void
void AssembleDirichletRows (MatrixOperator *, DirichletBoundary *, const SmartPtr<ApproximationSpace> , number )
void AssembleDirichletRows (<a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, <a href="DirichletBoundary2dCPU1.html">DirichletBoundary</a> *, const SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; , number )<br><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/1d</b>
function
AssembleDirichletRows
void
void AssembleDirichletRows (MatrixOperator *, DirichletBoundary *, const SmartPtr<ApproximationSpace> )
void AssembleDirichletRows (<a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, <a href="DirichletBoundary2dCPU1.html">DirichletBoundary</a> *, const SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )<br><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/2d</b>
function
AssembleDirichletRows
void
void AssembleDirichletRows (MatrixOperator *, DirichletBoundary *, const SmartPtr<ApproximationSpace> , number )
void AssembleDirichletRows (<a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, <a href="DirichletBoundary2dCPU1.html">DirichletBoundary</a> *, const SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; , number )<br><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/2d</b>
function
AssembleDirichletRows
void
void AssembleDirichletRows (MatrixOperator *, DirichletBoundary *, const SmartPtr<ApproximationSpace> )
void AssembleDirichletRows (<a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, <a href="DirichletBoundary2dCPU1.html">DirichletBoundary</a> *, const SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )<br><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/3d</b>
function
AssembleDirichletRows
void
void AssembleDirichletRows (MatrixOperator *, DirichletBoundary *, const SmartPtr<ApproximationSpace> , number )
void AssembleDirichletRows (<a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, <a href="DirichletBoundary2dCPU1.html">DirichletBoundary</a> *, const SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; , number )<br><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/3d</b>
function
AssembleDirichletRows
void
void AssembleDirichletRows (MatrixOperator *, DirichletBoundary *, const SmartPtr<ApproximationSpace> )
void AssembleDirichletRows (<a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, <a href="DirichletBoundary2dCPU1.html">DirichletBoundary</a> *, const SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )<br><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/1d</b>
function
AssembleDirichletRows
void
void AssembleDirichletRows (MatrixOperator *, DirichletBoundary *, const SmartPtr<ApproximationSpace> , number )
void AssembleDirichletRows (<a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, <a href="DirichletBoundary2dCPU1.html">DirichletBoundary</a> *, const SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; , number )<br><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/1d</b>
function
AssembleDirichletRows
void
void AssembleDirichletRows (MatrixOperator *, DirichletBoundary *, const SmartPtr<ApproximationSpace> )
void AssembleDirichletRows (<a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, <a href="DirichletBoundary2dCPU1.html">DirichletBoundary</a> *, const SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )<br><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/2d</b>
function
AssembleDirichletRows
void
void AssembleDirichletRows (MatrixOperator *, DirichletBoundary *, const SmartPtr<ApproximationSpace> , number )
void AssembleDirichletRows (<a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, <a href="DirichletBoundary2dCPU1.html">DirichletBoundary</a> *, const SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; , number )<br><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/2d</b>
function
AssembleDirichletRows
void
void AssembleDirichletRows (MatrixOperator *, DirichletBoundary *, const SmartPtr<ApproximationSpace> )
void AssembleDirichletRows (<a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, <a href="DirichletBoundary2dCPU1.html">DirichletBoundary</a> *, const SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )<br><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/3d</b>
function
AssembleDirichletRows
void
void AssembleDirichletRows (MatrixOperator *, DirichletBoundary *, const SmartPtr<ApproximationSpace> , number )
void AssembleDirichletRows (<a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, <a href="DirichletBoundary2dCPU1.html">DirichletBoundary</a> *, const SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; , number )<br><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/3d</b>
function
AssembleDirichletRows
void
void AssembleDirichletRows (MatrixOperator *, DirichletBoundary *, const SmartPtr<ApproximationSpace> )
void AssembleDirichletRows (<a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, <a href="DirichletBoundary2dCPU1.html">DirichletBoundary</a> *, const SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )<br><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/1d</b>
function
AssembleDirichletRows
void
void AssembleDirichletRows (MatrixOperator *, DirichletBoundary *, const SmartPtr<ApproximationSpace> , number )
void AssembleDirichletRows (<a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, <a href="DirichletBoundary2dCPU1.html">DirichletBoundary</a> *, const SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; , number )<br><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/1d</b>
function
AssembleDirichletRows
void
void AssembleDirichletRows (MatrixOperator *, DirichletBoundary *, const SmartPtr<ApproximationSpace> )
void AssembleDirichletRows (<a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, <a href="DirichletBoundary2dCPU1.html">DirichletBoundary</a> *, const SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )<br><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/2d</b>
function
AssembleDirichletRows
void
void AssembleDirichletRows (MatrixOperator *, DirichletBoundary *, const SmartPtr<ApproximationSpace> , number )
void AssembleDirichletRows (<a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, <a href="DirichletBoundary2dCPU1.html">DirichletBoundary</a> *, const SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; , number )<br><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/2d</b>
function
AssembleDirichletRows
void
void AssembleDirichletRows (MatrixOperator *, DirichletBoundary *, const SmartPtr<ApproximationSpace> )
void AssembleDirichletRows (<a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, <a href="DirichletBoundary2dCPU1.html">DirichletBoundary</a> *, const SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; )<br><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/3d</b>
function
AssembleDirichletRows
void
void AssembleDirichletRows (MatrixOperator *, DirichletBoundary *, const SmartPtr<ApproximationSpace> , number )
void AssembleDirichletRows (<a href="MatrixOperatorCPU1.html">MatrixOperator</a> *, <a href="DirichletBoundary2dCPU1.html">DirichletBoundary</a> *, const SmartPtr&lt;<a href="ApproximationSpace2d.html">ApproximationSpace</a>&gt; , number )<br><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/3d</b>
function
AssignP1GridFunctionOnSubset
bool
bool AssignP1GridFunctionOnSubset (GridFunction *, const GridFunction *, c_string )
bool AssignP1GridFunctionOnSubset (<a href="GridFunction2dCPU1.html">GridFunction</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string )<br><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/1d</b>
function
AssignP1GridFunctionOnSubset
bool
bool AssignP1GridFunctionOnSubset (GridFunction *, const GridFunction *, c_string )
bool AssignP1GridFunctionOnSubset (<a href="GridFunction2dCPU1.html">GridFunction</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string )<br><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/2d</b>
function
AssignP1GridFunctionOnSubset
bool
bool AssignP1GridFunctionOnSubset (GridFunction *, const GridFunction *, c_string )
bool AssignP1GridFunctionOnSubset (<a href="GridFunction2dCPU1.html">GridFunction</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string )<br><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/3d</b>
function
AssignP1GridFunctionOnSubset
bool
bool AssignP1GridFunctionOnSubset (GridFunction *, const GridFunction *, c_string )
bool AssignP1GridFunctionOnSubset (<a href="GridFunction2dCPU1.html">GridFunction</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string )<br><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/1d</b>
function
AssignP1GridFunctionOnSubset
bool
bool AssignP1GridFunctionOnSubset (GridFunction *, const GridFunction *, c_string )
bool AssignP1GridFunctionOnSubset (<a href="GridFunction2dCPU1.html">GridFunction</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string )<br><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/2d</b>
function
AssignP1GridFunctionOnSubset
bool
bool AssignP1GridFunctionOnSubset (GridFunction *, const GridFunction *, c_string )
bool AssignP1GridFunctionOnSubset (<a href="GridFunction2dCPU1.html">GridFunction</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string )<br><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/3d</b>
function
AssignP1GridFunctionOnSubset
bool
bool AssignP1GridFunctionOnSubset (GridFunction *, const GridFunction *, c_string )
bool AssignP1GridFunctionOnSubset (<a href="GridFunction2dCPU1.html">GridFunction</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string )<br><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/1d</b>
function
AssignP1GridFunctionOnSubset
bool
bool AssignP1GridFunctionOnSubset (GridFunction *, const GridFunction *, c_string )
bool AssignP1GridFunctionOnSubset (<a href="GridFunction2dCPU1.html">GridFunction</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string )<br><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/2d</b>
function
AssignP1GridFunctionOnSubset
bool
bool AssignP1GridFunctionOnSubset (GridFunction *, const GridFunction *, c_string )
bool AssignP1GridFunctionOnSubset (<a href="GridFunction2dCPU1.html">GridFunction</a> *, const <a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string )<br><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/3d</b>
function
max_function
number
number max_function (GridFunction *, c_string , c_string )
number max_function (<a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string , c_string )<br><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/1d</b>
function
max_function
number
number max_function (GridFunction *, c_string , c_string )
number max_function (<a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string , c_string )<br><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/2d</b>
function
max_function
number
number max_function (GridFunction *, c_string , c_string )
number max_function (<a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string , c_string )<br><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/3d</b>
function
max_function
number
number max_function (GridFunction *, c_string , c_string )
number max_function (<a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string , c_string )<br><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/1d</b>
function
max_function
number
number max_function (GridFunction *, c_string , c_string )
number max_function (<a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string , c_string )<br><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/2d</b>
function
max_function
number
number max_function (GridFunction *, c_string , c_string )
number max_function (<a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string , c_string )<br><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/3d</b>
function
max_function
number
number max_function (GridFunction *, c_string , c_string )
number max_function (<a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string , c_string )<br><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/1d</b>
function
max_function
number
number max_function (GridFunction *, c_string , c_string )
number max_function (<a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string , c_string )<br><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/2d</b>
function
max_function
number
number max_function (GridFunction *, c_string , c_string )
number max_function (<a href="GridFunction2dCPU1.html">GridFunction</a> *, c_string , c_string )<br><br>Registry Group: <b>(Plugin) ug4/Neuron//Discretization/3d</b>
function
HhFlux
void
void HhFlux (Vector *, const Vector *, const Vector *, const Vector *, const Vector *, const Vector *)
void HhFlux (<a href="VectorCPU1.html">Vector</a> *, const <a href="VectorCPU1.html">Vector</a> *, const <a href="VectorCPU1.html">Vector</a> *, const <a href="VectorCPU1.html">Vector</a> *, const <a href="VectorCPU1.html">Vector</a> *, const <a href="VectorCPU1.html">Vector</a> *)<br><br>Registry Group: <b>(Plugin) ug4/Neuron/</b>
function
SmoothDomain
void
void SmoothDomain (Domain *, number , integer , number )
void SmoothDomain (<a href="Domain2d.html">Domain</a> *, number , integer , number )<br><br>Registry Group: <b>(Plugin) ug4//GridHierarchySmoothing</b>
function
SmoothDomain
void
void SmoothDomain (Domain *, number , integer , number )
void SmoothDomain (<a href="Domain2d.html">Domain</a> *, number , integer , number )<br><br>Registry Group: <b>(Plugin) ug4//GridHierarchySmoothing</b>
function
SmoothDomain
void
void SmoothDomain (Domain *, number , integer , number )
void SmoothDomain (<a href="Domain2d.html">Domain</a> *, number , integer , number )<br><br>Registry Group: <b>(Plugin) ug4//GridHierarchySmoothing</b>
function
ug_load_script
bool
bool ug_load_script (c_string )
bool ug_load_script (c_string )<br><br>returns success<br>tooltip: ONLY IF ALL CORES INVOLVED! Loads and parses a script and returns whether it succeeded.<br>Registry Group: <b>/ug4/lua</b>
function
ug_load_script_single
bool
bool ug_load_script_single (c_string )
bool ug_load_script_single (c_string )<br><br>returns success<br>tooltip: Loads and parses a script and returns whether it succeeded.<br>Registry Group: <b>/ug4/lua</b>
function
breakpoint
void
void breakpoint (c_string , integer )
void breakpoint (c_string , integer )<br><br>Registry Group: <b>/ug4/lua</b>
function
breakpoint
void
void breakpoint ()
void breakpoint ()<br><br>Registry Group: <b>/ug4/lua</b>
function
print_breakpoints
void
void print_breakpoints ()
void print_breakpoints ()<br><br>Registry Group: <b>/ug4/lua</b>
function
DebugBacktrace
void
void DebugBacktrace ()
void DebugBacktrace ()<br><br>Registry Group: <b>/ug4/lua</b>
function
ProfileLUA
void
void ProfileLUA (bool )
void ProfileLUA (bool )<br><br>Registry Group: <b>/ug4/lua</b>
function
ls
void
void ls ()
void ls ()<br><br>tooltip: list all objects<br>Registry Group: <b>/ug4/Info</b>
function
list_cfunctions
void
void list_cfunctions ()
void list_cfunctions ()<br><br>tooltip: list all cfunctions<br>Registry Group: <b>/ug4/Info</b>
function
list_classes
void
void list_classes ()
void list_classes ()<br><br>tooltip: list all classes<br>Registry Group: <b>/ug4/Info</b>
function
list_internalFunctions
void
void list_internalFunctions ()
void list_internalFunctions ()<br><br>tooltip: list all of LUAs internal functions<br>Registry Group: <b>/ug4/Info</b>
function
list_luaObjects
void
void list_luaObjects ()
void list_luaObjects ()<br><br>tooltip: list all created LUA objects<br>Registry Group: <b>/ug4/Info</b>
function
list_scriptFunctions
void
void list_scriptFunctions ()
void list_scriptFunctions ()<br><br>tooltip: list all LUA script functions<br>Registry Group: <b>/ug4/Info</b>
function
TypeInfo
integer
integer TypeInfo (c_string "typeName")
integer TypeInfo (c_string "typeName")<br><br>tooltip: print information about a type<br>Registry Group: <b>/ug4/Info</b>
function
ClassUsage
bool
bool ClassUsage (c_string "typeName")
bool ClassUsage (c_string "typeName")<br><br>tooltip: print information about the usage of a type<br>Registry Group: <b>/ug4/Info</b>
function
ClassInstantiations
bool
bool ClassInstantiations (c_string "typeName")
bool ClassInstantiations (c_string "typeName")<br><br>tooltip: print all objects of the type<br>Registry Group: <b>/ug4/Info</b>
function
ClassHierarchy
bool
bool ClassHierarchy (c_string "typeName")
bool ClassHierarchy (c_string "typeName")<br><br>tooltip: print the class hierachy of type<br>Registry Group: <b>/ug4/Info</b>
function
Stacktrace
void
void Stacktrace ()
void Stacktrace ()<br><br>tooltip: prints the LUA function stack, that is which functions are called up to this point<br>Registry Group: <b>/ug4/Info</b>
function
HasClass
bool
bool HasClass (c_string "className")
bool HasClass (c_string "className")<br><br>returns true if class exists<br>tooltip: use only if you know that you're not using a class group, otherwise HasClassGroup<br>Registry Group: <b>/ug4/Info</b>
function
HasClassGroup
bool
bool HasClassGroup (c_string "classGroupName")
bool HasClassGroup (c_string "classGroupName")<br><br>returns true if class oder classGroup exists<br>tooltip: can be used before instantiating a class<br>Registry Group: <b>/ug4/Info</b>
function
PluginLoaded
bool
bool PluginLoaded (std_string "pluginName")
bool PluginLoaded (std_string "pluginName")<br><br>returns true if plugin loaded<br>tooltip: pluginName as listed when using cmake ..<br>Registry Group: <b>/ug4/Info</b>
function
AssertPluginLoaded
bool
bool AssertPluginLoaded (c_string "pluginName")
bool AssertPluginLoaded (c_string "pluginName")<br><br>returns true if plugin loaded<br>tooltip: throws an error if plugin not loaded, displays help string how to enable plugins via cmake -DpluginName=ON ..<br>Registry Group: <b>/ug4/Info</b>
function
EnableLUA2C
void
void EnableLUA2C (bool bEnable)
void EnableLUA2C (bool bEnable)<br><br>Registry Group: <b>/ug4/Info</b>